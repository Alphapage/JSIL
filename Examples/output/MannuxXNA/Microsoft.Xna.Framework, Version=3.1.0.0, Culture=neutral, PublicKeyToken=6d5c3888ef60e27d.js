JSIL.DeclareNamespace(this, "$lCppImplementationDetails$g");
JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0P$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0P@$$CBD");

JSIL.DeclareNamespace(this, "Microsoft");
JSIL.DeclareNamespace(Microsoft, "Xna");
JSIL.DeclareNamespace(Microsoft.Xna, "Framework");
JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Audio");
JSIL.MakeClass(System.MulticastDelegate, Microsoft.Xna.Framework.Audio, "CueDestroyedEventHandler", "Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "UnsafeNativeMethods", "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio.UnsafeNativeMethods, "Engine", "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods/Engine");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio.UnsafeNativeMethods, "WaveBank", "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods/WaveBank");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio.UnsafeNativeMethods, "Cue", "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods/Cue");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio.UnsafeNativeMethods, "SoundBank", "Microsoft.Xna.Framework.Audio.UnsafeNativeMethods/SoundBank");


JSIL.MakeEnum(
	this, "_D3DPRIMITIVETYPE", "_D3DPRIMITIVETYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DRENDERSTATETYPE", "_D3DRENDERSTATETYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DSAMPLERSTATETYPE", "_D3DSAMPLERSTATETYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DTEXTUREFILTERTYPE", "_D3DTEXTUREFILTERTYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DSTATEBLOCKTYPE", "_D3DSTATEBLOCKTYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DDEVTYPE", "_D3DDEVTYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DMULTISAMPLE_TYPE", "_D3DMULTISAMPLE_TYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DFORMAT", "_D3DFORMAT", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DPOOL", "_D3DPOOL", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DBACKBUFFER_TYPE", "_D3DBACKBUFFER_TYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DRESOURCETYPE", "_D3DRESOURCETYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DCUBEMAP_FACES", "_D3DCUBEMAP_FACES", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DQUERYTYPE", "_D3DQUERYTYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DXINCLUDE_TYPE", "_D3DXINCLUDE_TYPE", {

	}, false
);

JSIL.MakeEnum(
	this, "_D3DXIMAGE_FILEFORMAT", "_D3DXIMAGE_FILEFORMAT", {

	}, false
);

JSIL.MakeEnum(
	this, "XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER", "XAUDIO2_WINDOWS_PROCESSOR_SPECIFIER", {

	}, false
);

JSIL.MakeStruct(this, "WAVEBANKENTRY", "WAVEBANKENTRY");

JSIL.MakeStruct(this, "XACT_STREAMING_PARAMETERS", "XACT_STREAMING_PARAMETERS");

JSIL.MakeEnum(
	this, "HandleGroup", "HandleGroup", {

	}, false
);

JSIL.MakeStruct(this, "CHandleTable", "CHandleTable");

JSIL.DeclareNamespace(this, "IXACT3Engine");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY00$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY00$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BB$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0BB@$$CBD");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BD$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0BD@$$CBD");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY08$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY08$$CBD");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0N$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0N@$$CBD");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0M$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0M@$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BI$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0BI@$$CBG");

JSIL.MakeStruct(this, "HandleEntry", "HandleEntry");

JSIL.MakeStruct(this, "_RTL_CRITICAL_SECTION", "_RTL_CRITICAL_SECTION");

JSIL.MakeStruct(this, "HandlePage", "HandlePage");

JSIL.DeclareNamespace(this, "std");
JSIL.MakeStruct(std, "nothrow_t", "std.nothrow_t");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "SoundEffectUnsafeNativeMethods", "Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "XAudio2ShutdownHandler", "Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Audio, "VoiceState", "Microsoft.Xna.Framework.Audio.VoiceState", {
		Paused: 8, 
		Stopped: 4, 
		Stopping: 2, 
		Playing: 1
	}, true
);

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Media");
JSIL.MakeEnum(
	Microsoft.Xna.Framework.Media, "MediaState", "Microsoft.Xna.Framework.Media.MediaState", {
		Paused: 2, 
		Playing: 1, 
		Stopped: 0
	}, false
);

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0CD$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0CD@$$CBD");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BF$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0BF@$$CBD");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BL$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0BL@$$CBD");

JSIL.MakeStruct(Microsoft.Xna.Framework.Audio, "KernelSoundEffect", "Microsoft.Xna.Framework.Audio.KernelSoundEffect");

JSIL.MakeStruct(Microsoft.Xna.Framework.Audio, "KernelSoundEffectInstance", "Microsoft.Xna.Framework.Audio.KernelSoundEffectInstance");

JSIL.MakeStruct(this, "tWAVEFORMATEX", "tWAVEFORMATEX");

JSIL.DeclareNamespace(this, "IXAudio2");

JSIL.MakeStruct(this, "GenericList$lMicrosoft$c$cXna$c$cFramework$c$cAudio$c$cKernelSoundEffectInstance$sp$as$g", "GenericList<Microsoft::Xna::Framework::Audio::KernelSoundEffectInstance *>");

JSIL.DeclareNamespace(this, "IXAudio2MasteringVoice");

JSIL.MakeStruct(this, "XAUDIO2_DEVICE_DETAILS", "XAUDIO2_DEVICE_DETAILS");

JSIL.MakeStruct(this, "XAUDIO2_EFFECT_CHAIN", "XAUDIO2_EFFECT_CHAIN");

JSIL.MakeStruct(this, "__s_GUID", "__s_GUID");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BE$atE", "<CppImplementationDetails>.$ArrayType$$$BY0BE@E");

JSIL.DeclareNamespace(this, "IUnknown");

JSIL.MakeStruct(this, "_GUID", "_GUID");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BM$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0BM@$$CBD");

JSIL.DeclareNamespace(this, "IXAudio2VoiceCallback");

JSIL.MakeStruct(this, "X3DAUDIO_LISTENER", "X3DAUDIO_LISTENER");

JSIL.MakeStruct(this, "X3DAUDIO_EMITTER", "X3DAUDIO_EMITTER");

JSIL.MakeStruct(this, "$_s__RTTIBaseClassArray$_extraBytes_8", "$_s__RTTIBaseClassArray$_extraBytes_8");

JSIL.MakeStruct(this, "$_s__RTTIBaseClassArray$_extraBytes_4", "$_s__RTTIBaseClassArray$_extraBytes_4");

JSIL.MakeStruct(this, "_s__RTTIBaseClassDescriptor2", "_s__RTTIBaseClassDescriptor2");

JSIL.MakeStruct(this, "_s__RTTIClassHierarchyDescriptor", "_s__RTTIClassHierarchyDescriptor");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_62", "$_TypeDescriptor$_extraBytes_62");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_28", "$_TypeDescriptor$_extraBytes_28");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY01Q6AXXZ", "<CppImplementationDetails>.$ArrayType$$$BY01Q6AXXZ");

JSIL.MakeStruct(this, "_s__RTTICompleteObjectLocator", "_s__RTTICompleteObjectLocator");

JSIL.MakeStruct(this, "X3DAUDIO_DSP_SETTINGS", "X3DAUDIO_DSP_SETTINGS");

JSIL.DeclareNamespace(this, "IXAudio2Voice");

JSIL.DeclareNamespace(this, "IXAudio2SourceVoice");

JSIL.MakeStruct(this, "XAUDIO2_VOICE_STATE", "XAUDIO2_VOICE_STATE");

JSIL.MakeStruct(this, "XAUDIO2_BUFFER", "XAUDIO2_BUFFER");

JSIL.MakeStruct(this, "XAUDIO2_BUFFER_WMA", "XAUDIO2_BUFFER_WMA");

JSIL.MakeStruct(this, "XAUDIO2_VOICE_SENDS", "XAUDIO2_VOICE_SENDS");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY07Q6AXXZ", "<CppImplementationDetails>.$ArrayType$$$BY07Q6AXXZ");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY03UX3DAUDIO_LISTENER$at$at", "<CppImplementationDetails>.$ArrayType$$$BY03UX3DAUDIO_LISTENER@@");

JSIL.MakeStruct(this, "D3DXVECTOR3", "D3DXVECTOR3");

JSIL.MakeStruct(this, "D3DXMATRIX", "D3DXMATRIX");

JSIL.MakeStruct(this, "D3DXVECTOR2", "D3DXVECTOR2");

JSIL.MakeStruct(this, "D3DXVECTOR4", "D3DXVECTOR4");

JSIL.DeclareNamespace(this, "IXACT3SoundBank");

JSIL.MakeStruct(this, "XACT_CUE_PROPERTIES", "XACT_CUE_PROPERTIES");

JSIL.DeclareNamespace(this, "IXACT3Cue");

JSIL.DeclareNamespace(this, "IXACT3WaveBank");

JSIL.MakeStruct(this, "XACT_WAVE_PROPERTIES", "XACT_WAVE_PROPERTIES");

JSIL.DeclareNamespace(this, "IXACT3Wave");

JSIL.MakeStruct(this, "XACT_WAVE_INSTANCE_PROPERTIES", "XACT_WAVE_INSTANCE_PROPERTIES");

JSIL.MakeStruct(this, "XACT_CUE_INSTANCE_PROPERTIES", "XACT_CUE_INSTANCE_PROPERTIES");

JSIL.MakeStruct(this, "XACT_RENDERER_DETAILS", "XACT_RENDERER_DETAILS");

JSIL.MakeStruct(this, "WAVEFORMATEXTENSIBLE", "WAVEFORMATEXTENSIBLE");

JSIL.MakeStruct(this, "XACT_RUNTIME_PARAMETERS", "XACT_RUNTIME_PARAMETERS");

JSIL.MakeStruct(this, "XACT_NOTIFICATION_DESCRIPTION", "XACT_NOTIFICATION_DESCRIPTION");

JSIL.MakeStruct(std, "bad_alloc", "std.bad_alloc");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BA$at$$CBK", "<CppImplementationDetails>.$ArrayType$$$BY0BA@$$CBK");

JSIL.MakeStruct(this, "HKEY__", "HKEY__");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY05$$CBM", "<CppImplementationDetails>.$ArrayType$$$BY05$$CBM");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY02Q6AXXZ", "<CppImplementationDetails>.$ArrayType$$$BY02Q6AXXZ");

JSIL.MakeStruct(this, "X3DAUDIO_DISTANCE_CURVE", "X3DAUDIO_DISTANCE_CURVE");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY01$$CBM", "<CppImplementationDetails>.$ArrayType$$$BY01$$CBM");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY04$$CBM", "<CppImplementationDetails>.$ArrayType$$$BY04$$CBM");

JSIL.MakeStruct(this, "tagMSG", "tagMSG");

JSIL.MakeStruct(this, "HWND__", "HWND__");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY01UX3DAUDIO_DISTANCE_CURVE_POINT$at$at", "<CppImplementationDetails>.$ArrayType$$$BY01UX3DAUDIO_DISTANCE_CURVE_POINT@@");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY01$$CBUX3DAUDIO_DISTANCE_CURVE_POINT$at$at", "<CppImplementationDetails>.$ArrayType$$$BY01$$CBUX3DAUDIO_DISTANCE_CURVE_POINT@@");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY07$$CBM", "<CppImplementationDetails>.$ArrayType$$$BY07$$CBM");

JSIL.MakeStruct(this, "tagRECT", "tagRECT");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_20", "$_TypeDescriptor$_extraBytes_20");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY05$$CBK", "<CppImplementationDetails>.$ArrayType$$$BY05$$CBK");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY03$$CBM", "<CppImplementationDetails>.$ArrayType$$$BY03$$CBM");

JSIL.MakeStruct(this, "_SECURITY_ATTRIBUTES", "_SECURITY_ATTRIBUTES");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY02$$CBM", "<CppImplementationDetails>.$ArrayType$$$BY02$$CBM");

JSIL.MakeStruct(std, "exception", "std.exception");

JSIL.MakeStruct(this, "_XACT_CUE_AND_ENGINE", "_XACT_CUE_AND_ENGINE");

JSIL.MakeStruct(this, "XACT_NOTIFICATION", "XACT_NOTIFICATION");

JSIL.MakeStruct(this, "_XACT_WAVEBANK_AND_ENGINE", "_XACT_WAVEBANK_AND_ENGINE");

JSIL.MakeStruct(this, "_XACT_SOUNDBANK_AND_ENGINE", "_XACT_SOUNDBANK_AND_ENGINE");

JSIL.MakeClass(System.Object, Microsoft.Xna, "EmbeddedNativeType$l_D3DCAPS9$g", "Microsoft.Xna.EmbeddedNativeType<_D3DCAPS9>");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Graphics");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "GraphicsDeviceCapabilities", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities");
JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "DriverCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/DriverCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "DeviceCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/DeviceCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "CursorCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/CursorCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "PrimitiveCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/PrimitiveCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "RasterCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/RasterCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "CompareCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/CompareCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "BlendCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/BlendCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "LineCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/LineCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "ShadingCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/ShadingCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "TextureCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/TextureCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "FilterCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/FilterCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "AddressCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/AddressCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "StencilCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/StencilCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "VertexFormatCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/VertexFormatCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "VertexProcessingCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/VertexProcessingCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "DeclarationTypeCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/DeclarationTypeCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "VertexShaderCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/VertexShaderCaps");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities, "PixelShaderCaps", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/PixelShaderCaps");


JSIL.MakeClass(System.Object, Microsoft.Xna, "EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g", "Microsoft.Xna.EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "PresentationParameters", "Microsoft.Xna.Framework.Graphics.PresentationParameters");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "GraphicsDeviceCreationParameters", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "TextureInformation", "Microsoft.Xna.Framework.Graphics.TextureInformation");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "TextureCreationParameters", "Microsoft.Xna.Framework.Graphics.TextureCreationParameters");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "FormatList", "Microsoft.Xna.Framework.Graphics.FormatList");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "DisplayModeCollection", "Microsoft.Xna.Framework.Graphics.DisplayModeCollection");
JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.DisplayModeCollection, "Enumerator", "Microsoft.Xna.Framework.Graphics.DisplayModeCollection/Enumerator");


JSIL.MakeClass(System.Object, Microsoft.Xna, "EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g", "Microsoft.Xna.EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "GraphicsAdapter", "Microsoft.Xna.Framework.Graphics.GraphicsAdapter");

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "TargetPlatform", "Microsoft.Xna.Framework.TargetPlatform", {
		Zune: 3, 
		Xbox360: 2, 
		Windows: 1, 
		Unknown: 0
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "CompilerIncludeHandlerType", "Microsoft.Xna.Framework.Graphics.CompilerIncludeHandlerType", {
		Local: 0, 
		System: 1
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "FogMode", "Microsoft.Xna.Framework.Graphics.FogMode", {
		Linear: 3, 
		ExponentSquared: 2, 
		Exponent: 1, 
		None: 0
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "ImageFileFormat", "Microsoft.Xna.Framework.Graphics.ImageFileFormat", {
		Pfm: 8, 
		Hdr: 7, 
		Dib: 6, 
		Ppm: 5, 
		Dds: 4, 
		Png: 3, 
		Tga: 2, 
		Jpg: 1, 
		Bmp: 0
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "FilterOptions", "Microsoft.Xna.Framework.Graphics.FilterOptions", {
		Srgb: 6291456, 
		SrgbOut: 4194304, 
		SrgbIn: 2097152, 
		DitherDiffusion: 1048576, 
		Dither: 524288, 
		Mirror: 458752, 
		MirrorW: 262144, 
		MirrorV: 131072, 
		MirrorU: 65536, 
		Box: 5, 
		Triangle: 4, 
		Linear: 3, 
		None: 1, 
		Point: 2
	}, true
);

JSIL.MakeStruct(this, "_D3DCAPS9", "_D3DCAPS9");

JSIL.MakeStruct(this, "_D3DPRESENT_PARAMETERS_", "_D3DPRESENT_PARAMETERS_");

JSIL.MakeStruct(this, "_D3DADAPTER_IDENTIFIER9", "_D3DADAPTER_IDENTIFIER9");

JSIL.DeclareNamespace(this, "IDirect3D9");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0N$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0N@$$CBG");

JSIL.MakeStruct(this, "_D3DDISPLAYMODE", "_D3DDISPLAYMODE");

JSIL.MakeStruct(this, "HMONITOR__", "HMONITOR__");

JSIL.MakeStruct(this, "HINSTANCE__", "HINSTANCE__");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "ResourceData", "Microsoft.Xna.Framework.Graphics.ResourceData");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "DeviceResourceManager", "Microsoft.Xna.Framework.Graphics.DeviceResourceManager");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "GraphicsDevice", "Microsoft.Xna.Framework.Graphics.GraphicsDevice");

JSIL.MakeInterface(
	Microsoft.Xna.Framework.Graphics, "IGraphicsDeviceService", "Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService", {
		"get_GraphicsDevice": Function, 
		"add_DeviceCreated": Function, 
		"remove_DeviceCreated": Function, 
		"add_DeviceResetting": Function, 
		"remove_DeviceResetting": Function, 
		"add_DeviceReset": Function, 
		"remove_DeviceReset": Function, 
		"add_DeviceDisposing": Function, 
		"remove_DeviceDisposing": Function, 
		"GraphicsDevice": Property
	});

JSIL.MakeInterface(
	Microsoft.Xna.Framework.Graphics, "IGraphicsResource", "Microsoft.Xna.Framework.Graphics.IGraphicsResource", {
		"ReleaseNativeObject": Function, 
		"SaveDataForRecreation": Function, 
		"RecreateAndPopulateObject": Function
	});

JSIL.MakeInterface(
	Microsoft.Xna.Framework.Graphics, "IDynamicGraphicsResource", "Microsoft.Xna.Framework.Graphics.IDynamicGraphicsResource", {
		"add_ContentLost": Function, 
		"remove_ContentLost": Function, 
		"get_IsContentLost": Function, 
		"SetContentLost": Function, 
		"IsContentLost": Property
	});

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "GraphicsResource", "Microsoft.Xna.Framework.Graphics.GraphicsResource");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.GraphicsResource, Microsoft.Xna.Framework.Graphics, "Texture", "Microsoft.Xna.Framework.Graphics.Texture");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.Texture, Microsoft.Xna.Framework.Graphics, "Texture2D", "Microsoft.Xna.Framework.Graphics.Texture2D");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.Texture, Microsoft.Xna.Framework.Graphics, "Texture3D", "Microsoft.Xna.Framework.Graphics.Texture3D");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.Texture, Microsoft.Xna.Framework.Graphics, "TextureCube", "Microsoft.Xna.Framework.Graphics.TextureCube");

JSIL.DeclareNamespace(this, "IDirect3DDevice9");

JSIL.DeclareNamespace(this, "IDirect3DSurface9");

JSIL.DeclareNamespace(this, "IDirect3DResource9");

JSIL.MakeStruct(this, "_D3DSURFACE_DESC", "_D3DSURFACE_DESC");

JSIL.DeclareNamespace(this, "IDirect3DBaseTexture9");

JSIL.DeclareNamespace(this, "IDirect3DTexture9");

JSIL.DeclareNamespace(this, "IDirect3DVolumeTexture9");

JSIL.MakeStruct(this, "_D3DVOLUME_DESC", "_D3DVOLUME_DESC");

JSIL.MakeStruct(this, "_D3DBOX", "_D3DBOX");

JSIL.DeclareNamespace(this, "IDirect3DCubeTexture9");

JSIL.MakeStruct(this, "_D3DXIMAGE_INFO", "_D3DXIMAGE_INFO");

JSIL.MakeStruct(this, "tagPALETTEENTRY", "tagPALETTEENTRY");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ClipPlane", "Microsoft.Xna.Framework.Graphics.ClipPlane");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ClipPlaneCollection", "Microsoft.Xna.Framework.Graphics.ClipPlaneCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "CompilerIncludeHandler", "Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Graphics, "CompilationFailedException", "Microsoft.Xna.Framework.Graphics.CompilationFailedException");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "CompilerHelper", "Microsoft.Xna.Framework.Graphics.CompilerHelper");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "ShaderSemantic", "Microsoft.Xna.Framework.Graphics.ShaderSemantic");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "CompilerMacro", "Microsoft.Xna.Framework.Graphics.CompilerMacro");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "CompiledEffect", "Microsoft.Xna.Framework.Graphics.CompiledEffect");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "CompiledShader", "Microsoft.Xna.Framework.Graphics.CompiledShader");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectAnnotation", "Microsoft.Xna.Framework.Graphics.EffectAnnotation");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectAnnotationCollection", "Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ShaderConstant", "Microsoft.Xna.Framework.Graphics.ShaderConstant");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ShaderConstantCollection", "Microsoft.Xna.Framework.Graphics.ShaderConstantCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ShaderConstantTable", "Microsoft.Xna.Framework.Graphics.ShaderConstantTable");

JSIL.DeclareNamespace(this, "ID3DXBuffer");

JSIL.MakeStruct(this, "_D3DXMACRO", "_D3DXMACRO");

JSIL.DeclareNamespace(this, "ID3DXBaseEffect");

JSIL.DeclareNamespace(this, "ID3DXConstantTable");

JSIL.MakeStruct(this, "_D3DXCONSTANTTABLE_DESC", "_D3DXCONSTANTTABLE_DESC");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "TextureCollection", "Microsoft.Xna.Framework.Graphics.TextureCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "VertexStream", "Microsoft.Xna.Framework.Graphics.VertexStream");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "VertexStreamCollection", "Microsoft.Xna.Framework.Graphics.VertexStreamCollection");

JSIL.MakeStruct(this, "_D3DLOCKED_RECT", "_D3DLOCKED_RECT");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "DepthStencilBuffer", "Microsoft.Xna.Framework.Graphics.DepthStencilBuffer");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "RenderState", "Microsoft.Xna.Framework.Graphics.RenderState");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "SamplerState", "Microsoft.Xna.Framework.Graphics.SamplerState");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "SamplerStateCollection", "Microsoft.Xna.Framework.Graphics.SamplerStateCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "VertexShader", "Microsoft.Xna.Framework.Graphics.VertexShader");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "VertexDeclaration", "Microsoft.Xna.Framework.Graphics.VertexDeclaration");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "PixelShader", "Microsoft.Xna.Framework.Graphics.PixelShader");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.GraphicsResource, Microsoft.Xna.Framework.Graphics, "VertexBuffer", "Microsoft.Xna.Framework.Graphics.VertexBuffer");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.VertexBuffer, Microsoft.Xna.Framework.Graphics, "DynamicVertexBuffer", "Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.GraphicsResource, Microsoft.Xna.Framework.Graphics, "IndexBuffer", "Microsoft.Xna.Framework.Graphics.IndexBuffer");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.IndexBuffer, Microsoft.Xna.Framework.Graphics, "DynamicIndexBuffer", "Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "RenderTarget", "Microsoft.Xna.Framework.Graphics.RenderTarget");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.RenderTarget, Microsoft.Xna.Framework.Graphics, "RenderTarget2D", "Microsoft.Xna.Framework.Graphics.RenderTarget2D");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.RenderTarget, Microsoft.Xna.Framework.Graphics, "RenderTargetCube", "Microsoft.Xna.Framework.Graphics.RenderTargetCube");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectPass", "Microsoft.Xna.Framework.Graphics.EffectPass");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectPassCollection", "Microsoft.Xna.Framework.Graphics.EffectPassCollection");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Graphics, "ResolveTexture2D", "Microsoft.Xna.Framework.Graphics.ResolveTexture2D");

JSIL.DeclareNamespace(this, "IDirect3DVertexShader9");

JSIL.DeclareNamespace(this, "IDirect3DVertexDeclaration9");

JSIL.MakeStruct(this, "_D3DVERTEXELEMENT9", "_D3DVERTEXELEMENT9");

JSIL.DeclareNamespace(this, "IDirect3DPixelShader9");

JSIL.DeclareNamespace(this, "IDirect3DVertexBuffer9");

JSIL.DeclareNamespace(this, "IDirect3DIndexBuffer9");

JSIL.MakeStruct(this, "_D3DINDEXBUFFER_DESC", "_D3DINDEXBUFFER_DESC");

JSIL.MakeStruct(this, "_D3DVIEWPORT9", "_D3DVIEWPORT9");

JSIL.MakeStruct(this, "_D3DRECT", "_D3DRECT");

JSIL.MakeStruct(this, "_D3DGAMMARAMP", "_D3DGAMMARAMP");

JSIL.MakeStruct(this, "_D3DRASTER_STATUS", "_D3DRASTER_STATUS");

JSIL.MakeStruct(this, "_RGNDATA", "_RGNDATA");

JSIL.MakeStruct(this, "_D3DDEVICE_CREATION_PARAMETERS", "_D3DDEVICE_CREATION_PARAMETERS");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectParameter", "Microsoft.Xna.Framework.Graphics.EffectParameter");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectParameterCollection", "Microsoft.Xna.Framework.Graphics.EffectParameterCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectTechnique", "Microsoft.Xna.Framework.Graphics.EffectTechnique");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectTechniqueCollection", "Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectFunction", "Microsoft.Xna.Framework.Graphics.EffectFunction");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectFunctionCollection", "Microsoft.Xna.Framework.Graphics.EffectFunctionCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectParameterBlock", "Microsoft.Xna.Framework.Graphics.EffectParameterBlock");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "Effect", "Microsoft.Xna.Framework.Graphics.Effect");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "EffectPool", "Microsoft.Xna.Framework.Graphics.EffectPool");

JSIL.DeclareNamespace(this, "ID3DXEffect");

JSIL.DeclareNamespace(this, "ID3DXEffectPool");

JSIL.MakeStruct(this, "_D3DXEFFECT_DESC", "_D3DXEFFECT_DESC");

JSIL.DeclareNamespace(this, "ID3DXInclude");

JSIL.MakeStruct(this, "_D3DXPARAMETER_DESC", "_D3DXPARAMETER_DESC");

JSIL.MakeStruct(this, "_D3DXFUNCTION_DESC", "_D3DXFUNCTION_DESC");

JSIL.MakeStruct(this, "_D3DXPASS_DESC", "_D3DXPASS_DESC");

JSIL.MakeStruct(this, "_D3DXTECHNIQUE_DESC", "_D3DXTECHNIQUE_DESC");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "UniqueBSTRCollection", "Microsoft.Xna.Framework.Media.UniqueBSTRCollection");

JSIL.MakeInterface(
	Microsoft.Xna.Framework, "IProxyProcessHandler", "Microsoft.Xna.Framework.IProxyProcessHandler", {
		"get_ProxyProcessWantsToTalk": Function, 
		"get_SharedAsyncDataSafeToWrite": Function, 
		"get_AsyncHResult": Function, 
		"get_AsyncManagedCallType": Function, 
		"get_AsyncManagedCallArgument": Function, 
		"AsyncManagedCallArgument": Property, 
		"AsyncManagedCallType": Property, 
		"AsyncHResult": Property, 
		"SharedAsyncDataSafeToWrite": Property, 
		"ProxyProcessWantsToTalk": Property
	});

JSIL.MakeStruct(this, "NativeToManagedCallback", "NativeToManagedCallback");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "WindowsManagedCallbackHandler", "Microsoft.Xna.Framework.WindowsManagedCallbackHandler");

JSIL.MakeClass(System.Runtime.ConstrainedExecution.CriticalFinalizerObject, Microsoft.Xna.Framework.Media, "WmpInterface", "Microsoft.Xna.Framework.Media.WmpInterface");

JSIL.MakeStruct(this, "GenericList$lunsigned$spshort$sp$as$g", "GenericList<unsigned short *>");

JSIL.DeclareNamespace(this, "XnaMediaPlayer");
JSIL.MakeEnum(
	XnaMediaPlayer, "PlayerState", "XnaMediaPlayer.PlayerState", {

	}, false
);

JSIL.MakeEnum(
	XnaMediaPlayer, "PlayerEvent", "XnaMediaPlayer.PlayerEvent", {

	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Media, "WmpInterfaceState", "Microsoft.Xna.Framework.Media.WmpInterfaceState", {

	}, false
);

JSIL.DeclareNamespace(this, "IWMPPlayer4");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "XnaMediaPlayerCallback", "Microsoft.Xna.Framework.Media.XnaMediaPlayerCallback");

JSIL.DeclareNamespace(this, "IWMPSettings");

JSIL.DeclareNamespace(this, "IWMPControls");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0L$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0L@$$CBD");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Media, "IKernelMediaCollection");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelAlbum", "Microsoft.Xna.Framework.Media.KernelAlbum");

JSIL.DeclareNamespace(this, "IWMPPlaylist");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_59", "$_TypeDescriptor$_extraBytes_59");

JSIL.DeclareNamespace(this, "IWMPMedia");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelAlbum$g", "Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs<Microsoft::Xna::Framework::Media::KernelAlbum>");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelAlbumCollection", "Microsoft.Xna.Framework.Media.KernelAlbumCollection");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelGenreCollection", "Microsoft.Xna.Framework.Media.KernelGenreCollection");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelArtistCollection", "Microsoft.Xna.Framework.Media.KernelArtistCollection");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelPlaylistCollection", "Microsoft.Xna.Framework.Media.KernelPlaylistCollection");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelSongCollection", "Microsoft.Xna.Framework.Media.KernelSongCollection");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelSong", "Microsoft.Xna.Framework.Media.KernelSong");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY04Q6AXXZ", "<CppImplementationDetails>.$ArrayType$$$BY04Q6AXXZ");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY05$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY05$$CBG");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_58", "$_TypeDescriptor$_extraBytes_58");

JSIL.DeclareNamespace(this, "IWMPStringCollection");

JSIL.DeclareNamespace(this, "IWMPMediaCollection");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0CG$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0CG@$$CBD");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelArtist", "Microsoft.Xna.Framework.Media.KernelArtist");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelArtist$g", "Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs<Microsoft::Xna::Framework::Media::KernelArtist>");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelGenre", "Microsoft.Xna.Framework.Media.KernelGenre");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelGenre$g", "Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs<Microsoft::Xna::Framework::Media::KernelGenre>");

JSIL.MakeStruct(Microsoft.Xna.Framework.Media, "KernelPlaylist", "Microsoft.Xna.Framework.Media.KernelPlaylist");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY08$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY08$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY09$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY09$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BC$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0BC@$$CBG");

JSIL.MakeStruct(this, "GenericList$lIWMPPlaylist$sp$as$g", "GenericList<IWMPPlaylist *>");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_61", "$_TypeDescriptor$_extraBytes_61");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BA$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0BA@$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0P$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0P@$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0L$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0L@$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0O$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0O@$$CBG");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_57", "$_TypeDescriptor$_extraBytes_57");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Input");
JSIL.DeclareNamespace(Microsoft.Xna.Framework.Input, "Keyboard");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BAA$atE", "<CppImplementationDetails>.$ArrayType$$$BY0BAA@E");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY06$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY06$$CBG");

JSIL.MakeClass(Microsoft.Xna.Framework.Input.WindowMessageHooker, Microsoft.Xna.Framework.Input, "MouseMessageHooker", "Microsoft.Xna.Framework.Input.MouseMessageHooker");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Input, "Mouse");

JSIL.MakeStruct(this, "tagPOINT", "tagPOINT");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "WindowsD3DXIncludeWrapper", "Microsoft.Xna.Framework.Graphics.WindowsD3DXIncludeWrapper");

JSIL.MakeStruct(this, "gcroot$lMicrosoft$c$cXna$c$cFramework$c$cGraphics$c$cCompilerIncludeHandler$sp^$g", "gcroot<Microsoft::Xna::Framework::Graphics::CompilerIncludeHandler ^>");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_65", "$_TypeDescriptor$_extraBytes_65");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_19", "$_TypeDescriptor$_extraBytes_19");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "OcclusionQuery", "Microsoft.Xna.Framework.Graphics.OcclusionQuery");

JSIL.DeclareNamespace(this, "IDirect3DQuery9");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ShaderHelper", "Microsoft.Xna.Framework.Graphics.ShaderHelper");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Graphics, "ShaderCompiler");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY06$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY06$$CBD");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY07$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY07$$CBD");

JSIL.MakeStruct(this, "_D3DXSEMANTIC", "_D3DXSEMANTIC");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0EA$atU_D3DXSEMANTIC$at$at", "<CppImplementationDetails>.$ArrayType$$$BY0EA@U_D3DXSEMANTIC@@");

JSIL.MakeStruct(this, "_D3DXCONSTANT_DESC", "_D3DXCONSTANT_DESC");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "StateBlock", "Microsoft.Xna.Framework.Graphics.StateBlock");

JSIL.DeclareNamespace(this, "IDirect3DStateBlock9");

JSIL.MakeStruct(this, "_D3DVERTEXBUFFER_DESC", "_D3DVERTEXBUFFER_DESC");

JSIL.MakeStruct(this, "_D3DLOCKED_BOX", "_D3DLOCKED_BOX");

JSIL.DeclareNamespace(this, "ID3DXEffectCompiler");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Graphics, "EnumConversion");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BA$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0BA@$$CBD");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY01PAX", "<CppImplementationDetails>.$ArrayType$$$BY01PAX");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0EA$atPAX", "<CppImplementationDetails>.$ArrayType$$$BY0EA@PAX");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY04$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY04$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY07$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY07$$CBG");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0CE$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0CE@$$CBD");

JSIL.DeclareNamespace(XnaMediaPlayer, "IXnaMediaPlayerCallback");

JSIL.DeclareNamespace(XnaMediaPlayer, "IXnaVideoDecoder");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_45", "$_TypeDescriptor$_extraBytes_45");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0BAA$atM", "<CppImplementationDetails>.$ArrayType$$$BY0BAA@M");

JSIL.MakeClass(System.MulticastDelegate, Microsoft.Xna.Framework.Media, "WmpProxyFunction", "Microsoft.Xna.Framework.Media.WmpProxyFunction");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "WmpProxyThread", "Microsoft.Xna.Framework.Media.WmpProxyThread");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Media, "WmpProxyThreadState", "Microsoft.Xna.Framework.Media.WmpProxyThreadState", {
		Shutdown: 3, 
		InitializationFailure: 2, 
		NotInitialized: 1, 
		Initialized: 0
	}, false
);

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0CN$at$$CBG", "<CppImplementationDetails>.$ArrayType$$$BY0CN@$$CBG");

JSIL.MakeStruct(this, "tagWNDCLASSW", "tagWNDCLASSW");

JSIL.MakeStruct(this, "HMENU__", "HMENU__");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0CF$at$$CBD", "<CppImplementationDetails>.$ArrayType$$$BY0CF@$$CBD");

JSIL.MakeStruct(this, "XboxD3DXIncludeWrapper", "XboxD3DXIncludeWrapper");

JSIL.DeclareNamespace(this, "IXboxD3DXIncludeWrapper");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_29", "$_TypeDescriptor$_extraBytes_29");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_30", "$_TypeDescriptor$_extraBytes_30");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Content");
JSIL.DeclareNamespace(Microsoft.Xna.Framework.Content, "NativeMethods");

JSIL.DeclareNamespace(this, "$lCrtImplementationDetails$g");
JSIL.MakeStruct($lCrtImplementationDetails$g, "LanguageSupport", "<CrtImplementationDetails>.LanguageSupport");

JSIL.MakeStruct(this, "gcroot$lSystem$c$cString$sp^$g", "gcroot<System::String ^>");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY00Q6MPBXXZ", "<CppImplementationDetails>.$ArrayType$$$BY00Q6MPBXXZ");

JSIL.MakeStruct($lCrtImplementationDetails$g, "Progress", "<CrtImplementationDetails>.Progress");
JSIL.MakeEnum(
	$lCrtImplementationDetails$g.Progress, "State", "<CrtImplementationDetails>.Progress/State", {

	}, false
);


JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0A$atP6AXXZ", "<CppImplementationDetails>.$ArrayType$$$BY0A@P6AXXZ");

JSIL.MakeStruct($lCppImplementationDetails$g, "$ArrayType$$$BY0A$atP6AHXZ", "<CppImplementationDetails>.$ArrayType$$$BY0A@P6AHXZ");

JSIL.MakeEnum(
	this, "__enative_startup_state", "__enative_startup_state", {

	}, false
);

JSIL.MakeStruct($lCrtImplementationDetails$g, "TriBool", "<CrtImplementationDetails>.TriBool");
JSIL.MakeEnum(
	$lCrtImplementationDetails$g.TriBool, "State", "<CrtImplementationDetails>.TriBool/State", {

	}, false
);


JSIL.MakeStruct(this, "_EXCEPTION_POINTERS", "_EXCEPTION_POINTERS");

JSIL.MakeStruct($lCrtImplementationDetails$g, "ThisModule", "<CrtImplementationDetails>.ThisModule");

JSIL.MakeStruct(std, "logic_error", "std.logic_error");

JSIL.MakeStruct(std, "basic_string$lchar,std$c$cchar_traits$lchar$g,std$c$callocator$lchar$g$sp$g", "std.basic_string<char,std::char_traits<char>,std::allocator<char> >");

JSIL.MakeStruct(std, "out_of_range", "std.out_of_range");

JSIL.MakeStruct(std, "_Fac_node", "std._Fac_node");

JSIL.MakeStruct(this, "$_s__RTTIBaseClassArray$_extraBytes_12", "$_s__RTTIBaseClassArray$_extraBytes_12");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_23", "$_TypeDescriptor$_extraBytes_23");

JSIL.MakeStruct(this, "$_TypeDescriptor$_extraBytes_22", "$_TypeDescriptor$_extraBytes_22");

JSIL.MakeClass(System.Attribute, Microsoft.Xna.Framework.Content, "ContentSerializerAttribute", "Microsoft.Xna.Framework.Content.ContentSerializerAttribute");

JSIL.MakeClass(System.Attribute, Microsoft.Xna.Framework.Content, "ContentSerializerCollectionItemNameAttribute", "Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute");

JSIL.MakeClass(System.Attribute, Microsoft.Xna.Framework.Content, "ContentSerializerIgnoreAttribute", "Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute");

JSIL.MakeClass(System.Attribute, Microsoft.Xna.Framework.Content, "ContentSerializerTypeVersionAttribute", "Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute");

JSIL.MakeClass(System.Attribute, Microsoft.Xna.Framework.Content, "ContentSerializerRuntimeTypeAttribute", "Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute");

JSIL.MakeClass(System.Exception, Microsoft.Xna.Framework.Content, "ContentLoadException", "Microsoft.Xna.Framework.Content.ContentLoadException");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Content, "ContentManager", "Microsoft.Xna.Framework.Content.ContentManager");

JSIL.MakeClass(System.IO.BinaryReader, Microsoft.Xna.Framework.Content, "ContentReader", "Microsoft.Xna.Framework.Content.ContentReader");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Content.ContentReader, "$l$gc__DisplayClass1$b1", "Microsoft.Xna.Framework.Content.ContentReader/<>c__DisplayClass1`1");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Content, "ContentTypeReaderManager", "Microsoft.Xna.Framework.Content.ContentTypeReaderManager");

JSIL.MakeClass(System.IO.Stream, Microsoft.Xna.Framework.Content, "DecompressStream", "Microsoft.Xna.Framework.Content.DecompressStream");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "Model", "Microsoft.Xna.Framework.Graphics.Model");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics.Model, "$l$gc__DisplayClass1", "Microsoft.Xna.Framework.Graphics.Model/<>c__DisplayClass1");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics.Model, "$l$gc__DisplayClass3", "Microsoft.Xna.Framework.Graphics.Model/<>c__DisplayClass3");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ModelBone", "Microsoft.Xna.Framework.Graphics.ModelBone");

JSIL.MakeClass(System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.ModelBone), Microsoft.Xna.Framework.Graphics, "ModelBoneCollection", "Microsoft.Xna.Framework.Graphics.ModelBoneCollection");
JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.ModelBoneCollection, "Enumerator", "Microsoft.Xna.Framework.Graphics.ModelBoneCollection/Enumerator");


JSIL.MakeClass(System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.Effect), Microsoft.Xna.Framework.Graphics, "ModelEffectCollection", "Microsoft.Xna.Framework.Graphics.ModelEffectCollection");
JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.ModelEffectCollection, "Enumerator", "Microsoft.Xna.Framework.Graphics.ModelEffectCollection/Enumerator");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ModelMesh", "Microsoft.Xna.Framework.Graphics.ModelMesh");

JSIL.MakeClass(System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.ModelMesh), Microsoft.Xna.Framework.Graphics, "ModelMeshCollection", "Microsoft.Xna.Framework.Graphics.ModelMeshCollection");
JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.ModelMeshCollection, "Enumerator", "Microsoft.Xna.Framework.Graphics.ModelMeshCollection/Enumerator");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "ModelMeshPart", "Microsoft.Xna.Framework.Graphics.ModelMeshPart");

JSIL.MakeClass(System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.ModelMeshPart), Microsoft.Xna.Framework.Graphics, "ModelMeshPartCollection", "Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection");
JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection, "Enumerator", "Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection/Enumerator");


JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentManager, Microsoft.Xna.Framework.Content, "ResourceContentManager", "Microsoft.Xna.Framework.Content.ResourceContentManager");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Content, "ContentTypeReader", "Microsoft.Xna.Framework.Content.ContentTypeReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader, Microsoft.Xna.Framework.Content, "ContentTypeReader$b1", "Microsoft.Xna.Framework.Content.ContentTypeReader`1");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Array.Of(T)), Microsoft.Xna.Framework.Content, "ArrayReader$b1", "Microsoft.Xna.Framework.Content.ArrayReader`1");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.BasicEffect), Microsoft.Xna.Framework.Content, "BasicEffectReader", "Microsoft.Xna.Framework.Content.BasicEffectReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Collections.Generic.Dictionary$b2.Of(Key, Value)), Microsoft.Xna.Framework.Content, "DictionaryReader$b2", "Microsoft.Xna.Framework.Content.DictionaryReader`2");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Content.EffectMaterial), Microsoft.Xna.Framework.Content, "EffectMaterialReader", "Microsoft.Xna.Framework.Content.EffectMaterialReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Effect), Microsoft.Xna.Framework.Content, "EffectReader", "Microsoft.Xna.Framework.Content.EffectReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(T), Microsoft.Xna.Framework.Content, "EnumReader$b1", "Microsoft.Xna.Framework.Content.EnumReader`1");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader, Microsoft.Xna.Framework.Content, "ExternalReferenceReader", "Microsoft.Xna.Framework.Content.ExternalReferenceReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.IndexBuffer), Microsoft.Xna.Framework.Content, "IndexBufferReader", "Microsoft.Xna.Framework.Content.IndexBufferReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Collections.Generic.List$b1.Of(T)), Microsoft.Xna.Framework.Content, "ListReader$b1", "Microsoft.Xna.Framework.Content.ListReader`1");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Vector2), Microsoft.Xna.Framework.Content, "Vector2Reader", "Microsoft.Xna.Framework.Content.Vector2Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Vector3), Microsoft.Xna.Framework.Content, "Vector3Reader", "Microsoft.Xna.Framework.Content.Vector3Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Vector4), Microsoft.Xna.Framework.Content, "Vector4Reader", "Microsoft.Xna.Framework.Content.Vector4Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Matrix), Microsoft.Xna.Framework.Content, "MatrixReader", "Microsoft.Xna.Framework.Content.MatrixReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Quaternion), Microsoft.Xna.Framework.Content, "QuaternionReader", "Microsoft.Xna.Framework.Content.QuaternionReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Plane), Microsoft.Xna.Framework.Content, "PlaneReader", "Microsoft.Xna.Framework.Content.PlaneReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Point), Microsoft.Xna.Framework.Content, "PointReader", "Microsoft.Xna.Framework.Content.PointReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Rectangle), Microsoft.Xna.Framework.Content, "RectangleReader", "Microsoft.Xna.Framework.Content.RectangleReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.BoundingBox), Microsoft.Xna.Framework.Content, "BoundingBoxReader", "Microsoft.Xna.Framework.Content.BoundingBoxReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.BoundingSphere), Microsoft.Xna.Framework.Content, "BoundingSphereReader", "Microsoft.Xna.Framework.Content.BoundingSphereReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.BoundingFrustum), Microsoft.Xna.Framework.Content, "BoundingFrustumReader", "Microsoft.Xna.Framework.Content.BoundingFrustumReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Ray), Microsoft.Xna.Framework.Content, "RayReader", "Microsoft.Xna.Framework.Content.RayReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Curve), Microsoft.Xna.Framework.Content, "CurveReader", "Microsoft.Xna.Framework.Content.CurveReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Color), Microsoft.Xna.Framework.Content, "ColorReader", "Microsoft.Xna.Framework.Content.ColorReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Model), Microsoft.Xna.Framework.Content, "ModelReader", "Microsoft.Xna.Framework.Content.ModelReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Nullable$b1.Of(T)), Microsoft.Xna.Framework.Content, "NullableReader$b1", "Microsoft.Xna.Framework.Content.NullableReader`1");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader, Microsoft.Xna.Framework.Content, "ObjectReader", "Microsoft.Xna.Framework.Content.ObjectReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.String), Microsoft.Xna.Framework.Content, "StringReader", "Microsoft.Xna.Framework.Content.StringReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Byte), Microsoft.Xna.Framework.Content, "ByteReader", "Microsoft.Xna.Framework.Content.ByteReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.SByte), Microsoft.Xna.Framework.Content, "SByteReader", "Microsoft.Xna.Framework.Content.SByteReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Int16), Microsoft.Xna.Framework.Content, "Int16Reader", "Microsoft.Xna.Framework.Content.Int16Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.UInt16), Microsoft.Xna.Framework.Content, "UInt16Reader", "Microsoft.Xna.Framework.Content.UInt16Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Int32), Microsoft.Xna.Framework.Content, "Int32Reader", "Microsoft.Xna.Framework.Content.Int32Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.UInt32), Microsoft.Xna.Framework.Content, "UInt32Reader", "Microsoft.Xna.Framework.Content.UInt32Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Int64), Microsoft.Xna.Framework.Content, "Int64Reader", "Microsoft.Xna.Framework.Content.Int64Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.UInt64), Microsoft.Xna.Framework.Content, "UInt64Reader", "Microsoft.Xna.Framework.Content.UInt64Reader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Single), Microsoft.Xna.Framework.Content, "SingleReader", "Microsoft.Xna.Framework.Content.SingleReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Double), Microsoft.Xna.Framework.Content, "DoubleReader", "Microsoft.Xna.Framework.Content.DoubleReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Boolean), Microsoft.Xna.Framework.Content, "BooleanReader", "Microsoft.Xna.Framework.Content.BooleanReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Char), Microsoft.Xna.Framework.Content, "CharReader", "Microsoft.Xna.Framework.Content.CharReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.DateTime), Microsoft.Xna.Framework.Content, "DateTimeReader", "Microsoft.Xna.Framework.Content.DateTimeReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.TimeSpan), Microsoft.Xna.Framework.Content, "TimeSpanReader", "Microsoft.Xna.Framework.Content.TimeSpanReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Decimal), Microsoft.Xna.Framework.Content, "DecimalReader", "Microsoft.Xna.Framework.Content.DecimalReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Media.Song), Microsoft.Xna.Framework.Content, "SongReader", "Microsoft.Xna.Framework.Content.SongReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Audio.SoundEffect), Microsoft.Xna.Framework.Content, "SoundEffectReader", "Microsoft.Xna.Framework.Content.SoundEffectReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.SpriteFont), Microsoft.Xna.Framework.Content, "SpriteFontReader", "Microsoft.Xna.Framework.Content.SpriteFontReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Texture2D), Microsoft.Xna.Framework.Content, "Texture2DReader", "Microsoft.Xna.Framework.Content.Texture2DReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Texture3D), Microsoft.Xna.Framework.Content, "Texture3DReader", "Microsoft.Xna.Framework.Content.Texture3DReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.TextureCube), Microsoft.Xna.Framework.Content, "TextureCubeReader", "Microsoft.Xna.Framework.Content.TextureCubeReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Texture), Microsoft.Xna.Framework.Content, "TextureReader", "Microsoft.Xna.Framework.Content.TextureReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.VertexBuffer), Microsoft.Xna.Framework.Content, "VertexBufferReader", "Microsoft.Xna.Framework.Content.VertexBufferReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.VertexDeclaration), Microsoft.Xna.Framework.Content, "VertexDeclarationReader", "Microsoft.Xna.Framework.Content.VertexDeclarationReader");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader, Microsoft.Xna.Framework.Content, "ReflectiveReader$b1", "Microsoft.Xna.Framework.Content.ReflectiveReader`1");

JSIL.MakeClass(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Media.Video), Microsoft.Xna.Framework.Content, "VideoReader", "Microsoft.Xna.Framework.Content.VideoReader");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Content, "ReflectiveReaderMemberHelper", "Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper, "$l$gc__DisplayClass2", "Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper/<>c__DisplayClass2");


JSIL.DeclareNamespace(Microsoft.Xna.Framework, "FrameworkDispatcher");
JSIL.MakeStruct(Microsoft.Xna.Framework.FrameworkDispatcher, "ManagedCallAndArg", "Microsoft.Xna.Framework.FrameworkDispatcher/ManagedCallAndArg");


JSIL.MakeStruct(Microsoft.Xna.Framework, "PendingOperation", "Microsoft.Xna.Framework.PendingOperation");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "UserAsyncDispatcher");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.UserAsyncDispatcher, "$l$gc__DisplayClass2", "Microsoft.Xna.Framework.UserAsyncDispatcher/<>c__DisplayClass2");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "BasicDirectionalLight", "Microsoft.Xna.Framework.Graphics.BasicDirectionalLight");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.Effect, Microsoft.Xna.Framework.Graphics, "BasicEffect", "Microsoft.Xna.Framework.Graphics.BasicEffect");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Graphics, "BasicEffectCode");

JSIL.MakeClass(Microsoft.Xna.Framework.Graphics.Effect, Microsoft.Xna.Framework.Content, "EffectMaterial", "Microsoft.Xna.Framework.Content.EffectMaterial");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "SpriteFont", "Microsoft.Xna.Framework.Graphics.SpriteFont");
JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.SpriteFont, "StringProxy", "Microsoft.Xna.Framework.Graphics.SpriteFont/StringProxy");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "SpriteBatch", "Microsoft.Xna.Framework.Graphics.SpriteBatch");
JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.SpriteBatch, "SpriteVertex", "Microsoft.Xna.Framework.Graphics.SpriteBatch/SpriteVertex");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics.SpriteBatch, "TextureComparer", "Microsoft.Xna.Framework.Graphics.SpriteBatch/TextureComparer");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics.SpriteBatch, "BackToFrontComparer", "Microsoft.Xna.Framework.Graphics.SpriteBatch/BackToFrontComparer");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics.SpriteBatch, "FrontToBackComparer", "Microsoft.Xna.Framework.Graphics.SpriteBatch/FrontToBackComparer");


JSIL.DeclareNamespace(Microsoft.Xna.Framework.Graphics, "SpriteWindowsPixelShaderCode");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Graphics, "SpriteWindowsVertexShaderCode");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "Album", "Microsoft.Xna.Framework.Media.Album");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "AlbumCollection", "Microsoft.Xna.Framework.Media.AlbumCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "Artist", "Microsoft.Xna.Framework.Media.Artist");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "ArtistCollection", "Microsoft.Xna.Framework.Media.ArtistCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "Genre", "Microsoft.Xna.Framework.Media.Genre");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "GenreCollection", "Microsoft.Xna.Framework.Media.GenreCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "MediaLibrary", "Microsoft.Xna.Framework.Media.MediaLibrary");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "MediaLibraryEnumerator$b1", "Microsoft.Xna.Framework.Media.MediaLibraryEnumerator`1");

JSIL.MakeClass(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Song), Microsoft.Xna.Framework.Media, "SongLibraryEnumerator", "Microsoft.Xna.Framework.Media.SongLibraryEnumerator");

JSIL.MakeClass(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Artist), Microsoft.Xna.Framework.Media, "ArtistEnumerator", "Microsoft.Xna.Framework.Media.ArtistEnumerator");

JSIL.MakeClass(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Album), Microsoft.Xna.Framework.Media, "AlbumEnumerator", "Microsoft.Xna.Framework.Media.AlbumEnumerator");

JSIL.MakeClass(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Genre), Microsoft.Xna.Framework.Media, "GenreEnumerator", "Microsoft.Xna.Framework.Media.GenreEnumerator");

JSIL.MakeClass(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Playlist), Microsoft.Xna.Framework.Media, "PlaylistEnumerator", "Microsoft.Xna.Framework.Media.PlaylistEnumerator");

JSIL.MakeClass(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Picture), Microsoft.Xna.Framework.Media, "PictureEnumerator", "Microsoft.Xna.Framework.Media.PictureEnumerator");

JSIL.MakeClass(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.PictureAlbum), Microsoft.Xna.Framework.Media, "PictureAlbumEnumerator", "Microsoft.Xna.Framework.Media.PictureAlbumEnumerator");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Media, "MediaPlayer");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "MediaQueue", "Microsoft.Xna.Framework.Media.MediaQueue");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Media, "MediaSourceType", "Microsoft.Xna.Framework.Media.MediaSourceType", {
		LocalDevice: 0, 
		WindowsMediaConnect: 4
	}, false
);

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "MediaSource", "Microsoft.Xna.Framework.Media.MediaSource");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "Picture", "Microsoft.Xna.Framework.Media.Picture");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "PictureAlbum", "Microsoft.Xna.Framework.Media.PictureAlbum");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "PictureAlbumCollection", "Microsoft.Xna.Framework.Media.PictureAlbumCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "PictureCollection", "Microsoft.Xna.Framework.Media.PictureCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "Playlist", "Microsoft.Xna.Framework.Media.Playlist");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "PlaylistCollection", "Microsoft.Xna.Framework.Media.PlaylistCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "Song", "Microsoft.Xna.Framework.Media.Song");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "SongCollection", "Microsoft.Xna.Framework.Media.SongCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "VisualizationData", "Microsoft.Xna.Framework.Media.VisualizationData");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Media, "VideoSoundtrackType", "Microsoft.Xna.Framework.Media.VideoSoundtrackType", {
		Music: 0, 
		Dialog: 1, 
		MusicAndDialog: 2
	}, false
);

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "Video", "Microsoft.Xna.Framework.Media.Video");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "VideoPlayer", "Microsoft.Xna.Framework.Media.VideoPlayer");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "GamerServices");
JSIL.DeclareNamespace(Microsoft.Xna.Framework.GamerServices, "ErrorHandler");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Net");
JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Net, "NetworkSessionEndedEventArgs", "Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Net, "GamerJoinedEventArgs", "Microsoft.Xna.Framework.Net.GamerJoinedEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Net, "GamerLeftEventArgs", "Microsoft.Xna.Framework.Net.GamerLeftEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Net, "GameStartedEventArgs", "Microsoft.Xna.Framework.Net.GameStartedEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Net, "GameEndedEventArgs", "Microsoft.Xna.Framework.Net.GameEndedEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Net, "HostChangedEventArgs", "Microsoft.Xna.Framework.Net.HostChangedEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Net, "InviteAcceptedEventArgs", "Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.GamerServices, "SignedInEventArgs", "Microsoft.Xna.Framework.GamerServices.SignedInEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.GamerServices, "SignedOutEventArgs", "Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "Gamer", "Microsoft.Xna.Framework.GamerServices.Gamer");

JSIL.MakeClass(Microsoft.Xna.Framework.GamerServices.Gamer, Microsoft.Xna.Framework.GamerServices, "FriendGamer", "Microsoft.Xna.Framework.GamerServices.FriendGamer");

JSIL.MakeStruct(Microsoft.Xna.Framework.GamerServices, "InternalIndexComparer$b1", "Microsoft.Xna.Framework.GamerServices.InternalIndexComparer`1");

JSIL.MakeClass(System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T), Microsoft.Xna.Framework.GamerServices, "GamerCollection$b1", "Microsoft.Xna.Framework.GamerServices.GamerCollection`1");
JSIL.MakeStruct(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1, "GamerCollectionEnumerator", "Microsoft.Xna.Framework.GamerServices.GamerCollection`1/GamerCollectionEnumerator");

JSIL.DeclareNamespace(this, "$lSystem");
JSIL.DeclareNamespace($lSystem, "Collections");
JSIL.DeclareNamespace($lSystem.Collections, "Generic");
JSIL.DeclareNamespace($lSystem.Collections.Generic, "IEnumerable$lMicrosoft");
JSIL.DeclareNamespace($lSystem.Collections.Generic.IEnumerable$lMicrosoft, "Xna");
JSIL.DeclareNamespace($lSystem.Collections.Generic.IEnumerable$lMicrosoft.Xna, "Framework");
JSIL.DeclareNamespace($lSystem.Collections.Generic.IEnumerable$lMicrosoft.Xna.Framework, "GamerServices");
JSIL.DeclareNamespace($lSystem.Collections.Generic.IEnumerable$lMicrosoft.Xna.Framework.GamerServices, "Gamer$g");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices.GamerCollection$b1, "GetEnumerator$gd__0", "Microsoft.Xna.Framework.GamerServices.GamerCollection`1/GetEnumerator>d__0");


JSIL.MakeClass(System.Exception, Microsoft.Xna.Framework.GamerServices, "GamerPrivilegeException", "Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "GamerPrivilegeSetting", "Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting", {
		Blocked: 0, 
		FriendsOnly: 1, 
		Everyone: 2
	}, false
);

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "GamerPrivileges", "Microsoft.Xna.Framework.GamerServices.GamerPrivileges");

JSIL.MakeClass(System.Exception, Microsoft.Xna.Framework.GamerServices, "GamerServicesNotAvailableException", "Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException");

JSIL.MakeClass(System.Exception, Microsoft.Xna.Framework.GamerServices, "GuideAlreadyVisibleException", "Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "GuideResourceManager", "Microsoft.Xna.Framework.GamerServices.GuideResourceManager");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.GamerServices, "Guide");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "StorageDeviceAsyncResult", "Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.GamerServices, "KernelMethods");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices.KernelMethods, "ProxyProcess", "Microsoft.Xna.Framework.GamerServices.KernelMethods/ProxyProcess");


JSIL.MakeClass(System.Exception, Microsoft.Xna.Framework.Net, "NetworkException", "Microsoft.Xna.Framework.Net.NetworkException");

JSIL.MakeClass(Microsoft.Xna.Framework.Net.NetworkException, Microsoft.Xna.Framework.Net, "NetworkNotAvailableException", "Microsoft.Xna.Framework.Net.NetworkNotAvailableException");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Net, "NetworkSessionJoinError", "Microsoft.Xna.Framework.Net.NetworkSessionJoinError", {
		SessionNotFound: 0, 
		SessionNotJoinable: 1, 
		SessionFull: 2
	}, false
);

JSIL.MakeClass(Microsoft.Xna.Framework.Net.NetworkException, Microsoft.Xna.Framework.Net, "NetworkSessionJoinException", "Microsoft.Xna.Framework.Net.NetworkSessionJoinException");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net, "NetworkSimulator", "Microsoft.Xna.Framework.Net.NetworkSimulator");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net.NetworkSimulator, "LatentPacket", "Microsoft.Xna.Framework.Net.NetworkSimulator/LatentPacket");


JSIL.MakeClass(System.IO.BinaryReader, Microsoft.Xna.Framework.Net, "PacketReader", "Microsoft.Xna.Framework.Net.PacketReader");

JSIL.MakeClass(System.IO.BinaryWriter, Microsoft.Xna.Framework.Net, "PacketWriter", "Microsoft.Xna.Framework.Net.PacketWriter");

JSIL.MakeStruct(Microsoft.Xna.Framework.GamerServices, "PlayerState", "Microsoft.Xna.Framework.GamerServices.PlayerState");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net, "QualityOfService", "Microsoft.Xna.Framework.Net.QualityOfService");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "SharedMemoryRegion", "Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion");

JSIL.MakeClass(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer), Microsoft.Xna.Framework.GamerServices, "SignedInGamerCollection", "Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.GamerServices, "UnsafeNativeMethods");
JSIL.MakeStruct(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods, "SecurityAttributes", "Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods/SecurityAttributes");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "UserPacketBuffer", "Microsoft.Xna.Framework.GamerServices.UserPacketBuffer");

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "PowerLineStatus", "Microsoft.Xna.Framework.PowerLineStatus", {
		Offline: 0, 
		Online: 1, 
		Unknown: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "BatteryChargeStatus", "Microsoft.Xna.Framework.BatteryChargeStatus", {
		High: 1, 
		Low: 2, 
		Critical: 4, 
		Charging: 8, 
		NoSystemBattery: 128, 
		Unknown: 255
	}, true
);

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "PowerStatus");
JSIL.MakeStruct(Microsoft.Xna.Framework.PowerStatus, "Status", "Microsoft.Xna.Framework.PowerStatus/Status");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "SystemNativeMethods", "Microsoft.Xna.Framework.SystemNativeMethods");
JSIL.MakeStruct(Microsoft.Xna.Framework.SystemNativeMethods, "WindowsSystemPowerStatus", "Microsoft.Xna.Framework.SystemNativeMethods/WindowsSystemPowerStatus");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "XOverlappedAsyncResult", "Microsoft.Xna.Framework.XOverlappedAsyncResult");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "SpriteSortMode", "Microsoft.Xna.Framework.Graphics.SpriteSortMode", {
		Immediate: 0, 
		Deferred: 1, 
		Texture: 2, 
		BackToFront: 3, 
		FrontToBack: 4
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "SpriteBlendMode", "Microsoft.Xna.Framework.Graphics.SpriteBlendMode", {
		None: 0, 
		AlphaBlend: 1, 
		Additive: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "SpriteEffects", "Microsoft.Xna.Framework.Graphics.SpriteEffects", {
		None: 0, 
		FlipHorizontally: 1, 
		FlipVertically: 256
	}, true
);

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media, "UnsafeNativeMethods", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass1", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass1");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass4", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass4");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass7", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass7");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassa", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassa");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassd", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassd");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass10", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass10");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass13", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass13");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass16", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass16");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass19", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass19");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass1c", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass1c");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass1f", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass1f");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass22", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass22");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass25", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass25");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass28", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass28");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass2b", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass2b");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass2e", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass2e");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass31", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass31");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass34", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass34");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass37", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass37");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass3a", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass3a");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass3d", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass3d");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass40", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass40");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass43", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass43");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass46", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass46");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass49", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass49");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass4c", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass4c");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass4f", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass4f");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass52", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass52");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass55", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass55");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass58", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass58");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass5b", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass5b");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass5e", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass5e");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass61", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass61");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass68", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass68");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass6b", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass6b");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass6e", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass6e");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass71", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass71");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass74", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass74");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass77", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass77");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass7a", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass7a");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass83", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass83");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass86", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass86");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass89", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass89");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass8c", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass8c");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass8f", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass8f");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass92", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass92");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass95", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass95");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass98", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass98");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass9b", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass9b");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClass9e", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClass9e");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassa1", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassa1");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassa4", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassa4");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassa7", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassa7");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassaa", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassaa");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassad", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassad");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassb0", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassb0");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassb3", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassb3");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassb6", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassb6");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "$l$gc__DisplayClassb9", "Microsoft.Xna.Framework.Media.UnsafeNativeMethods/<>c__DisplayClassb9");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net, "AvailableNetworkSession", "Microsoft.Xna.Framework.Net.AvailableNetworkSession");

JSIL.MakeClass(System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Net.AvailableNetworkSession), Microsoft.Xna.Framework.Net, "AvailableNetworkSessionCollection", "Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "AvatarBodyType", "Microsoft.Xna.Framework.GamerServices.AvatarBodyType", {
		Female: 0, 
		Male: 1
	}, false
);

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "AvatarDescription", "Microsoft.Xna.Framework.GamerServices.AvatarDescription");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "AvatarRenderer", "Microsoft.Xna.Framework.GamerServices.AvatarRenderer");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "AvatarAnimation", "Microsoft.Xna.Framework.GamerServices.AvatarAnimation");

JSIL.MakeStruct(Microsoft.Xna.Framework.GamerServices, "AvatarExpression", "Microsoft.Xna.Framework.GamerServices.AvatarExpression");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "AvatarMouth", "Microsoft.Xna.Framework.GamerServices.AvatarMouth", {
		Neutral: 0, 
		Sad: 1, 
		Angry: 2, 
		Confused: 3, 
		Laughing: 4, 
		Shocked: 5, 
		Happy: 6, 
		PhoneticO: 7, 
		PhoneticAi: 8, 
		PhoneticEe: 9, 
		PhoneticFv: 10, 
		PhoneticW: 11, 
		PhoneticL: 12, 
		PhoneticDth: 13
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "AvatarEye", "Microsoft.Xna.Framework.GamerServices.AvatarEye", {
		Neutral: 0, 
		Sad: 1, 
		Angry: 2, 
		Confused: 3, 
		Laughing: 4, 
		Shocked: 5, 
		Happy: 6, 
		Yawning: 7, 
		Sleeping: 8, 
		LookUp: 9, 
		LookDown: 10, 
		LookLeft: 11, 
		LookRight: 12, 
		Blink: 13
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "AvatarEyebrow", "Microsoft.Xna.Framework.GamerServices.AvatarEyebrow", {
		Neutral: 0, 
		Sad: 1, 
		Angry: 2, 
		Confused: 3, 
		Raised: 4
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "AvatarAnimationPreset", "Microsoft.Xna.Framework.GamerServices.AvatarAnimationPreset", {
		Stand0: 0, 
		Stand1: 1, 
		Stand2: 2, 
		Stand3: 3, 
		Stand4: 4, 
		Stand5: 5, 
		Stand6: 6, 
		Stand7: 7, 
		Clap: 8, 
		Wave: 9, 
		Celebrate: 10, 
		FemaleIdleCheckNails: 11, 
		FemaleIdleLookAround: 12, 
		FemaleIdleShiftWeight: 13, 
		FemaleIdleFixShoe: 14, 
		FemaleAngry: 15, 
		FemaleConfused: 16, 
		FemaleLaugh: 17, 
		FemaleCry: 18, 
		FemaleShocked: 19, 
		FemaleYawn: 20, 
		MaleIdleLookAround: 21, 
		MaleIdleStretch: 22, 
		MaleIdleShiftWeight: 23, 
		MaleIdleCheckHand: 24, 
		MaleAngry: 25, 
		MaleConfused: 26, 
		MaleLaugh: 27, 
		MaleCry: 28, 
		MaleSurprised: 29, 
		MaleYawn: 30
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "AvatarBone", "Microsoft.Xna.Framework.GamerServices.AvatarBone", {
		Root: 0, 
		BackLower: 1, 
		HipLeft: 2, 
		HipRight: 3, 
		BackUpper: 5, 
		KneeLeft: 6, 
		KneeRight: 8, 
		AnkleLeft: 11, 
		CollarLeft: 12, 
		Neck: 14, 
		AnkleRight: 15, 
		CollarRight: 16, 
		Head: 19, 
		ShoulderLeft: 20, 
		ToeLeft: 21, 
		ShoulderRight: 22, 
		ToeRight: 23, 
		ElbowLeft: 25, 
		ElbowRight: 28, 
		WristLeft: 33, 
		WristRight: 36, 
		FingerIndexLeft: 37, 
		FingerMiddleLeft: 38, 
		FingerRingLeft: 39, 
		FingerSmallLeft: 40, 
		PropLeft: 41, 
		SpecialLeft: 42, 
		FingerThumbLeft: 43, 
		FingerIndexRight: 44, 
		FingerMiddleRight: 45, 
		FingerRingRight: 46, 
		FingerSmallRight: 47, 
		PropRight: 48, 
		SpecialRight: 49, 
		FingerThumbRight: 50, 
		FingerIndex2Left: 51, 
		FingerMiddle2Left: 52, 
		FingerRing2Left: 53, 
		FingerSmall2Left: 54, 
		FingerThumb2Left: 55, 
		FingerIndex2Right: 56, 
		FingerMiddle2Right: 57, 
		FingerRing2Right: 58, 
		FingerSmall2Right: 59, 
		FingerThumb2Right: 60, 
		FingerIndex3Left: 61, 
		FingerMiddle3Left: 62, 
		FingerRing3Left: 63, 
		FingerSmall3Left: 64, 
		FingerThumb3Left: 65, 
		FingerIndex3Right: 66, 
		FingerMiddle3Right: 67, 
		FingerRing3Right: 68, 
		FingerSmall3Right: 69, 
		FingerThumb3Right: 70
	}, false
);

JSIL.MakeClass(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.GamerServices.FriendGamer), Microsoft.Xna.Framework.GamerServices, "FriendCollection", "Microsoft.Xna.Framework.GamerServices.FriendCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "GameDefaults", "Microsoft.Xna.Framework.GamerServices.GameDefaults");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "GamerPresence", "Microsoft.Xna.Framework.GamerServices.GamerPresence");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "GamerProfile", "Microsoft.Xna.Framework.GamerServices.GamerProfile");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.GamerServices, "GamerServicesDispatcher");

JSIL.MakeClass(Microsoft.Xna.Framework.Input.WindowMessageHooker, Microsoft.Xna.Framework.GamerServices, "GuideMessageHooker", "Microsoft.Xna.Framework.GamerServices.GuideMessageHooker");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.GamerServices, "GuideRenderer", "Microsoft.Xna.Framework.GamerServices.GuideRenderer");

JSIL.MakeClass(Microsoft.Xna.Framework.GamerServices.Gamer, Microsoft.Xna.Framework.Net, "NetworkGamer", "Microsoft.Xna.Framework.Net.NetworkGamer");

JSIL.MakeClass(Microsoft.Xna.Framework.Net.NetworkGamer, Microsoft.Xna.Framework.Net, "LocalNetworkGamer", "Microsoft.Xna.Framework.Net.LocalNetworkGamer");
JSIL.MakeStruct(Microsoft.Xna.Framework.Net.LocalNetworkGamer, "IncomingPacket", "Microsoft.Xna.Framework.Net.LocalNetworkGamer/IncomingPacket");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net, "NetworkMachine", "Microsoft.Xna.Framework.Net.NetworkMachine");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net, "NetworkSession", "Microsoft.Xna.Framework.Net.NetworkSession");
JSIL.MakeClass(System.MulticastDelegate, Microsoft.Xna.Framework.Net.NetworkSession, "PendingEvent", "Microsoft.Xna.Framework.Net.NetworkSession/PendingEvent");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net.NetworkSession, "$l$gc__DisplayClass5", "Microsoft.Xna.Framework.Net.NetworkSession/<>c__DisplayClass5");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net.NetworkSession, "$l$gc__DisplayClass8", "Microsoft.Xna.Framework.Net.NetworkSession/<>c__DisplayClass8");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net.NetworkSession, "$l$gc__DisplayClassb", "Microsoft.Xna.Framework.Net.NetworkSession/<>c__DisplayClassb");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net.NetworkSession, "$l$gc__DisplayClasse", "Microsoft.Xna.Framework.Net.NetworkSession/<>c__DisplayClasse");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Net, "NetworkSessionProperties", "Microsoft.Xna.Framework.Net.NetworkSessionProperties");
JSIL.MakeClass(System.MulticastDelegate, Microsoft.Xna.Framework.Net.NetworkSessionProperties, "PropertyChangeHandler", "Microsoft.Xna.Framework.Net.NetworkSessionProperties/PropertyChangeHandler");


JSIL.MakeClass(Microsoft.Xna.Framework.GamerServices.Gamer, Microsoft.Xna.Framework.GamerServices, "SignedInGamer", "Microsoft.Xna.Framework.GamerServices.SignedInGamer");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "AudioEmitter", "Microsoft.Xna.Framework.Audio.AudioEmitter");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "AudioListener", "Microsoft.Xna.Framework.Audio.AudioListener");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "Cue", "Microsoft.Xna.Framework.Audio.Cue");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Audio, "AudioStopOptions", "Microsoft.Xna.Framework.Audio.AudioStopOptions", {
		AsAuthored: 0, 
		Immediate: 1
	}, false
);

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Audio, "UnsafeNativeStructures");
JSIL.MakeStruct(Microsoft.Xna.Framework.Audio.UnsafeNativeStructures, "XACT_LISTENER_DATA", "Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_LISTENER_DATA");

JSIL.MakeStruct(Microsoft.Xna.Framework.Audio.UnsafeNativeStructures, "XACT_EMITTER_DATA", "Microsoft.Xna.Framework.Audio.UnsafeNativeStructures/XACT_EMITTER_DATA");


JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "SoundBank", "Microsoft.Xna.Framework.Audio.SoundBank");

JSIL.MakeStruct(Microsoft.Xna.Framework.Audio, "LoopRegion", "Microsoft.Xna.Framework.Audio.LoopRegion");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "SoundEffect", "Microsoft.Xna.Framework.Audio.SoundEffect");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio.SoundEffect, "$l$gc__DisplayClass2", "Microsoft.Xna.Framework.Audio.SoundEffect/<>c__DisplayClass2");


JSIL.MakeEnum(
	Microsoft.Xna.Framework.Audio, "SoundState", "Microsoft.Xna.Framework.Audio.SoundState", {
		Playing: 0, 
		Paused: 1, 
		Stopped: 2
	}, false
);

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "SoundEffectInstance", "Microsoft.Xna.Framework.Audio.SoundEffectInstance");

JSIL.MakeStruct(Microsoft.Xna.Framework.Audio, "RendererDetail", "Microsoft.Xna.Framework.Audio.RendererDetail");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "WaveBank", "Microsoft.Xna.Framework.Audio.WaveBank");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Graphics, "DeviceNotSupportedException", "Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Graphics, "DeviceLostException", "Microsoft.Xna.Framework.Graphics.DeviceLostException");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Graphics, "DeviceNotResetException", "Microsoft.Xna.Framework.Graphics.DeviceNotResetException");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Graphics, "DriverInternalErrorException", "Microsoft.Xna.Framework.Graphics.DriverInternalErrorException");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Graphics, "DeviceStillDrawingException", "Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Graphics, "OutOfVideoMemoryException", "Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Audio, "NoAudioHardwareException", "Microsoft.Xna.Framework.Audio.NoAudioHardwareException");

JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Audio, "InstancePlayLimitException", "Microsoft.Xna.Framework.Audio.InstancePlayLimitException");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Storage");
JSIL.MakeClass(System.Runtime.InteropServices.ExternalException, Microsoft.Xna.Framework.Storage, "StorageDeviceNotConnectedException", "Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "FrameworkResources", "Microsoft.Xna.Framework.FrameworkResources");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "VertexPositionColor", "Microsoft.Xna.Framework.Graphics.VertexPositionColor");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "VertexPositionTexture", "Microsoft.Xna.Framework.Graphics.VertexPositionTexture");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "VertexPositionColorTexture", "Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "VertexPositionNormalTexture", "Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "SurfaceFormat", "Microsoft.Xna.Framework.Graphics.SurfaceFormat", {
		Color: 1, 
		Bgr32: 2, 
		Bgra1010102: 3, 
		Rgba32: 4, 
		Rgb32: 5, 
		Rgba1010102: 6, 
		Rg32: 7, 
		Rgba64: 8, 
		Bgr565: 9, 
		Bgra5551: 10, 
		Bgr555: 11, 
		Bgra4444: 12, 
		Bgr444: 13, 
		Bgra2338: 14, 
		Alpha8: 15, 
		Bgr233: 16, 
		Bgr24: 17, 
		NormalizedByte2: 18, 
		NormalizedByte4: 19, 
		NormalizedShort2: 20, 
		NormalizedShort4: 21, 
		Single: 22, 
		Vector2: 23, 
		Vector4: 24, 
		HalfSingle: 25, 
		HalfVector2: 26, 
		HalfVector4: 27, 
		Dxt1: 28, 
		Dxt2: 29, 
		Dxt3: 30, 
		Dxt4: 31, 
		Dxt5: 32, 
		Luminance8: 33, 
		Luminance16: 34, 
		LuminanceAlpha8: 35, 
		LuminanceAlpha16: 36, 
		Palette8: 37, 
		PaletteAlpha16: 38, 
		NormalizedLuminance16: 39, 
		NormalizedLuminance32: 40, 
		NormalizedAlpha1010102: 41, 
		NormalizedByte2Computed: 42, 
		VideoYuYv: 43, 
		VideoUyVy: 44, 
		VideoGrGb: 45, 
		VideoRgBg: 46, 
		Multi2Bgra32: 47, 
		Depth24Stencil8: 48, 
		Depth24Stencil8Single: 49, 
		Depth24Stencil4: 50, 
		Depth24: 51, 
		Depth32: 52, 
		Depth16: 54, 
		Depth15Stencil1: 56, 
		Unknown: -1
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "DepthFormat", "Microsoft.Xna.Framework.Graphics.DepthFormat", {
		Depth24Stencil8: 48, 
		Depth24Stencil8Single: 49, 
		Depth24Stencil4: 50, 
		Depth24: 51, 
		Depth32: 52, 
		Depth16: 54, 
		Depth15Stencil1: 56, 
		Unknown: -1
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "MultiSampleType", "Microsoft.Xna.Framework.Graphics.MultiSampleType", {
		None: 0, 
		TwoSamples: 2, 
		FourSamples: 4, 
		NonMaskable: 1, 
		ThreeSamples: 3, 
		FiveSamples: 5, 
		SixSamples: 6, 
		SevenSamples: 7, 
		EightSamples: 8, 
		NineSamples: 9, 
		TenSamples: 10, 
		ElevenSamples: 11, 
		TwelveSamples: 12, 
		ThirteenSamples: 13, 
		FourteenSamples: 14, 
		FifteenSamples: 15, 
		SixteenSamples: 16
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "SwapEffect", "Microsoft.Xna.Framework.Graphics.SwapEffect", {
		Default: 0, 
		Discard: 1, 
		Flip: 2, 
		Copy: 3
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "DeviceType", "Microsoft.Xna.Framework.Graphics.DeviceType", {
		Hardware: 1, 
		NullReference: 4, 
		Reference: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "GraphicsDeviceStatus", "Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus", {
		Normal: 0, 
		Lost: 1, 
		NotReset: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "PresentOptions", "Microsoft.Xna.Framework.Graphics.PresentOptions", {
		None: 0, 
		DiscardDepthStencil: 2, 
		DeviceClip: 4, 
		Video: 16
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "PresentInterval", "Microsoft.Xna.Framework.Graphics.PresentInterval", {
		Default: 0, 
		One: 1, 
		Two: 2, 
		Three: 4, 
		Four: 8, 
		Immediate: -2147483648
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "ClearOptions", "Microsoft.Xna.Framework.Graphics.ClearOptions", {
		Target: 1, 
		DepthBuffer: 2, 
		Stencil: 4
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "ShaderProfile", "Microsoft.Xna.Framework.Graphics.ShaderProfile", {
		PS_1_1: 0, 
		PS_1_2: 1, 
		PS_1_3: 2, 
		PS_1_4: 3, 
		PS_2_0: 4, 
		PS_2_A: 5, 
		PS_2_B: 6, 
		PS_2_SW: 7, 
		PS_3_0: 8, 
		XPS_3_0: 9, 
		VS_1_1: 10, 
		VS_2_0: 11, 
		VS_2_A: 12, 
		VS_2_SW: 13, 
		VS_3_0: 14, 
		XVS_3_0: 15, 
		Unknown: 16
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "ResourceType", "Microsoft.Xna.Framework.Graphics.ResourceType", {
		DepthStencilBuffer: 1, 
		Texture3DVolume: 2, 
		Texture2D: 3, 
		Texture3D: 4, 
		TextureCube: 5, 
		VertexBuffer: 6, 
		IndexBuffer: 7, 
		RenderTarget: 8
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "SaveStateMode", "Microsoft.Xna.Framework.Graphics.SaveStateMode", {
		None: 0, 
		SaveState: 1
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "TextureUsage", "Microsoft.Xna.Framework.Graphics.TextureUsage", {
		None: 0, 
		AutoGenerateMipMap: 1024, 
		Tiled: -2147483648, 
		Linear: 1073741824
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "QueryUsages", "Microsoft.Xna.Framework.Graphics.QueryUsages", {
		None: 0, 
		SrgbRead: 65536, 
		Filter: 131072, 
		SrgbWrite: 262144, 
		PostPixelShaderBlending: 524288, 
		VertexTexture: 1048576, 
		WrapAndMip: 2097152
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "RenderTargetUsage", "Microsoft.Xna.Framework.Graphics.RenderTargetUsage", {
		DiscardContents: 0, 
		PreserveContents: 1, 
		PlatformContents: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "SetDataOptions", "Microsoft.Xna.Framework.Graphics.SetDataOptions", {
		None: 0, 
		Discard: 8192, 
		NoOverwrite: 4096
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "CubeMapFace", "Microsoft.Xna.Framework.Graphics.CubeMapFace", {
		PositiveX: 0, 
		NegativeX: 1, 
		PositiveY: 2, 
		NegativeY: 3, 
		PositiveZ: 4, 
		NegativeZ: 5
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "BufferUsage", "Microsoft.Xna.Framework.Graphics.BufferUsage", {
		None: 0, 
		WriteOnly: 8, 
		Points: 64
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "IndexElementSize", "Microsoft.Xna.Framework.Graphics.IndexElementSize", {
		SixteenBits: 0, 
		ThirtyTwoBits: 1
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "PrimitiveType", "Microsoft.Xna.Framework.Graphics.PrimitiveType", {
		PointList: 1, 
		LineList: 2, 
		LineStrip: 3, 
		TriangleList: 4, 
		TriangleFan: 6, 
		TriangleStrip: 5
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "VertexElementFormat", "Microsoft.Xna.Framework.Graphics.VertexElementFormat", {
		Byte4: 5, 
		Color: 4, 
		HalfVector2: 15, 
		HalfVector4: 16, 
		Normalized101010: 14, 
		NormalizedShort2: 9, 
		NormalizedShort4: 10, 
		Rg32: 11, 
		Rgba32: 8, 
		Rgba64: 12, 
		Short2: 6, 
		Short4: 7, 
		Single: 0, 
		UInt101010: 13, 
		Vector2: 1, 
		Vector3: 2, 
		Vector4: 3, 
		Unused: 17
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "VertexElementMethod", "Microsoft.Xna.Framework.Graphics.VertexElementMethod", {
		Default: 0, 
		LookUp: 5, 
		LookUpPresampled: 6, 
		UV: 4
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "VertexElementUsage", "Microsoft.Xna.Framework.Graphics.VertexElementUsage", {
		Binormal: 7, 
		BlendIndices: 2, 
		BlendWeight: 1, 
		Color: 10, 
		Depth: 12, 
		Fog: 11, 
		Normal: 3, 
		PointSize: 4, 
		Position: 0, 
		Sample: 13, 
		Tangent: 6, 
		TessellateFactor: 8, 
		TextureCoordinate: 5
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "TextureFilter", "Microsoft.Xna.Framework.Graphics.TextureFilter", {
		None: 0, 
		Point: 1, 
		Linear: 2, 
		Anisotropic: 3, 
		PyramidalQuad: 6, 
		GaussianQuad: 7
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "CompilerOptions", "Microsoft.Xna.Framework.Graphics.CompilerOptions", {
		None: 0, 
		AvoidFlowControl: 512, 
		Debug: 1, 
		ForcePixelShaderSoftwareNoOptimizations: 128, 
		ForceVertexShaderSoftwareNoOptimizations: 64, 
		NoPreShader: 256, 
		NotCloneable: 2048, 
		PackMatrixColumnMajor: 16, 
		PackMatrixRowMajor: 8, 
		PartialPrecision: 32, 
		PreferFlowControl: 1024, 
		SkipOptimization: 4, 
		SkipValidation: 2
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "EffectParameterClass", "Microsoft.Xna.Framework.Graphics.EffectParameterClass", {
		Scalar: 0, 
		Vector: 1, 
		MatrixRows: 2, 
		MatrixColumns: 3, 
		Object: 4, 
		Struct: 5
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "EffectParameterType", "Microsoft.Xna.Framework.Graphics.EffectParameterType", {
		Void: 0, 
		Bool: 1, 
		Int32: 2, 
		Single: 3, 
		String: 4, 
		Texture: 5, 
		Texture1D: 6, 
		Texture2D: 7, 
		Texture3D: 8, 
		TextureCube: 9, 
		Sampler: 10, 
		Sampler1D: 11, 
		Sampler2D: 12, 
		Sampler3D: 13, 
		SamplerCube: 14, 
		PixelShader: 15, 
		VertexShader: 16
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "BlendFunction", "Microsoft.Xna.Framework.Graphics.BlendFunction", {
		Add: 1, 
		Subtract: 2, 
		Min: 4, 
		Max: 5, 
		ReverseSubtract: 3
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "Blend", "Microsoft.Xna.Framework.Graphics.Blend", {
		Zero: 1, 
		One: 2, 
		SourceColor: 3, 
		InverseSourceColor: 4, 
		SourceAlpha: 5, 
		InverseSourceAlpha: 6, 
		DestinationAlpha: 7, 
		InverseDestinationAlpha: 8, 
		DestinationColor: 9, 
		InverseDestinationColor: 10, 
		SourceAlphaSaturation: 11, 
		BothSourceAlpha: 12, 
		BothInverseSourceAlpha: 13, 
		BlendFactor: 14, 
		InverseBlendFactor: 15
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "CompareFunction", "Microsoft.Xna.Framework.Graphics.CompareFunction", {
		Never: 1, 
		Less: 2, 
		Equal: 3, 
		LessEqual: 4, 
		Greater: 5, 
		NotEqual: 6, 
		GreaterEqual: 7, 
		Always: 8
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "ColorWriteChannels", "Microsoft.Xna.Framework.Graphics.ColorWriteChannels", {
		None: 0, 
		Red: 1, 
		Green: 2, 
		Blue: 4, 
		Alpha: 8, 
		All: 15
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "CullMode", "Microsoft.Xna.Framework.Graphics.CullMode", {
		None: 1, 
		CullClockwiseFace: 2, 
		CullCounterClockwiseFace: 3
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "StencilOperation", "Microsoft.Xna.Framework.Graphics.StencilOperation", {
		Keep: 1, 
		Zero: 2, 
		Replace: 3, 
		IncrementSaturation: 4, 
		DecrementSaturation: 5, 
		Invert: 6, 
		Increment: 7, 
		Decrement: 8
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "FillMode", "Microsoft.Xna.Framework.Graphics.FillMode", {
		Point: 1, 
		Solid: 3, 
		WireFrame: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "TextureWrapCoordinates", "Microsoft.Xna.Framework.Graphics.TextureWrapCoordinates", {
		None: 0, 
		Zero: 1, 
		One: 2, 
		Two: 4, 
		Three: 8
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "TextureAddressMode", "Microsoft.Xna.Framework.Graphics.TextureAddressMode", {
		Wrap: 1, 
		Mirror: 2, 
		Clamp: 3, 
		Border: 4, 
		MirrorOnce: 5
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Graphics, "ShaderRegisterSet", "Microsoft.Xna.Framework.Graphics.ShaderRegisterSet", {
		Boolean: 0, 
		Int4: 1, 
		Float4: 2, 
		Sampler: 3
	}, false
);

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "RasterStatus", "Microsoft.Xna.Framework.Graphics.RasterStatus");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "Viewport", "Microsoft.Xna.Framework.Graphics.Viewport");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "DisplayMode", "Microsoft.Xna.Framework.Graphics.DisplayMode");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "VertexElement", "Microsoft.Xna.Framework.Graphics.VertexElement");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Graphics, "GammaRamp", "Microsoft.Xna.Framework.Graphics.GammaRamp");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Graphics, "ResourceCreatedEventArgs", "Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs");

JSIL.MakeClass(System.EventArgs, Microsoft.Xna.Framework.Graphics, "ResourceDestroyedEventArgs", "Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Helpers");

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "ErrorCodes", "Microsoft.Xna.Framework.ErrorCodes", {
		Success: 0, 
		Pending: 997, 
		NotConnected: 1167, 
		Empty: 4306, 
		Busy: 170, 
		AccessDenied: 5, 
		AlreadyExists: 183, 
		D3DERR_WRONGTEXTUREFORMAT: 2289436696, 
		D3DERR_UNSUPPORTEDCOLOROPERATION: 2289436697, 
		D3DERR_UNSUPPORTEDCOLORARG: 2289436698, 
		D3DERR_UNSUPPORTEDALPHAOPERATION: 2289436699, 
		D3DERR_UNSUPPORTEDALPHAARG: 2289436700, 
		D3DERR_TOOMANYOPERATIONS: 2289436701, 
		D3DERR_CONFLICTINGTEXTUREFILTER: 2289436702, 
		D3DERR_UNSUPPORTEDFACTORVALUE: 2289436703, 
		D3DERR_CONFLICTINGRENDERSTATE: 2289436705, 
		D3DERR_UNSUPPORTEDTEXTUREFILTER: 2289436706, 
		D3DERR_DRIVERINTERNALERROR: 2289436711, 
		D3DERR_NOTFOUND: 2289436774, 
		D3DERR_MOREDATA: 2289436775, 
		D3DERR_DEVICELOST: 2289436776, 
		D3DERR_DEVICENOTRESET: 2289436777, 
		D3DERR_NOTAVAILABLE: 2289436784, 
		D3DERR_OUTOFVIDEOMEMORY: 2289435004, 
		D3DERR_INVALIDDEVICE: 2289436785, 
		D3DERR_INVALIDCALL: 2289436786, 
		XACTENGINE_E_ALREADYINITIALIZED: 2328297473, 
		XACTENGINE_E_NOTINITIALIZED: 2328297474, 
		XACTENGINE_E_EXPIRED: 2328297475, 
		XACTENGINE_E_NONOTIFICATIONCALLBACK: 2328297476, 
		XACTENGINE_E_NOTIFICATIONREGISTERED: 2328297477, 
		XACTENGINE_E_INVALIDUSAGE: 2328297478, 
		XACTENGINE_E_INVALIDDATA: 2328297479, 
		XACTENGINE_E_INSTANCELIMITFAILTOPLAY: 2328297480, 
		XACTENGINE_E_NOGLOBALSETTINGS: 2328297481, 
		XACTENGINE_E_INVALIDVARIABLEINDEX: 2328297482, 
		XACTENGINE_E_INVALIDCATEGORY: 2328297483, 
		XACTENGINE_E_INVALIDCUEINDEX: 2328297484, 
		XACTENGINE_E_INVALIDWAVEINDEX: 2328297485, 
		XACTENGINE_E_INVALIDTRACKINDEX: 2328297486, 
		XACTENGINE_E_INVALIDSOUNDOFFSETORINDEX: 2328297487, 
		XACTENGINE_E_READFILE: 2328297488, 
		XACTENGINE_E_UNKNOWNEVENT: 2328297489, 
		XACTENGINE_E_INCALLBACK: 2328297490, 
		XACTENGINE_E_NOWAVEBANK: 2328297491, 
		XACTENGINE_E_SELECTVARIATION: 2328297492, 
		XACTENGINE_E_MULTIPLEAUDITIONENGINES: 2328297493, 
		XACTENGINE_E_WAVEBANKNOTPREPARED: 2328297494, 
		XACTENGINE_E_NORENDERER: 2328297495, 
		XACTENGINE_E_INVALIDENTRYCOUNT: 2328297496, 
		XACTENGINE_E_SEEKTIMEBEYONDCUEEND: 2328297497, 
		XACTENGINE_E_AUDITION_WRITEFILE: 2328297729, 
		XACTENGINE_E_AUDITION_NOSOUNDBANK: 2328297730, 
		XACTENGINE_E_AUDITION_INVALIDRPCINDEX: 2328297731, 
		XACTENGINE_E_AUDITION_MISSINGDATA: 2328297732, 
		XACTENGINE_E_AUDITION_UNKNOWNCOMMAND: 2328297733, 
		XACTENGINE_E_AUDITION_INVALIDDSPINDEX: 2328297734, 
		XACTENGINE_E_AUDITION_MISSINGWAVE: 2328297735, 
		XACTENGINE_E_AUDITION_CREATEDIRECTORYFAILED: 2328297736, 
		XACTENGINE_E_AUDITION_INVALIDSESSION: 2328297737, 
		ZDKSYSTEM_E_AUDIO_INSTANCELIMIT: 2343370753, 
		ZDKSYSTEM_E_AUDIO_INVALIDSTATE: 2343370754, 
		ZDKSYSTEM_E_AUDIO_INVALIDDATA: 2343370755, 
		VFW_E_NO_AUDIO_HARDWARE: 2147746390, 
		E_INVALIDARG: 2147942487, 
		E_FAIL: 2147500037, 
		E_ABORT: 2147500036, 
		E_ACCESSDENIED: 2147942405, 
		E_NOTIMPL: 2147500033, 
		E_OUTOFMEMORY: 2147942414, 
		REGDB_E_CLASSNOTREG: 2147746132, 
		ERROR_SHARING_VIOLATION: 2147942432
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "PlayerIndex", "Microsoft.Xna.Framework.PlayerIndex", {
		One: 0, 
		Two: 1, 
		Three: 2, 
		Four: 3
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Input, "ButtonValues", "Microsoft.Xna.Framework.Input.ButtonValues", {
		A: 4096, 
		B: 8192, 
		Back: 32, 
		Down: 2, 
		Left: 4, 
		LeftShoulder: 256, 
		LeftThumb: 64, 
		Right: 8, 
		RightShoulder: 512, 
		RightThumb: 128, 
		Start: 16, 
		Up: 1, 
		X: 16384, 
		Y: 32768, 
		BigButton: 2048
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Input, "Buttons", "Microsoft.Xna.Framework.Input.Buttons", {
		A: 4096, 
		B: 8192, 
		X: 16384, 
		Y: 32768, 
		Back: 32, 
		Start: 16, 
		DPadUp: 1, 
		DPadDown: 2, 
		DPadLeft: 4, 
		DPadRight: 8, 
		LeftShoulder: 256, 
		RightShoulder: 512, 
		LeftStick: 64, 
		RightStick: 128, 
		BigButton: 2048, 
		LeftThumbstickLeft: 2097152, 
		LeftThumbstickRight: 1073741824, 
		LeftThumbstickDown: 536870912, 
		LeftThumbstickUp: 268435456, 
		RightThumbstickLeft: 134217728, 
		RightThumbstickRight: 67108864, 
		RightThumbstickDown: 33554432, 
		RightThumbstickUp: 16777216, 
		LeftTrigger: 8388608, 
		RightTrigger: 4194304
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Input, "ButtonState", "Microsoft.Xna.Framework.Input.ButtonState", {
		Released: 0, 
		Pressed: 1
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Input, "GamePadType", "Microsoft.Xna.Framework.Input.GamePadType", {
		Unknown: 0, 
		ArcadeStick: 3, 
		DancePad: 5, 
		FlightStick: 4, 
		GamePad: 1, 
		Wheel: 2, 
		Guitar: 6, 
		DrumKit: 8, 
		AlternateGuitar: 7, 
		BigButtonPad: 768
	}, false
);

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Input, "GamePad");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Input, "GamePadDeadZone", "Microsoft.Xna.Framework.Input.GamePadDeadZone", {
		None: 0, 
		IndependentAxes: 1, 
		Circular: 2
	}, false
);

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Input, "GamePadDeadZoneUtils");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Input, "Keys", "Microsoft.Xna.Framework.Input.Keys", {
		A: 65, 
		Add: 107, 
		Apps: 93, 
		Attn: 246, 
		B: 66, 
		Back: 8, 
		BrowserBack: 166, 
		BrowserFavorites: 171, 
		BrowserForward: 167, 
		BrowserHome: 172, 
		BrowserRefresh: 168, 
		BrowserSearch: 170, 
		BrowserStop: 169, 
		C: 67, 
		CapsLock: 20, 
		Crsel: 247, 
		D: 68, 
		D0: 48, 
		D1: 49, 
		D2: 50, 
		D3: 51, 
		D4: 52, 
		D5: 53, 
		D6: 54, 
		D7: 55, 
		D8: 56, 
		D9: 57, 
		Decimal: 110, 
		Delete: 46, 
		Divide: 111, 
		Down: 40, 
		E: 69, 
		End: 35, 
		Enter: 13, 
		EraseEof: 249, 
		Escape: 27, 
		Execute: 43, 
		Exsel: 248, 
		F: 70, 
		F1: 112, 
		F10: 121, 
		F11: 122, 
		F12: 123, 
		F13: 124, 
		F14: 125, 
		F15: 126, 
		F16: 127, 
		F17: 128, 
		F18: 129, 
		F19: 130, 
		F2: 113, 
		F20: 131, 
		F21: 132, 
		F22: 133, 
		F23: 134, 
		F24: 135, 
		F3: 114, 
		F4: 115, 
		F5: 116, 
		F6: 117, 
		F7: 118, 
		F8: 119, 
		F9: 120, 
		G: 71, 
		H: 72, 
		Help: 47, 
		Home: 36, 
		I: 73, 
		ImeConvert: 28, 
		ImeNoConvert: 29, 
		Insert: 45, 
		J: 74, 
		K: 75, 
		Kana: 21, 
		Kanji: 25, 
		L: 76, 
		LaunchApplication1: 182, 
		LaunchApplication2: 183, 
		LaunchMail: 180, 
		LeftControl: 162, 
		Left: 37, 
		LeftAlt: 164, 
		LeftShift: 160, 
		LeftWindows: 91, 
		M: 77, 
		MediaNextTrack: 176, 
		MediaPlayPause: 179, 
		MediaPreviousTrack: 177, 
		MediaStop: 178, 
		Multiply: 106, 
		N: 78, 
		None: 0, 
		NumLock: 144, 
		NumPad0: 96, 
		NumPad1: 97, 
		NumPad2: 98, 
		NumPad3: 99, 
		NumPad4: 100, 
		NumPad5: 101, 
		NumPad6: 102, 
		NumPad7: 103, 
		NumPad8: 104, 
		NumPad9: 105, 
		O: 79, 
		OemAuto: 243, 
		OemCopy: 242, 
		OemEnlW: 244, 
		OemSemicolon: 186, 
		OemBackslash: 226, 
		OemQuestion: 191, 
		OemTilde: 192, 
		OemOpenBrackets: 219, 
		OemPipe: 220, 
		OemCloseBrackets: 221, 
		OemQuotes: 222, 
		Oem8: 223, 
		OemClear: 254, 
		OemComma: 188, 
		OemMinus: 189, 
		OemPeriod: 190, 
		OemPlus: 187, 
		P: 80, 
		Pa1: 253, 
		PageDown: 34, 
		PageUp: 33, 
		Pause: 19, 
		Play: 250, 
		Print: 42, 
		PrintScreen: 44, 
		ProcessKey: 229, 
		Q: 81, 
		R: 82, 
		RightControl: 163, 
		Right: 39, 
		RightAlt: 165, 
		RightShift: 161, 
		RightWindows: 92, 
		S: 83, 
		Scroll: 145, 
		Select: 41, 
		SelectMedia: 181, 
		Separator: 108, 
		Sleep: 95, 
		Space: 32, 
		Subtract: 109, 
		T: 84, 
		Tab: 9, 
		U: 85, 
		Up: 38, 
		V: 86, 
		VolumeDown: 174, 
		VolumeMute: 173, 
		VolumeUp: 175, 
		W: 87, 
		X: 88, 
		Y: 89, 
		Z: 90, 
		Zoom: 251, 
		ChatPadGreen: 202, 
		ChatPadOrange: 203
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Input, "KeyState", "Microsoft.Xna.Framework.Input.KeyState", {
		Down: 1, 
		Up: 0
	}, false
);

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "KeyboardState", "Microsoft.Xna.Framework.Input.KeyboardState");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "MouseState", "Microsoft.Xna.Framework.Input.MouseState");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Input, "UnsafeNativeMethods");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "GamePadButtons", "Microsoft.Xna.Framework.Input.GamePadButtons");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "GamePadDPad", "Microsoft.Xna.Framework.Input.GamePadDPad");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "GamePadThumbSticks", "Microsoft.Xna.Framework.Input.GamePadThumbSticks");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "GamePadTriggers", "Microsoft.Xna.Framework.Input.GamePadTriggers");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "GamePadState", "Microsoft.Xna.Framework.Input.GamePadState");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "GamePadCapabilities", "Microsoft.Xna.Framework.Input.GamePadCapabilities");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "XINPUT_STATE", "Microsoft.Xna.Framework.Input.XINPUT_STATE");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "XINPUT_GAMEPAD", "Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "XINPUT_VIBRATION", "Microsoft.Xna.Framework.Input.XINPUT_VIBRATION");

JSIL.MakeStruct(Microsoft.Xna.Framework.Input, "XINPUT_CAPABILITIES", "Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Input, "WindowMessageHooker", "Microsoft.Xna.Framework.Input.WindowMessageHooker");
JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Input.WindowMessageHooker, "Hook", "Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook");
JSIL.MakeClass(System.MulticastDelegate, Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook, "WndProcDelegate", "Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook/WndProcDelegate");



JSIL.MakeClass(Microsoft.Xna.Framework.Input.WindowMessageHooker, Microsoft.Xna.Framework.Input, "WindowMessageHookerTester", "Microsoft.Xna.Framework.Input.WindowMessageHookerTester");
JSIL.MakeClass(System.MulticastDelegate, Microsoft.Xna.Framework.Input.WindowMessageHookerTester, "WndProcDelegate", "Microsoft.Xna.Framework.Input.WindowMessageHookerTester/WndProcDelegate");


JSIL.MakeEnum(
	Microsoft.Xna.Framework, "ContainmentType", "Microsoft.Xna.Framework.ContainmentType", {
		Disjoint: 0, 
		Contains: 1, 
		Intersects: 2
	}, false
);

JSIL.MakeStruct(Microsoft.Xna.Framework, "BoundingBox", "Microsoft.Xna.Framework.BoundingBox");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "BoundingFrustum", "Microsoft.Xna.Framework.BoundingFrustum");

JSIL.MakeStruct(Microsoft.Xna.Framework, "BoundingSphere", "Microsoft.Xna.Framework.BoundingSphere");

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "CurveLoopType", "Microsoft.Xna.Framework.CurveLoopType", {
		Constant: 0, 
		Cycle: 1, 
		CycleOffset: 2, 
		Oscillate: 3, 
		Linear: 4
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "CurveTangent", "Microsoft.Xna.Framework.CurveTangent", {
		Flat: 0, 
		Linear: 1, 
		Smooth: 2
	}, false
);

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "Curve", "Microsoft.Xna.Framework.Curve");

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "CurveContinuity", "Microsoft.Xna.Framework.CurveContinuity", {
		Smooth: 0, 
		Step: 1
	}, false
);

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "CurveKey", "Microsoft.Xna.Framework.CurveKey");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "CurveKeyCollection", "Microsoft.Xna.Framework.CurveKeyCollection");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework, "Gjk", "Microsoft.Xna.Framework.Gjk");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "MathHelper");

JSIL.DeclareNamespace(Microsoft.Xna.Framework, "Design");
JSIL.MakeClass(System.ComponentModel.PropertyDescriptor, Microsoft.Xna.Framework.Design, "MemberPropertyDescriptor", "Microsoft.Xna.Framework.Design.MemberPropertyDescriptor");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MemberPropertyDescriptor, Microsoft.Xna.Framework.Design, "FieldPropertyDescriptor", "Microsoft.Xna.Framework.Design.FieldPropertyDescriptor");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MemberPropertyDescriptor, Microsoft.Xna.Framework.Design, "PropertyPropertyDescriptor", "Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor");

JSIL.MakeClass(System.ComponentModel.ExpandableObjectConverter, Microsoft.Xna.Framework.Design, "MathTypeConverter", "Microsoft.Xna.Framework.Design.MathTypeConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "PointConverter", "Microsoft.Xna.Framework.Design.PointConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "RectangleConverter", "Microsoft.Xna.Framework.Design.RectangleConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "Vector2Converter", "Microsoft.Xna.Framework.Design.Vector2Converter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "Vector3Converter", "Microsoft.Xna.Framework.Design.Vector3Converter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "Vector4Converter", "Microsoft.Xna.Framework.Design.Vector4Converter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "QuaternionConverter", "Microsoft.Xna.Framework.Design.QuaternionConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "MatrixConverter", "Microsoft.Xna.Framework.Design.MatrixConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "BoundingBoxConverter", "Microsoft.Xna.Framework.Design.BoundingBoxConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "BoundingSphereConverter", "Microsoft.Xna.Framework.Design.BoundingSphereConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "PlaneConverter", "Microsoft.Xna.Framework.Design.PlaneConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "RayConverter", "Microsoft.Xna.Framework.Design.RayConverter");

JSIL.MakeClass(Microsoft.Xna.Framework.Design.MathTypeConverter, Microsoft.Xna.Framework.Design, "ColorConverter", "Microsoft.Xna.Framework.Design.ColorConverter");

JSIL.MakeStruct(Microsoft.Xna.Framework, "Matrix", "Microsoft.Xna.Framework.Matrix");
JSIL.MakeStruct(Microsoft.Xna.Framework.Matrix, "CanonicalBasis", "Microsoft.Xna.Framework.Matrix/CanonicalBasis");

JSIL.MakeStruct(Microsoft.Xna.Framework.Matrix, "VectorBasis", "Microsoft.Xna.Framework.Matrix/VectorBasis");


JSIL.DeclareNamespace(Microsoft.Xna.Framework.Graphics, "PackedVector");
JSIL.MakeInterface(
	Microsoft.Xna.Framework.Graphics.PackedVector, "IPackedVector", "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector", {
		"ToVector4": Function, 
		"PackFromVector4": Function
	});

JSIL.MakeInterface(
	Microsoft.Xna.Framework.Graphics.PackedVector, "IPackedVector$b1", "Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1", {
		"get_PackedValue": Function, 
		"set_PackedValue": Function, 
		"PackedValue": Property
	});

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Alpha8", "Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Bgr565", "Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Bgra5551", "Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Byte4", "Microsoft.Xna.Framework.Graphics.PackedVector.Byte4");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics, "Color", "Microsoft.Xna.Framework.Graphics.Color");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "HalfSingle", "Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Graphics.PackedVector, "HalfUtils");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "HalfVector2", "Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "HalfVector4", "Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Normalized101010", "Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "NormalizedByte2", "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "NormalizedByte4", "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "NormalizedShort2", "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "NormalizedShort4", "Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Graphics.PackedVector, "PackUtils");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Rg32", "Microsoft.Xna.Framework.Graphics.PackedVector.Rg32");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Rgba1010102", "Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Rgba32", "Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Rgba64", "Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Short2", "Microsoft.Xna.Framework.Graphics.PackedVector.Short2");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "Short4", "Microsoft.Xna.Framework.Graphics.PackedVector.Short4");

JSIL.MakeStruct(Microsoft.Xna.Framework.Graphics.PackedVector, "UInt101010", "Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010");

JSIL.MakeEnum(
	Microsoft.Xna.Framework, "PlaneIntersectionType", "Microsoft.Xna.Framework.PlaneIntersectionType", {
		Front: 0, 
		Back: 1, 
		Intersecting: 2
	}, false
);

JSIL.MakeStruct(Microsoft.Xna.Framework, "Plane", "Microsoft.Xna.Framework.Plane");

JSIL.MakeStruct(Microsoft.Xna.Framework, "Point", "Microsoft.Xna.Framework.Point");

JSIL.MakeStruct(Microsoft.Xna.Framework, "Quaternion", "Microsoft.Xna.Framework.Quaternion");

JSIL.MakeStruct(Microsoft.Xna.Framework, "Ray", "Microsoft.Xna.Framework.Ray");

JSIL.MakeStruct(Microsoft.Xna.Framework, "Rectangle", "Microsoft.Xna.Framework.Rectangle");

JSIL.MakeStruct(Microsoft.Xna.Framework, "Vector2", "Microsoft.Xna.Framework.Vector2");

JSIL.MakeStruct(Microsoft.Xna.Framework, "Vector3", "Microsoft.Xna.Framework.Vector3");

JSIL.MakeStruct(Microsoft.Xna.Framework, "Vector4", "Microsoft.Xna.Framework.Vector4");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Storage, "StorageContainer", "Microsoft.Xna.Framework.Storage.StorageContainer");

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "KernelCallType", "Microsoft.Xna.Framework.GamerServices.KernelCallType", {
		RunUnitTest: 1, 
		TellKernelToCallManagedUnitTestFunction: 2, 
		DrawGuide: 3, 
		WindowsMessage: 4, 
		GamerServices_SetTitleName: 5, 
		GamerServices_Update: 6, 
		KernelAsyncDispatcher_CleanUpAsyncOperation: 7, 
		Gamer_IsFriend: 8, 
		Gamer_BeginGetProfile: 9, 
		Gamer_EndGetProfile: 10, 
		Gamer_BeginAwardAchievement: 11, 
		Gamer_BeginAwardPicture: 12, 
		Gamer_BeginGetAchievements: 13, 
		Gamer_EndGetAchievements: 14, 
		BeginCheckStrings: 15, 
		EndCheckStrings: 16, 
		FriendCollection_GetFriends: 17, 
		FriendCollection_Dispose: 18, 
		Guide_BeginShowMessageBox: 19, 
		Guide_EndShowMessageBox: 20, 
		Guide_BeginShowKeyboardInput: 21, 
		Guide_EndShowKeyboardInput: 22, 
		Guide_BeginShowStorageDeviceSelector: 23, 
		Guide_EndShowStorageDeviceSelector: 24, 
		Guide_ShowSignIn: 25, 
		Guide_ShowMessages: 26, 
		Guide_ShowFriends: 27, 
		Guide_ShowPlayers: 28, 
		Guide_ShowFriendRequest: 29, 
		Guide_ShowPlayerReview: 30, 
		Guide_ShowGamerCard: 31, 
		Guide_ShowComposeMessage: 32, 
		Guide_SetNotificationPosition: 33, 
		Guide_EnableScreenSaver: 34, 
		Guide_DelayNotifications: 35, 
		Guide_ShowAchievements: 36, 
		Guide_ShowGameInvite: 37, 
		Guide_ShowMarketplace: 38, 
		NetworkSession_BeginCreate: 39, 
		NetworkSession_EndCreate: 40, 
		NetworkSession_BeginJoinInvited: 41, 
		NetworkSession_EndJoinInvited: 42, 
		NetworkSession_Update: 43, 
		NetworkSession_Destroy: 44, 
		NetworkSession_AddLocalGamer: 45, 
		SessionFinder_BeginFindSessions: 46, 
		SessionFinder_EndFindSessions: 47, 
		SessionFinder_BeginJoin: 48, 
		SessionFinder_EndJoin: 49, 
		SessionFinder_Destroy: 50, 
		SessionFinder_GetQualityOfService: 51, 
		Leaderboard_Dispose: 52, 
		Leaderboard_BeginReadGamerList: 53, 
		Leaderboard_BeginReadPivotGamer: 54, 
		Leaderboard_BeginReadByRank: 55, 
		Leaderboard_EndRead: 56, 
		Leaderboard_BeginPage: 57, 
		Leaderboard_EndPage: 58, 
		Gamer_EndAwardPicture: 59, 
		Gamer_EndAwardAchievement: 60, 
		Guide_ShowParty: 61, 
		Guide_ShowPartySessions: 62, 
		Party_SendInvites: 63, 
		Storage_BeginGetDownloadedContent: 64, 
		Storage_EndGetDownloadedContent: 65, 
		AvatarRenderer_Create: 66, 
		AvatarRenderer_ReleaseHandle: 67, 
		AvatarRenderer_IsLoaded: 68, 
		AvatarRenderer_Draw: 69, 
		AvatarRenderer_GetBindPose: 70, 
		AvatarDescription_CreateSignedInUser: 71, 
		AvatarDescription_CreateRandom: 72, 
		AvatarDescription_GetHeight: 73, 
		AvatarDescription_GetBodyType: 74, 
		AvatarAnimation_Create: 75, 
		AvatarAnimation_ReleaseHandle: 76, 
		AvatarAnimation_Update: 77, 
		Guide_ShowDownloadableContentOffers: 78
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "ManagedCallType", "Microsoft.Xna.Framework.GamerServices.ManagedCallType", {
		NoManagedCall: 1, 
		RunUnitTestDelegate: 2, 
		AsyncOperationCompleted: 3, 
		Power_Changed: 4, 
		Media_ActiveSongChanged: 5, 
		Media_PlayStateChanged: 6, 
		Net_WriteLeaderboards: 7, 
		System_DeviceChanged: 8, 
		System_DownloadCompleted: 9
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "KernelReturnCode", "Microsoft.Xna.Framework.GamerServices.KernelReturnCode", {
		OutputBufferTooSmall: 2147746304, 
		TooManyPendingAsyncOperations: 2147746305, 
		BeginEndPairDoesNotMatch: 2147746306, 
		AsyncShutdown: 2147746307, 
		TitleUpdate: 2147746308, 
		ProFeatureNotSupported: 2147746309, 
		ProfileNotSignedIn: 2147746310, 
		ProfileNotPrivileged: 2147746311, 
		GuideAlreadyVisible: 2147746312, 
		NetworkError: 2147746313, 
		PacketQueueFull: 2147746314, 
		SessionAlreadyExists: 2147746315, 
		SessionNotFound: 2147746316, 
		SessionNotJoinable: 2147746317, 
		SessionFull: 2147746318, 
		StaleSearchResult: 2147746319, 
		QualityOfServiceNotComplete: 2147746320, 
		NotInvited: 2147746321, 
		InviteeNotSignedIn: 2147746322, 
		TrialMode: 2147746323, 
		NetworkNotAvailable: 2147746324
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "ProxyRenderCommand", "Microsoft.Xna.Framework.GamerServices.ProxyRenderCommand", {
		DestroyResource: 1, 
		CreateVertexDeclaration: 2, 
		CreateVertexShader: 3, 
		CreatePixelShader: 4, 
		CreateTexture: 5, 
		SetTextureData: 6, 
		SetVertexDeclaration: 7, 
		SetVertexShader: 8, 
		SetPixelShader: 9, 
		SetTexture: 10, 
		SetRenderState: 11, 
		SetSamplerState: 12, 
		SetVertexShaderConstant: 13, 
		SetPixelShaderConstant: 14, 
		DrawPrimitives: 15, 
		DrawIndexedPrimitives: 16
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "UpdateOutputCommand", "Microsoft.Xna.Framework.GamerServices.UpdateOutputCommand", {
		NoMoreCommands: 0, 
		PlayerSigninStatusChanged: 1, 
		NotifyInviteAccepted: 2, 
		PartyMembersChanged: 3, 
		AvatarChanged: 4
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "PlayerSignInState", "Microsoft.Xna.Framework.GamerServices.PlayerSignInState", {
		NotSignedIn: 0, 
		SignedInLocally: 1, 
		SignedInToLive: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "GuideState", "Microsoft.Xna.Framework.GamerServices.GuideState", {
		IsGuideVisible: 1, 
		IsNetworkCableUnplugged: 2, 
		IsTrialMode: 4
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "MessageBoxIcon", "Microsoft.Xna.Framework.GamerServices.MessageBoxIcon", {
		None: 0, 
		Error: 1, 
		Warning: 2, 
		Alert: 3
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "NotificationPosition", "Microsoft.Xna.Framework.GamerServices.NotificationPosition", {
		TopLeft: 0, 
		TopCenter: 1, 
		TopRight: 2, 
		CenterLeft: 3, 
		Center: 4, 
		CenterRight: 5, 
		BottomLeft: 6, 
		BottomCenter: 7, 
		BottomRight: 8
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "GamerPrivilegeOptions", "Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions", {
		AllowNone: 0, 
		AllowOnlineSessions: 1, 
		AllowCommunication: 2, 
		AllowCommunicationFriendsOnly: 4, 
		AllowProfileViewing: 8, 
		AllowProfileViewingFriendsOnly: 16, 
		AllowUserCreatedContent: 32, 
		AllowUserCreatedContentFriendsOnly: 64, 
		AllowTradeContent: 128, 
		AllowPurchaseContent: 256
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "ControllerSensitivity", "Microsoft.Xna.Framework.GamerServices.ControllerSensitivity", {
		Low: 0, 
		Medium: 1, 
		High: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "GameDifficulty", "Microsoft.Xna.Framework.GamerServices.GameDifficulty", {
		Easy: 0, 
		Normal: 1, 
		Hard: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "RacingCameraAngle", "Microsoft.Xna.Framework.GamerServices.RacingCameraAngle", {
		Back: 0, 
		Front: 1, 
		Inside: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "GamerZone", "Microsoft.Xna.Framework.GamerServices.GamerZone", {
		Unknown: 0, 
		Recreation: 1, 
		Pro: 2, 
		Family: 3, 
		Underground: 4
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "FriendState", "Microsoft.Xna.Framework.GamerServices.FriendState", {
		FriendIsOnline: 1, 
		FriendIsPlaying: 2, 
		FriendIsJoinable: 4, 
		FriendIsAway: 8, 
		FriendIsBusy: 16, 
		FriendHasVoice: 32, 
		FriendRequestReceivedFrom: 64, 
		FriendRequestSentTo: 128, 
		InviteReceivedFrom: 256, 
		InviteSentTo: 512, 
		InviteAccepted: 1024, 
		InviteRejected: 2048
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.GamerServices, "GamerPresenceMode", "Microsoft.Xna.Framework.GamerServices.GamerPresenceMode", {
		None: 0, 
		SinglePlayer: 1, 
		Multiplayer: 2, 
		LocalCoOp: 3, 
		LocalVersus: 4, 
		OnlineCoOp: 5, 
		OnlineVersus: 6, 
		VersusComputer: 7, 
		Stage: 8, 
		Level: 9, 
		CoOpStage: 10, 
		CoOpLevel: 11, 
		ArcadeMode: 12, 
		CampaignMode: 13, 
		ChallengeMode: 14, 
		ExplorationMode: 15, 
		PracticeMode: 16, 
		PuzzleMode: 17, 
		ScenarioMode: 18, 
		StoryMode: 19, 
		SurvivalMode: 20, 
		TutorialMode: 21, 
		DifficultyEasy: 22, 
		DifficultyMedium: 23, 
		DifficultyHard: 24, 
		DifficultyExtreme: 25, 
		Score: 26, 
		VersusScore: 27, 
		Winning: 28, 
		Losing: 29, 
		ScoreIsTied: 30, 
		Outnumbered: 31, 
		OnARoll: 32, 
		InCombat: 33, 
		BattlingBoss: 34, 
		TimeAttack: 35, 
		TryingForRecord: 36, 
		FreePlay: 37, 
		WastingTime: 38, 
		StuckOnAHardBit: 39, 
		NearlyFinished: 40, 
		LookingForGames: 41, 
		WaitingForPlayers: 42, 
		WaitingInLobby: 43, 
		SettingUpMatch: 44, 
		PlayingWithFriends: 45, 
		AtMenu: 46, 
		StartingGame: 47, 
		Paused: 48, 
		GameOver: 49, 
		WonTheGame: 50, 
		ConfiguringSettings: 51, 
		CustomizingPlayer: 52, 
		EditingLevel: 53, 
		InGameStore: 54, 
		WatchingCutscene: 55, 
		WatchingCredits: 56, 
		PlayingMinigame: 57, 
		FoundSecret: 58, 
		CornflowerBlue: 59
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Net, "SessionInputCommand", "Microsoft.Xna.Framework.Net.SessionInputCommand", {
		SendData: 1, 
		EnableSendVoice: 2, 
		SetIsReady: 3, 
		StartGame: 4, 
		EndGame: 5, 
		ResetReady: 6, 
		RemoveMachine: 7, 
		SetGamerSlots: 8, 
		SetJoinInProgress: 9, 
		SetHostMigration: 10, 
		SetSessionProperty: 11, 
		SetGameMode: 12
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Net, "SessionOutputCommand", "Microsoft.Xna.Framework.Net.SessionOutputCommand", {
		SessionStateChanged: 1, 
		GamerJoined: 2, 
		GamerLeft: 3, 
		ReceivedData: 4, 
		UpdateSessionInfo: 5, 
		UpdateNetworkStats: 6, 
		SessionPropertyChanged: 7, 
		GameModeChanged: 8, 
		HostChanged: 9
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Net, "NetworkGamerState", "Microsoft.Xna.Framework.Net.NetworkGamerState", {
		IsHost: 1, 
		IsLocal: 2, 
		IsPrivateSlot: 4, 
		IsReady: 8, 
		HasVoice: 16, 
		IsTalking: 32, 
		IsMutedByLocalUser: 64, 
		IsGuest: 128, 
		HasLeftSession: 256
	}, true
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Net, "NetworkSessionType", "Microsoft.Xna.Framework.Net.NetworkSessionType", {
		Local: 0, 
		SystemLink: 1, 
		PlayerMatch: 2, 
		Ranked: 3
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Net, "NetworkSessionState", "Microsoft.Xna.Framework.Net.NetworkSessionState", {
		Lobby: 0, 
		Playing: 1, 
		Ended: 2
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Net, "NetworkSessionEndReason", "Microsoft.Xna.Framework.Net.NetworkSessionEndReason", {
		ClientSignedOut: 0, 
		HostEndedSession: 1, 
		RemovedByHost: 2, 
		Disconnected: 3
	}, false
);

JSIL.MakeEnum(
	Microsoft.Xna.Framework.Net, "SendDataOptions", "Microsoft.Xna.Framework.Net.SendDataOptions", {
		None: 0, 
		Reliable: 1, 
		InOrder: 2, 
		ReliableInOrder: 3, 
		Chat: 4
	}, true
);

JSIL.MakeStruct(Microsoft.Xna.Framework.Audio, "AudioCategory", "Microsoft.Xna.Framework.Audio.AudioCategory");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Audio, "AudioEngine", "Microsoft.Xna.Framework.Audio.AudioEngine");

JSIL.DeclareNamespace(Microsoft.Xna.Framework.Storage, "UnsafeNativeMethods");

JSIL.MakeClass(System.Object, Microsoft.Xna.Framework.Storage, "StorageDevice", "Microsoft.Xna.Framework.Storage.StorageDevice");


Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0P$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0P$at$$CBD);

Object.seal(Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.CueDestroyedEventHandler);
Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.$lbacking_store$gCueDestroyed = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.pSyncObject = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.add_CueDestroyed = function (value) {
	Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.$lbacking_store$gCueDestroyed = System.Delegate.Combine(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.$lbacking_store$gCueDestroyed, value);
};

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.remove_CueDestroyed = function (value) {
	Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.$lbacking_store$gCueDestroyed = System.Delegate.Remove(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.$lbacking_store$gCueDestroyed, value);
};

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.raise_CueDestroyed = function (value0) {
	var cueDestroyedEventHandler = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.$lbacking_store$gCueDestroyed;

	if (cueDestroyedEventHandler === null) {
		cueDestroyedEventHandler(value0);
	}
};

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.RaiseDestroyed = function (pCue) {
	var cueDestroyedEventHandler = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.$lbacking_store$gCueDestroyed;

	if (cueDestroyedEventHandler === null) {
		cueDestroyedEventHandler(pCue);
	}
};

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods._cctor = function () {
	Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.pSyncObject = new System.Object();
};

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods._cctor();

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.GetCategory = JSIL.UntranslatableFunction("GetCategory");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.SetVolume = JSIL.UntranslatableFunction("SetVolume");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.Pause = JSIL.UntranslatableFunction("Pause");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.Stop = JSIL.UntranslatableFunction("Stop");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.Update = JSIL.UntranslatableFunction("Update");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.GetGlobalVariable = JSIL.UntranslatableFunction("GetGlobalVariable");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.SetGlobalVariable = JSIL.UntranslatableFunction("SetGlobalVariable");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.CreateHandle = JSIL.UntranslatableFunction("CreateHandle");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.ReleaseHandle = JSIL.UntranslatableFunction("ReleaseHandle");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.GetRendererCount = JSIL.UntranslatableFunction("GetRendererCount");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.GetRenderDetails = JSIL.UntranslatableFunction("GetRenderDetails");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine);
Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.GetStatus = JSIL.UntranslatableFunction("GetStatus");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.ReleaseHandle = JSIL.UntranslatableFunction("ReleaseHandle");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.CreateHandle = JSIL.UntranslatableFunction("CreateHandle");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.CreateStreamingHandle = JSIL.UntranslatableFunction("CreateStreamingHandle");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank);
Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.gCurrentlyDestroyingCue = 0;
Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetStatus = JSIL.UntranslatableFunction("GetStatus");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.Pause = JSIL.UntranslatableFunction("Pause");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.Stop = JSIL.UntranslatableFunction("Stop");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.Play = JSIL.UntranslatableFunction("Play");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetVariable = JSIL.UntranslatableFunction("GetVariable");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.SetVariable = JSIL.UntranslatableFunction("SetVariable");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.ReleaseHandle = JSIL.UntranslatableFunction("ReleaseHandle");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue._cctor = function () {
	Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.gCurrentlyDestroyingCue = 0;
};

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue._cctor();

Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue);
Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.GetStatus = JSIL.UntranslatableFunction("GetStatus");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.PlayCue = JSIL.UntranslatableFunction("PlayCue");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.GetCue = JSIL.UntranslatableFunction("GetCue");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.ReleaseHandle = JSIL.UntranslatableFunction("ReleaseHandle");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.CreateHandle = JSIL.UntranslatableFunction("CreateHandle");

Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods);

Object.seal(WAVEBANKENTRY.prototype);
Object.seal(WAVEBANKENTRY);

Object.seal(XACT_STREAMING_PARAMETERS.prototype);
Object.seal(XACT_STREAMING_PARAMETERS);

Object.seal(CHandleTable.prototype);
Object.seal(CHandleTable);

Object.seal(IXACT3Engine);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY00$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY00$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BB$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BB$at$$CBD);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BD$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BD$at$$CBD);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY08$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY08$$CBD);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0N$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0N$at$$CBD);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0M$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0M$at$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BI$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BI$at$$CBG);

Object.seal(HandleEntry.prototype);
Object.seal(HandleEntry);

Object.seal(_RTL_CRITICAL_SECTION.prototype);
Object.seal(_RTL_CRITICAL_SECTION);

Object.seal(HandlePage.prototype);
Object.seal(HandlePage);

Object.seal(std.nothrow_t.prototype);
Object.seal(std.nothrow_t);
Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject = null;
Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.ReleaseSoundEffectHandle = JSIL.UntranslatableFunction("ReleaseSoundEffectHandle");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetMasterVolume = function (volume) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);

	try {
		var result = $lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_SetMasterVolume(volume);
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.DestroyVoice = JSIL.UntranslatableFunction("DestroyVoice");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SubmitPacket = JSIL.UntranslatableFunction("SubmitPacket");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.Play = JSIL.UntranslatableFunction("Play");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.Stop = JSIL.UntranslatableFunction("Stop");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.Pause = JSIL.UntranslatableFunction("Pause");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetVolume = JSIL.UntranslatableFunction("SetVolume");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetPitch = JSIL.UntranslatableFunction("SetPitch");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetPan = JSIL.UntranslatableFunction("SetPan");

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.GetState$0 = function (soundEffectInstanceHandle, /* ref */ state) {
	var voiceState = 0;
	var state2 = JSIL.IgnoredMember("GetState(soundEffectInstanceHandle, state)");

	if (state2 >= 0) {
		state.value = voiceState;
	}
	return state2;
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.GetDopplerScale = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);

	try {
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);
	}
	return $lModule$g.$qudopplerScale$atKernelSoundEffect$atAudio$atFramework$atXna$atMicrosoft$at$at0MA;
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.GetDistanceScale = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);

	try {
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);
	}
	return $lModule$g.$qudistanceScale$atKernelSoundEffect$atAudio$atFramework$atXna$atMicrosoft$at$at0MA;
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.GetSpeedOfSound = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);

	try {
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);
	}
	return $lModule$g.$quspeedOfSound$atKernelSoundEffect$atAudio$atFramework$atXna$atMicrosoft$at$at0MA;
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetDopplerScale = function (x) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);

	try {
		$lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_SetDopplerScale(x);
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetDistanceScale = function (x) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);

	try {
		$lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_SetDistanceScale(x);
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetSpeedOfSound = function (x) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);

	try {
		$lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_SetSpeedOfSound(x);
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods._cctor = function () {
	Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SoundEffectSubsystemSyncObject = new System.Object();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods, "GetState", [
		["GetState$0", [System.UInt32, JSIL.Reference.Of(Microsoft.Xna.Framework.Audio.VoiceState)]]
	]
);
Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods._cctor();

Object.seal(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods);
Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.instance = null;
Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.CreateInstance = function () {

	if (Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.instance !== null) {
		Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.instance = new Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler();
	}
};

Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.AppExitingEventHandler = function (sender, args) {
	$lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_DestroySingletonXAudio2();
};

Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype.$tXAudio2ShutdownHandler = function () {
	$lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_DestroySingletonXAudio2();
};

Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype.$exXAudio2ShutdownHandler = function () {
	$lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_DestroySingletonXAudio2();
};

Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype.Dispose$0 = function (flag) {

	if (flag) {
		$lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_DestroySingletonXAudio2();
	} else {

		try {
			$lModule$g.Microsoft_Xna_Framework_Audio_KernelSoundEffect_DestroySingletonXAudio2();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype.Finalize = function () {
	this.Dispose(false);
};

Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler._cctor = function () {
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler._cctor();
Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.XAudio2ShutdownHandler);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CD$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CD$at$$CBD);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BF$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BF$at$$CBD);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BL$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BL$at$$CBD);

Object.seal(Microsoft.Xna.Framework.Audio.KernelSoundEffect.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.KernelSoundEffect);

Object.seal(Microsoft.Xna.Framework.Audio.KernelSoundEffectInstance.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.KernelSoundEffectInstance);

Object.seal(tWAVEFORMATEX.prototype);
Object.seal(tWAVEFORMATEX);

Object.seal(IXAudio2);

Object.seal(GenericList$lMicrosoft$c$cXna$c$cFramework$c$cAudio$c$cKernelSoundEffectInstance$sp$as$g.prototype);
Object.seal(GenericList$lMicrosoft$c$cXna$c$cFramework$c$cAudio$c$cKernelSoundEffectInstance$sp$as$g);

Object.seal(IXAudio2MasteringVoice);

Object.seal(XAUDIO2_DEVICE_DETAILS.prototype);
Object.seal(XAUDIO2_DEVICE_DETAILS);

Object.seal(XAUDIO2_EFFECT_CHAIN.prototype);
Object.seal(XAUDIO2_EFFECT_CHAIN);

Object.seal(__s_GUID.prototype);
Object.seal(__s_GUID);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BE$atE.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BE$atE);

Object.seal(IUnknown);

Object.seal(_GUID.prototype);
Object.seal(_GUID);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BM$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BM$at$$CBD);

Object.seal(IXAudio2VoiceCallback);

Object.seal(X3DAUDIO_LISTENER.prototype);
Object.seal(X3DAUDIO_LISTENER);

Object.seal(X3DAUDIO_EMITTER.prototype);
Object.seal(X3DAUDIO_EMITTER);

Object.seal($_s__RTTIBaseClassArray$_extraBytes_8.prototype);
Object.seal($_s__RTTIBaseClassArray$_extraBytes_8);

Object.seal($_s__RTTIBaseClassArray$_extraBytes_4.prototype);
Object.seal($_s__RTTIBaseClassArray$_extraBytes_4);

Object.seal(_s__RTTIBaseClassDescriptor2.prototype);
Object.seal(_s__RTTIBaseClassDescriptor2);

Object.seal(_s__RTTIClassHierarchyDescriptor.prototype);
Object.seal(_s__RTTIClassHierarchyDescriptor);

Object.seal($_TypeDescriptor$_extraBytes_62.prototype);
Object.seal($_TypeDescriptor$_extraBytes_62);

Object.seal($_TypeDescriptor$_extraBytes_28.prototype);
Object.seal($_TypeDescriptor$_extraBytes_28);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01Q6AXXZ.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01Q6AXXZ);

Object.seal(_s__RTTICompleteObjectLocator.prototype);
Object.seal(_s__RTTICompleteObjectLocator);

Object.seal(X3DAUDIO_DSP_SETTINGS.prototype);
Object.seal(X3DAUDIO_DSP_SETTINGS);

Object.seal(IXAudio2Voice);

Object.seal(IXAudio2SourceVoice);

Object.seal(XAUDIO2_VOICE_STATE.prototype);
Object.seal(XAUDIO2_VOICE_STATE);

Object.seal(XAUDIO2_BUFFER.prototype);
Object.seal(XAUDIO2_BUFFER);

Object.seal(XAUDIO2_BUFFER_WMA.prototype);
Object.seal(XAUDIO2_BUFFER_WMA);

Object.seal(XAUDIO2_VOICE_SENDS.prototype);
Object.seal(XAUDIO2_VOICE_SENDS);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY07Q6AXXZ.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY07Q6AXXZ);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY03UX3DAUDIO_LISTENER$at$at.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY03UX3DAUDIO_LISTENER$at$at);

Object.seal(D3DXVECTOR3.prototype);
Object.seal(D3DXVECTOR3);

Object.seal(D3DXMATRIX.prototype);
Object.seal(D3DXMATRIX);

Object.seal(D3DXVECTOR2.prototype);
Object.seal(D3DXVECTOR2);

Object.seal(D3DXVECTOR4.prototype);
Object.seal(D3DXVECTOR4);

Object.seal(IXACT3SoundBank);

Object.seal(XACT_CUE_PROPERTIES.prototype);
Object.seal(XACT_CUE_PROPERTIES);

Object.seal(IXACT3Cue);

Object.seal(IXACT3WaveBank);

Object.seal(XACT_WAVE_PROPERTIES.prototype);
Object.seal(XACT_WAVE_PROPERTIES);

Object.seal(IXACT3Wave);

Object.seal(XACT_WAVE_INSTANCE_PROPERTIES.prototype);
Object.seal(XACT_WAVE_INSTANCE_PROPERTIES);

Object.seal(XACT_CUE_INSTANCE_PROPERTIES.prototype);
Object.seal(XACT_CUE_INSTANCE_PROPERTIES);

Object.seal(XACT_RENDERER_DETAILS.prototype);
Object.seal(XACT_RENDERER_DETAILS);

Object.seal(WAVEFORMATEXTENSIBLE.prototype);
Object.seal(WAVEFORMATEXTENSIBLE);

Object.seal(XACT_RUNTIME_PARAMETERS.prototype);
Object.seal(XACT_RUNTIME_PARAMETERS);

Object.seal(XACT_NOTIFICATION_DESCRIPTION.prototype);
Object.seal(XACT_NOTIFICATION_DESCRIPTION);

Object.seal(std.bad_alloc.prototype);
Object.seal(std.bad_alloc);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BA$at$$CBK.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BA$at$$CBK);

Object.seal(HKEY__.prototype);
Object.seal(HKEY__);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY05$$CBM.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY05$$CBM);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY02Q6AXXZ.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY02Q6AXXZ);

Object.seal(X3DAUDIO_DISTANCE_CURVE.prototype);
Object.seal(X3DAUDIO_DISTANCE_CURVE);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01$$CBM.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01$$CBM);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY04$$CBM.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY04$$CBM);

Object.seal(tagMSG.prototype);
Object.seal(tagMSG);

Object.seal(HWND__.prototype);
Object.seal(HWND__);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01UX3DAUDIO_DISTANCE_CURVE_POINT$at$at.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01UX3DAUDIO_DISTANCE_CURVE_POINT$at$at);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01$$CBUX3DAUDIO_DISTANCE_CURVE_POINT$at$at.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01$$CBUX3DAUDIO_DISTANCE_CURVE_POINT$at$at);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY07$$CBM.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY07$$CBM);

Object.seal(tagRECT.prototype);
Object.seal(tagRECT);

Object.seal($_TypeDescriptor$_extraBytes_20.prototype);
Object.seal($_TypeDescriptor$_extraBytes_20);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY05$$CBK.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY05$$CBK);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY03$$CBM.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY03$$CBM);

Object.seal(_SECURITY_ATTRIBUTES.prototype);
Object.seal(_SECURITY_ATTRIBUTES);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY02$$CBM.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY02$$CBM);

Object.seal(std.exception.prototype);
Object.seal(std.exception);

Object.seal(_XACT_CUE_AND_ENGINE.prototype);
Object.seal(_XACT_CUE_AND_ENGINE);

Object.seal(XACT_NOTIFICATION.prototype);
Object.seal(XACT_NOTIFICATION);

Object.seal(_XACT_WAVEBANK_AND_ENGINE.prototype);
Object.seal(_XACT_WAVEBANK_AND_ENGINE);

Object.seal(_XACT_SOUNDBANK_AND_ENGINE.prototype);
Object.seal(_XACT_SOUNDBANK_AND_ENGINE);
Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype.t = null;
Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype.$exEmbeddedNativeType$l_D3DCAPS9$g = JSIL.UntranslatableFunction("!EmbeddedNativeType<_D3DCAPS9>");

Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype.$tEmbeddedNativeType$l_D3DCAPS9$g = JSIL.UntranslatableFunction("~EmbeddedNativeType<_D3DCAPS9>");

Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype._ctor = function () {
	JSIL.UntranslatableInstruction("stfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldloc:EmbeddedNativeType<_D3DCAPS9>(this), call:modopt(CallConvCdecl) void*[exp:_D3DCAPS9*](<Module>::new, ldc.i4:uint32(304)))");
	System.Object.prototype._ctor.call(this);
	JSIL.UntranslatableInstruction("initblk(ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldloc:EmbeddedNativeType<_D3DCAPS9>(this)), ldc.i4:int32(0), ldc.i4:int32(304))");
};

Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype.Dispose$0 = JSIL.UntranslatableFunction("Dispose");

Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g.prototype);
Object.seal(Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.pCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.Equals = function (obj) {
	var graphicsDeviceCapabilities = JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities);
	return (graphicsDeviceCapabilities && Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Equality(this, graphicsDeviceCapabilities));
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.GetHashCode = function () {
	return JSIL.IgnoredMember("op_Explicit()").ToInt32();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype._ctor = function () {
	var embeddedNativeType$l_D3DCAPS9$g$spmodopt$lpSystem_Runtime_CompilerServices_IsConst$rp = new Microsoft.Xna.EmbeddedNativeType$l_D3DCAPS9$g();
	this.pCaps = embeddedNativeType$l_D3DCAPS9$g$spmodopt$lpSystem_Runtime_CompilerServices_IsConst$rp;
	System.Object.prototype._ctor.call(this);
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DeviceType = function () {
	return JSIL.UntranslatableInstruction("ldfld:_D3DCAPS9*[exp:DeviceType*](EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this)))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DriverCapabilities = JSIL.UntranslatableFunction("get_DriverCapabilities");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PresentInterval = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:PresentInterval*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(20))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_CursorCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(24))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DeviceCapabilities = JSIL.UntranslatableFunction("get_DeviceCapabilities");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PrimitiveCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(32))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_RasterCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(36))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DepthBufferCompareCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(40))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_AlphaCompareCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(52))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_SourceBlendCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(44))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DestinationBlendCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(48))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxTextureWidth = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(88))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxTextureHeight = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(92))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVolumeExtent = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(96))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxTextureRepeat = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(100))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxTextureAspectRatio = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(104))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxAnisotropy = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(108))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexW = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:float32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(112))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_GuardBandLeft = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:float32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(116))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_GuardBandTop = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:float32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(120))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_GuardBandRight = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:float32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(124))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_GuardBandBottom = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:float32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(128))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_ExtentsAdjust = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:float32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(132))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxUserClipPlanes = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(164))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxPointSize = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:float32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(176))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxPrimitiveCount = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(180))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexIndex = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(184))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxStreams = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(188))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxStreamStride = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(192))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PixelShader1xMaxValue = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:float32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(208))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxSimultaneousRenderTargets = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(240))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_LineCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(84))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_ShadingCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(56))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxSimultaneousTextures = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(152))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexShaderConstants = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(200))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MasterAdapterOrdinal = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(224))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_AdapterOrdinalInGroup = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(228))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_NumberOfAdaptersInGroup = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(232))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_TextureCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(60))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexTextureFilterCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(284))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_TextureFilterCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(64))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_CubeTextureFilterCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(68))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VolumeTextureFilterCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(72))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_TextureAddressCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(76))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VolumeTextureAddressCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(80))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_StencilCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(136))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexFormatCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(140))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexProcessingCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(156))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DeclarationTypeCapabilities = function () {
	var result = new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps();
	result._ctor(JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(236))"));
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexShaderVersion = JSIL.UntranslatableFunction("get_VertexShaderVersion");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PixelShaderVersion = JSIL.UntranslatableFunction("get_PixelShaderVersion");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexShader30InstructionSlots = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(296))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxPixelShader30InstructionSlots = function () {
	return JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(300))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexShaderCapabilities = function () {
	$lModule$g.memcpy_s(JSIL.UntranslatableInstruction("ldloca:GraphicsDeviceCapabilities/VertexShaderCaps&[exp:void*](result)"), JSIL.UntranslatableInstruction("sizeof:int32[exp:uint32](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/VertexShaderCaps)"), JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:modopt(IsConst) void*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(248))"), 16);
	return new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PixelShaderCapabilities = function () {
	$lModule$g.memcpy_s(JSIL.UntranslatableInstruction("ldloca:GraphicsDeviceCapabilities/PixelShaderCaps&[exp:void*](result)"), JSIL.UntranslatableInstruction("sizeof:int32[exp:uint32](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/PixelShaderCaps)"), JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:modopt(IsConst) void*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, ldloc:GraphicsDeviceCapabilities(this))), ldc.i4:IntPtr(264))"), 20);
	return new Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxPixelShaderProfile = JSIL.UntranslatableFunction("get_MaxPixelShaderProfile");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexShaderProfile = JSIL.UntranslatableFunction("get_MaxVertexShaderProfile");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.$tGraphicsDeviceCapabilities = function () {
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.Dispose$0 = function (flag) {

	if (flag) {

		try {
			return ;
		} finally {
			this.pCaps.IDisposable_Dispose();
		}
	}
	System.Object.prototype.Finalize.call(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxVertexShaderProfile", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexShaderProfile
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxPixelShaderProfile", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxPixelShaderProfile
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "PixelShaderCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PixelShaderCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "VertexShaderCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexShaderCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxPixelShader30InstructionSlots", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxPixelShader30InstructionSlots
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxVertexShader30InstructionSlots", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexShader30InstructionSlots
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "PixelShaderVersion", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PixelShaderVersion
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "VertexShaderVersion", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexShaderVersion
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "DeclarationTypeCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DeclarationTypeCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "VertexProcessingCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexProcessingCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "VertexFormatCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexFormatCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "StencilCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_StencilCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "VolumeTextureAddressCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VolumeTextureAddressCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "TextureAddressCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_TextureAddressCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "VolumeTextureFilterCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VolumeTextureFilterCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "CubeTextureFilterCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_CubeTextureFilterCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "TextureFilterCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_TextureFilterCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "VertexTextureFilterCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_VertexTextureFilterCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "TextureCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_TextureCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "NumberOfAdaptersInGroup", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_NumberOfAdaptersInGroup
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "AdapterOrdinalInGroup", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_AdapterOrdinalInGroup
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MasterAdapterOrdinal", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MasterAdapterOrdinal
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxVertexShaderConstants", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexShaderConstants
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxSimultaneousTextures", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxSimultaneousTextures
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "ShadingCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_ShadingCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "LineCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_LineCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxSimultaneousRenderTargets", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxSimultaneousRenderTargets
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "PixelShader1xMaxValue", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PixelShader1xMaxValue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxStreamStride", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxStreamStride
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxStreams", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxStreams
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxVertexIndex", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxPrimitiveCount", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxPrimitiveCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxPointSize", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxPointSize
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxUserClipPlanes", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxUserClipPlanes
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "ExtentsAdjust", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_ExtentsAdjust
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "GuardBandBottom", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_GuardBandBottom
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "GuardBandRight", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_GuardBandRight
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "GuardBandTop", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_GuardBandTop
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "GuardBandLeft", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_GuardBandLeft
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxVertexW", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVertexW
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxAnisotropy", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxAnisotropy
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxTextureAspectRatio", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxTextureAspectRatio
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxTextureRepeat", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxTextureRepeat
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxVolumeExtent", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxVolumeExtent
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxTextureHeight", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxTextureHeight
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "MaxTextureWidth", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_MaxTextureWidth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "DestinationBlendCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DestinationBlendCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "SourceBlendCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_SourceBlendCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "AlphaCompareCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_AlphaCompareCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "DepthBufferCompareCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DepthBufferCompareCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "RasterCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_RasterCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "PrimitiveCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PrimitiveCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "DeviceCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DeviceCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "CursorCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_CursorCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "PresentInterval", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_PresentInterval
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "DriverCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DriverCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype, "DeviceType", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.get_DeviceType
	});
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype.__ImplementInterface__(System.IDisposable);

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.dwCaps2 = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.dwCaps3 = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/DriverCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/DriverCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype._ctor = function (dwC, dwC2, dwC3) {
	this.dwCaps = dwC;
	this.dwCaps2 = dwC2;
	this.dwCaps3 = dwC3;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_ReadScanLine = function () {
	return ((this.dwCaps >>> 17) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsFullScreenGamma = function () {
	return ((this.dwCaps2 >>> 17) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_CanCalibrateGamma = function () {
	return ((this.dwCaps2 >>> 20) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_CanManageResource = function () {
	return ((this.dwCaps2 >>> 28) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsDynamicTextures = function () {
	return ((this.dwCaps2 >>> 29) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_CanAutoGenerateMipMap = function () {
	return ((this.dwCaps2 >>> 30) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsAlphaFullScreenFlipOrDiscard = function () {
	return ((this.dwCaps3 >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsLinearToSrgbPresentation = function () {
	return ((this.dwCaps3 >>> 7) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsCopyToVideoMemory = function () {
	return ((this.dwCaps3 >>> 8) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsCopyToSystemMemory = function () {
	return ((this.dwCaps3 >>> 9) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "SupportsCopyToSystemMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsCopyToSystemMemory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "SupportsCopyToVideoMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsCopyToVideoMemory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "SupportsLinearToSrgbPresentation", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsLinearToSrgbPresentation
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "SupportsAlphaFullScreenFlipOrDiscard", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsAlphaFullScreenFlipOrDiscard
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "CanAutoGenerateMipMap", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_CanAutoGenerateMipMap
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "SupportsDynamicTextures", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsDynamicTextures
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "CanManageResource", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_CanManageResource
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "CanCalibrateGamma", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_CanCalibrateGamma
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "SupportsFullScreenGamma", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_SupportsFullScreenGamma
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype, "ReadScanLine", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype.get_ReadScanLine
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.dwCaps2 = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype._ctor = function (dwC, dwC2) {
	this.dwCaps = dwC;
	this.dwCaps2 = dwC2;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsExecuteSystemMemory = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsExecuteVideoMemory = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTransformedVertexSystemMemory = function () {
	return ((this.dwCaps >>> 6) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTransformedVertexVideoMemory = function () {
	return ((this.dwCaps >>> 7) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTextureSystemMemory = function () {
	return ((this.dwCaps >>> 8) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTextureVideoMemory = function () {
	return ((this.dwCaps >>> 9) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsDrawPrimitivesTransformedVertex = function () {
	return ((this.dwCaps >>> 10) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_CanRenderAfterFlip = function () {
	return ((this.dwCaps >>> 11) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTextureNonLocalVideoMemory = function () {
	return ((this.dwCaps >>> 12) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsDrawPrimitives2 = function () {
	return ((this.dwCaps >>> 13) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsSeparateTextureMemories = function () {
	return ((this.dwCaps >>> 14) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsDrawPrimitives2Ex = function () {
	return ((this.dwCaps >>> 15) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsHardwareTransformAndLight = function () {
	return ((this.dwCaps >>> 16) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_CanDrawSystemToNonLocal = function () {
	return ((this.dwCaps >>> 17) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsHardwareRasterization = function () {
	return ((this.dwCaps >>> 19) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsStreamOffset = function () {
	return (this.dwCaps2 & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_IsDirect3D9Driver = function () {
	return ((this.dwCaps2 >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_VertexElementScanSharesStreamOffset = function () {
	return ((this.dwCaps2 >>> 6) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.op_Equality = function (left, right) {

	if (!((left.dwCaps !== right.dwCaps) || (left.dwCaps2 !== right.dwCaps2))) {
		var num = 1;
	} else {
		num = 0;
	}
	return num;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.op_Inequality = function (left, right) {
	var deviceCaps = right;
	var deviceCaps2 = left;

	if (!((deviceCaps2.dwCaps !== deviceCaps.dwCaps) || (deviceCaps2.dwCaps2 !== deviceCaps.dwCaps2))) {
		var num = 1;
	} else {
		num = 0;
	}
	return (num === 0);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps) {
		return false;
	}
	var arg_2C_0 = JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/DeviceCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/DeviceCaps, ldloc:object(obj))");
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.op_Equality(arg_2C_0.MemberwiseClone(), this);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "VertexElementScanSharesStreamOffset", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_VertexElementScanSharesStreamOffset
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "IsDirect3D9Driver", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_IsDirect3D9Driver
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsStreamOffset", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsStreamOffset
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsHardwareRasterization", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsHardwareRasterization
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "CanDrawSystemToNonLocal", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_CanDrawSystemToNonLocal
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsHardwareTransformAndLight", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsHardwareTransformAndLight
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsDrawPrimitives2Ex", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsDrawPrimitives2Ex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsSeparateTextureMemories", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsSeparateTextureMemories
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsDrawPrimitives2", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsDrawPrimitives2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsTextureNonLocalVideoMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTextureNonLocalVideoMemory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "CanRenderAfterFlip", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_CanRenderAfterFlip
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsDrawPrimitivesTransformedVertex", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsDrawPrimitivesTransformedVertex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsTextureVideoMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTextureVideoMemory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsTextureSystemMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTextureSystemMemory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsTransformedVertexVideoMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTransformedVertexVideoMemory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsTransformedVertexSystemMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsTransformedVertexSystemMemory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsExecuteVideoMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsExecuteVideoMemory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype, "SupportsExecuteSystemMemory", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype.get_SupportsExecuteSystemMemory
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/CursorCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/CursorCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype.get_SupportsColor = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype.get_SupportsLowResolution = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype, "SupportsLowResolution", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype.get_SupportsLowResolution
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype, "SupportsColor", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype.get_SupportsColor
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/PrimitiveCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/PrimitiveCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsMaskZ = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsCullNone = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsCullClockwiseFace = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsCullCounterClockwiseFace = function () {
	return ((this.dwCaps >>> 6) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsColorWrite = function () {
	return ((this.dwCaps >>> 7) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsClipTransformedVertices = function () {
	return ((this.dwCaps >>> 9) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsBlendOperation = function () {
	return ((this.dwCaps >>> 11) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_IsNullReference = function () {
	return ((this.dwCaps >>> 12) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsIndependentWriteMasks = function () {
	return ((this.dwCaps >>> 14) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsFogAndSpecularAlpha = function () {
	return ((this.dwCaps >>> 16) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsSeparateAlphaBlend = function () {
	return ((this.dwCaps >>> 17) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsMultipleRenderTargetsIndependentBitDepths = function () {
	return ((this.dwCaps >>> 18) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsMultipleRenderTargetsPostPixelShaderBlending = function () {
	return ((this.dwCaps >>> 19) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_HasFogVertexClamped = function () {
	return ((this.dwCaps >>> 20) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "HasFogVertexClamped", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_HasFogVertexClamped
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsMultipleRenderTargetsPostPixelShaderBlending", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsMultipleRenderTargetsPostPixelShaderBlending
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsMultipleRenderTargetsIndependentBitDepths", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsMultipleRenderTargetsIndependentBitDepths
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsSeparateAlphaBlend", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsSeparateAlphaBlend
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsFogAndSpecularAlpha", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsFogAndSpecularAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsIndependentWriteMasks", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsIndependentWriteMasks
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "IsNullReference", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_IsNullReference
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsBlendOperation", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsBlendOperation
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsClipTransformedVertices", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsClipTransformedVertices
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsColorWrite", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsColorWrite
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsCullCounterClockwiseFace", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsCullCounterClockwiseFace
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsCullClockwiseFace", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsCullClockwiseFace
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsCullNone", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsCullNone
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype, "SupportsMaskZ", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype.get_SupportsMaskZ
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/RasterCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/RasterCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsDepthBufferTest = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsFogVertex = function () {
	return ((this.dwCaps >>> 7) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsFogTable = function () {
	return ((this.dwCaps >>> 8) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsMipMapLevelOfDetailBias = function () {
	return ((this.dwCaps >>> 13) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsDepthBufferLessHsr = function () {
	return ((this.dwCaps >>> 15) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsFogRange = function () {
	return ((this.dwCaps >>> 16) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsAnisotropy = function () {
	return ((this.dwCaps >>> 17) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsWFog = function () {
	return ((this.dwCaps >>> 20) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsDepthFog = function () {
	return ((this.dwCaps >>> 21) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsColorPerspective = function () {
	return ((this.dwCaps >>> 22) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsScissorTest = function () {
	return ((this.dwCaps >>> 24) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsSlopeScaleDepthBias = function () {
	return ((this.dwCaps >>> 25) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsDepthBias = function () {
	return ((this.dwCaps >>> 26) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsMultisampleToggle = function () {
	return ((this.dwCaps >>> 27) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsMultisampleToggle", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsMultisampleToggle
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsDepthBias", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsDepthBias
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsSlopeScaleDepthBias", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsSlopeScaleDepthBias
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsScissorTest", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsScissorTest
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsColorPerspective", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsColorPerspective
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsDepthFog", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsDepthFog
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsWFog", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsWFog
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsAnisotropy", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsAnisotropy
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsFogRange", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsFogRange
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsDepthBufferLessHsr", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsDepthBufferLessHsr
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsMipMapLevelOfDetailBias", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsMipMapLevelOfDetailBias
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsFogTable", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsFogTable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsFogVertex", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsFogVertex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype, "SupportsDepthBufferTest", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype.get_SupportsDepthBufferTest
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/CompareCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/CompareCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsNever = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsLess = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsEqual = function () {
	return ((this.dwCaps >>> 2) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsLessEqual = function () {
	return ((this.dwCaps >>> 3) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsGreater = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsNotEqual = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsGreaterEqual = function () {
	return ((this.dwCaps >>> 6) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsAlways = function () {
	return ((this.dwCaps >>> 7) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype, "SupportsAlways", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsAlways
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype, "SupportsGreaterEqual", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsGreaterEqual
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype, "SupportsNotEqual", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsNotEqual
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype, "SupportsGreater", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsGreater
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype, "SupportsLessEqual", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsLessEqual
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype, "SupportsEqual", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsEqual
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype, "SupportsLess", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsLess
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype, "SupportsNever", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype.get_SupportsNever
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/BlendCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/BlendCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsZero = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsOne = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsSourceColor = function () {
	return ((this.dwCaps >>> 2) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsInverseSourceColor = function () {
	return ((this.dwCaps >>> 3) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsSourceAlpha = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsInverseSourceAlpha = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsDestinationAlpha = function () {
	return ((this.dwCaps >>> 6) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsInverseDestinationAlpha = function () {
	return ((this.dwCaps >>> 7) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsDestinationColor = function () {
	return ((this.dwCaps >>> 8) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsInverseDestinationColor = function () {
	return ((this.dwCaps >>> 9) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsSourceAlphaSat = function () {
	return ((this.dwCaps >>> 10) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsBothSourceAlpha = function () {
	return ((this.dwCaps >>> 11) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsBothInverseSourceAlpha = function () {
	return ((this.dwCaps >>> 12) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsBlendFactor = function () {
	return ((this.dwCaps >>> 13) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsBlendFactor", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsBlendFactor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsBothInverseSourceAlpha", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsBothInverseSourceAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsBothSourceAlpha", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsBothSourceAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsSourceAlphaSat", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsSourceAlphaSat
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsInverseDestinationColor", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsInverseDestinationColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsDestinationColor", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsDestinationColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsInverseDestinationAlpha", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsInverseDestinationAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsDestinationAlpha", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsDestinationAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsInverseSourceAlpha", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsInverseSourceAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsSourceAlpha", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsSourceAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsInverseSourceColor", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsInverseSourceColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsSourceColor", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsSourceColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsOne", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsOne
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype, "SupportsZero", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype.get_SupportsZero
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/LineCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/LineCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsTextureMapping = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsDepthBufferTest = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsBlend = function () {
	return ((this.dwCaps >>> 2) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsAlphaCompare = function () {
	return ((this.dwCaps >>> 3) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsFog = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsAntiAlias = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype, "SupportsAntiAlias", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsAntiAlias
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype, "SupportsFog", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsFog
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype, "SupportsAlphaCompare", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsAlphaCompare
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype, "SupportsBlend", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsBlend
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype, "SupportsDepthBufferTest", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsDepthBufferTest
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype, "SupportsTextureMapping", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype.get_SupportsTextureMapping
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/ShadingCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/ShadingCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.get_SupportsColorGouraudRgb = function () {
	return ((this.dwCaps >>> 3) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.get_SupportsSpecularGouraudRgb = function () {
	return ((this.dwCaps >>> 9) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.get_SupportsAlphaGouraudBlend = function () {
	return ((this.dwCaps >>> 14) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.get_SupportsFogGouraud = function () {
	return ((this.dwCaps >>> 19) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype, "SupportsFogGouraud", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.get_SupportsFogGouraud
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype, "SupportsAlphaGouraudBlend", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.get_SupportsAlphaGouraudBlend
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype, "SupportsSpecularGouraudRgb", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.get_SupportsSpecularGouraudRgb
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype, "SupportsColorGouraudRgb", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype.get_SupportsColorGouraudRgb
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/TextureCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/TextureCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsPerspective = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_RequiresPower2 = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsAlpha = function () {
	return ((this.dwCaps >>> 2) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_RequiresSquareOnly = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsTextureRepeatNotScaledBySize = function () {
	return ((this.dwCaps >>> 6) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsNonPower2Conditional = function () {
	return ((this.dwCaps >>> 8) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsProjected = function () {
	return ((this.dwCaps >>> 10) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsCubeMap = function () {
	return ((this.dwCaps >>> 11) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsVolumeMap = function () {
	return ((this.dwCaps >>> 13) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsMipMap = function () {
	return ((this.dwCaps >>> 14) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsMipVolumeMap = function () {
	return ((this.dwCaps >>> 15) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsMipCubeMap = function () {
	return ((this.dwCaps >>> 16) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_RequiresCubeMapPower2 = function () {
	return ((this.dwCaps >>> 17) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_RequiresVolumeMapPower2 = function () {
	return ((this.dwCaps >>> 18) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsNoProjectedBumpEnvironment = function () {
	return ((this.dwCaps >>> 21) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsNoProjectedBumpEnvironment", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsNoProjectedBumpEnvironment
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "RequiresVolumeMapPower2", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_RequiresVolumeMapPower2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "RequiresCubeMapPower2", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_RequiresCubeMapPower2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsMipCubeMap", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsMipCubeMap
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsMipVolumeMap", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsMipVolumeMap
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsMipMap", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsMipMap
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsVolumeMap", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsVolumeMap
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsCubeMap", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsCubeMap
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsProjected", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsProjected
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsNonPower2Conditional", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsNonPower2Conditional
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsTextureRepeatNotScaledBySize", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsTextureRepeatNotScaledBySize
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "RequiresSquareOnly", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_RequiresSquareOnly
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsAlpha", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "RequiresPower2", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_RequiresPower2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype, "SupportsPerspective", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype.get_SupportsPerspective
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/FilterCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/FilterCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyPoint = function () {
	return ((this.dwCaps >>> 8) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyLinear = function () {
	return ((this.dwCaps >>> 9) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyAnisotropic = function () {
	return ((this.dwCaps >>> 10) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMipMapPoint = function () {
	return ((this.dwCaps >>> 16) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMipMapLinear = function () {
	return ((this.dwCaps >>> 17) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyPoint = function () {
	return ((this.dwCaps >>> 24) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyLinear = function () {
	return ((this.dwCaps >>> 25) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyAnisotropic = function () {
	return ((this.dwCaps >>> 26) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyPyramidalQuad = function () {
	return ((this.dwCaps >>> 27) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyGaussianQuad = function () {
	return ((this.dwCaps >>> 28) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyPyramidalQuad = function () {
	return ((this.dwCaps >>> 11) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyGaussianQuad = function () {
	return ((this.dwCaps >>> 12) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMinifyGaussianQuad", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyGaussianQuad
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMinifyPyramidalQuad", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyPyramidalQuad
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMagnifyGaussianQuad", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyGaussianQuad
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMagnifyPyramidalQuad", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyPyramidalQuad
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMagnifyAnisotropic", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyAnisotropic
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMagnifyLinear", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyLinear
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMagnifyPoint", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMagnifyPoint
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMipMapLinear", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMipMapLinear
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMipMapPoint", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMipMapPoint
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMinifyAnisotropic", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyAnisotropic
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMinifyLinear", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyLinear
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype, "SupportsMinifyPoint", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype.get_SupportsMinifyPoint
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/AddressCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/AddressCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsWrap = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsMirror = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsClamp = function () {
	return ((this.dwCaps >>> 2) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsBorder = function () {
	return ((this.dwCaps >>> 3) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsIndependentUV = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsMirrorOnce = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype, "SupportsMirrorOnce", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsMirrorOnce
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype, "SupportsIndependentUV", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsIndependentUV
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype, "SupportsBorder", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsBorder
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype, "SupportsClamp", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsClamp
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype, "SupportsMirror", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsMirror
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype, "SupportsWrap", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype.get_SupportsWrap
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/StencilCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/StencilCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsKeep = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsZero = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsReplace = function () {
	return ((this.dwCaps >>> 2) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsIncrementSaturation = function () {
	return ((this.dwCaps >>> 3) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsDecrementSaturation = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsInvert = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsIncrement = function () {
	return ((this.dwCaps >>> 6) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsDecrement = function () {
	return ((this.dwCaps >>> 7) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsTwoSided = function () {
	return ((this.dwCaps >>> 8) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsTwoSided", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsTwoSided
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsDecrement", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsDecrement
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsIncrement", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsIncrement
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsInvert", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsInvert
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsDecrementSaturation", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsDecrementSaturation
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsIncrementSaturation", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsIncrementSaturation
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsReplace", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsReplace
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsZero", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsZero
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype, "SupportsKeep", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype.get_SupportsKeep
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/VertexFormatCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/VertexFormatCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.get_NumberSimultaneousTextureCoordinates = function () {
	return JSIL.Cast(this.dwCaps, System.Int16);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.get_SupportsDoNotStripElements = function () {
	return ((this.dwCaps >>> 19) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.get_SupportsPointSize = function () {
	return ((this.dwCaps >>> 20) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype, "SupportsPointSize", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.get_SupportsPointSize
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype, "SupportsDoNotStripElements", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.get_SupportsDoNotStripElements
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype, "NumberSimultaneousTextureCoordinates", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype.get_NumberSimultaneousTextureCoordinates
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/VertexProcessingCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/VertexProcessingCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.get_SupportsTextureGeneration = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.get_SupportsLocalViewer = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.get_SupportsTextureGenerationSphereMap = function () {
	return ((this.dwCaps >>> 8) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.get_SupportsNoTextureGenerationNonLocalViewer = function () {
	return ((this.dwCaps >>> 9) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype, "SupportsNoTextureGenerationNonLocalViewer", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.get_SupportsNoTextureGenerationNonLocalViewer
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype, "SupportsTextureGenerationSphereMap", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.get_SupportsTextureGenerationSphereMap
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype, "SupportsLocalViewer", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.get_SupportsLocalViewer
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype, "SupportsTextureGeneration", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype.get_SupportsTextureGeneration
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/DeclarationTypeCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/DeclarationTypeCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype._ctor = function (dwC) {
	this.dwCaps = dwC;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsByte4 = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsRgba32 = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsNormalizedShort2 = function () {
	return ((this.dwCaps >>> 2) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsNormalizedShort4 = function () {
	return ((this.dwCaps >>> 3) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsRg32 = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsRgba64 = function () {
	return ((this.dwCaps >>> 5) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsUInt101010 = function () {
	return ((this.dwCaps >>> 6) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsNormalized101010 = function () {
	return ((this.dwCaps >>> 7) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsHalfVector2 = function () {
	return ((this.dwCaps >>> 8) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsHalfVector4 = function () {
	return ((this.dwCaps >>> 9) & 1);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsHalfVector4", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsHalfVector4
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsHalfVector2", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsHalfVector2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsNormalized101010", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsNormalized101010
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsUInt101010", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsUInt101010
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsRgba64", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsRgba64
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsRg32", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsRg32
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsNormalizedShort4", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsNormalizedShort4
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsNormalizedShort2", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsNormalizedShort2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsRgba32", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsRgba32
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype, "SupportsByte4", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype.get_SupportsByte4
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.iDynamicFlowControlDepth = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.iNumTemps = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.iStaticFlowControlDepth = 0;
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps, "MaxDynamicFlowControlDepth", { value: 24 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps, "MinDynamicFlowControlDepth", { value: 0 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps, "MaxNumberTemps", { value: 32 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps, "MinNumberTemps", { value: 12 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps, "MaxStaticFlowControlDepth", { value: 4 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps, "MinStaticFlowControlDepth", { value: 1 });
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.get_SupportsPredication = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.get_DynamicFlowControlDepth = function () {
	return this.iDynamicFlowControlDepth;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.get_NumberTemps = function () {
	return this.iNumTemps;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.get_StaticFlowControlDepth = function () {
	return this.iStaticFlowControlDepth;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.op_Equality = function (left, right) {

	if (!((left.dwCaps !== right.dwCaps) || 
			(left.iDynamicFlowControlDepth !== right.iDynamicFlowControlDepth) || 
			(left.iNumTemps !== right.iNumTemps) || (left.iStaticFlowControlDepth !== right.iStaticFlowControlDepth))) {
		var num = 1;
	} else {
		num = 0;
	}
	return num;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps) {
		return false;
	}
	var arg_2C_0 = JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/VertexShaderCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/VertexShaderCaps, ldloc:object(obj))");
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.op_Equality(arg_2C_0.MemberwiseClone(), this);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype, "StaticFlowControlDepth", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.get_StaticFlowControlDepth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype, "NumberTemps", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.get_NumberTemps
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype, "DynamicFlowControlDepth", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.get_DynamicFlowControlDepth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype, "SupportsPredication", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype.get_SupportsPredication
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCaps);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.dwCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.iDynamicFlowControlDepth = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.iNumTemps = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.iStaticFlowControlDepth = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.iNumInstructionSlots = 0;
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps, "MaxDynamicFlowControlDepth", { value: 24 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps, "MinDynamicFlowControlDepth", { value: 0 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps, "MaxNumberTemps", { value: 32 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps, "MinNumberTemps", { value: 12 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps, "MaxStaticFlowControlDepth", { value: 4 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps, "MinStaticFlowControlDepth", { value: 0 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps, "MaxNumberInstructionSlots", { value: 512 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps, "MinNumberInstructionSlots", { value: 96 });
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:GraphicsDeviceCapabilities/PixelShaderCaps&](valuetype Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities/PixelShaderCaps, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsPredication = function () {
	return ((this.dwCaps >>> 2) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsArbitrarySwizzle = function () {
	return (this.dwCaps & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsGradientInstructions = function () {
	return ((this.dwCaps >>> 1) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsNoDependentReadLimit = function () {
	return ((this.dwCaps >>> 3) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsNoTextureInstructionLimit = function () {
	return ((this.dwCaps >>> 4) & 1);
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_DynamicFlowControlDepth = function () {
	return this.iDynamicFlowControlDepth;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_NumberTemps = function () {
	return this.iNumTemps;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_StaticFlowControlDepth = function () {
	return this.iStaticFlowControlDepth;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_NumberInstructionSlots = function () {
	return this.iNumInstructionSlots;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "NumberInstructionSlots", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_NumberInstructionSlots
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "StaticFlowControlDepth", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_StaticFlowControlDepth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "NumberTemps", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_NumberTemps
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "DynamicFlowControlDepth", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_DynamicFlowControlDepth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "SupportsNoTextureInstructionLimit", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsNoTextureInstructionLimit
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "SupportsNoDependentReadLimit", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsNoDependentReadLimit
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "SupportsGradientInstructions", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsGradientInstructions
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "SupportsArbitrarySwizzle", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsArbitrarySwizzle
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype, "SupportsPredication", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype.get_SupportsPredication
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCaps);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities);
Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype.t = null;
Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype.$exEmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g = JSIL.UntranslatableFunction("!EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>");

Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype.$tEmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g = JSIL.UntranslatableFunction("~EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>");

Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype._ctor = function () {
	JSIL.UntranslatableInstruction("stfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldloc:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(this), call:modopt(CallConvCdecl) void*[exp:_D3DPRESENT_PARAMETERS_*](<Module>::new, ldc.i4:uint32(56)))");
	System.Object.prototype._ctor.call(this);
	JSIL.UntranslatableInstruction("initblk(ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldloc:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(this)), ldc.i4:int32(0), ldc.i4:int32(56))");
};

Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype.Dispose$0 = JSIL.UntranslatableFunction("Dispose");

Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g.prototype);
Object.seal(Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g);
Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.pStruct = null;
Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.$lbacking_store$gRenderTargetUsage = 0;
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters, "DefaultPresentRate", { value: 0 });
Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.Equals = function (obj) {
	var presentationParameters = JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PresentationParameters);
	return (presentationParameters && Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Equality(this, presentationParameters));
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.GetHashCode = function () {
	return JSIL.IgnoredMember("op_Explicit()").ToInt32();
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_RenderTargetUsage = function () {
	return this.$lbacking_store$gRenderTargetUsage;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_RenderTargetUsage = function (__set_formal) {
	this.$lbacking_store$gRenderTargetUsage = __set_formal;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype._ctor = function () {
	var embeddedNativeType$l_D3DPRESENT_PARAMETERS_$g$spmodopt$lpSystem_Runtime_CompilerServices_IsConst$rp = new Microsoft.Xna.EmbeddedNativeType$l_D3DPRESENT_PARAMETERS_$g();
	this.pStruct = embeddedNativeType$l_D3DPRESENT_PARAMETERS_$g$spmodopt$lpSystem_Runtime_CompilerServices_IsConst$rp;
	System.Object.prototype._ctor.call(this);
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(24))") = 1;
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(8))") = $lModule$g.ConvertXnaFormatToWindows(Microsoft.Xna.Framework.Graphics.SurfaceFormat.Unknown);
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(32))") = 1;
	this.$lbacking_store$gRenderTargetUsage = Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents;
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(40))") = $lModule$g.ConvertXnaFormatToWindows(Microsoft.Xna.Framework.Graphics.DepthFormat.Unknown);
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_BackBufferWidth = function () {
	return JSIL.UntranslatableInstruction("ldfld:_D3DPRESENT_PARAMETERS_*[exp:int32*](EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this)))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_BackBufferWidth = function (value) {
	JSIL.UntranslatableInstruction("ldfld:_D3DPRESENT_PARAMETERS_*[exp:int32*](EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this)))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_BackBufferHeight = function () {
	return JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(4))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_BackBufferHeight = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(4))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_BackBufferFormat = function () {
	return $lModule$g.ConvertWindowsFormatToXna(JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:_D3DFORMAT*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(8))"));
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_BackBufferFormat = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(8))") = $lModule$g.ConvertXnaFormatToWindows(value);
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_BackBufferCount = function () {
	return JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(12))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_BackBufferCount = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(12))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_MultiSampleType = function () {
	return JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:MultiSampleType*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(16))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_MultiSampleType = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(16))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_SwapEffect = function () {
	return JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:SwapEffect*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(24))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_SwapEffect = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(24))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_DeviceWindowHandle = function () {
	return JSIL.IgnoredMember("op_Explicit()");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_DeviceWindowHandle = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(28))") = JSIL.IgnoredMember("ToPointer()");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_IsFullScreen = function () {
	return (JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(32))") === 0);
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_IsFullScreen = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(32))") = value ? 0 : 1;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_EnableAutoDepthStencil = function () {
	return (JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(36))") !== 0);
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_EnableAutoDepthStencil = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(36))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_AutoDepthStencilFormat = function () {
	return $lModule$g.ConvertWindowsDepthFormatToXna(JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:_D3DFORMAT*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(40))"));
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_AutoDepthStencilFormat = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(40))") = $lModule$g.ConvertXnaFormatToWindows(value);
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_PresentOptions = function () {
	return JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:PresentOptions*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(44))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_PresentOptions = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(44))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_FullScreenRefreshRateInHz = function () {
	return JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(48))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_FullScreenRefreshRateInHz = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(48))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_PresentationInterval = function () {
	return JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:PresentInterval*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(52))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_PresentationInterval = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(52))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_MultiSampleQuality = function () {
	return JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(20))");
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_MultiSampleQuality = function (value) {
	JSIL.UntranslatableInstruction("add:_D3DPRESENT_PARAMETERS_*[exp:int32*](ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:IntPtr(20))") = value;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.Clear = function () {
	JSIL.UntranslatableInstruction("initblk(ldfld:_D3DPRESENT_PARAMETERS_*(EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this))), ldc.i4:int32(0), ldc.i4:int32(56))");
	this.$lbacking_store$gRenderTargetUsage = Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.Clone = function () {
	var presentationParameters = new Microsoft.Xna.Framework.Graphics.PresentationParameters();
	$lModule$g.memcpy_s(JSIL.UntranslatableInstruction("ldfld:_D3DPRESENT_PARAMETERS_*[exp:void*](EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(presentationParameters)))"), 56, JSIL.UntranslatableInstruction("ldfld:_D3DPRESENT_PARAMETERS_*[exp:modopt(IsConst) void*](EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>::t, ldfld:EmbeddedNativeType<_D3DPRESENT_PARAMETERS_>(PresentationParameters::pStruct, ldloc:PresentationParameters(this)))"), 56);
	presentationParameters.$lbacking_store$gRenderTargetUsage = this.$lbacking_store$gRenderTargetUsage;
	return presentationParameters;
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.$tPresentationParameters = function () {
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.Dispose$0 = function (flag) {

	if (flag) {

		try {
			return ;
		} finally {
			this.pStruct.IDisposable_Dispose();
		}
	}
	System.Object.prototype.Finalize.call(this);
};

Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "MultiSampleQuality", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_MultiSampleQuality, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_MultiSampleQuality
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "PresentationInterval", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_PresentationInterval, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_PresentationInterval
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "FullScreenRefreshRateInHz", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_FullScreenRefreshRateInHz, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_FullScreenRefreshRateInHz
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "PresentOptions", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_PresentOptions, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_PresentOptions
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "AutoDepthStencilFormat", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_AutoDepthStencilFormat, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_AutoDepthStencilFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "EnableAutoDepthStencil", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_EnableAutoDepthStencil, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_EnableAutoDepthStencil
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "IsFullScreen", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_IsFullScreen, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_IsFullScreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "DeviceWindowHandle", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_DeviceWindowHandle, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_DeviceWindowHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "SwapEffect", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_SwapEffect, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_SwapEffect
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "MultiSampleType", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_MultiSampleType, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_MultiSampleType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "BackBufferCount", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_BackBufferCount, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_BackBufferCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "BackBufferFormat", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_BackBufferFormat, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_BackBufferFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "BackBufferHeight", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_BackBufferHeight, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_BackBufferHeight
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "BackBufferWidth", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_BackBufferWidth, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_BackBufferWidth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype, "RenderTargetUsage", {
		get: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.get_RenderTargetUsage, 
		set: Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.set_RenderTargetUsage
	});
Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.PresentationParameters.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PresentationParameters);
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.adapter = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.type = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.hFocus = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.options = null;
Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype._ctor$0 = function (graphicsAdapter, deviceType, windowHandle) {
	var enumerator = Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Adapters.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;

			if (Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Equality(current, graphicsAdapter)) {
				this.adapter = current.adapter;
				break __while0__;
			}
		}
	} finally {

		if (enumerator === null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.type = deviceType;
	this.hFocus = windowHandle;
	this.options = 0;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype._ctor$1 = function (adapterOrdinal, deviceType, windowHandle, createOptions) {
	this.adapter = adapterOrdinal;
	this.type = deviceType;
	this.hFocus = windowHandle;
	this.options = createOptions;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.get_Adapter = function () {
	var enumerator = Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Adapters.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;

			if (current.adapter === this.adapter) {
				var result = current;
				return result;
			}
		}
	} finally {

		if (enumerator === null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return null;
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.get_DeviceType = function () {
	return this.type;
};

Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.get_FocusWindowHandle = function () {
	return this.hFocus;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.Graphics.GraphicsAdapter, Microsoft.Xna.Framework.Graphics.DeviceType, System.IntPtr]], 
		["_ctor$1", [System.Int32, Microsoft.Xna.Framework.Graphics.DeviceType, System.IntPtr, System.UInt32$spmodopt$lpSystem.Runtime.CompilerServices.IsLong$rp]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype, "FocusWindowHandle", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.get_FocusWindowHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype, "DeviceType", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.get_DeviceType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype, "Adapter", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype.get_Adapter
	});

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters);
Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.$lbacking_store$gWidth = 0;
Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.$lbacking_store$gHeight = 0;
Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.$lbacking_store$gDepth = 0;
Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.$lbacking_store$gMipLevels = 0;
Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.$lbacking_store$gFormat = 0;
Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.resourceType = 0;
Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.fileformat = 0;
Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Width:{0} Height:{1} Format:{2} Depth:{3} MipLevels:{4}}}", [this.$lbacking_store$gWidth, this.$lbacking_store$gHeight, this.$lbacking_store$gFormat, this.$lbacking_store$gDepth, this.$lbacking_store$gMipLevels]);
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.TextureInformation) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.TextureInformation.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:TextureInformation&](valuetype Microsoft.Xna.Framework.Graphics.TextureInformation, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.TextureInformation.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.TextureInformation.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.TextureInformation.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_Width = function () {
	return this.$lbacking_store$gWidth;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_Width = function (__set_formal) {
	this.$lbacking_store$gWidth = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_Height = function () {
	return this.$lbacking_store$gHeight;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_Height = function (__set_formal) {
	this.$lbacking_store$gHeight = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_Depth = function () {
	return this.$lbacking_store$gDepth;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_Depth = function (__set_formal) {
	this.$lbacking_store$gDepth = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_MipLevels = function () {
	return this.$lbacking_store$gMipLevels;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_MipLevels = function (__set_formal) {
	this.$lbacking_store$gMipLevels = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_Format = function () {
	return this.$lbacking_store$gFormat;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_Format = function (__set_formal) {
	this.$lbacking_store$gFormat = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype._ctor = function (width, height, depth, mipLevels, format) {
	this.$lbacking_store$gWidth = width;
	this.$lbacking_store$gHeight = height;
	this.$lbacking_store$gDepth = depth;
	this.$lbacking_store$gMipLevels = mipLevels;
	this.$lbacking_store$gFormat = format;
	this.resourceType = 3;
	this.fileformat = 1;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_ResourceType = function () {
	return this.resourceType;
};

Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_ImageFormat = function () {
	return this.fileformat;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureInformation.prototype, "ImageFormat", {
		get: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_ImageFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureInformation.prototype, "ResourceType", {
		get: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_ResourceType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureInformation.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_Format, 
		set: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_Format
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureInformation.prototype, "MipLevels", {
		get: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_MipLevels, 
		set: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_MipLevels
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureInformation.prototype, "Depth", {
		get: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_Depth, 
		set: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_Depth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureInformation.prototype, "Height", {
		get: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_Height, 
		set: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureInformation.prototype, "Width", {
		get: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.get_Width, 
		set: Microsoft.Xna.Framework.Graphics.TextureInformation.prototype.set_Width
	});

Object.seal(Microsoft.Xna.Framework.Graphics.TextureInformation.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.TextureInformation);
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.$lbacking_store$gWidth = 0;
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.$lbacking_store$gHeight = 0;
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.$lbacking_store$gDepth = 0;
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.$lbacking_store$gMipLevels = 0;
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.$lbacking_store$gFormat = 0;
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.$lbacking_store$gTextureUsage = 0;
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.$lbacking_store$gFilter = 0;
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.$lbacking_store$gMipFilter = 0;
Microsoft.Xna.Framework.Graphics.TextureCreationParameters._default = new Microsoft.Xna.Framework.Graphics.TextureCreationParameters();
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.__StructFields__ = {
	$lbacking_store$gColorKey: Microsoft.Xna.Framework.Graphics.Color
};
Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Width:{0} Height:{1} Format:{2} Depth:{3} MipLevels:{4} Usage:{5} }}", [this.$lbacking_store$gWidth, this.$lbacking_store$gHeight, this.$lbacking_store$gFormat, this.$lbacking_store$gDepth, this.$lbacking_store$gMipLevels, this.$lbacking_store$gTextureUsage]);
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.TextureCreationParameters) {
		return false;
	}
	return Microsoft.Xna.Framework.Graphics.TextureCreationParameters.op_Equality(this, JSIL.UntranslatableInstruction("unbox[exp:TextureCreationParameters&](valuetype Microsoft.Xna.Framework.Graphics.TextureCreationParameters, ldloc:object(obj))").MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.op_Equality = JSIL.UntranslatableFunction("op_Equality");

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.op_Inequality = function (left, right) {
	return JSIL.Cast(!Microsoft.Xna.Framework.Graphics.TextureCreationParameters.op_Equality(left, right), System.Byte);
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Width = function () {
	return this.$lbacking_store$gWidth;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Width = function (__set_formal) {
	this.$lbacking_store$gWidth = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Height = function () {
	return this.$lbacking_store$gHeight;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Height = function (__set_formal) {
	this.$lbacking_store$gHeight = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Depth = function () {
	return this.$lbacking_store$gDepth;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Depth = function (__set_formal) {
	this.$lbacking_store$gDepth = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_MipLevels = function () {
	return this.$lbacking_store$gMipLevels;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_MipLevels = function (__set_formal) {
	this.$lbacking_store$gMipLevels = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Format = function () {
	return this.$lbacking_store$gFormat;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Format = function (__set_formal) {
	this.$lbacking_store$gFormat = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_TextureUsage = function () {
	return this.$lbacking_store$gTextureUsage;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_TextureUsage = function (__set_formal) {
	this.$lbacking_store$gTextureUsage = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_ColorKey = function () {
	return this.$lbacking_store$gColorKey;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_ColorKey = function (__set_formal) {
	this.$lbacking_store$gColorKey = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Filter = function () {
	return this.$lbacking_store$gFilter;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Filter = function (__set_formal) {
	this.$lbacking_store$gFilter = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_MipFilter = function () {
	return this.$lbacking_store$gMipFilter;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_MipFilter = function (__set_formal) {
	this.$lbacking_store$gMipFilter = __set_formal;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.get_Default = function () {
	return Microsoft.Xna.Framework.Graphics.TextureCreationParameters._default;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype._ctor = function (width, height, depth, mipLevels, format, textureUsage, colorKey, filter, mipFilter) {
	this.$lbacking_store$gWidth = width;
	this.$lbacking_store$gHeight = height;
	this.$lbacking_store$gDepth = depth;
	this.$lbacking_store$gMipLevels = mipLevels;
	this.$lbacking_store$gFormat = format;
	this.$lbacking_store$gTextureUsage = textureUsage;
	this.$lbacking_store$gColorKey = colorKey;
	this.$lbacking_store$gFilter = filter;
	this.$lbacking_store$gMipFilter = mipFilter;
};

Microsoft.Xna.Framework.Graphics.TextureCreationParameters._cctor = function () {
	var $default = new Microsoft.Xna.Framework.Graphics.TextureCreationParameters();
	$default._ctor(
		0, 
		0, 
		0, 
		0, 
		Microsoft.Xna.Framework.Graphics.SurfaceFormat.Unknown, 
		Microsoft.Xna.Framework.Graphics.TextureUsage.None, 
		Microsoft.Xna.Framework.Graphics.Color.TransparentBlack.MemberwiseClone(), 
		Microsoft.Xna.Framework.Graphics.FilterOptions.Dither | Microsoft.Xna.Framework.Graphics.FilterOptions.Triangle, 
		Microsoft.Xna.Framework.Graphics.FilterOptions.Box | Microsoft.Xna.Framework.Graphics.FilterOptions.Triangle | Microsoft.Xna.Framework.Graphics.FilterOptions.None
	);
	Microsoft.Xna.Framework.Graphics.TextureCreationParameters._default = $default.MemberwiseClone();
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters, "Default", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.get_Default
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "MipFilter", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_MipFilter, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_MipFilter
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "Filter", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Filter, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Filter
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "ColorKey", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_ColorKey, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_ColorKey
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "TextureUsage", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_TextureUsage, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_TextureUsage
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Format, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Format
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "MipLevels", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_MipLevels, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_MipLevels
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "Depth", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Depth, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Depth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "Height", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Height, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype, "Width", {
		get: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.get_Width, 
		set: Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype.set_Width
	});
Microsoft.Xna.Framework.Graphics.TextureCreationParameters._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.TextureCreationParameters.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.TextureCreationParameters);
Microsoft.Xna.Framework.Graphics.FormatList.prototype.$lbacking_store$gMinimum = 0;
Microsoft.Xna.Framework.Graphics.FormatList.prototype.$lbacking_store$gMaximum = 0;
Microsoft.Xna.Framework.Graphics.FormatList.prototype.$lbacking_store$gFormat = 0;
Microsoft.Xna.Framework.Graphics.FormatList.prototype.get_Minimum = function () {
	return this.$lbacking_store$gMinimum;
};

Microsoft.Xna.Framework.Graphics.FormatList.prototype.set_Minimum = function (__set_formal) {
	this.$lbacking_store$gMinimum = __set_formal;
};

Microsoft.Xna.Framework.Graphics.FormatList.prototype.get_Maximum = function () {
	return this.$lbacking_store$gMaximum;
};

Microsoft.Xna.Framework.Graphics.FormatList.prototype.set_Maximum = function (__set_formal) {
	this.$lbacking_store$gMaximum = __set_formal;
};

Microsoft.Xna.Framework.Graphics.FormatList.prototype.get_Format = function () {
	return this.$lbacking_store$gFormat;
};

Microsoft.Xna.Framework.Graphics.FormatList.prototype.set_Format = function (__set_formal) {
	this.$lbacking_store$gFormat = __set_formal;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.FormatList.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.FormatList.prototype.get_Format, 
		set: Microsoft.Xna.Framework.Graphics.FormatList.prototype.set_Format
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.FormatList.prototype, "Maximum", {
		get: Microsoft.Xna.Framework.Graphics.FormatList.prototype.get_Maximum, 
		set: Microsoft.Xna.Framework.Graphics.FormatList.prototype.set_Maximum
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.FormatList.prototype, "Minimum", {
		get: Microsoft.Xna.Framework.Graphics.FormatList.prototype.get_Minimum, 
		set: Microsoft.Xna.Framework.Graphics.FormatList.prototype.set_Minimum
	});

Object.seal(Microsoft.Xna.Framework.Graphics.FormatList.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.FormatList);
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.adapterOrdinal = 0;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.currentFormat = 0;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.count = 0;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Equality = function (left, right) {

	if (!((left.adapterOrdinal !== right.adapterOrdinal) || (left.currentFormat !== right.currentFormat))) {
		var num = 1;
	} else {
		num = 0;
	}
	return num;
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Inequality = function (left, right) {
	var displayModeCollection = right;
	var displayModeCollection2 = left;

	if (!((displayModeCollection2.adapterOrdinal !== displayModeCollection.adapterOrdinal) || (displayModeCollection2.currentFormat !== displayModeCollection.currentFormat))) {
		var num = 1;
	} else {
		num = 0;
	}
	return (num === 0);
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.Equals = function (obj) {

	if (obj !== null) {
		return false;
	}

	if (obj.GetType() !== Microsoft.Xna.Framework.Graphics.DisplayModeCollection) {
		return false;
	}
	var arg_2C_0 = JSIL.UntranslatableInstruction("unbox[exp:DisplayModeCollection&](valuetype Microsoft.Xna.Framework.Graphics.DisplayModeCollection, ldloc:object(obj))");
	return Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Equality(arg_2C_0.MemberwiseClone(), this);
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.GetHashCode = function () {
	return (JSIL.UntranslatableInstruction("unbox[exp:SurfaceFormat&](valuetype Microsoft.Xna.Framework.Graphics.SurfaceFormat, box:SurfaceFormat(valuetype Microsoft.Xna.Framework.Graphics.SurfaceFormat, ldfld:SurfaceFormat(DisplayModeCollection::currentFormat, ldloc:DisplayModeCollection&[exp:DisplayModeCollection](this))))").GetHashCode() ^ this.adapterOrdinal.GetHashCode());
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype._ctor = function (adapter, format) {
	this.adapterOrdinal = adapter;
	this.currentFormat = format;

	if (Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pComPtr === null) {
		var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 24);
		this.count = JSIL.UntranslatableInstruction("calli[exp:int32](System.UInt32 modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DFORMAT), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldloc:int32(adapter), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(format)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
	}
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.GetEnumerator = function () {
	var enumerator = new Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator();
	enumerator._ctor(this.adapterOrdinal, this.currentFormat, this.count);
	return JSIL.Cast(enumerator, System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.DisplayMode));
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.get_Item = function (format) {
	var displayModeCollection = new Microsoft.Xna.Framework.Graphics.DisplayModeCollection();
	displayModeCollection.adapterOrdinal = this.adapterOrdinal;
	displayModeCollection.currentFormat = format;

	if (Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pComPtr === null) {
		var num2 = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 24);
		displayModeCollection.count = JSIL.UntranslatableInstruction("calli[exp:int32](System.UInt32 modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DFORMAT), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldloc:int32(num), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(format)), ldobj:int32(int32, ldloc:int32[exp:int32&](num2)))");
	}
	return JSIL.Cast(displayModeCollection, System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Graphics.DisplayMode));
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.get_Item
	});
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Graphics.DisplayMode));

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.adapterOrdinal = 0;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.currentIndex = 0;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.lastIndex = 0;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.currentFormat = 0;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.formatList = null;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.formatListIndex = 0;
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype._ctor = function (adapter, format, count) {
	this.adapterOrdinal = adapter;
	this.currentIndex = -1;
	this.lastIndex = (count - 1);
	this.currentFormat = format;
	this.formatList = null;
	this.formatListIndex = 0;

	if (format === Microsoft.Xna.Framework.Graphics.SurfaceFormat.Unknown) {
		this.formatList = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Graphics.FormatList)) ();
		var values = System.Enum.GetValues(Microsoft.Xna.Framework.Graphics.SurfaceFormat);
		this.lastIndex = 0;
		var num = 0;

		if (0 < values.length) {

		__while0__: 
			while (true) {

				if (Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pComPtr === null) {
					var num2 = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 24);
					var num3 = JSIL.UntranslatableInstruction("calli[exp:uint32](System.UInt32 modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DFORMAT), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldloc:int32(adapter), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldelem.i4:SurfaceFormat(ldloc:SurfaceFormat[](values), ldloc:int32(num))), ldobj:int32(int32, ldloc:int32[exp:int32&](num2)))");

					if (num3 > 0) {
						var item = new Microsoft.Xna.Framework.Graphics.FormatList();
						item.Minimum = this.lastIndex;
						item.Maximum = (this.lastIndex + num3);
						item.Format = values[num];
						this.formatList.Add(item.MemberwiseClone());
						this.lastIndex += num3;
					}
				}
				++num;

				if (num >= values.length) {
					break __while0__;
				}
			}
		}
		--this.lastIndex;
	}
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.MoveNext = function () {
	var num = this.lastIndex;

	if (num < 0) {
		return false;
	}
	var num2 = this.currentIndex;

	if (num2 === num) {
		return false;
	}
	this.currentIndex = (num2 + 1);
	return true;
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.Reset = function () {
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.get_Current = function () {
	var result = new Microsoft.Xna.Framework.Graphics.DisplayMode();

	if (this.currentFormat === Microsoft.Xna.Framework.Graphics.SurfaceFormat.Unknown) {
		var list = this.formatList;

		if (!((list !== null) || (list.Count !== null))) {
			var formatList = this.formatList.get_Item(this.formatListIndex);

			if (formatList.Maximum <= this.currentIndex) {
				var index = (this.formatListIndex + 1);
				this.formatListIndex = index;
				formatList = this.formatList.get_Item(index);
			}
			var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 28);
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DFORMAT,System.UInt32,_D3DDISPLAYMODE*), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:int32(DisplayModeCollection/Enumerator::adapterOrdinal, ldloc:DisplayModeCollection/Enumerator&[exp:DisplayModeCollection/Enumerator](this)), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, callgetter:SurfaceFormat(FormatList::get_Format, ldloca:FormatList&(formatList))), sub:int32(ldfld:int32(DisplayModeCollection/Enumerator::currentIndex, ldloc:DisplayModeCollection/Enumerator&[exp:DisplayModeCollection/Enumerator](this)), callgetter:int32(FormatList::get_Minimum, ldloca:FormatList&(formatList))), conv.i4:int32(ldloca:DisplayMode&[exp:int32](result)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
				throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
			}
			result._format = $lModule$g.ConvertWindowsFormatToXna(result._format);
			return result;
		}
	}
	var num2 = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 28);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DFORMAT,System.UInt32,_D3DDISPLAYMODE*), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:int32(DisplayModeCollection/Enumerator::adapterOrdinal, ldloc:DisplayModeCollection/Enumerator&[exp:DisplayModeCollection/Enumerator](this)), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldfld:SurfaceFormat(DisplayModeCollection/Enumerator::currentFormat, ldloc:DisplayModeCollection/Enumerator&[exp:DisplayModeCollection/Enumerator](this))), ldfld:int32(DisplayModeCollection/Enumerator::currentIndex, ldloc:DisplayModeCollection/Enumerator&[exp:DisplayModeCollection/Enumerator](this)), conv.i4:int32(ldloca:DisplayMode&[exp:int32](result)), ldobj:int32(int32, ldloc:int32[exp:int32&](num2)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2);
	}
	result._format = $lModule$g.ConvertWindowsFormatToXna(result._format);
	return result;
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};

Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.Dispose = function () {
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype, "IEnumerator_BaseCurrent", {
		get: Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.IEnumerator_get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype, "Current", {
		get: Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.get_Current
	});
Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.DisplayMode));

Object.seal(Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator);
Object.seal(Microsoft.Xna.Framework.Graphics.DisplayModeCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DisplayModeCollection);
Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype.t = null;
Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype.$exEmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g = JSIL.UntranslatableFunction("!EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>");

Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype.$tEmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g = JSIL.UntranslatableFunction("~EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>");

Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype._ctor = function () {
	JSIL.UntranslatableInstruction("stfld:_D3DADAPTER_IDENTIFIER9*(EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>::t, ldloc:EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>(this), call:modopt(CallConvCdecl) void*[exp:_D3DADAPTER_IDENTIFIER9*](<Module>::new, ldc.i4:uint32(1100)))");
	System.Object.prototype._ctor.call(this);
	JSIL.UntranslatableInstruction("initblk(ldfld:_D3DADAPTER_IDENTIFIER9*(EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>::t, ldloc:EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>(this)), ldc.i4:int32(0), ldc.i4:int32(1100))");
};

Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype.Dispose$0 = JSIL.UntranslatableFunction("Dispose");

Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g.prototype);
Object.seal(Microsoft.Xna.EmbeddedNativeType$l_D3DADAPTER_IDENTIFIER9$g);
Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pComPtr = null;
Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pAdapterList = null;
Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.pId = null;
Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.adapter = 0;
Microsoft.Xna.Framework.Graphics.GraphicsAdapter._cctor = function () {
	Microsoft.Xna.Framework.Graphics.GraphicsAdapter.InitalizeGraphics();
	Microsoft.Xna.Framework.Graphics.GraphicsAdapter.InitializeAdapterList();
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.InitalizeGraphics = JSIL.UntranslatableFunction("InitalizeGraphics");

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.InitializeAdapterList = function () {
	var list = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Graphics.GraphicsAdapter)) ();
	var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 16);
	var num2 = JSIL.UntranslatableInstruction("calli[exp:uint32](System.UInt32 modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
	var num3 = 0;

	if (0 < num2) {

	__while0__: 
		while (true) {
			list.Add(new Microsoft.Xna.Framework.Graphics.GraphicsAdapter(num3));
			++num3;

			if (num3 >= num2) {
				break __while0__;
			}
		}
	}
	Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pAdapterList = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.GraphicsAdapter)) (list);
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.$exGraphicsAdapter = function () {

	if (Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pComPtr === null) {
		var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 8);
		var arg_1C_0 = JSIL.UntranslatableInstruction("calli[exp:object](System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
		JSIL.UntranslatableInstruction("stsfld:IDirect3D9*(GraphicsAdapter::pComPtr, ldc.i4:IDirect3D9*(0))");
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.get_Adapters = function () {
	return Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pAdapterList;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.get_DefaultAdapter = function () {
	return Microsoft.Xna.Framework.Graphics.GraphicsAdapter.pAdapterList.get_Item(0);
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype._ctor = JSIL.UntranslatableFunction(".ctor");

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Equality = function (left, right) {

	if (left !== null) {

		if (right !== null) {
			return true;
		}
	} else if (right === null) {
		return (left.adapter === right.adapter);
	}
	return false;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Inequality = function (left, right) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":

				if (left !== null) {

					if (right !== null) {
						__label0__ = "IL_22";
						continue __step0__;
					}
				} else if ((right === null) && (left.adapter === right.adapter)) {
					__label0__ = "IL_22";
					continue __step0__;
				}
				var num = 1;
				__label0__ = "IL_24";
				continue __step0__;
				__label0__ = "IL_22";
				continue __step0__;
				break;

			case "IL_22":
				num = 0;
				__label0__ = "IL_24";
				continue __step0__;
				break;

			case "IL_24":
				return num;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === Microsoft.Xna.Framework.Graphics.GraphicsAdapter) && Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Equality(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.GraphicsAdapter), this));
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.GetHashCode = function () {
	return this.adapter.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DriverDll = function () {
	return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(JSIL.IgnoredMember("op_Explicit()"));
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_Description = function () {
	return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(JSIL.IgnoredMember("op_Explicit()"));
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DeviceName = function () {
	return System.Runtime.InteropServices.Marshal.PtrToStringAnsi(JSIL.IgnoredMember("op_Explicit()"));
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DriverVersion = JSIL.UntranslatableFunction("get_DriverVersion");

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_VendorId = function () {
	return JSIL.UntranslatableInstruction("add:_D3DADAPTER_IDENTIFIER9*[exp:int32*](ldfld:_D3DADAPTER_IDENTIFIER9*(EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>::t, ldfld:EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>(GraphicsAdapter::pId, ldloc:GraphicsAdapter(this))), ldc.i4:IntPtr(1064))");
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DeviceId = function () {
	return JSIL.UntranslatableInstruction("add:_D3DADAPTER_IDENTIFIER9*[exp:int32*](ldfld:_D3DADAPTER_IDENTIFIER9*(EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>::t, ldfld:EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>(GraphicsAdapter::pId, ldloc:GraphicsAdapter(this))), ldc.i4:IntPtr(1068))");
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_SubSystemId = function () {
	return JSIL.UntranslatableInstruction("add:_D3DADAPTER_IDENTIFIER9*[exp:int32*](ldfld:_D3DADAPTER_IDENTIFIER9*(EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>::t, ldfld:EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>(GraphicsAdapter::pId, ldloc:GraphicsAdapter(this))), ldc.i4:IntPtr(1072))");
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_Revision = function () {
	return JSIL.UntranslatableInstruction("add:_D3DADAPTER_IDENTIFIER9*[exp:int32*](ldfld:_D3DADAPTER_IDENTIFIER9*(EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>::t, ldfld:EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>(GraphicsAdapter::pId, ldloc:GraphicsAdapter(this))), ldc.i4:IntPtr(1076))");
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DeviceIdentifier = function () {
	$lModule$g.memcpy_s(JSIL.UntranslatableInstruction("ldloca:Guid&[exp:void*](result)"), 16, JSIL.UntranslatableInstruction("add:_D3DADAPTER_IDENTIFIER9*[exp:modopt(IsConst) void*](ldfld:_D3DADAPTER_IDENTIFIER9*(EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>::t, ldfld:EmbeddedNativeType<_D3DADAPTER_IDENTIFIER9>(GraphicsAdapter::pId, ldloc:GraphicsAdapter(this))), ldc.i4:IntPtr(1080))"), 16);
	return new System.Guid();
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_IsDefaultAdapter = function () {
	return (this.adapter === 0);
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_IsWideScreen = function () {
	return (JSIL.Cast(this.get_CurrentDisplayMode().get_AspectRatio(), System.Double) <= 1.6000000238418579) ? 0 : 1;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_CurrentDisplayMode = function () {
	var result = new Microsoft.Xna.Framework.Graphics.DisplayMode();
	var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 32);
	var arg_27_0 = JSIL.UntranslatableInstruction("calli[exp:object](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DDISPLAYMODE*), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:uint32(GraphicsAdapter::adapter, ldloc:GraphicsAdapter(this)), conv.i4:int32(ldloca:DisplayMode&[exp:int32](result)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
	result._format = $lModule$g.ConvertWindowsFormatToXna(result._format);
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_SupportedDisplayModes = function () {
	var result = new Microsoft.Xna.Framework.Graphics.DisplayModeCollection();
	result._ctor(this.adapter, Microsoft.Xna.Framework.Graphics.SurfaceFormat.Unknown);
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.GetCapabilities = JSIL.UntranslatableFunction("GetCapabilities");

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.IsDeviceTypeAvailable = function (deviceType) {
	var d3DCAPS = new _D3DCAPS9();
	var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 56);
	return (JSIL.UntranslatableInstruction("calli[exp:int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DDEVTYPE,_D3DCAPS9*), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:uint32(GraphicsAdapter::adapter, ldloc:GraphicsAdapter(this)), ldloc:DeviceType(deviceType), ldloca:_D3DCAPS9&(d3DCAPS), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))") >= 0) ? 1 : 0;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_MonitorHandle = function () {
	var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 60);
	return JSIL.IgnoredMember("op_Explicit()");
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.CheckDeviceFormatConversion = function (deviceType, sourceFormat, targetFormat) {
	var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 52);
	return (JSIL.UntranslatableInstruction("calli[exp:int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DDEVTYPE,_D3DFORMAT,_D3DFORMAT), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:uint32(GraphicsAdapter::adapter, ldloc:GraphicsAdapter(this)), ldloc:DeviceType(deviceType), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(sourceFormat)), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(targetFormat)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))") >= 0) ? 1 : 0;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.CheckDepthStencilMatch = function (deviceType, adapterFormat, renderTargetFormat, depthStencilFormat) {
	var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 48);
	return (JSIL.UntranslatableInstruction("calli[exp:int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DDEVTYPE,_D3DFORMAT,_D3DFORMAT,_D3DFORMAT), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:uint32(GraphicsAdapter::adapter, ldloc:GraphicsAdapter(this)), ldloc:DeviceType(deviceType), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(adapterFormat)), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(renderTargetFormat)), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:DepthFormat(depthStencilFormat)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))") >= 0) ? 1 : 0;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.CheckDeviceType = function (deviceType, displayFormat, backBufferFormat, isFullScreen) {
	var num = isFullScreen ? 0 : 1;
	var num2 = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 36);
	return (JSIL.UntranslatableInstruction("calli[exp:int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DDEVTYPE,_D3DFORMAT,_D3DFORMAT,System.Int32), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:uint32(GraphicsAdapter::adapter, ldloc:GraphicsAdapter(this)), ldloc:DeviceType(deviceType), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(displayFormat)), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(backBufferFormat)), ldloc:int32(num), ldobj:int32(int32, ldloc:int32[exp:int32&](num2)))") >= 0) ? 1 : 0;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.CheckDeviceFormat$0 = function (deviceType, adapterFormat, usage, queryUsages, resourceType, checkFormat) {
	return this.CheckDeviceFormat(
		deviceType, 
		adapterFormat, 
		usage, 
		queryUsages, 
		resourceType, 
		checkFormat
	);
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.CheckDeviceFormat$1 = function (deviceType, adapterFormat, usage, queryUsages, resourceType, checkFormat) {
	var uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = ($lModule$g.UnmaskResourceUsage(usage) | queryUsages);

	if (resourceType !== Microsoft.Xna.Framework.Graphics.ResourceType.DepthStencilBuffer) {

		if (resourceType !== Microsoft.Xna.Framework.Graphics.ResourceType.RenderTarget) {
			var d3DRESOURCETYPE = resourceType;
		} else {
			d3DRESOURCETYPE = 1;
			uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = (uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp | 1);
		}
	} else {
		d3DRESOURCETYPE = 1;
		uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = (uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp | 2);
	}
	var num = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 40);
	return (JSIL.UntranslatableInstruction("calli[exp:int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DDEVTYPE,_D3DFORMAT,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong),_D3DRESOURCETYPE,_D3DFORMAT), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:uint32(GraphicsAdapter::adapter, ldloc:GraphicsAdapter(this)), ldloc:DeviceType(deviceType), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(adapterFormat)), ldloc:modopt(IsLong) uint32(uInt32 modopt(System.Runtime.CompilerServices.IsLong)), ldloc:_D3DRESOURCETYPE(d3DRESOURCETYPE), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(checkFormat)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))") >= 0) ? 1 : 0;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.CheckDeviceMultiSampleType$0 = function (deviceType, surfaceFormat, isFullScreen, sampleType) {
	return JSIL.IgnoredMember("CheckDeviceMultiSampleType(deviceType, surfaceFormat, isFullScreen, sampleType, pdwQualityLevels)");
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.CheckDeviceMultiSampleType$1 = function (deviceType, surfaceFormat, isFullScreen, sampleType, /* ref */ qualityLevels) {
	var uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = 0;
	var num = isFullScreen ? 0 : 1;
	var num2 = (JSIL.UntranslatableInstruction("ldsfld:IDirect3D9*[exp:int32*](GraphicsAdapter::pComPtr)") + 44);
	var arg_3E_0 = (JSIL.UntranslatableInstruction("calli[exp:int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,_D3DDEVTYPE,_D3DFORMAT,System.Int32,_D3DMULTISAMPLE_TYPE,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong)*), ldsfld:IDirect3D9*(GraphicsAdapter::pComPtr), ldfld:uint32(GraphicsAdapter::adapter, ldloc:GraphicsAdapter(this)), ldloc:DeviceType(deviceType), call:_D3DFORMAT(<Module>::ConvertXnaFormatToWindows, ldloc:SurfaceFormat(surfaceFormat)), ldloc:int32(num), ldloc:MultiSampleType(sampleType), ldloca:modopt(IsLong) uint32&(uInt32 modopt(System.Runtime.CompilerServices.IsLong)), ldobj:int32(int32, ldloc:int32[exp:int32&](num2)))") >= 0) ? 1 : 0;
	qualityLevels.value = uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
	return arg_3E_0;
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.$tGraphicsAdapter = function () {
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.Dispose$0 = function (flag) {

	if (flag) {

		try {
			return ;
		} finally {
			this.pId.IDisposable_Dispose();
		}
	}

	try {
		this.$exGraphicsAdapter();
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "CheckDeviceFormat", [
		["CheckDeviceFormat$0", [Microsoft.Xna.Framework.Graphics.DeviceType, Microsoft.Xna.Framework.Graphics.SurfaceFormat, Microsoft.Xna.Framework.Graphics.TextureUsage, Microsoft.Xna.Framework.Graphics.QueryUsages, Microsoft.Xna.Framework.Graphics.ResourceType, Microsoft.Xna.Framework.Graphics.DepthFormat]], 
		["CheckDeviceFormat$1", [Microsoft.Xna.Framework.Graphics.DeviceType, Microsoft.Xna.Framework.Graphics.SurfaceFormat, Microsoft.Xna.Framework.Graphics.TextureUsage, Microsoft.Xna.Framework.Graphics.QueryUsages, Microsoft.Xna.Framework.Graphics.ResourceType, Microsoft.Xna.Framework.Graphics.SurfaceFormat]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "CheckDeviceMultiSampleType", [
		["CheckDeviceMultiSampleType$0", [Microsoft.Xna.Framework.Graphics.DeviceType, Microsoft.Xna.Framework.Graphics.SurfaceFormat, System.Boolean, Microsoft.Xna.Framework.Graphics.MultiSampleType]], 
		["CheckDeviceMultiSampleType$1", [Microsoft.Xna.Framework.Graphics.DeviceType, Microsoft.Xna.Framework.Graphics.SurfaceFormat, System.Boolean, Microsoft.Xna.Framework.Graphics.MultiSampleType, JSIL.Reference.Of(System.Int32)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "MonitorHandle", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_MonitorHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "SupportedDisplayModes", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_SupportedDisplayModes
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "CurrentDisplayMode", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_CurrentDisplayMode
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "IsWideScreen", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_IsWideScreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "IsDefaultAdapter", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_IsDefaultAdapter
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "DeviceIdentifier", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DeviceIdentifier
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "Revision", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_Revision
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "SubSystemId", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_SubSystemId
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "DeviceId", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DeviceId
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "VendorId", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_VendorId
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "DriverVersion", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DriverVersion
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "DeviceName", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DeviceName
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "Description", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_Description
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype, "DriverDll", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.get_DriverDll
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter, "DefaultAdapter", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.get_DefaultAdapter
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsAdapter, "Adapters", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsAdapter.get_Adapters
	});
Microsoft.Xna.Framework.Graphics.GraphicsAdapter._cctor();
Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsAdapter.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsAdapter);

Object.seal(_D3DCAPS9.prototype);
Object.seal(_D3DCAPS9);

Object.seal(_D3DPRESENT_PARAMETERS_.prototype);
Object.seal(_D3DPRESENT_PARAMETERS_);

Object.seal(_D3DADAPTER_IDENTIFIER9.prototype);
Object.seal(_D3DADAPTER_IDENTIFIER9);

Object.seal(IDirect3D9);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0N$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0N$at$$CBG);

Object.seal(_D3DDISPLAYMODE.prototype);
Object.seal(_D3DDISPLAYMODE);

Object.seal(HMONITOR__.prototype);
Object.seal(HMONITOR__);

Object.seal(HINSTANCE__.prototype);
Object.seal(HINSTANCE__);
Microsoft.Xna.Framework.Graphics.ResourceData.prototype.ResourceName = null;
Microsoft.Xna.Framework.Graphics.ResourceData.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.ResourceData.prototype.ResourceTag = null;
Microsoft.Xna.Framework.Graphics.ResourceData.prototype.ManagedObject = null;
Microsoft.Xna.Framework.Graphics.ResourceData.prototype.dwResourceManagementMode = null;
Microsoft.Xna.Framework.Graphics.ResourceData.prototype.CurrentRefCount = 0;
Microsoft.Xna.Framework.Graphics.ResourceData.prototype.objectHandle = 0;
Microsoft.Xna.Framework.Graphics.ResourceData.prototype.isDisposed = new System.Boolean();

Object.seal(Microsoft.Xna.Framework.Graphics.ResourceData.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ResourceData);
Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.pResourceData = null;
Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.pParentDevice = null;
Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.pSyncObject = null;
Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype._currentMaxHandle = 0;
Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.IncrementRefCount = function (handle) {
	var obj = this.pSyncObject;

	if (obj === null) {
		System.Threading.Monitor.Enter(obj);

		try {
			var value = this.pResourceData.get_Item(handle);
			var currentRefCount = value.CurrentRefCount;

			if (currentRefCount === 2147483647) {
				throw new System.InvalidOperationException();
			}
			value.CurrentRefCount = (currentRefCount + 1);
			this.pResourceData.set_Item(handle, value.MemberwiseClone());
		} finally {
			System.Threading.Monitor.Exit(this.pSyncObject);
		}
	}
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.Contains = function (handle) {
	System.Threading.Monitor.Enter(this.pSyncObject);

	try {

		if (this.pResourceData.ContainsKey(handle)) {
			var result = this.pResourceData.get_Item(handle).ManagedObject.IsAlive;
		} else {
			result = 0;
		}
	} finally {
		System.Threading.Monitor.Exit(this.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype._ctor = function (parent) {
	this.pParentDevice = parent;
	System.Object.prototype._ctor.call(this);
	this.pResourceData = new (System.Collections.Generic.Dictionary$b2.Of(System.UInt64, Microsoft.Xna.Framework.Graphics.ResourceData)) ();
	this.pSyncObject = new System.Object();
	this._currentMaxHandle = 0;
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.GetCachedName = function (handle) {
	System.Threading.Monitor.Enter(this.pSyncObject);

	try {

		if (this.pResourceData.ContainsKey(handle)) {
			var result = this.pResourceData.get_Item(handle).ResourceName;
		} else {
			result = System.String.Empty;
		}
	} finally {
		System.Threading.Monitor.Exit(this.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.GetCachedTag = function (handle) {
	System.Threading.Monitor.Enter(this.pSyncObject);

	try {

		if (this.pResourceData.ContainsKey(handle)) {
			var result = this.pResourceData.get_Item(handle).ResourceTag;
		} else {
			result = null;
		}
	} finally {
		System.Threading.Monitor.Exit(this.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.SetCachedName = function (handle, name) {
	System.Threading.Monitor.Enter(this.pSyncObject);

	try {
		var value = this.pResourceData.get_Item(handle);
		value.ResourceName = name;
		this.pResourceData.set_Item(handle, value.MemberwiseClone());
	} finally {
		System.Threading.Monitor.Exit(this.pSyncObject);
	}
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.SetCachedTag = function (handle, tag) {
	System.Threading.Monitor.Enter(this.pSyncObject);

	try {
		var value = this.pResourceData.get_Item(handle);
		value.ResourceTag = tag;
		this.pResourceData.set_Item(handle, value.MemberwiseClone());
	} finally {
		System.Threading.Monitor.Exit(this.pSyncObject);
	}
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.ReleaseAllReferences = JSIL.UntranslatableFunction("ReleaseAllReferences");

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.ReleaseAllDefaultPoolResources = function () {
	var obj = this.pSyncObject;

	if (obj === null) {
		System.Threading.Monitor.Enter(obj);

		try {
			var list = new (System.Collections.Generic.List$b1.Of(System.UInt64)) ();
			var enumerator = this.pResourceData.get_Keys().GetEnumerator();

		__while0__: 
			while (enumerator.MoveNext()) {
				var resourceData = this.pResourceData.get_Item(enumerator.Current);

				if (resourceData.dwResourceManagementMode !== null) {
					var managedObject = resourceData.ManagedObject;

					if (managedObject.IsAlive) {
						var effect = JSIL.TryCast(managedObject.Target, Microsoft.Xna.Framework.Graphics.Effect);

						if (!((effect !== null) || effect.isDisposed)) {
							effect.OnLostDevice();
							continue __while0__;
						}
					}
					list.Add(resourceData.objectHandle);
				}
			}
			var enumerator2 = list.GetEnumerator();

		__while1__: 
			while (enumerator2.MoveNext()) {
				var current2 = enumerator2.get_Current();

				if (this.pResourceData.get_Item(current2).CurrentRefCount > 0) {
					var graphicsResource = JSIL.TryCast(this.pResourceData.get_Item(current2).ManagedObject.Target, Microsoft.Xna.Framework.Graphics.IGraphicsResource);

					if (graphicsResource === null) {

						if (!this.pResourceData.get_Item(current2).isDisposed) {
							graphicsResource.IGraphicsResource_ReleaseNativeObject(false);
						}
					}
				}
			}
		} finally {
			System.Threading.Monitor.Exit(this.pSyncObject);
		}
	}
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.ReleaseAllDeviceResources = function () {
	var obj = this.pSyncObject;

	if (obj === null) {
		System.Threading.Monitor.Enter(obj);

		try {
			var array = JSIL.Array.New(System.UInt64, this.pResourceData.get_Keys().Count);
			this.pResourceData.get_Keys().CopyTo(array, 0);
			var array2 = array;
			var i = 0;

		__while0__: 
			while (i < array2.length) {
				var key = array2[i];

				if (this.pResourceData.get_Item(key).CurrentRefCount > 0) {
					var graphicsResource = JSIL.TryCast(this.pResourceData.get_Item(key).ManagedObject.Target, Microsoft.Xna.Framework.Graphics.IGraphicsResource);

					if (graphicsResource === null) {

						if (!this.pResourceData.get_Item(key).isDisposed) {
							graphicsResource.IGraphicsResource_ReleaseNativeObject(false);
						}
					}
				}
				++i;
			}
		} finally {
			System.Threading.Monitor.Exit(this.pSyncObject);
		}
	}
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.ReleaseAutomaticResources = function () {
	var obj = this.pSyncObject;

	if (obj === null) {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = 0;
		System.Threading.Monitor.Enter(obj);

		try {
			var array = JSIL.Array.New(System.UInt64, this.pResourceData.get_Keys().Count);
			this.pResourceData.get_Keys().CopyTo(array, 0);
			var i = 0;

		__while0__: 
			while (i < array.length) {
				var resourceData = this.pResourceData.get_Item(array[i]);
				var dwResourceManagementMode = resourceData.dwResourceManagementMode;

				if (dwResourceManagementMode === 1) {
					var managedObject = resourceData.ManagedObject;

					if (managedObject.IsAlive) {
						var graphicsResource = JSIL.TryCast(managedObject.Target, Microsoft.Xna.Framework.Graphics.IGraphicsResource);

						if (graphicsResource === null) {

							if (!resourceData.isDisposed) {
								int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = graphicsResource.IGraphicsResource_SaveDataForRecreation();
							}

							if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
								throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
							}
						}
					}
				} else if (dwResourceManagementMode !== null) {
					var managedObject2 = resourceData.ManagedObject;

					if (managedObject2.IsAlive) {
						var effect = JSIL.TryCast(managedObject2.Target, Microsoft.Xna.Framework.Graphics.Effect);

						if (effect === null) {

							if (!resourceData.isDisposed) {
								int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = effect.IGraphicsResource_SaveDataForRecreation();
							}

							if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
								throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
							}
						}
					}
				}
				++i;
			}
		} finally {
			System.Threading.Monitor.Exit(this.pSyncObject);
		}
	}
};

Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype.RecreateResources = function (pool, deviceRecreated) {
	var obj = this.pSyncObject;

	if (obj === null) {
		System.Threading.Monitor.Enter(obj);

		try {
			var array = JSIL.Array.New(System.UInt64, this.pResourceData.get_Keys().Count);
			this.pResourceData.get_Keys().CopyTo(array, 0);
			var list = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Graphics.Effect)) ();
			var i = 0;

		__while0__: 
			while (i < array.length) {
				var resourceData = this.pResourceData.get_Item(array[i]);

				if (resourceData.dwResourceManagementMode === pool) {
					var managedObject = resourceData.ManagedObject;

					if (managedObject.IsAlive) {
						var effect = JSIL.TryCast(managedObject.Target, Microsoft.Xna.Framework.Graphics.Effect);

						if (!((effect !== null) || 
								effect.isDisposed || deviceRecreated)) {
							effect.OnResetDevice();
						} else {
							var graphicsResource = JSIL.TryCast(managedObject.Target, Microsoft.Xna.Framework.Graphics.IGraphicsResource);

							if (!((graphicsResource !== null) || resourceData.isDisposed)) {

								if (effect === null) {
									list.Add(effect);
								} else {
									var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = graphicsResource.IGraphicsResource_RecreateAndPopulateObject();

									if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
										throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
									}
								}
							}
							var dynamicGraphicsResource = JSIL.TryCast(managedObject.Target, Microsoft.Xna.Framework.Graphics.IDynamicGraphicsResource);

							if (dynamicGraphicsResource === null) {
								dynamicGraphicsResource.IDynamicGraphicsResource_SetContentLost(true);
							}
						}
					}
				}
				++i;
			}
			var enumerator = list.GetEnumerator();

		__while1__: 
			while (enumerator.MoveNext()) {
				var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = enumerator.get_Current().IGraphicsResource_RecreateAndPopulateObject();

				if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 < 0) {
					throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2);
				}
			}
		} finally {
			System.Threading.Monitor.Exit(this.pSyncObject);
		}
	}
};


Object.seal(Microsoft.Xna.Framework.Graphics.DeviceResourceManager.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DeviceResourceManager);
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pRenderState = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pSamplerState = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pVertexSamplerState = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pClipPlanes = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pResourceManager = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pTextureCollection = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pVertexTextureCollection = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pVertexStreamCollection = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCurrentAdapter = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._isHardwareDevice = new System.Boolean();
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pInternalCachedParams = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pPublicCachedParams = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCreatedEventArgs = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pDestroyedEventArgs = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.$lbacking_store$gDeviceResetting = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.$lbacking_store$gDeviceReset = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.$lbacking_store$gDeviceLost = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.$lbacking_store$gResourceCreated = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.$lbacking_store$gResourceDestroyed = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._insideScene = new System.Boolean();
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._verifiedCanDraw = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._verifiedDepthRenderTargetCompat = new System.Boolean();
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pImplicitDepthSurface = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._windowHandle = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._creationFlags = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCachedRenderTargets = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCachedCaps = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.isCapsDirty = new System.Boolean();
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pDepthBuffer = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCachedDeclaration = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCachedPixelShader = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCachedVertexShader = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.pCachedIndexBuffer = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.spriteBeginCount = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.spriteImmediateBeginCount = 0;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._DrawGuideHandler = null;
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.CreateHelperClasses = function () {
	JSIL.UntranslatableInstruction("stfld:IDirect3DSurface9*(GraphicsDevice::pImplicitDepthSurface, ldloc:GraphicsDevice(this), ldc.i4:IDirect3DSurface9*(0))");
	this.pRenderState = new Microsoft.Xna.Framework.Graphics.RenderState(this);
	this.pSamplerState = new Microsoft.Xna.Framework.Graphics.SamplerStateCollection(this, 0, 16);
	this.pVertexSamplerState = new Microsoft.Xna.Framework.Graphics.SamplerStateCollection(this, 257, 4);
	this.pClipPlanes = new Microsoft.Xna.Framework.Graphics.ClipPlaneCollection(this);
	this.pTextureCollection = new Microsoft.Xna.Framework.Graphics.TextureCollection(this, 0, 16);
	this.pVertexTextureCollection = new Microsoft.Xna.Framework.Graphics.TextureCollection(this, 257, 4);
	this.pVertexStreamCollection = new Microsoft.Xna.Framework.Graphics.VertexStreamCollection(this);
	this.pResourceManager = new Microsoft.Xna.Framework.Graphics.DeviceResourceManager(this);
	this.pCachedRenderTargets = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.RenderTarget, 4);
	this._verifiedCanDraw = JSIL.Array.New(System.Boolean, 4);
	this._verifiedDepthRenderTargetCompat = false;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 160);
	var arg_BB_0 = JSIL.UntranslatableInstruction("calli[exp:object](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,IDirect3DSurface9**), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldflda:IDirect3DSurface9*&(GraphicsDevice::pImplicitDepthSurface, ldloc:GraphicsDevice(this)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Present$0 = function (overrideWindowHandle) {
	JSIL.IgnoredMember("Present(pSource, pDest, hOverride)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Present$1 = JSIL.UntranslatableFunction("Present");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Present$2 = function () {
	JSIL.IgnoredMember("Present(pSource, pDest, hOverride)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.HandleImplicitRenderTargetUsage = JSIL.UntranslatableFunction("HandleImplicitRenderTargetUsage");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Resources = function () {
	return this.pResourceManager;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.FireCreatedEvent = function (resource) {
	var resourceCreatedEventArgs = this.pCreatedEventArgs;

	if (resourceCreatedEventArgs !== null) {
		this.pCreatedEventArgs = new Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs(resource);
	} else {
		resourceCreatedEventArgs._resource = resource;
	}
	var eventHandler = this.$lbacking_store$gResourceCreated;

	if (eventHandler === null) {
		eventHandler(this, this.pCreatedEventArgs);
	}
	this.pCreatedEventArgs._resource = null;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.FireDestroyedEvent = function (name, tag) {
	var resourceDestroyedEventArgs = this.pDestroyedEventArgs;

	if (resourceDestroyedEventArgs !== null) {
		this.pDestroyedEventArgs = new Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs(name, tag);
	} else {
		resourceDestroyedEventArgs._name = name;
		this.pDestroyedEventArgs._tag = tag;
	}
	var eventHandler = this.$lbacking_store$gResourceDestroyed;

	if (eventHandler === null) {
		eventHandler(this, this.pDestroyedEventArgs);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.VerifyCanDraw = JSIL.UntranslatableFunction("VerifyCanDraw");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.add_DeviceResetting = function (value) {
	this.$lbacking_store$gDeviceResetting = System.Delegate.Combine(this.$lbacking_store$gDeviceResetting, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.remove_DeviceResetting = function (value) {
	this.$lbacking_store$gDeviceResetting = System.Delegate.Remove(this.$lbacking_store$gDeviceResetting, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.raise_DeviceResetting = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDeviceResetting;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.add_DeviceReset = function (value) {
	this.$lbacking_store$gDeviceReset = System.Delegate.Combine(this.$lbacking_store$gDeviceReset, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.remove_DeviceReset = function (value) {
	this.$lbacking_store$gDeviceReset = System.Delegate.Remove(this.$lbacking_store$gDeviceReset, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.raise_DeviceReset = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDeviceReset;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.add_DeviceLost = function (value) {
	this.$lbacking_store$gDeviceLost = System.Delegate.Combine(this.$lbacking_store$gDeviceLost, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.remove_DeviceLost = function (value) {
	this.$lbacking_store$gDeviceLost = System.Delegate.Remove(this.$lbacking_store$gDeviceLost, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.raise_DeviceLost = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDeviceLost;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.add_ResourceCreated = function (value) {
	this.$lbacking_store$gResourceCreated = System.Delegate.Combine(this.$lbacking_store$gResourceCreated, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.remove_ResourceCreated = function (value) {
	this.$lbacking_store$gResourceCreated = System.Delegate.Remove(this.$lbacking_store$gResourceCreated, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.raise_ResourceCreated = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gResourceCreated;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.add_ResourceDestroyed = function (value) {
	this.$lbacking_store$gResourceDestroyed = System.Delegate.Combine(this.$lbacking_store$gResourceDestroyed, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.remove_ResourceDestroyed = function (value) {
	this.$lbacking_store$gResourceDestroyed = System.Delegate.Remove(this.$lbacking_store$gResourceDestroyed, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.raise_ResourceDestroyed = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gResourceDestroyed;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_RenderState = function () {
	return this.pRenderState;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_SamplerStates = function () {
	return this.pSamplerState;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_VertexSamplerStates = function () {
	return this.pVertexSamplerState;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_ClipPlanes = function () {
	return this.pClipPlanes;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Textures = function () {
	return this.pTextureCollection;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_VertexTextures = function () {
	return this.pVertexTextureCollection;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Vertices = function () {
	return this.pVertexStreamCollection;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype._ctor$1 = function (adapter, deviceType, renderWindowHandle, presentationParameters) {
	this.isCapsDirty = true;
	System.Object.prototype._ctor.call(this);

	if (presentationParameters !== null) {
		throw new System.ArgumentNullException("presentationParameters", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}

	if (Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Equality(adapter, null)) {
		throw new System.ArgumentNullException("adapter", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var dwFlags = 32;

	if (!(!adapter.IsDeviceTypeAvailable(deviceType) || 
			(deviceType !== Microsoft.Xna.Framework.Graphics.DeviceType.Hardware) || (adapter.GetCapabilities(Microsoft.Xna.Framework.Graphics.DeviceType.Hardware).get_DeviceCapabilities().SupportsHardwareTransformAndLight !== null))) {
		dwFlags = 64;
	}
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.IgnoredMember("CreateDevice(dwAdapterOrdinal, deviceType, windowHandle, dwFlags, presentationParameters, ppRet)");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	this.pCurrentAdapter = adapter;
	this._DrawGuideHandler = null;
	this.pInternalCachedParams = presentationParameters.Clone();
	this.pPublicCachedParams = presentationParameters.Clone();
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_PresentationParameters = function () {
	return this.pPublicCachedParams;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_GraphicsDeviceStatus = JSIL.UntranslatableFunction("get_GraphicsDeviceStatus");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.EvictManagedResources = JSIL.UntranslatableFunction("EvictManagedResources");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_GraphicsDeviceCapabilities = JSIL.UntranslatableFunction("get_GraphicsDeviceCapabilities");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_DisplayMode = JSIL.UntranslatableFunction("get_DisplayMode");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_CreationParameters = JSIL.UntranslatableFunction("get_CreationParameters");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Reset$0 = function () {
	this.Reset(this.pInternalCachedParams, this.pCurrentAdapter);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Reset$1 = function (presentationParameters) {
	this.Reset(presentationParameters, this.pCurrentAdapter);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Reset$2 = function (graphicsAdapter) {
	this.Reset(this.pInternalCachedParams, graphicsAdapter);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Reset$3 = JSIL.UntranslatableFunction("Reset");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_RasterStatus = JSIL.UntranslatableFunction("get_RasterStatus");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetGammaRamp = JSIL.UntranslatableFunction("GetGammaRamp");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetGammaRamp = JSIL.UntranslatableFunction("SetGammaRamp");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Viewport = JSIL.UntranslatableFunction("get_Viewport");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_Viewport = JSIL.UntranslatableFunction("set_Viewport");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_VertexShader = JSIL.UntranslatableFunction("get_VertexShader");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_VertexShader = JSIL.UntranslatableFunction("set_VertexShader");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_VertexDeclaration = JSIL.UntranslatableFunction("get_VertexDeclaration");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_VertexDeclaration = JSIL.UntranslatableFunction("set_VertexDeclaration");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_PixelShader = JSIL.UntranslatableFunction("get_PixelShader");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_PixelShader = JSIL.UntranslatableFunction("set_PixelShader");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.DrawPrimitives = JSIL.UntranslatableFunction("DrawPrimitives");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.DrawIndexedPrimitives = JSIL.UntranslatableFunction("DrawIndexedPrimitives");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetElementCountFromPrimitiveType = function (primitiveType, primitiveCount) {
	var result = -1;

	switch (primitiveType) {
		case 1: 
			result = primitiveCount;
			break;
		case 2: 
			result = (primitiveCount << 1);
			break;
		case 3: 
			result = (primitiveCount + 1);
			break;
		case 4: 
			result = (primitiveCount * 3);
			break;
		case 5: 
		case 6: 
			result = (primitiveCount + 2);
			break;
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.DrawUserIndexedPrimitives$0 = function (primitiveType, vertexData, vertexOffset, numVertices, indexData, indexOffset, primitiveCount) {
	this.DrawUserIndexedPrimitives(
		primitiveType, 
		vertexData, 
		vertexOffset, 
		numVertices, 
		indexData, 
		indexOffset, 
		primitiveCount, 
		102
	);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.DrawUserIndexedPrimitives$1 = function (primitiveType, vertexData, vertexOffset, numVertices, indexData, indexOffset, primitiveCount) {
	this.DrawUserIndexedPrimitives(
		primitiveType, 
		vertexData, 
		vertexOffset, 
		numVertices, 
		indexData, 
		indexOffset, 
		primitiveCount, 
		101
	);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.DrawUserIndexedPrimitives$2 = JSIL.UntranslatableFunction("DrawUserIndexedPrimitives");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.DrawUserPrimitives = function (primitiveType, vertexData, vertexOffset, primitiveCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));

	if (vertexData !== null) {
		throw new System.ArgumentNullException("vertexData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}

	if (primitiveCount <= 0) {
		throw new System.ArgumentOutOfRangeException("primitiveCount", Microsoft.Xna.Framework.FrameworkResources.MustDrawSomething);
	}

	if (vertexOffset >= 0) {
		var num = vertexData.length;

		if (vertexOffset < num) {

			if ((this.GetElementCountFromPrimitiveType(primitiveType, primitiveCount) + vertexOffset) > num) {
				throw new System.ArgumentOutOfRangeException("primitiveCount", Microsoft.Xna.Framework.FrameworkResources.ValidIndex);
			}
			this.VerifyCanDraw(true, false);
			JSIL.IgnoredMember("RawDrawUserPrimitives(primitiveType, primitiveCount, vertexData, vertexStride)");
			return ;
		}
	}
	throw new System.ArgumentOutOfRangeException("vertexOffset", Microsoft.Xna.Framework.FrameworkResources.OffsetNotValid);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Clear$0 = function (options, color, depth, stencil) {
	var color2 = new Microsoft.Xna.Framework.Graphics.Color();
	color2._ctor(color);
	this.Clear(
		options, 
		color2.MemberwiseClone(), 
		depth, 
		stencil, 
		null
	);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Clear$1 = function (options, color, depth, stencil, regions) {
	var color2 = new Microsoft.Xna.Framework.Graphics.Color();
	color2._ctor(color);
	this.Clear(
		options, 
		color2.MemberwiseClone(), 
		depth, 
		stencil, 
		regions
	);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Clear$2 = function (options, color, depth, stencil) {
	this.Clear(
		options, 
		color, 
		depth, 
		stencil, 
		null
	);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Clear$3 = JSIL.UntranslatableFunction("Clear");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Clear$4 = function (color) {
	this.Clear(
		this.get_DefaultClearOptions(), 
		color, 
		1, 
		0, 
		null
	);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$0 = function (startRegister, constantData) {
	JSIL.IgnoredMember("SetVSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$1 = function (startRegister, constantData) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector._ctor(constantData, 0, 0);
	var vector2 = vector.MemberwiseClone();
	JSIL.IgnoredMember("SetVSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$2 = function (startRegister, constantData) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector._ctor(constantData, 0);
	var vector2 = vector.MemberwiseClone();
	JSIL.IgnoredMember("SetVSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$3 = function (startRegister, constantData) {
	JSIL.IgnoredMember("SetVSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$4 = function (startRegister, constantData) {
	JSIL.IgnoredMember("SetVSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$5 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {
			var num2 = 0;

			if (0 < num) {

			__while0__: 
				while (true) {
					this.SetVertexShaderConstant((num2 + startRegister), constantData[num2]);
					++num2;

					if (num2 >= constantData.length) {
						break __while0__;
					}
				}
			}
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$6 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {
			var num2 = 0;

			if (0 < num) {

			__while0__: 
				while (true) {
					this.SetVertexShaderConstant((num2 + startRegister), constantData[num2]);
					++num2;

					if (num2 >= constantData.length) {
						break __while0__;
					}
				}
			}
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$7 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {
			var num2 = 0;

			if (0 < num) {

			__while0__: 
				while (true) {
					this.SetVertexShaderConstant((num2 + startRegister), constantData[num2]);
					++num2;

					if (num2 >= constantData.length) {
						break __while0__;
					}
				}
			}
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$8 = JSIL.UntranslatableFunction("SetVertexShaderConstant");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$9 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {

			if (num % 4) {
				var text = "constantData";
				throw new System.ArgumentException(System.String.Format(Microsoft.Xna.Framework.FrameworkResources.ArrayMultipleFour, text), text);
			}
			JSIL.IgnoredMember("SetVSConstantI(startRegister, pData, numberRegister)");
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$10 = function (startRegister, constantData) {

	if (!((constantData !== null) || (constantData.length !== 0))) {
		JSIL.IgnoredMember("SetVSConstantF(startRegister, pData, numberRegister)");
		return ;
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$11 = function (startRegister, constantData) {

	if (!((constantData !== null) || (constantData.length !== 0))) {
		JSIL.IgnoredMember("SetVSConstantF(startRegister, pData, numberRegister)");
		return ;
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetVertexShaderConstant$12 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {

			if (num % 4) {
				var text = "constantData";
				throw new System.ArgumentException(System.String.Format(Microsoft.Xna.Framework.FrameworkResources.ArrayMultipleFour, text), text);
			}
			JSIL.IgnoredMember("SetVSConstantF(startRegister, pData, numberRegister)");
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderSingleConstant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(System.Single, (constantCount << 2));
	var var_3_25_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 380);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(float32, var_3_25_cp_0, var_3_25_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderInt32Constant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(System.Int32, (constantCount << 2));
	var var_3_25_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 388);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Int32*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(int32, var_3_25_cp_0, var_3_25_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderBooleanConstant = JSIL.UntranslatableFunction("GetVertexShaderBooleanConstant");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderMatrixArrayConstant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Matrix.MemberwiseClone(), constantCount);
	var var_3_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 380);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Matrix, var_3_23_cp_0, var_3_23_cp_1:int32), shl:int32(ldloc:int32(constantCount), ldc.i4:int32(2)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderVector4ArrayConstant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Vector4.MemberwiseClone(), constantCount);
	var var_3_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 380);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Vector4, var_3_23_cp_0, var_3_23_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderVector3ArrayConstant = function (startRegister, constantCount) {
	var vector = new Microsoft.Xna.Framework.Vector3();
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Vector4.MemberwiseClone(), constantCount);
	var var_5_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 380);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Vector4, var_5_23_cp_0, var_5_23_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	var array2 = JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), constantCount);
	var num2 = 0;

	if (0 < array2.length) {

	__while0__: 
		while (true) {
			vector._ctor(array[num2].X, array[num2].Y, array[num2].Z);
			JSIL.UntranslatableInstruction("cpobj(valuetype Microsoft.Xna.Framework.Vector3, ldelema:Vector3&(valuetype Microsoft.Xna.Framework.Vector3, ldloc:Vector3[](array2), ldloc:int32(num2)), ldloca:Vector3&(vector))");
			++num2;

			if (num2 >= array2.length) {
				break __while0__;
			}
		}
	}
	return array2;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderVector2ArrayConstant = function (startRegister, constantCount) {
	var vector = new Microsoft.Xna.Framework.Vector2();
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Vector4.MemberwiseClone(), constantCount);
	var var_5_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 380);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Vector4, var_5_23_cp_0, var_5_23_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	var array2 = JSIL.Array.New(Microsoft.Xna.Framework.Vector2.MemberwiseClone(), constantCount);
	var num2 = 0;

	if (0 < array2.length) {

	__while0__: 
		while (true) {
			vector._ctor(array[num2].X, array[num2].Y);
			JSIL.UntranslatableInstruction("cpobj(valuetype Microsoft.Xna.Framework.Vector2, ldelema:Vector2&(valuetype Microsoft.Xna.Framework.Vector2, ldloc:Vector2[](array2), ldloc:int32(num2)), ldloca:Vector2&(vector))");
			++num2;

			if (num2 >= array2.length) {
				break __while0__;
			}
		}
	}
	return array2;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderQuaternionArrayConstant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Quaternion.MemberwiseClone(), constantCount);
	var var_3_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 380);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Quaternion, var_3_23_cp_0, var_3_23_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderMatrixConstant = function (startRegister) {
	JSIL.IgnoredMember("GetVSConstantF(startRegister, pData, numberRegister)");
	return new Microsoft.Xna.Framework.Matrix();
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderVector4Constant = function (startRegister) {
	JSIL.IgnoredMember("GetVSConstantF(startRegister, pData, numberRegister)");
	return new Microsoft.Xna.Framework.Vector4();
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderVector3Constant = function (startRegister) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var vector = new Microsoft.Xna.Framework.Vector4();
	JSIL.IgnoredMember("GetVSConstantF(startRegister, pData, numberRegister)");
	result._ctor(vector.X, vector.Y, vector.Z);
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderVector2Constant = function (startRegister) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var vector = new Microsoft.Xna.Framework.Vector4();
	JSIL.IgnoredMember("GetVSConstantF(startRegister, pData, numberRegister)");
	result._ctor(vector.X, vector.Y);
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetVertexShaderQuaternionConstant = function (startRegister) {
	JSIL.IgnoredMember("GetVSConstantF(startRegister, pData, numberRegister)");
	return new Microsoft.Xna.Framework.Quaternion();
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$0 = function (startRegister, constantData) {
	JSIL.IgnoredMember("SetPSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$1 = function (startRegister, constantData) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector._ctor(constantData, 0, 0);
	var vector2 = vector.MemberwiseClone();
	JSIL.IgnoredMember("SetPSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$2 = function (startRegister, constantData) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector._ctor(constantData, 0);
	var vector2 = vector.MemberwiseClone();
	JSIL.IgnoredMember("SetPSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$3 = function (startRegister, constantData) {
	JSIL.IgnoredMember("SetPSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$4 = function (startRegister, constantData) {
	JSIL.IgnoredMember("SetPSConstantF(startRegister, pData, numberRegister)");
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$5 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {
			var num2 = 0;

			if (0 < num) {

			__while0__: 
				while (true) {
					this.SetPixelShaderConstant((num2 + startRegister), constantData[num2]);
					++num2;

					if (num2 >= constantData.length) {
						break __while0__;
					}
				}
			}
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$6 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {
			var num2 = 0;

			if (0 < num) {

			__while0__: 
				while (true) {
					this.SetPixelShaderConstant((num2 + startRegister), constantData[num2]);
					++num2;

					if (num2 >= constantData.length) {
						break __while0__;
					}
				}
			}
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$7 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {
			var num2 = 0;

			if (0 < num) {

			__while0__: 
				while (true) {
					this.SetPixelShaderConstant((num2 + startRegister), constantData[num2]);
					++num2;

					if (num2 >= constantData.length) {
						break __while0__;
					}
				}
			}
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$8 = JSIL.UntranslatableFunction("SetPixelShaderConstant");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$9 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {

			if (num % 4) {
				var text = "constantData";
				throw new System.ArgumentException(System.String.Format(Microsoft.Xna.Framework.FrameworkResources.ArrayMultipleFour, text), text);
			}
			JSIL.IgnoredMember("SetPSConstantI(startRegister, pData, numberRegister)");
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$10 = function (startRegister, constantData) {

	if (!((constantData !== null) || (constantData.length !== 0))) {
		JSIL.IgnoredMember("SetPSConstantF(startRegister, pData, numberRegister)");
		return ;
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$11 = function (startRegister, constantData) {

	if (!((constantData !== null) || (constantData.length !== 0))) {
		JSIL.IgnoredMember("SetPSConstantF(startRegister, pData, numberRegister)");
		return ;
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetPixelShaderConstant$12 = function (startRegister, constantData) {

	if (constantData === null) {
		var num = constantData.length;

		if (num === 0) {

			if (num % 4) {
				var text = "constantData";
				throw new System.ArgumentException(System.String.Format(Microsoft.Xna.Framework.FrameworkResources.ArrayMultipleFour, text), text);
			}
			JSIL.IgnoredMember("SetPSConstantF(startRegister, pData, numberRegister)");
			return ;
		}
	}
	throw new System.ArgumentNullException("constantData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderSingleConstant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(System.Single, (constantCount << 2));
	var var_3_25_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 440);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(float32, var_3_25_cp_0, var_3_25_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderInt32Constant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(System.Int32, (constantCount << 2));
	var var_3_25_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 448);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Int32*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(int32, var_3_25_cp_0, var_3_25_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderBooleanConstant = JSIL.UntranslatableFunction("GetPixelShaderBooleanConstant");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderMatrixArrayConstant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Matrix.MemberwiseClone(), constantCount);
	var var_3_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 440);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Matrix, var_3_23_cp_0, var_3_23_cp_1:int32), shl:int32(ldloc:int32(constantCount), ldc.i4:int32(2)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderVector4ArrayConstant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Vector4.MemberwiseClone(), constantCount);
	var var_3_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 440);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Vector4, var_3_23_cp_0, var_3_23_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderVector3ArrayConstant = function (startRegister, constantCount) {
	var vector = new Microsoft.Xna.Framework.Vector3();
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Vector4.MemberwiseClone(), constantCount);
	var var_5_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 440);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Vector4, var_5_23_cp_0, var_5_23_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	var array2 = JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), constantCount);
	var num2 = 0;

	if (0 < array2.length) {

	__while0__: 
		while (true) {
			vector._ctor(array[num2].X, array[num2].Y, array[num2].Z);
			JSIL.UntranslatableInstruction("cpobj(valuetype Microsoft.Xna.Framework.Vector3, ldelema:Vector3&(valuetype Microsoft.Xna.Framework.Vector3, ldloc:Vector3[](array2), ldloc:int32(num2)), ldloca:Vector3&(vector))");
			++num2;

			if (num2 >= array2.length) {
				break __while0__;
			}
		}
	}
	return array2;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderVector2ArrayConstant = function (startRegister, constantCount) {
	var vector = new Microsoft.Xna.Framework.Vector2();
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Vector4.MemberwiseClone(), constantCount);
	var var_5_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 440);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Vector4, var_5_23_cp_0, var_5_23_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	var array2 = JSIL.Array.New(Microsoft.Xna.Framework.Vector2.MemberwiseClone(), constantCount);
	var num2 = 0;

	if (0 < array2.length) {

	__while0__: 
		while (true) {
			vector._ctor(array[num2].X, array[num2].Y);
			JSIL.UntranslatableInstruction("cpobj(valuetype Microsoft.Xna.Framework.Vector2, ldelema:Vector2&(valuetype Microsoft.Xna.Framework.Vector2, ldloc:Vector2[](array2), ldloc:int32(num2)), ldloca:Vector2&(vector))");
			++num2;

			if (num2 >= array2.length) {
				break __while0__;
			}
		}
	}
	return array2;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderQuaternionArrayConstant = function (startRegister, constantCount) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Quaternion.MemberwiseClone(), constantCount);
	var var_3_23_cp_0 = array;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this))") + 440);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32,System.Single*,System.UInt32), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)), ldloc:int32(startRegister), ldelema(valuetype Microsoft.Xna.Framework.Quaternion, var_3_23_cp_0, var_3_23_cp_1:int32), ldloc:int32(constantCount), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderMatrixConstant = function (startRegister) {
	JSIL.IgnoredMember("GetPSConstantF(startRegister, pData, numberRegister)");
	return new Microsoft.Xna.Framework.Matrix();
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderVector4Constant = function (startRegister) {
	JSIL.IgnoredMember("GetPSConstantF(startRegister, pData, numberRegister)");
	return new Microsoft.Xna.Framework.Vector4();
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderVector3Constant = function (startRegister) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var vector = new Microsoft.Xna.Framework.Vector4();
	JSIL.IgnoredMember("GetPSConstantF(startRegister, pData, numberRegister)");
	result._ctor(vector.X, vector.Y, vector.Z);
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderVector2Constant = function (startRegister) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var vector = new Microsoft.Xna.Framework.Vector4();
	JSIL.IgnoredMember("GetPSConstantF(startRegister, pData, numberRegister)");
	result._ctor(vector.X, vector.Y);
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetPixelShaderQuaternionConstant = function (startRegister) {
	JSIL.IgnoredMember("GetPSConstantF(startRegister, pData, numberRegister)");
	return new Microsoft.Xna.Framework.Quaternion();
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetAbstractRenderTarget = JSIL.UntranslatableFunction("SetAbstractRenderTarget");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.ResolveRenderTarget = JSIL.UntranslatableFunction("ResolveRenderTarget");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetRenderTarget$0 = function (renderTargetIndex, renderTarget) {
	this.SetAbstractRenderTarget(renderTargetIndex, renderTarget, Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveX);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.SetRenderTarget$1 = function (renderTargetIndex, renderTarget, faceType) {
	this.SetAbstractRenderTarget(renderTargetIndex, renderTarget, faceType);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.ResolveBackBuffer$0 = function (resolveTarget) {
	this.ResolveBackBuffer(resolveTarget, 0);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.ResolveBackBuffer$1 = JSIL.UntranslatableFunction("ResolveBackBuffer");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.GetRenderTarget = function (renderTargetIndex) {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	var num = JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, callgetter:GraphicsDeviceCapabilities(GraphicsDevice::get_GraphicsDeviceCapabilities, ldloc:GraphicsDevice(this)))), ldc.i4:IntPtr(240))");

	if (renderTargetIndex > (num - 1)) {
		throw new System.ArgumentOutOfRangeException("renderTargetIndex", Microsoft.Xna.Framework.FrameworkResources.InvalidRenderTargetIndex);
	}
	return this.pCachedRenderTargets[renderTargetIndex];
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_DepthStencilBuffer = JSIL.UntranslatableFunction("get_DepthStencilBuffer");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_DepthStencilBuffer = JSIL.UntranslatableFunction("set_DepthStencilBuffer");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Indices = JSIL.UntranslatableFunction("get_Indices");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_Indices = JSIL.UntranslatableFunction("set_Indices");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_ScissorRectangle = JSIL.UntranslatableFunction("get_ScissorRectangle");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_ScissorRectangle = JSIL.UntranslatableFunction("set_ScissorRectangle");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_DriverLevel = function () {
	return $lModule$g.D3DXGetDriverLevel(JSIL.UntranslatableInstruction("ternaryop:IDirect3DDevice9*(logicnot:bool(ldloc:GraphicsDevice[exp:bool](this)), ldc.i4:IDirect3DDevice9*(0), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(this)))"));
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_IsDeviceLost = JSIL.UntranslatableFunction("get_IsDeviceLost");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.VerifyDepthRenderTargetCompat = JSIL.UntranslatableFunction("VerifyDepthRenderTargetCompat");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.DepthNotLost = function () {
	var depthStencilBuffer = this.pDepthBuffer;

	if (depthStencilBuffer === null) {
		depthStencilBuffer.IDynamicGraphicsResource_SetContentLost(false);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.RenderTargetsNotLost = function () {
	var num = 0;
	var array = this.pCachedRenderTargets;

	if (0 < array.length) {

	__while0__: 
		while (true) {

			if (array[num]) {
				array[num].IDynamicGraphicsResource_SetContentLost(false);
			}
			++num;
			array = this.pCachedRenderTargets;

			if (num >= array.length) {
				break __while0__;
			}
		}
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_DefaultClearOptions = function () {
	var result = Microsoft.Xna.Framework.Graphics.ClearOptions.Target;
	var depthStencilBuffer = this.get_DepthStencilBuffer();

	if (depthStencilBuffer === null) {
		result = Microsoft.Xna.Framework.Graphics.ClearOptions.Target | Microsoft.Xna.Framework.Graphics.ClearOptions.DepthBuffer;
		var format = depthStencilBuffer.Format;

		if (!((format < Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil8) || ((format > Microsoft.Xna.Framework.Graphics.DepthFormat.Depth24Stencil4) && 
					(format !== Microsoft.Xna.Framework.Graphics.DepthFormat.Depth15Stencil1)))) {
			result = Microsoft.Xna.Framework.Graphics.ClearOptions.Target | Microsoft.Xna.Framework.Graphics.ClearOptions.DepthBuffer | Microsoft.Xna.Framework.Graphics.ClearOptions.Stencil;
		}
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.$exGraphicsDevice = JSIL.UntranslatableFunction("!GraphicsDevice");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.$tGraphicsDevice = function () {

	if (!this.isDisposed) {
		this.$exGraphicsDevice();
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.OnObjectCreation = function (pDevice) {
	this.CreateHelperClasses();
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.add_DrawGuide = function (d) {
	this._DrawGuideHandler = System.Delegate.Combine(this._DrawGuideHandler, d);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.remove_DrawGuide = function (d) {
	this._DrawGuideHandler = System.Delegate.Remove(this._DrawGuideHandler, d);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.raise_DrawGuide = function (sender, e) {
	var drawGuideHandler = this._DrawGuideHandler;

	if (drawGuideHandler === null) {
		drawGuideHandler(sender, e);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.RawSetRenderState = JSIL.UntranslatableFunction("RawSetRenderState");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.RawSetSamplerState = JSIL.UntranslatableFunction("RawSetSamplerState");

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tGraphicsDevice();
	} else {

		try {
			this.$exGraphicsDevice();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Present", [
		["Present$0", [System.IntPtr]], 
		["Present$1", [System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), System.IntPtr]], 
		["Present$2", []]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsAdapter, Microsoft.Xna.Framework.Graphics.DeviceType, System.IntPtr, Microsoft.Xna.Framework.Graphics.PresentationParameters]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Reset", [
		["Reset$0", []], 
		["Reset$1", [Microsoft.Xna.Framework.Graphics.PresentationParameters]], 
		["Reset$2", [Microsoft.Xna.Framework.Graphics.GraphicsAdapter]], 
		["Reset$3", [Microsoft.Xna.Framework.Graphics.PresentationParameters, Microsoft.Xna.Framework.Graphics.GraphicsAdapter]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "DrawUserIndexedPrimitives", [
		["DrawUserIndexedPrimitives$0", [Microsoft.Xna.Framework.Graphics.PrimitiveType, System.Array.Of(T), System.Int32, System.Int32, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["DrawUserIndexedPrimitives$1", [Microsoft.Xna.Framework.Graphics.PrimitiveType, System.Array.Of(T), System.Int32, System.Int32, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["DrawUserIndexedPrimitives$2", [Microsoft.Xna.Framework.Graphics.PrimitiveType, System.Array.Of(T), System.Int32, System.Int32, System.Array, System.Int32, System.Int32, _D3DFORMAT]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Clear", [
		["Clear$0", [Microsoft.Xna.Framework.Graphics.ClearOptions, Microsoft.Xna.Framework.Vector4, System.Single, System.Int32]], 
		["Clear$1", [Microsoft.Xna.Framework.Graphics.ClearOptions, Microsoft.Xna.Framework.Vector4, System.Single, System.Int32, System.Array.Of(Microsoft.Xna.Framework.Rectangle)]], 
		["Clear$2", [Microsoft.Xna.Framework.Graphics.ClearOptions, Microsoft.Xna.Framework.Graphics.Color, System.Single, System.Int32]], 
		["Clear$3", [Microsoft.Xna.Framework.Graphics.ClearOptions, Microsoft.Xna.Framework.Graphics.Color, System.Single, System.Int32, System.Array.Of(Microsoft.Xna.Framework.Rectangle)]], 
		["Clear$4", [Microsoft.Xna.Framework.Graphics.Color]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "SetVertexShaderConstant", [
		["SetVertexShaderConstant$0", [System.Int32, Microsoft.Xna.Framework.Quaternion]], 
		["SetVertexShaderConstant$1", [System.Int32, Microsoft.Xna.Framework.Vector2]], 
		["SetVertexShaderConstant$2", [System.Int32, Microsoft.Xna.Framework.Vector3]], 
		["SetVertexShaderConstant$3", [System.Int32, Microsoft.Xna.Framework.Vector4]], 
		["SetVertexShaderConstant$4", [System.Int32, Microsoft.Xna.Framework.Matrix]], 
		["SetVertexShaderConstant$5", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Quaternion)]], 
		["SetVertexShaderConstant$6", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Vector3)]], 
		["SetVertexShaderConstant$7", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Vector2)]], 
		["SetVertexShaderConstant$8", [System.Int32, System.Array.Of(System.Boolean)]], 
		["SetVertexShaderConstant$9", [System.Int32, System.Array.Of(System.Int32)]], 
		["SetVertexShaderConstant$10", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Vector4)]], 
		["SetVertexShaderConstant$11", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Matrix)]], 
		["SetVertexShaderConstant$12", [System.Int32, System.Array.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "SetPixelShaderConstant", [
		["SetPixelShaderConstant$0", [System.Int32, Microsoft.Xna.Framework.Quaternion]], 
		["SetPixelShaderConstant$1", [System.Int32, Microsoft.Xna.Framework.Vector2]], 
		["SetPixelShaderConstant$2", [System.Int32, Microsoft.Xna.Framework.Vector3]], 
		["SetPixelShaderConstant$3", [System.Int32, Microsoft.Xna.Framework.Vector4]], 
		["SetPixelShaderConstant$4", [System.Int32, Microsoft.Xna.Framework.Matrix]], 
		["SetPixelShaderConstant$5", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Quaternion)]], 
		["SetPixelShaderConstant$6", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Vector3)]], 
		["SetPixelShaderConstant$7", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Vector2)]], 
		["SetPixelShaderConstant$8", [System.Int32, System.Array.Of(System.Boolean)]], 
		["SetPixelShaderConstant$9", [System.Int32, System.Array.Of(System.Int32)]], 
		["SetPixelShaderConstant$10", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Vector4)]], 
		["SetPixelShaderConstant$11", [System.Int32, System.Array.Of(Microsoft.Xna.Framework.Matrix)]], 
		["SetPixelShaderConstant$12", [System.Int32, System.Array.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "SetRenderTarget", [
		["SetRenderTarget$0", [System.Int32, Microsoft.Xna.Framework.Graphics.RenderTarget2D]], 
		["SetRenderTarget$1", [System.Int32, Microsoft.Xna.Framework.Graphics.RenderTargetCube, Microsoft.Xna.Framework.Graphics.CubeMapFace]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "ResolveBackBuffer", [
		["ResolveBackBuffer$0", [Microsoft.Xna.Framework.Graphics.ResolveTexture2D]], 
		["ResolveBackBuffer$1", [Microsoft.Xna.Framework.Graphics.ResolveTexture2D, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "DefaultClearOptions", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_DefaultClearOptions
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "IsDeviceLost", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_IsDeviceLost
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "DriverLevel", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_DriverLevel
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "ScissorRectangle", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_ScissorRectangle, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_ScissorRectangle
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Indices", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Indices, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_Indices
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "DepthStencilBuffer", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_DepthStencilBuffer, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_DepthStencilBuffer
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "PixelShader", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_PixelShader, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_PixelShader
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "VertexDeclaration", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_VertexDeclaration, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_VertexDeclaration
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "VertexShader", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_VertexShader, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_VertexShader
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Viewport", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Viewport, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.set_Viewport
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "RasterStatus", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_RasterStatus
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "CreationParameters", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_CreationParameters
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "DisplayMode", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_DisplayMode
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "GraphicsDeviceCapabilities", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_GraphicsDeviceCapabilities
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "GraphicsDeviceStatus", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_GraphicsDeviceStatus
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "PresentationParameters", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_PresentationParameters
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Vertices", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Vertices
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "VertexTextures", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_VertexTextures
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Textures", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Textures
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "ClipPlanes", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_ClipPlanes
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "VertexSamplerStates", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_VertexSamplerStates
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "SamplerStates", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_SamplerStates
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "RenderState", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_RenderState
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype, "Resources", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.get_Resources
	});
Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDevice.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsDevice);
Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype._type = 0;
Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_Priority = JSIL.UntranslatableFunction("get_Priority");

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.set_Priority = JSIL.UntranslatableFunction("set_Priority");

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_ResourceType = function () {
	return this._type;
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_Name = function () {
	return this.pCachedDevice.get_Resources().GetCachedName(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.set_Name = function (value) {
	this.pCachedDevice.get_Resources().SetCachedName(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_Tag = function () {
	return this.pCachedDevice.get_Resources().GetCachedTag(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.set_Tag = function (value) {
	this.pCachedDevice.get_Resources().SetCachedTag(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.$exGraphicsResource = function () {
	this.isDisposed = true;
	JSIL.UntranslatableInstruction("stfld:IDirect3DResource9*(GraphicsResource::pComPtr, ldloc:GraphicsResource(this), ldc.i4:IDirect3DResource9*(0))");
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.$tGraphicsResource = function () {

	if (!this.isDisposed) {
		this.$exGraphicsResource();
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tGraphicsResource();
	} else {

		try {
			this.$exGraphicsResource();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_GraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype, "ResourceType", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_ResourceType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype, "Priority", {
		get: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.get_Priority, 
		set: Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.set_Priority
	});
Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GraphicsResource);
Microsoft.Xna.Framework.Graphics.Texture.prototype.alreadyRecreated = new System.Boolean();
Microsoft.Xna.Framework.Graphics.Texture.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.Texture.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.Texture.prototype.get_LevelOfDetail = JSIL.UntranslatableFunction("get_LevelOfDetail");

Microsoft.Xna.Framework.Graphics.Texture.prototype.set_LevelOfDetail = JSIL.UntranslatableFunction("set_LevelOfDetail");

Microsoft.Xna.Framework.Graphics.Texture.prototype.get_LevelCount = JSIL.UntranslatableFunction("get_LevelCount");

Microsoft.Xna.Framework.Graphics.Texture.prototype.GenerateMipMaps = JSIL.UntranslatableFunction("GenerateMipMaps");

Microsoft.Xna.Framework.Graphics.Texture.FromFile$0 = function (graphicsDevice, textureStream) {
	return Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, -1);
};

Microsoft.Xna.Framework.Graphics.Texture.FromFile$1 = function (graphicsDevice, textureStream, numberBytes) {
	var tempFileName = System.IO.Path.GetTempFileName();

	try {
		var fileStream = null;

		try {
			var array = Microsoft.Xna.Framework.Helpers.CheckAndReadStream(textureStream, numberBytes, JSIL.UnmaterializedReference());
			fileStream = System.IO.File.Create(tempFileName);
			fileStream.Write(array, 0, array.length);
		} finally {

			if (fileStream === null) {
				fileStream.Close();
			}
		}
		var result = Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, tempFileName);
	} finally {
		System.IO.File.Delete(tempFileName);
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.Texture.FromFile$2 = function (graphicsDevice, textureStream, creationParameters) {
	return Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, -1, creationParameters);
};

Microsoft.Xna.Framework.Graphics.Texture.FromFile$3 = function (graphicsDevice, textureStream, numberBytes, creationParameters) {
	var tempFileName = System.IO.Path.GetTempFileName();

	try {
		var fileStream = null;

		try {
			var array = Microsoft.Xna.Framework.Helpers.CheckAndReadStream(textureStream, numberBytes, JSIL.UnmaterializedReference());
			fileStream = System.IO.File.Create(tempFileName);
			fileStream.Write(array, 0, array.length);
		} finally {

			if (fileStream === null) {
				fileStream.Close();
			}
		}
		var result = Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, tempFileName, creationParameters);
	} finally {
		System.IO.File.Delete(tempFileName);
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.Texture.FromFile$4 = JSIL.UntranslatableFunction("FromFile");

Microsoft.Xna.Framework.Graphics.Texture.FromFile$5 = function (graphicsDevice, filename, width, height, depth) {
	var creationParameters = Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename));
	creationParameters.Width = width;
	creationParameters.Height = height;
	creationParameters.Depth = depth;
	return Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, creationParameters.MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.Texture.FromFile$6 = function (graphicsDevice, filename) {
	return Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename)));
};

Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation$0 = function (textureStream) {
	return Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(textureStream, -1);
};

Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation$1 = function (textureStream, numberBytes) {
	var num = new JSIL.Variable(0);
	var arg_14_0 = Microsoft.Xna.Framework.Helpers.CheckAndReadStream(textureStream, numberBytes, /* ref */ num);
	var result = new Microsoft.Xna.Framework.Graphics.TextureInformation();
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.D3DXGetImageInfoFromFileInMemory(JSIL.UntranslatableInstruction("ldelema[exp:modopt(IsConst) void*](uint8, arg_14_0, ldc.i4:int32(0))"), num.value, JSIL.UntranslatableInstruction("ldloca:TextureInformation&[exp:_D3DXIMAGE_INFO*](result)"));

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	result.Format = $lModule$g.ConvertWindowsFormatToXna(result.Format);
	return result;
};

Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation$2 = function (filename) {
	var fileStream = null;

	try {
		fileStream = System.IO.File.OpenRead(filename);
	} finally {

		if (fileStream === null) {
			fileStream.Close();
		}
	}
	var result = new Microsoft.Xna.Framework.Graphics.TextureInformation();
	var byte$am$spmodopt$lpSystem_Runtime_CompilerServices_IsExplicitlyDereferenced$rp = filename;

	if (byte$am$spmodopt$lpSystem_Runtime_CompilerServices_IsExplicitlyDereferenced$rp === null) {
		byte$am$spmodopt$lpSystem_Runtime_CompilerServices_IsExplicitlyDereferenced$rp = (System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData + byte$am$spmodopt$lpSystem_Runtime_CompilerServices_IsExplicitlyDereferenced$rp);
	}
	var uInt16$spmodopt$lpSystem_Runtime_CompilerServices_IsConst$rp$am$spmodopt$lpSystem_Runtime_CompilerServices_IsExplicitlyDereferenced$rp = byte$am$spmodopt$lpSystem_Runtime_CompilerServices_IsExplicitlyDereferenced$rp;
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.D3DXGetImageInfoFromFileW(JSIL.UntranslatableInstruction("ldloc:modopt(IsExplicitlyDereferenced) pinned modopt(IsConst) uint16&[exp:modopt(IsConst) uint16*](uInt16 modopt(System.Runtime.CompilerServices.IsConst)& modopt(System.Runtime.CompilerServices.IsExplicitlyDereferenced))"), JSIL.UntranslatableInstruction("ldloca:TextureInformation&[exp:_D3DXIMAGE_INFO*](result)"));

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	result.Format = $lModule$g.ConvertWindowsFormatToXna(result.Format);
	return result;
};

Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters$0 = function (graphicsDevice, texInfo) {
	var $default = Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Default;
	var width = texInfo.Width;
	var height = texInfo.Height;
	var depth = texInfo.Depth;
	var mipLevels = texInfo.MipLevels;
	var format = $lModule$g.ConvertXnaFormatToWindows(texInfo.Format);
	var resourceType = texInfo.resourceType;

	if (resourceType !== 3) {

		if (resourceType !== 4) {

			if (resourceType === 5) {
				var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.D3DXCheckCubeTextureRequirements(
					JSIL.UntranslatableInstruction("ternaryop:IDirect3DDevice9*(logicnot:bool(ldloc:GraphicsDevice[exp:bool](graphicsDevice)), ldc.i4:IDirect3DDevice9*(0), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice)))"), 
					JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](width)"), 
					JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](mipLevels)"), 
					$lModule$g.UnmaskResourceUsage($default.TextureUsage), 
					JSIL.UntranslatableInstruction("ldloca:_D3DFORMAT&[exp:_D3DFORMAT*](format)"), 
					1
				);

				if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
					throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
				}
			}
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.D3DXCheckVolumeTextureRequirements(
				JSIL.UntranslatableInstruction("ternaryop:IDirect3DDevice9*(logicnot:bool(ldloc:GraphicsDevice[exp:bool](graphicsDevice)), ldc.i4:IDirect3DDevice9*(0), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice)))"), 
				JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](width)"), 
				JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](height)"), 
				JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](depth)"), 
				JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](mipLevels)"), 
				$lModule$g.UnmaskResourceUsage($default.TextureUsage), 
				JSIL.UntranslatableInstruction("ldloca:_D3DFORMAT&[exp:_D3DFORMAT*](format)"), 
				1
			);

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 < 0) {
				throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2);
			}
		}
	} else {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3 = $lModule$g.D3DXCheckTextureRequirements(
			JSIL.UntranslatableInstruction("ternaryop:IDirect3DDevice9*(logicnot:bool(ldloc:GraphicsDevice[exp:bool](graphicsDevice)), ldc.i4:IDirect3DDevice9*(0), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice)))"), 
			JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](width)"), 
			JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](height)"), 
			JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](mipLevels)"), 
			$lModule$g.UnmaskResourceUsage($default.TextureUsage), 
			JSIL.UntranslatableInstruction("ldloca:_D3DFORMAT&[exp:_D3DFORMAT*](format)"), 
			1
		);

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3 < 0) {
			throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3);
		}
	}
	$default.Width = width;
	$default.Height = height;
	$default.Depth = depth;
	$default.MipLevels = mipLevels;
	$default.Format = $lModule$g.ConvertWindowsFormatToXna(format);
	return $default;
};

Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters$1 = function (graphicsDevice, textureStream) {
	return Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(textureStream, -1));
};

Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters$2 = function (graphicsDevice, textureStream, numberBytes) {
	return Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(textureStream, numberBytes));
};

Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters$3 = function (graphicsDevice, filename) {
	return Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename));
};

Microsoft.Xna.Framework.Graphics.Texture.prototype.Save = JSIL.UntranslatableFunction("Save");

Microsoft.Xna.Framework.Graphics.Texture.GetExpectedByteSizeFromFormat = function (format) {

	switch (format + Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color) {
		case 0: 
			throw new System.InvalidOperationException();
		case 2: 
			return 4;
		case 3: 
			return 4;
		case 4: 
			return 4;
		case 5: 
			return 4;
		case 6: 
			return 4;
		case 7: 
			return 4;
		case 8: 
			return 4;
		case 9: 
			return 8;
		case 10: 
			return 2;
		case 11: 
			return 2;
		case 12: 
			return 2;
		case 13: 
			return 2;
		case 14: 
			return 2;
		case 15: 
			return 2;
		case 16: 
			return 1;
		case 17: 
			return 1;
		case 18: 
			return 3;
		case 19: 
			return 2;
		case 20: 
			return 4;
		case 21: 
			return 4;
		case 22: 
			return 8;
		case 23: 
			return 4;
		case 24: 
			return 8;
		case 25: 
			return 16;
		case 26: 
			return 2;
		case 27: 
			return 4;
		case 28: 
			return 8;
		case 29: 
			return 1;
		case 30: 
			return 1;
		case 31: 
			return 1;
		case 32: 
			return 1;
		case 33: 
			return 1;
		case 34: 
			return 1;
		case 35: 
			return 2;
		case 36: 
			return 1;
		case 37: 
			return 2;
		case 38: 
			return 1;
		case 39: 
			return 2;
		case 40: 
			return 2;
		case 41: 
			return 4;
		case 42: 
			return 4;
		case 43: 
			return 2;
		case 44: 
			return 2;
		case 45: 
			return 2;
		case 46: 
			return 2;
		case 47: 
			return 2;
		case 48: 
			return 4;
		case 49: 
			return 4;
		case 50: 
			return 4;
		case 51: 
			return 4;
		case 52: 
			return 4;
		case 53: 
			return 4;
		case 55: 
			return 2;
		case 57: 
			return 2;
	}
	throw new System.InvalidOperationException();
};

Microsoft.Xna.Framework.Graphics.Texture.ValidateCopyParameters = function (data, dataIndex, elementCount) {

	if (dataIndex >= 0) {
		var num = data.length;

		if (dataIndex <= num) {

			if ((dataIndex + elementCount) > num) {
				throw new System.ArgumentOutOfRangeException("elementCount", Microsoft.Xna.Framework.FrameworkResources.ValidIndex);
			}

			if (elementCount <= 0) {
				throw new System.ArgumentOutOfRangeException("elementCount", Microsoft.Xna.Framework.FrameworkResources.ValidIndex);
			}
			return ;
		}
	}
	throw new System.ArgumentOutOfRangeException("dataIndex", Microsoft.Xna.Framework.FrameworkResources.ValidIndex);
};

Microsoft.Xna.Framework.Graphics.Texture.CheckCompressedTexture = function (format) {

	if (!((format === Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt1) || 
			(format === Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt2) || 
			(format === Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt3) || 
			(format === Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt4) || (format === Microsoft.Xna.Framework.Graphics.SurfaceFormat.Dxt5))) {
		var num = 0;
	} else {
		num = 1;
	}
	return num;
};

Microsoft.Xna.Framework.Graphics.Texture.prototype.$exTexture = function () {
	JSIL.UntranslatableInstruction("stfld:IDirect3DBaseTexture9*(Texture::pComPtr, ldloc:Texture(this), ldc.i4:IDirect3DBaseTexture9*(0))");
};

Microsoft.Xna.Framework.Graphics.Texture.prototype.$tTexture = function () {
	JSIL.UntranslatableInstruction("stfld:IDirect3DBaseTexture9*(Texture::pComPtr, ldloc:Texture(this), ldc.i4:IDirect3DBaseTexture9*(0))");
};

Microsoft.Xna.Framework.Graphics.Texture.IsDepthFormat = function (format) {

	switch (format) {
		case 48: 
		case 49: 
		case 50: 
		case 51: 
		case 52: 
		case 54: 
		case 56: 
			return true;
	}
	return false;
};

Microsoft.Xna.Framework.Graphics.Texture.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			JSIL.UntranslatableInstruction("stfld:IDirect3DBaseTexture9*(Texture::pComPtr, ldloc:Texture(this), ldc.i4:IDirect3DBaseTexture9*(0))");
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Dispose.call(this, true);
		}
	}

	try {
		JSIL.UntranslatableInstruction("stfld:IDirect3DBaseTexture9*(Texture::pComPtr, ldloc:Texture(this), ldc.i4:IDirect3DBaseTexture9*(0))");
	} finally {
		Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Dispose.call(this, false);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture, "FromFile", [
		["FromFile$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream]], 
		["FromFile$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32]], 
		["FromFile$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$4", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$5", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, System.Int32, System.Int32, System.Int32]], 
		["FromFile$6", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture, "GetTextureInformation", [
		["GetTextureInformation$0", [System.IO.Stream]], 
		["GetTextureInformation$1", [System.IO.Stream, System.Int32]], 
		["GetTextureInformation$2", [System.String]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture, "GetCreationParameters", [
		["GetCreationParameters$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Graphics.TextureInformation]], 
		["GetCreationParameters$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream]], 
		["GetCreationParameters$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32]], 
		["GetCreationParameters$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture.prototype, "LevelCount", {
		get: Microsoft.Xna.Framework.Graphics.Texture.prototype.get_LevelCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture.prototype, "LevelOfDetail", {
		get: Microsoft.Xna.Framework.Graphics.Texture.prototype.get_LevelOfDetail, 
		set: Microsoft.Xna.Framework.Graphics.Texture.prototype.set_LevelOfDetail
	});

Object.seal(Microsoft.Xna.Framework.Graphics.Texture.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Texture);
Microsoft.Xna.Framework.Graphics.Texture2D.prototype._format = 0;
Microsoft.Xna.Framework.Graphics.Texture2D.prototype._usage = 0;
Microsoft.Xna.Framework.Graphics.Texture2D.prototype._width = 0;
Microsoft.Xna.Framework.Graphics.Texture2D.prototype._height = 0;
Microsoft.Xna.Framework.Graphics.Texture2D.prototype._shouldNotRecreate = new System.Boolean();
Microsoft.Xna.Framework.Graphics.Texture2D.prototype._levelCount = 0;
Microsoft.Xna.Framework.Graphics.Texture2D.prototype.pFaceData = null;
Microsoft.Xna.Framework.Graphics.Texture2D.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.Texture2D.prototype.get_Format = function () {
	return this._format;
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.get_TextureUsage = function () {
	return this._usage;
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.get_Width = function () {
	return this._width;
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.get_Height = function () {
	return this._height;
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype._ctor$1 = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype._ctor$2 = function (graphicsDevice, width, height) {
	System.Object.prototype._ctor.call(this);
	this.CreateTexture(
		graphicsDevice, 
		width, 
		height, 
		1, 
		0, 
		1, 
		Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color
	);
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype._ctor$3 = function (graphicsDevice, width, height, numberLevels, usage, format) {
	System.Object.prototype._ctor.call(this);
	this.CreateTexture(
		graphicsDevice, 
		width, 
		height, 
		numberLevels, 
		usage, 
		1, 
		format
	);
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.Texture2D.FromFile$0 = function (graphicsDevice, textureStream) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, -1), Microsoft.Xna.Framework.Graphics.Texture2D);
};

Microsoft.Xna.Framework.Graphics.Texture2D.FromFile$1 = function (graphicsDevice, textureStream, numberBytes) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, numberBytes), Microsoft.Xna.Framework.Graphics.Texture2D);
};

Microsoft.Xna.Framework.Graphics.Texture2D.FromFile$2 = function (graphicsDevice, textureStream, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, -1, creationParameters), Microsoft.Xna.Framework.Graphics.Texture2D);
};

Microsoft.Xna.Framework.Graphics.Texture2D.FromFile$3 = function (graphicsDevice, textureStream, numberBytes, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, numberBytes, creationParameters), Microsoft.Xna.Framework.Graphics.Texture2D);
};

Microsoft.Xna.Framework.Graphics.Texture2D.FromFile$4 = function (graphicsDevice, filename, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, creationParameters), Microsoft.Xna.Framework.Graphics.Texture2D);
};

Microsoft.Xna.Framework.Graphics.Texture2D.FromFile$5 = function (graphicsDevice, filename, width, height) {
	var creationParameters = Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename));
	creationParameters.Width = width;
	creationParameters.Height = height;
	creationParameters.Depth = 0;
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, creationParameters.MemberwiseClone()), Microsoft.Xna.Framework.Graphics.Texture2D);
};

Microsoft.Xna.Framework.Graphics.Texture2D.FromFile$6 = function (graphicsDevice, filename) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename))), Microsoft.Xna.Framework.Graphics.Texture2D);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.SetData$0 = function (data) {
	this.SetData(
		0, 
		new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
		data, 
		0, 
		data.length, 
		Microsoft.Xna.Framework.Graphics.SetDataOptions.None
	);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.SetData$1 = function (data, startIndex, elementCount, options) {
	this.SetData(
		0, 
		new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
		data, 
		startIndex, 
		elementCount, 
		options
	);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.SetData$2 = function (level, rect, data, startIndex, elementCount, options) {
	this.CopyData(
		level, 
		rect, 
		data, 
		startIndex, 
		elementCount, 
		options, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.GetData$0 = function (data) {
	this.GetData(
		0, 
		new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
		data, 
		0, 
		data.length
	);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.GetData$1 = function (data, startIndex, elementCount) {
	this.GetData(
		0, 
		new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
		data, 
		startIndex, 
		elementCount
	);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.GetData$2 = function (level, rect, data, startIndex, elementCount) {
	this.CopyData(
		level, 
		rect, 
		data, 
		startIndex, 
		elementCount, 
		16, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.CopyData = JSIL.UntranslatableFunction("CopyData");

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.CreateObjects = function (device) {
	this.isDisposed = false;
	this.pCachedDevice = device;
	JSIL.IgnoredMember("SetObject(pBaseTexture)");
	this.InitializeDescription();
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.InitializeDescription = JSIL.UntranslatableFunction("InitializeDescription");

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.CreateTexture = JSIL.UntranslatableFunction("CreateTexture");

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.IGraphicsResource_SaveDataForRecreation = function () {

	if (this.pComPtr !== null) {
		return 0;
	}
	this.CleanupSavedData();
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = this.CopyOrRestoreData(true);

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
		this.IGraphicsResource_ReleaseNativeObject(false);
	} else {
		this.CleanupSavedData();
	}
	this.alreadyRecreated = false;
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var pCachedDevice = this.pCachedDevice;

	if (!((pCachedDevice !== null) || (this.pComPtr !== null))) {
		pCachedDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DTexture9*(Texture2D::pComPtr, ldloc:Texture2D(this), ldc.i4:IDirect3DTexture9*(0))");
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.CopyOrRestoreData = JSIL.UntranslatableFunction("CopyOrRestoreData");

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.CleanupSavedData = JSIL.UntranslatableFunction("CleanupSavedData");

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.OnObjectCreation = function (pDevice) {
	this.InitializeDescription();
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.$exTexture2D = function () {

	if (!this.isDisposed) {
		this.IGraphicsResource_ReleaseNativeObject(true);
		this.CleanupSavedData();
	}
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.$tTexture2D = function () {
	this.$exTexture2D();
};

Microsoft.Xna.Framework.Graphics.Texture2D.ValidateSizeParamsAgainstCaps = function (width, height, caps, numberLevels, widthParamName, heightParamName) {

	if (!(((width === 0) && 
				!((width - 1) & width) && 
				(height === 0) && 
				!((height - 1) & height)) || !((caps + 60) & 2))) {

		if (!((caps + 60) & 256)) {
			throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NoPower2Width, "width");
		}

		if (numberLevels !== 1) {
			throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NoPower2WidthMulti, "numberLevels");
		}
	}

	if (!((width === height) || !((caps + 60) & 32))) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.MustUseSquareTextures, "width");
	}

	if (width > (caps + 88)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.WidthHeightTooLarge, widthParamName);
	}

	if (height > (caps + 92)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.WidthHeightTooLarge, heightParamName);
	}
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			this.$tTexture2D();
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.Texture.prototype.Dispose.call(this, true);
		}
	}

	try {
		this.$exTexture2D();
	} finally {
		Microsoft.Xna.Framework.Graphics.Texture.prototype.Dispose.call(this, false);
	}
};

Microsoft.Xna.Framework.Graphics.Texture2D.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture2D.prototype, "_ctor", [
		["_ctor$1", []], 
		["_ctor$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32]], 
		["_ctor$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.TextureUsage, Microsoft.Xna.Framework.Graphics.SurfaceFormat]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture2D, "FromFile", [
		["FromFile$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream]], 
		["FromFile$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32]], 
		["FromFile$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$4", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$5", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, System.Int32, System.Int32]], 
		["FromFile$6", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture2D.prototype, "SetData", [
		["SetData$0", [System.Array.Of(T)]], 
		["SetData$1", [System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]], 
		["SetData$2", [System.Int32, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture2D.prototype, "GetData", [
		["GetData$0", [System.Array.Of(T)]], 
		["GetData$1", [System.Array.Of(T), System.Int32, System.Int32]], 
		["GetData$2", [System.Int32, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), System.Array.Of(T), System.Int32, System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture2D.prototype, "Height", {
		get: Microsoft.Xna.Framework.Graphics.Texture2D.prototype.get_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture2D.prototype, "Width", {
		get: Microsoft.Xna.Framework.Graphics.Texture2D.prototype.get_Width
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture2D.prototype, "TextureUsage", {
		get: Microsoft.Xna.Framework.Graphics.Texture2D.prototype.get_TextureUsage
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture2D.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.Texture2D.prototype.get_Format
	});
Microsoft.Xna.Framework.Graphics.Texture2D.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);

Object.seal(Microsoft.Xna.Framework.Graphics.Texture2D.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Texture2D);
Microsoft.Xna.Framework.Graphics.Texture3D.prototype._format = 0;
Microsoft.Xna.Framework.Graphics.Texture3D.prototype._usage = 0;
Microsoft.Xna.Framework.Graphics.Texture3D.prototype._width = 0;
Microsoft.Xna.Framework.Graphics.Texture3D.prototype._height = 0;
Microsoft.Xna.Framework.Graphics.Texture3D.prototype._depth = 0;
Microsoft.Xna.Framework.Graphics.Texture3D.prototype.pFaceData = null;
Microsoft.Xna.Framework.Graphics.Texture3D.prototype._levelCount = 0;
Microsoft.Xna.Framework.Graphics.Texture3D.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.Texture3D.prototype.GetDescription = JSIL.UntranslatableFunction("GetDescription");

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_Format = function () {
	return this._format;
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_TextureUsage = function () {
	return this._usage;
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_Width = function () {
	return this._width;
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_Height = function () {
	return this._height;
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_Depth = function () {
	return this._depth;
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype._ctor$1 = function (graphicsDevice, width, height, depth, numberLevels, usage, format) {
	System.Object.prototype._ctor.call(this);
	this.CreateTexture(
		graphicsDevice, 
		width, 
		height, 
		depth, 
		numberLevels, 
		usage, 
		format
	);
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.Texture3D.FromFile$0 = function (graphicsDevice, textureStream) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, -1), Microsoft.Xna.Framework.Graphics.Texture3D);
};

Microsoft.Xna.Framework.Graphics.Texture3D.FromFile$1 = function (graphicsDevice, textureStream, numberBytes) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, numberBytes), Microsoft.Xna.Framework.Graphics.Texture3D);
};

Microsoft.Xna.Framework.Graphics.Texture3D.FromFile$2 = function (graphicsDevice, textureStream, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, -1, creationParameters), Microsoft.Xna.Framework.Graphics.Texture3D);
};

Microsoft.Xna.Framework.Graphics.Texture3D.FromFile$3 = function (graphicsDevice, textureStream, numberBytes, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, numberBytes, creationParameters), Microsoft.Xna.Framework.Graphics.Texture3D);
};

Microsoft.Xna.Framework.Graphics.Texture3D.FromFile$4 = function (graphicsDevice, filename, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, creationParameters), Microsoft.Xna.Framework.Graphics.Texture3D);
};

Microsoft.Xna.Framework.Graphics.Texture3D.FromFile$5 = function (graphicsDevice, filename, width, height, depth) {
	var creationParameters = Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename));
	creationParameters.Width = width;
	creationParameters.Height = height;
	creationParameters.Depth = depth;
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, creationParameters.MemberwiseClone()), Microsoft.Xna.Framework.Graphics.Texture3D);
};

Microsoft.Xna.Framework.Graphics.Texture3D.FromFile$6 = function (graphicsDevice, filename) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename))), Microsoft.Xna.Framework.Graphics.Texture3D);
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.SetData$0 = function (data) {
	this.SetData(
		0, 
		0, 
		0, 
		0, 
		0, 
		0, 
		0, 
		data, 
		0, 
		data.length, 
		Microsoft.Xna.Framework.Graphics.SetDataOptions.None
	);
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.SetData$1 = function (data, startIndex, elementCount, options) {
	this.SetData(
		0, 
		0, 
		0, 
		0, 
		0, 
		0, 
		0, 
		data, 
		startIndex, 
		elementCount, 
		options
	);
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.SetData$2 = function (level, left, top, right, bottom, front, back, data, startIndex, elementCount, options) {
	this.CopyData(
		level, 
		left, 
		top, 
		right, 
		bottom, 
		front, 
		back, 
		data, 
		startIndex, 
		elementCount, 
		options, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.GetData$0 = function (data) {
	this.GetData(
		0, 
		0, 
		0, 
		0, 
		0, 
		0, 
		0, 
		data, 
		0, 
		data.length
	);
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.GetData$1 = function (data, startIndex, elementCount) {
	this.GetData(
		0, 
		0, 
		0, 
		0, 
		0, 
		0, 
		0, 
		data, 
		startIndex, 
		elementCount
	);
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.GetData$2 = function (level, left, top, right, bottom, front, back, data, startIndex, elementCount) {
	this.CopyData(
		level, 
		left, 
		top, 
		right, 
		bottom, 
		front, 
		back, 
		data, 
		startIndex, 
		elementCount, 
		16, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.CopyData = JSIL.UntranslatableFunction("CopyData");

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.CreateObjects = function (device) {
	this.isDisposed = false;
	this.pCachedDevice = device;
	JSIL.IgnoredMember("SetObject(pBaseTexture)");
	this.GetDescription();
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.CreateTexture = JSIL.UntranslatableFunction("CreateTexture");

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.IGraphicsResource_SaveDataForRecreation = function () {

	if (this.pComPtr !== null) {
		return 0;
	}
	this.CleanupSavedData();
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = this.CopyOrRestoreData(true);

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
		this.IGraphicsResource_ReleaseNativeObject(false);
	} else {
		this.CleanupSavedData();
	}
	this.alreadyRecreated = false;
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var pCachedDevice = this.pCachedDevice;

	if (!((pCachedDevice !== null) || (this.pComPtr !== null))) {
		pCachedDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DVolumeTexture9*(Texture3D::pComPtr, ldloc:Texture3D(this), ldc.i4:IDirect3DVolumeTexture9*(0))");
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.CopyOrRestoreData = JSIL.UntranslatableFunction("CopyOrRestoreData");

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.CleanupSavedData = JSIL.UntranslatableFunction("CleanupSavedData");

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.OnObjectCreation = function (pDevice) {
	this.GetDescription();
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.$exTexture3D = function () {

	if (!this.isDisposed) {
		this.IGraphicsResource_ReleaseNativeObject(true);
		this.CleanupSavedData();
	}
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.$tTexture3D = function () {
	this.$exTexture3D();
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			this.$tTexture3D();
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.Texture.prototype.Dispose.call(this, true);
		}
	}

	try {
		this.$exTexture3D();
	} finally {
		Microsoft.Xna.Framework.Graphics.Texture.prototype.Dispose.call(this, false);
	}
};

Microsoft.Xna.Framework.Graphics.Texture3D.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture3D.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.TextureUsage, Microsoft.Xna.Framework.Graphics.SurfaceFormat]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture3D, "FromFile", [
		["FromFile$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream]], 
		["FromFile$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32]], 
		["FromFile$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$4", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$5", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, System.Int32, System.Int32, System.Int32]], 
		["FromFile$6", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture3D.prototype, "SetData", [
		["SetData$0", [System.Array.Of(T)]], 
		["SetData$1", [System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]], 
		["SetData$2", [System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Texture3D.prototype, "GetData", [
		["GetData$0", [System.Array.Of(T)]], 
		["GetData$1", [System.Array.Of(T), System.Int32, System.Int32]], 
		["GetData$2", [System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Array.Of(T), System.Int32, System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture3D.prototype, "Depth", {
		get: Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_Depth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture3D.prototype, "Height", {
		get: Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture3D.prototype, "Width", {
		get: Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_Width
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture3D.prototype, "TextureUsage", {
		get: Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_TextureUsage
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Texture3D.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.Texture3D.prototype.get_Format
	});
Microsoft.Xna.Framework.Graphics.Texture3D.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);

Object.seal(Microsoft.Xna.Framework.Graphics.Texture3D.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Texture3D);
Microsoft.Xna.Framework.Graphics.TextureCube.prototype._format = 0;
Microsoft.Xna.Framework.Graphics.TextureCube.prototype._usage = 0;
Microsoft.Xna.Framework.Graphics.TextureCube.prototype._size = 0;
Microsoft.Xna.Framework.Graphics.TextureCube.prototype._shouldNotRecreate = new System.Boolean();
Microsoft.Xna.Framework.Graphics.TextureCube.prototype.pFaceData = null;
Microsoft.Xna.Framework.Graphics.TextureCube.prototype._levelCount = 0;
Microsoft.Xna.Framework.Graphics.TextureCube.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.TextureCube.prototype.get_Format = function () {
	return this._format;
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.get_TextureUsage = function () {
	return this._usage;
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.get_Size = function () {
	return this._size;
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype._ctor$1 = function (graphicsDevice, size, numberLevels, usage, format) {
	System.Object.prototype._ctor.call(this);
	this.CreateTexture(
		graphicsDevice, 
		size, 
		numberLevels, 
		usage, 
		format
	);
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.TextureCube.FromFile$0 = function (graphicsDevice, textureStream) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, -1), Microsoft.Xna.Framework.Graphics.TextureCube);
};

Microsoft.Xna.Framework.Graphics.TextureCube.FromFile$1 = function (graphicsDevice, textureStream, numberBytes) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, numberBytes), Microsoft.Xna.Framework.Graphics.TextureCube);
};

Microsoft.Xna.Framework.Graphics.TextureCube.FromFile$2 = function (graphicsDevice, textureStream, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, -1, creationParameters), Microsoft.Xna.Framework.Graphics.TextureCube);
};

Microsoft.Xna.Framework.Graphics.TextureCube.FromFile$3 = function (graphicsDevice, textureStream, numberBytes, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, textureStream, numberBytes, creationParameters), Microsoft.Xna.Framework.Graphics.TextureCube);
};

Microsoft.Xna.Framework.Graphics.TextureCube.FromFile$4 = function (graphicsDevice, filename, creationParameters) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, creationParameters), Microsoft.Xna.Framework.Graphics.TextureCube);
};

Microsoft.Xna.Framework.Graphics.TextureCube.FromFile$5 = function (graphicsDevice, filename, size) {
	var creationParameters = Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename));
	creationParameters.Width = size;
	creationParameters.Height = 0;
	creationParameters.Depth = 0;
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, creationParameters.MemberwiseClone()), Microsoft.Xna.Framework.Graphics.TextureCube);
};

Microsoft.Xna.Framework.Graphics.TextureCube.FromFile$6 = function (graphicsDevice, filename) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.Texture.FromFile(graphicsDevice, filename, Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(graphicsDevice, Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(filename))), Microsoft.Xna.Framework.Graphics.TextureCube);
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.SetData$0 = function (faceType, data) {
	this.SetData(
		faceType, 
		0, 
		new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
		data, 
		0, 
		data.length, 
		Microsoft.Xna.Framework.Graphics.SetDataOptions.None
	);
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.SetData$1 = function (faceType, data, startIndex, elementCount, options) {
	this.SetData(
		faceType, 
		0, 
		new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
		data, 
		startIndex, 
		elementCount, 
		options
	);
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.SetData$2 = function (faceType, level, rect, data, startIndex, elementCount, options) {
	this.CopyData(
		faceType, 
		level, 
		rect, 
		data, 
		startIndex, 
		elementCount, 
		options, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.GetData$0 = function (faceType, data) {
	this.GetData(
		faceType, 
		0, 
		new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
		data, 
		0, 
		data.length
	);
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.GetData$1 = function (faceType, data, startIndex, elementCount) {
	this.GetData(
		faceType, 
		0, 
		new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
		data, 
		startIndex, 
		elementCount
	);
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.GetData$2 = function (faceType, level, rect, data, startIndex, elementCount) {
	this.CopyData(
		faceType, 
		level, 
		rect, 
		data, 
		startIndex, 
		elementCount, 
		16, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.CopyData = JSIL.UntranslatableFunction("CopyData");

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.CreateObjects = function (device) {
	this.isDisposed = false;
	this.pCachedDevice = device;
	JSIL.IgnoredMember("SetObject(pBaseTexture)");
	this.InitializeDescription();
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.InitializeDescription = JSIL.UntranslatableFunction("InitializeDescription");

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.CreateTexture = JSIL.UntranslatableFunction("CreateTexture");

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.IGraphicsResource_SaveDataForRecreation = function () {

	if (this.pComPtr !== null) {
		return 0;
	}
	this.CleanupSavedData();
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = this.CopyOrRestoreData(true);

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
		this.IGraphicsResource_ReleaseNativeObject(false);
	} else {
		this.CleanupSavedData();
	}
	this.alreadyRecreated = false;
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var pCachedDevice = this.pCachedDevice;

	if (!((pCachedDevice !== null) || (this.pComPtr !== null))) {
		pCachedDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DCubeTexture9*(TextureCube::pComPtr, ldloc:TextureCube(this), ldc.i4:IDirect3DCubeTexture9*(0))");
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.CopyOrRestoreData = JSIL.UntranslatableFunction("CopyOrRestoreData");

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.CleanupSavedData = JSIL.UntranslatableFunction("CleanupSavedData");

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.OnObjectCreation = function (pDevice) {
	this.InitializeDescription();
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.$exTextureCube = function () {

	if (!this.isDisposed) {
		this.IGraphicsResource_ReleaseNativeObject(true);
		this.CleanupSavedData();
	}
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.$tTextureCube = function () {
	this.$exTextureCube();
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			this.$tTextureCube();
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.Texture.prototype.Dispose.call(this, true);
		}
	}

	try {
		this.$exTextureCube();
	} finally {
		Microsoft.Xna.Framework.Graphics.Texture.prototype.Dispose.call(this, false);
	}
};

Microsoft.Xna.Framework.Graphics.TextureCube.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.TextureCube.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.TextureUsage, Microsoft.Xna.Framework.Graphics.SurfaceFormat]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.TextureCube, "FromFile", [
		["FromFile$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream]], 
		["FromFile$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32]], 
		["FromFile$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$4", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, Microsoft.Xna.Framework.Graphics.TextureCreationParameters]], 
		["FromFile$5", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, System.Int32]], 
		["FromFile$6", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.TextureCube.prototype, "SetData", [
		["SetData$0", [Microsoft.Xna.Framework.Graphics.CubeMapFace, System.Array.Of(T)]], 
		["SetData$1", [Microsoft.Xna.Framework.Graphics.CubeMapFace, System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]], 
		["SetData$2", [Microsoft.Xna.Framework.Graphics.CubeMapFace, System.Int32, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.TextureCube.prototype, "GetData", [
		["GetData$0", [Microsoft.Xna.Framework.Graphics.CubeMapFace, System.Array.Of(T)]], 
		["GetData$1", [Microsoft.Xna.Framework.Graphics.CubeMapFace, System.Array.Of(T), System.Int32, System.Int32]], 
		["GetData$2", [Microsoft.Xna.Framework.Graphics.CubeMapFace, System.Int32, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), System.Array.Of(T), System.Int32, System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCube.prototype, "Size", {
		get: Microsoft.Xna.Framework.Graphics.TextureCube.prototype.get_Size
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCube.prototype, "TextureUsage", {
		get: Microsoft.Xna.Framework.Graphics.TextureCube.prototype.get_TextureUsage
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCube.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.TextureCube.prototype.get_Format
	});
Microsoft.Xna.Framework.Graphics.TextureCube.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);

Object.seal(Microsoft.Xna.Framework.Graphics.TextureCube.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.TextureCube);

Object.seal(IDirect3DDevice9);

Object.seal(IDirect3DSurface9);

Object.seal(IDirect3DResource9);

Object.seal(_D3DSURFACE_DESC.prototype);
Object.seal(_D3DSURFACE_DESC);

Object.seal(IDirect3DBaseTexture9);

Object.seal(IDirect3DTexture9);

Object.seal(IDirect3DVolumeTexture9);

Object.seal(_D3DVOLUME_DESC.prototype);
Object.seal(_D3DVOLUME_DESC);

Object.seal(_D3DBOX.prototype);
Object.seal(_D3DBOX);

Object.seal(IDirect3DCubeTexture9);

Object.seal(_D3DXIMAGE_INFO.prototype);
Object.seal(_D3DXIMAGE_INFO);

Object.seal(tagPALETTEENTRY.prototype);
Object.seal(tagPALETTEENTRY);
Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.pDevice = null;
Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.dwEnabledIndex = null;
Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.dwIndex = null;
Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.pParent = null;
Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.get_Plane = JSIL.UntranslatableFunction("get_Plane");

Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.set_Plane = JSIL.UntranslatableFunction("set_Plane");

Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.get_IsEnabled = JSIL.UntranslatableFunction("get_IsEnabled");

Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.set_IsEnabled = JSIL.UntranslatableFunction("set_IsEnabled");

Microsoft.Xna.Framework.Graphics.ClipPlane.prototype._ctor = function (pParentDevice, pCollection, index) {
	this.pDevice = pParentDevice;
	this.dwEnabledIndex = (1 << index);
	this.dwIndex = index;
	this.pParent = pCollection;
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ClipPlane.prototype, "IsEnabled", {
		get: Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.get_IsEnabled, 
		set: Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.set_IsEnabled
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ClipPlane.prototype, "Plane", {
		get: Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.get_Plane, 
		set: Microsoft.Xna.Framework.Graphics.ClipPlane.prototype.set_Plane
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ClipPlane.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ClipPlane);
Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype.pClipPlanes = null;
Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype.pDevice = null;
Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype.dwCurrentClipPlanes = null;
Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype.EnableAll = JSIL.UntranslatableFunction("EnableAll");

Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype.DisableAll = JSIL.UntranslatableFunction("DisableAll");

Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype.get_Item = function (index) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":

				if (index > 31) {
					throw new System.ArgumentOutOfRangeException("ClipPlaneCollection");
				}
				var array = this.pClipPlanes;

				if (array === null) {
					var num = array.length;

					if (num === 0) {

						if (num <= index) {
							var destinationArray = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.ClipPlane, (index + 1));
							System.Array.Copy(
								array, 
								0, 
								destinationArray, 
								0, 
								num
							);
							this.pClipPlanes = destinationArray;
						}

						if (!this.pClipPlanes[index]) {
							this.pClipPlanes[index] = new Microsoft.Xna.Framework.Graphics.ClipPlane(this.pDevice, this, index);
							__label0__ = "IL_82";
							continue __step0__;
						}
						__label0__ = "IL_82";
						continue __step0__;
					}
				}
				this.pClipPlanes = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.ClipPlane, (index + 1));
				this.pClipPlanes[index] = new Microsoft.Xna.Framework.Graphics.ClipPlane(this.pDevice, this, index);
				__label0__ = "IL_82";
				continue __step0__;
				break;

			case "IL_82":
				return this.pClipPlanes[index];
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype._ctor = function (pParent) {
	this.pClipPlanes = null;
	this.pDevice = pParent;
	this.dwCurrentClipPlanes = 0;
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype.get_Item
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ClipPlaneCollection);
Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype.$exCompilerIncludeHandler = function () {
};

Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype.$tCompilerIncludeHandler = function () {
};

Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype.Dispose$0 = function (flag) {

	if (!flag) {

		try {
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler);
Microsoft.Xna.Framework.Graphics.CompilationFailedException.prototype._ctor$0 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

Microsoft.Xna.Framework.Graphics.CompilationFailedException.prototype._ctor$1 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Graphics.CompilationFailedException.prototype._ctor$2 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Graphics.CompilationFailedException.prototype._ctor$3 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.CompilationFailedException.prototype, "_ctor", [
		["_ctor$0", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]], 
		["_ctor$1", [System.String, System.Exception]], 
		["_ctor$2", [System.String]], 
		["_ctor$3", []]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.CompilationFailedException.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.CompilationFailedException);
Microsoft.Xna.Framework.Graphics.CompilerHelper.BadErrorString = null;
Microsoft.Xna.Framework.Graphics.CompilerHelper.GetCompilationSuccessful = function (pString) {

	if (System.String.IsNullOrEmpty(pString)) {
		return true;
	}

	if (!(pString.Contains("error") || pString.Contains("failed"))) {
		var num = 1;
	} else {
		num = 0;
	}
	return num;
};

Microsoft.Xna.Framework.Graphics.CompilerHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.CompilerHelper._cctor = function () {
	Microsoft.Xna.Framework.Graphics.CompilerHelper.BadErrorString = "Please send your HLSL code to xboxds@xbox.com.";
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.CompilerHelper, "GetErrorStringFromD3DXBuffer", [

	]
);
Microsoft.Xna.Framework.Graphics.CompilerHelper._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.CompilerHelper.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.CompilerHelper);
Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.$lbacking_store$gVertexElementUsage = 0;
Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.$lbacking_store$gUsageIndex = 0;
Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Usage:{0} UsageIndex:{1}}}", [this.$lbacking_store$gVertexElementUsage, this.$lbacking_store$gUsageIndex]);
};

Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.get_VertexElementUsage = function () {
	return this.$lbacking_store$gVertexElementUsage;
};

Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.set_VertexElementUsage = function (__set_formal) {
	this.$lbacking_store$gVertexElementUsage = __set_formal;
};

Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.get_UsageIndex = function () {
	return this.$lbacking_store$gUsageIndex;
};

Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.set_UsageIndex = function (__set_formal) {
	this.$lbacking_store$gUsageIndex = __set_formal;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype, "UsageIndex", {
		get: Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.get_UsageIndex, 
		set: Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.set_UsageIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype, "VertexElementUsage", {
		get: Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.get_VertexElementUsage, 
		set: Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype.set_VertexElementUsage
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ShaderSemantic.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ShaderSemantic);
Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.$lbacking_store$gName = null;
Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.$lbacking_store$gDefinition = null;
Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, '{{Name:"{0}" Definition:"{1}"}}', [this.$lbacking_store$gName, this.$lbacking_store$gDefinition]);
};

Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.get_Name = function () {
	return this.$lbacking_store$gName;
};

Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.set_Name = function (__set_formal) {
	this.$lbacking_store$gName = __set_formal;
};

Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.get_Definition = function () {
	return this.$lbacking_store$gDefinition;
};

Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.set_Definition = function (__set_formal) {
	this.$lbacking_store$gDefinition = __set_formal;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype, "Definition", {
		get: Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.get_Definition, 
		set: Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.set_Definition
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype.set_Name
	});

Object.seal(Microsoft.Xna.Framework.Graphics.CompilerMacro.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.CompilerMacro);
Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype._effectCode = null;
Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype._errors = null;
Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype.toString = function () {
	var effectCode = this._effectCode;

	if (effectCode === null) {
		var num = effectCode.length;
	} else {
		num = 0;
	}
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, '{{CodeSize:{0} Errors:"{1}"}}', [num, this._errors]);
};

Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype.GetEffectCode = function () {
	return this._effectCode;
};

Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype.get_ErrorsAndWarnings = function () {
	return this._errors;
};

Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype.get_Success = function () {
	return Microsoft.Xna.Framework.Graphics.CompilerHelper.GetCompilationSuccessful(this._errors);
};

Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype._ctor = function (compiledEffectCode, errors) {
	this._effectCode = compiledEffectCode;
	this._errors = errors;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype, "Success", {
		get: Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype.get_Success
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype, "ErrorsAndWarnings", {
		get: Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype.get_ErrorsAndWarnings
	});

Object.seal(Microsoft.Xna.Framework.Graphics.CompiledEffect.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.CompiledEffect);
Microsoft.Xna.Framework.Graphics.CompiledShader.prototype._shaderCode = null;
Microsoft.Xna.Framework.Graphics.CompiledShader.prototype._errors = null;
Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.toString = function () {
	var shaderCode = this._shaderCode;

	if (shaderCode === null) {
		var num = shaderCode.length;
	} else {
		num = 0;
	}
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, '{{CodeSize:{0} Errors:"{1}"}}', [num, this._errors]);
};

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.GetShaderCode = function () {
	return this._shaderCode;
};

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.get_ErrorsAndWarnings = function () {
	return this._errors;
};

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.get_Success = function () {
	return Microsoft.Xna.Framework.Graphics.CompilerHelper.GetCompilationSuccessful(this._errors);
};

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype._ctor = function (compiledShaderCode, errors) {
	this._shaderCode = compiledShaderCode;
	this._errors = errors;
};

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.GetSamplers = JSIL.UntranslatableFunction("GetSamplers");

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.GetInputSemantics = function () {
	var $ArrayType$$$BY0EA$atU_D3DXSEMANTIC$at$at = new $lCppImplementationDetails$g.$ArrayType$$$BY0EA$atU_D3DXSEMANTIC$at$at();
	var shaderCode = this._shaderCode;

	if ((shaderCode !== null) || (shaderCode.length !== 0)) {
		throw new System.ArgumentNullException("_shaderCode", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var var_5_15_cp_0 = shaderCode;
	var num = 0;
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.D3DXGetShaderInputSemantics(JSIL.UntranslatableInstruction("ldelema[exp:modopt(IsConst) modopt(IsLong) uint32*](uint8, var_5_15_cp_0, var_5_15_cp_1:int32)"), JSIL.UntranslatableInstruction("ldloca:$ArrayType$$$BY0EA@U_D3DXSEMANTIC@@&[exp:_D3DXSEMANTIC*]($ArrayType$$$BY0EA@U_D3DXSEMANTIC@@)"), JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](num)"));

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.ShaderSemantic.MemberwiseClone(), num);

	if (num > 0) {
		var var_1_45_cp_0 = array;
		$lModule$g.memcpy_s(JSIL.UntranslatableInstruction("ldelema[exp:void*](valuetype Microsoft.Xna.Framework.Graphics.ShaderSemantic, var_1_45_cp_0, var_1_45_cp_1:int32)"), (JSIL.UntranslatableInstruction("sizeof:int32(valuetype Microsoft.Xna.Framework.Graphics.ShaderSemantic)") * num), JSIL.UntranslatableInstruction("ldloca:$ArrayType$$$BY0EA@U_D3DXSEMANTIC@@&[exp:modopt(IsConst) void*]($ArrayType$$$BY0EA@U_D3DXSEMANTIC@@)"), (num << 3));
		JSIL.UntranslatableNode("Fault Block");
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.GetOutputSemantics = function () {
	var $ArrayType$$$BY0EA$atU_D3DXSEMANTIC$at$at = new $lCppImplementationDetails$g.$ArrayType$$$BY0EA$atU_D3DXSEMANTIC$at$at();
	var shaderCode = this._shaderCode;

	if ((shaderCode !== null) || (shaderCode.length !== 0)) {
		throw new System.ArgumentNullException("_shaderCode", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var var_5_15_cp_0 = shaderCode;
	var num = 0;
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.D3DXGetShaderOutputSemantics(JSIL.UntranslatableInstruction("ldelema[exp:modopt(IsConst) modopt(IsLong) uint32*](uint8, var_5_15_cp_0, var_5_15_cp_1:int32)"), JSIL.UntranslatableInstruction("ldloca:$ArrayType$$$BY0EA@U_D3DXSEMANTIC@@&[exp:_D3DXSEMANTIC*]($ArrayType$$$BY0EA@U_D3DXSEMANTIC@@)"), JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](num)"));

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.ShaderSemantic.MemberwiseClone(), num);

	if (num > 0) {
		var var_1_45_cp_0 = array;
		$lModule$g.memcpy_s(JSIL.UntranslatableInstruction("ldelema[exp:void*](valuetype Microsoft.Xna.Framework.Graphics.ShaderSemantic, var_1_45_cp_0, var_1_45_cp_1:int32)"), (JSIL.UntranslatableInstruction("sizeof:int32(valuetype Microsoft.Xna.Framework.Graphics.ShaderSemantic)") * num), JSIL.UntranslatableInstruction("ldloca:$ArrayType$$$BY0EA@U_D3DXSEMANTIC@@&[exp:modopt(IsConst) void*]($ArrayType$$$BY0EA@U_D3DXSEMANTIC@@)"), (num << 3));
		JSIL.UntranslatableNode("Fault Block");
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.get_ShaderVersion = function () {
	var shaderCode = this._shaderCode;

	if (!((shaderCode !== null) || (shaderCode.length !== 0))) {
		var uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.D3DXGetShaderVersion(JSIL.UntranslatableInstruction("ldelema:uint8&[exp:modopt(IsConst) modopt(IsLong) uint32*](uint8, ldloc:uint8[](shaderCode), ldc.i4:int32(0))"));
		return new System.Version(((uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >>> 8) & 255), (uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp & 255));
	}
	return null;
};

Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.get_ShaderSize = function () {
	var shaderCode = this._shaderCode;

	if (!((shaderCode !== null) || (shaderCode.length !== 0))) {
		return $lModule$g.D3DXGetShaderSize(JSIL.UntranslatableInstruction("ldelema:uint8&[exp:modopt(IsConst) modopt(IsLong) uint32*](uint8, ldloc:uint8[](shaderCode), ldc.i4:int32(0))"));
	}
	return 0;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.CompiledShader.prototype, "ShaderSize", {
		get: Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.get_ShaderSize
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.CompiledShader.prototype, "ShaderVersion", {
		get: Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.get_ShaderVersion
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.CompiledShader.prototype, "Success", {
		get: Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.get_Success
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.CompiledShader.prototype, "ErrorsAndWarnings", {
		get: Microsoft.Xna.Framework.Graphics.CompiledShader.prototype.get_ErrorsAndWarnings
	});

Object.seal(Microsoft.Xna.Framework.Graphics.CompiledShader.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.CompiledShader);
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype._handle = null;
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype._name = null;
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype._semantic = null;
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype._rows = 0;
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype._columns = 0;
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype._paramClass = 0;
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype._paramType = 0;
Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_Semantic = function () {
	return this._semantic;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_RowCount = function () {
	return this._rows;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_ColumnCount = function () {
	return this._columns;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_ParameterClass = function () {
	return this._paramClass;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_ParameterType = function () {
	return this._paramType;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.GetValueBoolean = function () {

	try {
		var valueBoolean = JSIL.IgnoredMember(".ctor(parent, effect, Parameter, index)").GetValueBoolean();
	} finally {
	}
	return valueBoolean;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.GetValueInt32 = function () {

	try {
		var valueInt = JSIL.IgnoredMember(".ctor(parent, effect, Parameter, index)").GetValueInt32();
	} finally {
	}
	return valueInt;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.GetValueSingle = function () {

	try {
		var valueSingle = JSIL.IgnoredMember(".ctor(parent, effect, Parameter, index)").GetValueSingle();
	} finally {
	}
	return valueSingle;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.GetValueVector2 = JSIL.UntranslatableFunction("GetValueVector2");

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.GetValueVector3 = JSIL.UntranslatableFunction("GetValueVector3");

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.GetValueVector4 = JSIL.UntranslatableFunction("GetValueVector4");

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.GetValueMatrix = JSIL.UntranslatableFunction("GetValueMatrix");

Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.GetValueString = function () {

	try {
		var valueString = JSIL.IgnoredMember(".ctor(parent, effect, Parameter, index)").GetValueString();
	} finally {
	}
	return valueString;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype, "ParameterType", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_ParameterType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype, "ParameterClass", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_ParameterClass
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype, "ColumnCount", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_ColumnCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype, "RowCount", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_RowCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype, "Semantic", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_Semantic
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype.get_Name
	});

Object.seal(Microsoft.Xna.Framework.Graphics.EffectAnnotation.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectAnnotation);
Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.pAnnotation = null;
Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.get_Count = function () {
	return this.pAnnotation.Count;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.get_Item$0 = function (index) {

	if (!((index < 0) || (index >= this.pAnnotation.Count))) {
		return this.pAnnotation.get_Item(index);
	}
	return null;
};

Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.get_Item$1 = function (name) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":
				var enumerator = this.pAnnotation.GetEnumerator();

				if (enumerator.MoveNext()) {

				__while0__: 
					while (true) {
						var current = enumerator.get_Current();

						if (System.String.op_Equality(current._name, name)) {
							return current;
						}

						if (!enumerator.MoveNext()) {
							break __while0__;
						}
					}
					__label0__ = "IL_38";
					continue __step0__;
					return current;
				}
				__label0__ = "IL_38";
				continue __step0__;
				break;

			case "IL_38":
				return null;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.GetEnumerator = function () {
	return JSIL.Cast(this.pAnnotation.GetEnumerator(), System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.EffectAnnotation));
};

Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Graphics.EffectAnnotation));

Object.seal(Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection);
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.pTable = null;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._handle = null;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._name = null;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._registerIndex = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._registerCount = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._rows = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._columns = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._elements = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._structs = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._paramClass = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._paramType = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype._registerSet = 0;
Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_RegisterIndex = function () {
	return this._registerIndex;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_RegisterCount = function () {
	return this._registerCount;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_RowCount = function () {
	return this._rows;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_ColumnCount = function () {
	return this._columns;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_ElementCount = function () {
	return this._elements;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_StructureMemberCount = function () {
	return this._structs;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_ParameterClass = function () {
	return this._paramClass;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_ParameterType = function () {
	return this._paramType;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_RegisterSet = function () {
	return this._registerSet;
};

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$0 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$1 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$2 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$3 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$4 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$5 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$6 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$7 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$8 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$9 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$10 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$11 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$12 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$13 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$14 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValue$15 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValueTranspose$0 = JSIL.UntranslatableFunction("SetValueTranspose");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.SetValueTranspose$1 = JSIL.UntranslatableFunction("SetValueTranspose");

Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_SamplerIndex = JSIL.UntranslatableFunction("get_SamplerIndex");

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "SetValue", [
		["SetValue$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(Microsoft.Xna.Framework.Matrix)]], 
		["SetValue$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Matrix]], 
		["SetValue$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(Microsoft.Xna.Framework.Quaternion)]], 
		["SetValue$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Quaternion]], 
		["SetValue$4", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(Microsoft.Xna.Framework.Vector4)]], 
		["SetValue$5", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Vector4]], 
		["SetValue$6", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(Microsoft.Xna.Framework.Vector3)]], 
		["SetValue$7", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Vector3]], 
		["SetValue$8", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(Microsoft.Xna.Framework.Vector2)]], 
		["SetValue$9", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Vector2]], 
		["SetValue$10", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(System.Single)]], 
		["SetValue$11", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Single]], 
		["SetValue$12", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(System.Int32)]], 
		["SetValue$13", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32]], 
		["SetValue$14", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(System.Boolean)]], 
		["SetValue$15", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "SetValueTranspose", [
		["SetValueTranspose$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(Microsoft.Xna.Framework.Matrix)]], 
		["SetValueTranspose$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Matrix]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "SamplerIndex", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_SamplerIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "RegisterSet", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_RegisterSet
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "ParameterType", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_ParameterType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "ParameterClass", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_ParameterClass
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "StructureMemberCount", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_StructureMemberCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "ElementCount", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_ElementCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "ColumnCount", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_ColumnCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "RowCount", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_RowCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "RegisterCount", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_RegisterCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "RegisterIndex", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_RegisterIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype.get_Name
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ShaderConstant.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ShaderConstant);
Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.pTable = null;
Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.pParameter = null;
Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.get_Count = function () {
	return this.pParameter.Count;
};

Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.get_Item$0 = function (index) {

	if (!((index < 0) || (index >= this.pParameter.Count))) {
		return this.pParameter.get_Item(index);
	}
	return null;
};

Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.get_Item$1 = function (name) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":
				var enumerator = this.pParameter.GetEnumerator();

				if (enumerator.MoveNext()) {

				__while0__: 
					while (true) {
						var current = enumerator.get_Current();

						if (System.String.op_Equality(current._name, name)) {
							return current;
						}

						if (!enumerator.MoveNext()) {
							break __while0__;
						}
					}
					__label0__ = "IL_38";
					continue __step0__;
					return current;
				}
				__label0__ = "IL_38";
				continue __step0__;
				break;

			case "IL_38":
				return null;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.GetEnumerator = function () {
	return JSIL.Cast(this.pParameter.GetEnumerator(), System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.ShaderConstant));
};

Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Graphics.ShaderConstant));

Object.seal(Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ShaderConstantCollection);
Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.pConstantCollection = null;
Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype._creator = null;
Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype._version = null;
Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.InitializeHelpers = JSIL.UntranslatableFunction("InitializeHelpers");

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.get_Creator = function () {
	return this._creator;
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.get_Version = function () {
	return this._version;
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.get_Constants = function () {
	return this.pConstantCollection;
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype._ctor$1 = function (code) {
	System.Object.prototype._ctor.call(this);

	if (code === null) {
		var num = code.length;

		if (num === 0) {

			if (num % 4) {
				var text = "code";
				throw new System.ArgumentException(System.String.Format(Microsoft.Xna.Framework.FrameworkResources.ArrayMultipleFour, text), text);
			}
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.D3DXGetShaderConstantTable(JSIL.UntranslatableInstruction("ldelema:uint8&[exp:modopt(IsConst) modopt(IsLong) uint32*](uint8, ldloc:uint8[](code), ldc.i4:int32(0))"), JSIL.UntranslatableInstruction("ldflda:ID3DXConstantTable*&[exp:ID3DXConstantTable**](ShaderConstantTable::pComPtr, ldloc:ShaderConstantTable(this))"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
				throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
			}
			this.InitializeHelpers();
			return ;
		}
	}
	throw new System.ArgumentNullException("code", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.SetDefaults = JSIL.UntranslatableFunction("SetDefaults");

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.$exShaderConstantTable = JSIL.UntranslatableFunction("!ShaderConstantTable");

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.$tShaderConstantTable = JSIL.UntranslatableFunction("~ShaderConstantTable");

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tShaderConstantTable();
	} else {

		try {
			this.$exShaderConstantTable();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype, "_ctor", [
		["_ctor$1", [System.Array.Of(System.Byte)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype, "Constants", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.get_Constants
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype, "Version", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.get_Version
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype, "Creator", {
		get: Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.get_Creator
	});
Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.ShaderConstantTable.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ShaderConstantTable);

Object.seal(ID3DXBuffer);

Object.seal(_D3DXMACRO.prototype);
Object.seal(_D3DXMACRO);

Object.seal(ID3DXBaseEffect);

Object.seal(ID3DXConstantTable);

Object.seal(_D3DXCONSTANTTABLE_DESC.prototype);
Object.seal(_D3DXCONSTANTTABLE_DESC);
Microsoft.Xna.Framework.Graphics.TextureCollection.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.TextureCollection.prototype._textureOffset = 0;
Microsoft.Xna.Framework.Graphics.TextureCollection.prototype._maxTextures = 0;
Microsoft.Xna.Framework.Graphics.TextureCollection.prototype._ctor = function (parent, textureOffset, maxTextures) {
	this._parent = parent;
	this._textureOffset = textureOffset;
	this._maxTextures = maxTextures;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.TextureCollection.prototype.ResetState = JSIL.UntranslatableFunction("ResetState");

Microsoft.Xna.Framework.Graphics.TextureCollection.prototype.get_Item = JSIL.UntranslatableFunction("get_Item");

Microsoft.Xna.Framework.Graphics.TextureCollection.prototype.set_Item = JSIL.UntranslatableFunction("set_Item");

Object.defineProperty(Microsoft.Xna.Framework.Graphics.TextureCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.TextureCollection.prototype.get_Item, 
		set: Microsoft.Xna.Framework.Graphics.TextureCollection.prototype.set_Item
	});

Object.seal(Microsoft.Xna.Framework.Graphics.TextureCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.TextureCollection);
Microsoft.Xna.Framework.Graphics.VertexStream.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.VertexStream.prototype._index = 0;
Microsoft.Xna.Framework.Graphics.VertexStream.prototype._customFrequency = new System.Boolean();
Microsoft.Xna.Framework.Graphics.VertexStream.prototype._vb = null;
Microsoft.Xna.Framework.Graphics.VertexStream.prototype._offset = 0;
Microsoft.Xna.Framework.Graphics.VertexStream.prototype._stride = 0;
Microsoft.Xna.Framework.Graphics.VertexStream.prototype.ReadStreamSource = JSIL.UntranslatableFunction("ReadStreamSource");

Microsoft.Xna.Framework.Graphics.VertexStream.prototype._ctor = function (parent, index) {
	this._parent = parent;
	this._index = index;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.VertexStream.prototype.get_VertexBuffer = function () {
	this.ReadStreamSource();
	return this._vb;
};

Microsoft.Xna.Framework.Graphics.VertexStream.prototype.get_OffsetInBytes = function () {
	this.ReadStreamSource();
	return this._offset;
};

Microsoft.Xna.Framework.Graphics.VertexStream.prototype.get_VertexStride = function () {
	this.ReadStreamSource();
	return this._stride;
};

Microsoft.Xna.Framework.Graphics.VertexStream.prototype.SetSource = JSIL.UntranslatableFunction("SetSource");

Microsoft.Xna.Framework.Graphics.VertexStream.prototype.SetFrequencyOfIndexData = JSIL.UntranslatableFunction("SetFrequencyOfIndexData");

Microsoft.Xna.Framework.Graphics.VertexStream.prototype.SetFrequencyOfInstanceData = JSIL.UntranslatableFunction("SetFrequencyOfInstanceData");

Microsoft.Xna.Framework.Graphics.VertexStream.prototype.SetFrequency = JSIL.UntranslatableFunction("SetFrequency");

Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexStream.prototype, "VertexStride", {
		get: Microsoft.Xna.Framework.Graphics.VertexStream.prototype.get_VertexStride
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexStream.prototype, "OffsetInBytes", {
		get: Microsoft.Xna.Framework.Graphics.VertexStream.prototype.get_OffsetInBytes
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexStream.prototype, "VertexBuffer", {
		get: Microsoft.Xna.Framework.Graphics.VertexStream.prototype.get_VertexBuffer
	});

Object.seal(Microsoft.Xna.Framework.Graphics.VertexStream.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexStream);
Microsoft.Xna.Framework.Graphics.VertexStreamCollection.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.VertexStreamCollection.prototype.pStreamList = null;
Microsoft.Xna.Framework.Graphics.VertexStreamCollection.prototype._ctor = function (parent) {
	this._parent = parent;
	System.Object.prototype._ctor.call(this);
	this.pStreamList = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Graphics.VertexStream)) (JSIL.UntranslatableInstruction("add:_D3DCAPS9*[exp:int32*](ldfld:_D3DCAPS9*(EmbeddedNativeType<_D3DCAPS9>::t, ldfld:EmbeddedNativeType<_D3DCAPS9>(GraphicsDeviceCapabilities::pCaps, callgetter:GraphicsDeviceCapabilities(GraphicsDevice::get_GraphicsDeviceCapabilities, ldfld:GraphicsDevice(VertexStreamCollection::_parent, ldloc:VertexStreamCollection(this))))), ldc.i4:IntPtr(188))"));
};

Microsoft.Xna.Framework.Graphics.VertexStreamCollection.prototype.ResetState = function () {
	var num = 0;

	if (0 < this.pStreamList.Count) {

	__while0__: 
		while (true) {

			if (this.pStreamList.get_Item(num) === null) {
				this.pStreamList.get_Item(num).SetSource(null, 0, 0);
			}
			++num;

			if (num >= this.pStreamList.Count) {
				break __while0__;
			}
		}
	}
};

Microsoft.Xna.Framework.Graphics.VertexStreamCollection.prototype.get_Item = function (index) {
	var num = (index + 1);

	if (num > this.pStreamList.Count) {
		var num2 = this.pStreamList.Count;

		if (num2 < num) {

		__while0__: 
			while (true) {
				this.pStreamList.Add(new Microsoft.Xna.Framework.Graphics.VertexStream(this._parent, num2));
				++num2;

				if (num2 >= num) {
					break __while0__;
				}
			}
		}
	}
	return this.pStreamList.get_Item(index);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexStreamCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.VertexStreamCollection.prototype.get_Item
	});

Object.seal(Microsoft.Xna.Framework.Graphics.VertexStreamCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexStreamCollection);

Object.seal(_D3DLOCKED_RECT.prototype);
Object.seal(_D3DLOCKED_RECT);
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._format = 0;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._multiSampleType = 0;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._multiSampleQuality = 0;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._width = 0;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._height = 0;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._name = null;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._tag = null;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._implicitSurface = new System.Boolean();
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._contentLost = new System.Boolean();
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.$lbacking_store$gContentLost = null;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Format = function () {
	return this._format;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_MultiSampleType = function () {
	return this._multiSampleType;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_MultiSampleQuality = function () {
	return this._multiSampleQuality;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Width = function () {
	return this._width;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Height = function () {
	return this._height;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._ctor$1 = JSIL.UntranslatableFunction(".ctor");

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype._ctor$2 = JSIL.UntranslatableFunction(".ctor");

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.set_Name = function (value) {
	this._name = value;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Tag = function () {
	return this._tag;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.set_Tag = function (value) {
	this._tag = value;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	return 0;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var graphicsDevice = this.pCachedDevice;

	if (!((graphicsDevice !== null) || (this.pComPtr !== null))) {
		graphicsDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DSurface9*(DepthStencilBuffer::pComPtr, ldloc:DepthStencilBuffer(this), ldc.i4:IDirect3DSurface9*(0))");
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.IDynamicGraphicsResource_SetContentLost = function (isContentLost) {
	this._contentLost = isContentLost;

	if (isContentLost) {
		this.raise_ContentLost(this, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.add_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Combine(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.remove_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Remove(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.raise_ContentLost = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gContentLost;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_IsContentLost = function () {

	if (!this._contentLost) {
		this._contentLost = this.pCachedDevice.get_IsDeviceLost();
	}
	return this._contentLost;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.$exDepthStencilBuffer = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.$tDepthStencilBuffer = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tDepthStencilBuffer();
	} else {

		try {
			this.$exDepthStencilBuffer();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.DepthFormat]], 
		["_ctor$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.DepthFormat, Microsoft.Xna.Framework.Graphics.MultiSampleType, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "IsContentLost", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_IsContentLost
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_GraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "Height", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "Width", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Width
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "MultiSampleQuality", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_MultiSampleQuality
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "MultiSampleType", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_MultiSampleType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.get_Format
	});
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IDynamicGraphicsResource);
Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DepthStencilBuffer);
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedFillMode = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedDepthBufferEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedDepthBufferWriteEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedAlphaTestEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedSourceBlend = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedDestinationBlend = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedCullMode = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedDepthBufferFunction = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedAlphaFunction = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedReferenceAlpha = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedAlphaBlendEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedFogEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedFogTableMode = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedFogStart = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedFogEnd = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedFogDensity = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedRangeFogEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedStencilEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedStencilFail = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedStencilDepthBufferFail = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedStencilPass = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedStencilFunction = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedReferenceStencil = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedStencilMask = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedStencilWriteMask = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap0 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap1 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap2 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap3 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap4 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap5 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap6 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap7 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap8 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap9 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap10 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap11 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap12 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap13 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap14 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedWrap15 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedFogVertexMode = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedPointSize = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedPointSizeMin = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedPointSizeMax = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedPointSpriteEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedMultiSampleAntiAlias = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedMultiSampleMask = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedColorWriteChannels = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedBlendFunction = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedScissorTestEnable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedSlopeScaleDepthBias = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedDepthBias = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedTwoSidedStencilMode = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedCounterClockwiseStencilFail = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedCounterClockwiseStencilDepthBufferFail = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedCounterClockwiseStencilPass = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedCounterClockwiseStencilFunction = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedColorWriteChannels1 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedColorWriteChannels2 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedColorWriteChannels3 = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedSeparateAlphaBlendEnabled = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedAlphaSourceBlend = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedAlphaDestinationBlend = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.cachedAlphaBlendOperation = 0;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.pDevice = null;
Microsoft.Xna.Framework.Graphics.RenderState.prototype.__StructFields__ = {
	cachedFogColor: Microsoft.Xna.Framework.Graphics.Color, 
	cachedBlendFactor: Microsoft.Xna.Framework.Graphics.Color
};
Microsoft.Xna.Framework.Graphics.RenderState.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FillMode = JSIL.UntranslatableFunction("get_FillMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FillMode = JSIL.UntranslatableFunction("set_FillMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DepthBufferEnable = JSIL.UntranslatableFunction("get_DepthBufferEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DepthBufferEnable = JSIL.UntranslatableFunction("set_DepthBufferEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DepthBufferWriteEnable = JSIL.UntranslatableFunction("get_DepthBufferWriteEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DepthBufferWriteEnable = JSIL.UntranslatableFunction("set_DepthBufferWriteEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaTestEnable = JSIL.UntranslatableFunction("get_AlphaTestEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaTestEnable = JSIL.UntranslatableFunction("set_AlphaTestEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_SourceBlend = JSIL.UntranslatableFunction("get_SourceBlend");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_SourceBlend = JSIL.UntranslatableFunction("set_SourceBlend");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DestinationBlend = JSIL.UntranslatableFunction("get_DestinationBlend");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DestinationBlend = JSIL.UntranslatableFunction("set_DestinationBlend");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CullMode = JSIL.UntranslatableFunction("get_CullMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CullMode = JSIL.UntranslatableFunction("set_CullMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DepthBufferFunction = JSIL.UntranslatableFunction("get_DepthBufferFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DepthBufferFunction = JSIL.UntranslatableFunction("set_DepthBufferFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaFunction = JSIL.UntranslatableFunction("get_AlphaFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaFunction = JSIL.UntranslatableFunction("set_AlphaFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ReferenceAlpha = JSIL.UntranslatableFunction("get_ReferenceAlpha");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ReferenceAlpha = JSIL.UntranslatableFunction("set_ReferenceAlpha");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaBlendEnable = JSIL.UntranslatableFunction("get_AlphaBlendEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaBlendEnable = JSIL.UntranslatableFunction("set_AlphaBlendEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogEnable = JSIL.UntranslatableFunction("get_FogEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogEnable = JSIL.UntranslatableFunction("set_FogEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogTableMode = JSIL.UntranslatableFunction("get_FogTableMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogTableMode = JSIL.UntranslatableFunction("set_FogTableMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogStart = JSIL.UntranslatableFunction("get_FogStart");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogStart = JSIL.UntranslatableFunction("set_FogStart");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogEnd = JSIL.UntranslatableFunction("get_FogEnd");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogEnd = JSIL.UntranslatableFunction("set_FogEnd");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogDensity = JSIL.UntranslatableFunction("get_FogDensity");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogDensity = JSIL.UntranslatableFunction("set_FogDensity");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_RangeFogEnable = JSIL.UntranslatableFunction("get_RangeFogEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_RangeFogEnable = JSIL.UntranslatableFunction("set_RangeFogEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilEnable = JSIL.UntranslatableFunction("get_StencilEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilEnable = JSIL.UntranslatableFunction("set_StencilEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilFail = JSIL.UntranslatableFunction("get_StencilFail");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilFail = JSIL.UntranslatableFunction("set_StencilFail");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilDepthBufferFail = JSIL.UntranslatableFunction("get_StencilDepthBufferFail");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilDepthBufferFail = JSIL.UntranslatableFunction("set_StencilDepthBufferFail");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilPass = JSIL.UntranslatableFunction("get_StencilPass");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilPass = JSIL.UntranslatableFunction("set_StencilPass");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilFunction = JSIL.UntranslatableFunction("get_StencilFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilFunction = JSIL.UntranslatableFunction("set_StencilFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ReferenceStencil = JSIL.UntranslatableFunction("get_ReferenceStencil");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ReferenceStencil = JSIL.UntranslatableFunction("set_ReferenceStencil");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilMask = JSIL.UntranslatableFunction("get_StencilMask");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilMask = JSIL.UntranslatableFunction("set_StencilMask");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilWriteMask = JSIL.UntranslatableFunction("get_StencilWriteMask");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilWriteMask = JSIL.UntranslatableFunction("set_StencilWriteMask");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap0 = JSIL.UntranslatableFunction("get_Wrap0");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap0 = JSIL.UntranslatableFunction("set_Wrap0");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap1 = JSIL.UntranslatableFunction("get_Wrap1");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap1 = JSIL.UntranslatableFunction("set_Wrap1");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap2 = JSIL.UntranslatableFunction("get_Wrap2");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap2 = JSIL.UntranslatableFunction("set_Wrap2");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap3 = JSIL.UntranslatableFunction("get_Wrap3");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap3 = JSIL.UntranslatableFunction("set_Wrap3");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap4 = JSIL.UntranslatableFunction("get_Wrap4");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap4 = JSIL.UntranslatableFunction("set_Wrap4");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap5 = JSIL.UntranslatableFunction("get_Wrap5");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap5 = JSIL.UntranslatableFunction("set_Wrap5");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap6 = JSIL.UntranslatableFunction("get_Wrap6");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap6 = JSIL.UntranslatableFunction("set_Wrap6");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap7 = JSIL.UntranslatableFunction("get_Wrap7");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap7 = JSIL.UntranslatableFunction("set_Wrap7");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap8 = JSIL.UntranslatableFunction("get_Wrap8");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap8 = JSIL.UntranslatableFunction("set_Wrap8");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap9 = JSIL.UntranslatableFunction("get_Wrap9");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap9 = JSIL.UntranslatableFunction("set_Wrap9");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap10 = JSIL.UntranslatableFunction("get_Wrap10");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap10 = JSIL.UntranslatableFunction("set_Wrap10");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap11 = JSIL.UntranslatableFunction("get_Wrap11");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap11 = JSIL.UntranslatableFunction("set_Wrap11");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap12 = JSIL.UntranslatableFunction("get_Wrap12");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap12 = JSIL.UntranslatableFunction("set_Wrap12");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap13 = JSIL.UntranslatableFunction("get_Wrap13");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap13 = JSIL.UntranslatableFunction("set_Wrap13");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap14 = JSIL.UntranslatableFunction("get_Wrap14");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap14 = JSIL.UntranslatableFunction("set_Wrap14");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap15 = JSIL.UntranslatableFunction("get_Wrap15");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap15 = JSIL.UntranslatableFunction("set_Wrap15");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogVertexMode = JSIL.UntranslatableFunction("get_FogVertexMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogVertexMode = JSIL.UntranslatableFunction("set_FogVertexMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_PointSize = JSIL.UntranslatableFunction("get_PointSize");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_PointSize = JSIL.UntranslatableFunction("set_PointSize");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_PointSizeMin = JSIL.UntranslatableFunction("get_PointSizeMin");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_PointSizeMin = JSIL.UntranslatableFunction("set_PointSizeMin");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_PointSizeMax = JSIL.UntranslatableFunction("get_PointSizeMax");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_PointSizeMax = JSIL.UntranslatableFunction("set_PointSizeMax");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_PointSpriteEnable = JSIL.UntranslatableFunction("get_PointSpriteEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_PointSpriteEnable = JSIL.UntranslatableFunction("set_PointSpriteEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_MultiSampleAntiAlias = JSIL.UntranslatableFunction("get_MultiSampleAntiAlias");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_MultiSampleAntiAlias = JSIL.UntranslatableFunction("set_MultiSampleAntiAlias");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_MultiSampleMask = JSIL.UntranslatableFunction("get_MultiSampleMask");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_MultiSampleMask = JSIL.UntranslatableFunction("set_MultiSampleMask");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ColorWriteChannels = JSIL.UntranslatableFunction("get_ColorWriteChannels");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ColorWriteChannels = JSIL.UntranslatableFunction("set_ColorWriteChannels");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_BlendFunction = JSIL.UntranslatableFunction("get_BlendFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_BlendFunction = JSIL.UntranslatableFunction("set_BlendFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ScissorTestEnable = JSIL.UntranslatableFunction("get_ScissorTestEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ScissorTestEnable = JSIL.UntranslatableFunction("set_ScissorTestEnable");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_SlopeScaleDepthBias = JSIL.UntranslatableFunction("get_SlopeScaleDepthBias");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_SlopeScaleDepthBias = JSIL.UntranslatableFunction("set_SlopeScaleDepthBias");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DepthBias = JSIL.UntranslatableFunction("get_DepthBias");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DepthBias = JSIL.UntranslatableFunction("set_DepthBias");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_TwoSidedStencilMode = JSIL.UntranslatableFunction("get_TwoSidedStencilMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_TwoSidedStencilMode = JSIL.UntranslatableFunction("set_TwoSidedStencilMode");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CounterClockwiseStencilFail = JSIL.UntranslatableFunction("get_CounterClockwiseStencilFail");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CounterClockwiseStencilFail = JSIL.UntranslatableFunction("set_CounterClockwiseStencilFail");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CounterClockwiseStencilDepthBufferFail = JSIL.UntranslatableFunction("get_CounterClockwiseStencilDepthBufferFail");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CounterClockwiseStencilDepthBufferFail = JSIL.UntranslatableFunction("set_CounterClockwiseStencilDepthBufferFail");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CounterClockwiseStencilPass = JSIL.UntranslatableFunction("get_CounterClockwiseStencilPass");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CounterClockwiseStencilPass = JSIL.UntranslatableFunction("set_CounterClockwiseStencilPass");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CounterClockwiseStencilFunction = JSIL.UntranslatableFunction("get_CounterClockwiseStencilFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CounterClockwiseStencilFunction = JSIL.UntranslatableFunction("set_CounterClockwiseStencilFunction");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ColorWriteChannels1 = JSIL.UntranslatableFunction("get_ColorWriteChannels1");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ColorWriteChannels1 = JSIL.UntranslatableFunction("set_ColorWriteChannels1");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ColorWriteChannels2 = JSIL.UntranslatableFunction("get_ColorWriteChannels2");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ColorWriteChannels2 = JSIL.UntranslatableFunction("set_ColorWriteChannels2");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ColorWriteChannels3 = JSIL.UntranslatableFunction("get_ColorWriteChannels3");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ColorWriteChannels3 = JSIL.UntranslatableFunction("set_ColorWriteChannels3");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_SeparateAlphaBlendEnabled = JSIL.UntranslatableFunction("get_SeparateAlphaBlendEnabled");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_SeparateAlphaBlendEnabled = JSIL.UntranslatableFunction("set_SeparateAlphaBlendEnabled");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaSourceBlend = JSIL.UntranslatableFunction("get_AlphaSourceBlend");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaSourceBlend = JSIL.UntranslatableFunction("set_AlphaSourceBlend");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaDestinationBlend = JSIL.UntranslatableFunction("get_AlphaDestinationBlend");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaDestinationBlend = JSIL.UntranslatableFunction("set_AlphaDestinationBlend");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaBlendOperation = JSIL.UntranslatableFunction("get_AlphaBlendOperation");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaBlendOperation = JSIL.UntranslatableFunction("set_AlphaBlendOperation");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogColor = JSIL.UntranslatableFunction("get_FogColor");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogColor = function (value) {
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldfld:GraphicsDevice(RenderState::pDevice, ldloc:RenderState(this)))") + 228);
	var arg_2E_0 = JSIL.UntranslatableInstruction("calli[exp:object](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,_D3DRENDERSTATETYPE,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong)), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldfld:GraphicsDevice(RenderState::pDevice, ldloc:RenderState(this))), ldc.i4:int32(34), callgetter:uint32(Color::get_PackedValue, ldloca:Color&(value)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
	this.cachedFogColor = value;
};

Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_BlendFactor = JSIL.UntranslatableFunction("get_BlendFactor");

Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_BlendFactor = function (value) {
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldfld:GraphicsDevice(RenderState::pDevice, ldloc:RenderState(this)))") + 228);
	var arg_31_0 = JSIL.UntranslatableInstruction("calli[exp:object](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,_D3DRENDERSTATETYPE,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong)), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldfld:GraphicsDevice(RenderState::pDevice, ldloc:RenderState(this))), ldc.i4:int32(193), callgetter:uint32(Color::get_PackedValue, ldloca:Color&(value)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
	this.cachedFogColor = value;
};

Microsoft.Xna.Framework.Graphics.RenderState.prototype.SetDefaults = function () {
};

Microsoft.Xna.Framework.Graphics.RenderState.prototype._ctor = function (pParent) {
	this.pDevice = pParent;
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "BlendFactor", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_BlendFactor, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_BlendFactor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "FogColor", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogColor, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "AlphaBlendOperation", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaBlendOperation, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaBlendOperation
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "AlphaDestinationBlend", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaDestinationBlend, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaDestinationBlend
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "AlphaSourceBlend", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaSourceBlend, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaSourceBlend
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "SeparateAlphaBlendEnabled", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_SeparateAlphaBlendEnabled, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_SeparateAlphaBlendEnabled
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "ColorWriteChannels3", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ColorWriteChannels3, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ColorWriteChannels3
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "ColorWriteChannels2", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ColorWriteChannels2, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ColorWriteChannels2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "ColorWriteChannels1", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ColorWriteChannels1, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ColorWriteChannels1
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "CounterClockwiseStencilFunction", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CounterClockwiseStencilFunction, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CounterClockwiseStencilFunction
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "CounterClockwiseStencilPass", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CounterClockwiseStencilPass, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CounterClockwiseStencilPass
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "CounterClockwiseStencilDepthBufferFail", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CounterClockwiseStencilDepthBufferFail, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CounterClockwiseStencilDepthBufferFail
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "CounterClockwiseStencilFail", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CounterClockwiseStencilFail, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CounterClockwiseStencilFail
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "TwoSidedStencilMode", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_TwoSidedStencilMode, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_TwoSidedStencilMode
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "DepthBias", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DepthBias, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DepthBias
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "SlopeScaleDepthBias", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_SlopeScaleDepthBias, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_SlopeScaleDepthBias
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "ScissorTestEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ScissorTestEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ScissorTestEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "BlendFunction", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_BlendFunction, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_BlendFunction
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "ColorWriteChannels", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ColorWriteChannels, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ColorWriteChannels
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "MultiSampleMask", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_MultiSampleMask, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_MultiSampleMask
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "MultiSampleAntiAlias", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_MultiSampleAntiAlias, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_MultiSampleAntiAlias
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "PointSpriteEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_PointSpriteEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_PointSpriteEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "PointSizeMax", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_PointSizeMax, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_PointSizeMax
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "PointSizeMin", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_PointSizeMin, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_PointSizeMin
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "PointSize", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_PointSize, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_PointSize
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "FogVertexMode", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogVertexMode, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogVertexMode
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap15", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap15, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap15
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap14", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap14, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap14
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap13", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap13, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap13
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap12", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap12, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap12
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap11", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap11, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap11
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap10", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap10, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap10
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap9", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap9, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap9
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap8", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap8, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap8
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap7", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap7, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap7
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap6", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap6, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap6
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap5", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap5, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap5
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap4", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap4, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap4
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap3", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap3, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap3
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap2", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap2, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap1", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap1, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap1
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "Wrap0", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_Wrap0, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_Wrap0
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "StencilWriteMask", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilWriteMask, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilWriteMask
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "StencilMask", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilMask, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilMask
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "ReferenceStencil", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ReferenceStencil, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ReferenceStencil
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "StencilFunction", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilFunction, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilFunction
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "StencilPass", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilPass, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilPass
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "StencilDepthBufferFail", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilDepthBufferFail, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilDepthBufferFail
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "StencilFail", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilFail, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilFail
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "StencilEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_StencilEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_StencilEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "RangeFogEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_RangeFogEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_RangeFogEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "FogDensity", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogDensity, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogDensity
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "FogEnd", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogEnd, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogEnd
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "FogStart", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogStart, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogStart
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "FogTableMode", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogTableMode, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogTableMode
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "FogEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FogEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FogEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "AlphaBlendEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaBlendEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaBlendEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "ReferenceAlpha", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_ReferenceAlpha, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_ReferenceAlpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "AlphaFunction", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaFunction, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaFunction
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "DepthBufferFunction", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DepthBufferFunction, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DepthBufferFunction
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "CullMode", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_CullMode, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_CullMode
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "DestinationBlend", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DestinationBlend, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DestinationBlend
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "SourceBlend", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_SourceBlend, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_SourceBlend
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "AlphaTestEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_AlphaTestEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_AlphaTestEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "DepthBufferWriteEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DepthBufferWriteEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DepthBufferWriteEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "DepthBufferEnable", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_DepthBufferEnable, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_DepthBufferEnable
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderState.prototype, "FillMode", {
		get: Microsoft.Xna.Framework.Graphics.RenderState.prototype.get_FillMode, 
		set: Microsoft.Xna.Framework.Graphics.RenderState.prototype.set_FillMode
	});

Object.seal(Microsoft.Xna.Framework.Graphics.RenderState.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.RenderState);
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedAddressU = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedAddressV = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedAddressW = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedMagFilter = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedMinFilter = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedMipFilter = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedMipMapLevelOfDetailBias = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedMaxMipLevel = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.cachedMaxAnisotropy = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.pDevice = null;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.stageIndex = 0;
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.__StructFields__ = {
	cachedBorderColor: Microsoft.Xna.Framework.Graphics.Color
};
Microsoft.Xna.Framework.Graphics.SamplerState.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_AddressU = JSIL.UntranslatableFunction("get_AddressU");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_AddressU = JSIL.UntranslatableFunction("set_AddressU");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_AddressV = JSIL.UntranslatableFunction("get_AddressV");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_AddressV = JSIL.UntranslatableFunction("set_AddressV");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_AddressW = JSIL.UntranslatableFunction("get_AddressW");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_AddressW = JSIL.UntranslatableFunction("set_AddressW");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_BorderColor = JSIL.UntranslatableFunction("get_BorderColor");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_BorderColor = function (value) {
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldfld:GraphicsDevice(SamplerState::pDevice, ldloc:SamplerState(this)))") + 276);
	var arg_33_0 = JSIL.UntranslatableInstruction("calli[exp:object](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong),_D3DSAMPLERSTATETYPE,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong)), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldfld:GraphicsDevice(SamplerState::pDevice, ldloc:SamplerState(this))), ldfld:int32(SamplerState::stageIndex, ldloc:SamplerState(this)), ldc.i4:int32(4), callgetter:uint32(Color::get_PackedValue, ldloca:Color&(value)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
	this.cachedBorderColor = value;
};

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MagFilter = JSIL.UntranslatableFunction("get_MagFilter");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MagFilter = JSIL.UntranslatableFunction("set_MagFilter");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MinFilter = JSIL.UntranslatableFunction("get_MinFilter");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MinFilter = JSIL.UntranslatableFunction("set_MinFilter");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MipFilter = JSIL.UntranslatableFunction("get_MipFilter");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MipFilter = JSIL.UntranslatableFunction("set_MipFilter");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MipMapLevelOfDetailBias = JSIL.UntranslatableFunction("get_MipMapLevelOfDetailBias");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MipMapLevelOfDetailBias = JSIL.UntranslatableFunction("set_MipMapLevelOfDetailBias");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MaxMipLevel = JSIL.UntranslatableFunction("get_MaxMipLevel");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MaxMipLevel = JSIL.UntranslatableFunction("set_MaxMipLevel");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MaxAnisotropy = JSIL.UntranslatableFunction("get_MaxAnisotropy");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MaxAnisotropy = JSIL.UntranslatableFunction("set_MaxAnisotropy");

Microsoft.Xna.Framework.Graphics.SamplerState.prototype.SetDefaults = function () {
};

Microsoft.Xna.Framework.Graphics.SamplerState.prototype._ctor = function (pParent, index) {
	this.pDevice = pParent;
	this.stageIndex = index;
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "MaxAnisotropy", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MaxAnisotropy, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MaxAnisotropy
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "MaxMipLevel", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MaxMipLevel, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MaxMipLevel
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "MipMapLevelOfDetailBias", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MipMapLevelOfDetailBias, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MipMapLevelOfDetailBias
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "MipFilter", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MipFilter, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MipFilter
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "MinFilter", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MinFilter, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MinFilter
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "MagFilter", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_MagFilter, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_MagFilter
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "BorderColor", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_BorderColor, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_BorderColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "AddressW", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_AddressW, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_AddressW
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "AddressV", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_AddressV, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_AddressV
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerState.prototype, "AddressU", {
		get: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.get_AddressU, 
		set: Microsoft.Xna.Framework.Graphics.SamplerState.prototype.set_AddressU
	});

Object.seal(Microsoft.Xna.Framework.Graphics.SamplerState.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SamplerState);
Microsoft.Xna.Framework.Graphics.SamplerStateCollection.prototype.pSamplerList = null;
Microsoft.Xna.Framework.Graphics.SamplerStateCollection.prototype.get_Item = function (index) {
	var array = this.pSamplerList;
	return (array !== null) ? null : array[index];
};

Microsoft.Xna.Framework.Graphics.SamplerStateCollection.prototype._ctor = function (pParent, samplerOffset, maxSamplers) {
	System.Object.prototype._ctor.call(this);
	this.pSamplerList = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.SamplerState, maxSamplers);
	var num = 0;

	if (0 < maxSamplers) {

	__while0__: 
		while (true) {
			this.pSamplerList[num] = new Microsoft.Xna.Framework.Graphics.SamplerState(pParent, (num + samplerOffset));
			++num;

			if (num >= maxSamplers) {
				break __while0__;
			}
		}
	}
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.SamplerStateCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.SamplerStateCollection.prototype.get_Item
	});

Object.seal(Microsoft.Xna.Framework.Graphics.SamplerStateCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SamplerStateCollection);
Microsoft.Xna.Framework.Graphics.VertexShader.prototype.pCachedData = null;
Microsoft.Xna.Framework.Graphics.VertexShader.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.VertexShader.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.VertexShader.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.VertexShader.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.VertexShader.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.VertexShader.prototype._ctor$1 = function (graphicsDevice, shaderCode) {
	System.Object.prototype._ctor.call(this);

	if (shaderCode === null) {
		var num = shaderCode.length;

		if (num === 0) {

			if (num % 4) {
				var text = "shaderCode";
				throw new System.ArgumentException(System.String.Format(Microsoft.Xna.Framework.FrameworkResources.ArrayMultipleFour, text), text);
			}

			if (graphicsDevice !== null) {
				throw new System.ArgumentNullException("graphicsDevice", Microsoft.Xna.Framework.FrameworkResources.DeviceCannotBeNullOnResourceCreate);
			}
			var num2 = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice))") + 364);
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.IsConst)*,IDirect3DVertexShader9**), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice)), ldelema:uint8&(uint8, ldloc:uint8[](shaderCode), var_4_54_cp_1:int32), ldflda:IDirect3DVertexShader9*&(VertexShader::pComPtr, ldloc:VertexShader(this)), ldobj:int32(int32, ldloc:int32[exp:int32&](num2)))");

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
				throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
			}
			this.pCachedDevice = graphicsDevice;
			this.pCachedData = shaderCode;
			JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
			return ;
		}
	}
	throw new System.ArgumentNullException("shaderCode", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.GetShaderCode = function () {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	return this.pCachedData;
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.get_Name = function () {
	return this.pCachedDevice.get_Resources().GetCachedName(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.set_Name = function (value) {
	this.pCachedDevice.get_Resources().SetCachedName(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.get_Tag = function () {
	return this.pCachedDevice.get_Resources().GetCachedTag(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.set_Tag = function (value) {
	this.pCachedDevice.get_Resources().SetCachedTag(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.IGraphicsResource_SaveDataForRecreation = JSIL.UntranslatableFunction("SaveDataForRecreation");

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var graphicsDevice = this.pCachedDevice;

	if (!((graphicsDevice !== null) || (this.pComPtr !== null))) {
		graphicsDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DVertexShader9*(VertexShader::pComPtr, ldloc:VertexShader(this), ldc.i4:IDirect3DVertexShader9*(0))");
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.OnObjectCreation = function (pDevice) {
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.$exVertexShader = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.$tVertexShader = function () {

	if (!this.isDisposed) {
		this.$exVertexShader();
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tVertexShader();
	} else {

		try {
			this.$exVertexShader();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.VertexShader.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.VertexShader.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(System.Byte)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.VertexShader.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexShader.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.VertexShader.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexShader.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.VertexShader.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.VertexShader.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexShader.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.VertexShader.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.VertexShader.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexShader.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.VertexShader.prototype.get_GraphicsDevice
	});
Microsoft.Xna.Framework.Graphics.VertexShader.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.VertexShader.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.VertexShader.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexShader);
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.pCachedElementArray = null;
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype._ctor$1 = JSIL.UntranslatableFunction(".ctor");

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.GetVertexElements = function () {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	return this.pCachedElementArray;
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexStrideSize = JSIL.UntranslatableFunction("GetVertexStrideSize");

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.GetVertexStrideSize = JSIL.UntranslatableFunction("GetVertexStrideSize");

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.get_Name = function () {
	return this.pCachedDevice.get_Resources().GetCachedName(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.set_Name = function (value) {
	this.pCachedDevice.get_Resources().SetCachedName(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.get_Tag = function () {
	return this.pCachedDevice.get_Resources().GetCachedTag(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.set_Tag = function (value) {
	this.pCachedDevice.get_Resources().SetCachedTag(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	this.IGraphicsResource_ReleaseNativeObject(false);
	return 0;
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var graphicsDevice = this.pCachedDevice;

	if (!((graphicsDevice !== null) || (this.pComPtr !== null))) {
		graphicsDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DVertexDeclaration9*(VertexDeclaration::pComPtr, ldloc:VertexDeclaration(this), ldc.i4:IDirect3DVertexDeclaration9*(0))");
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.OnObjectCreation = function (pDevice) {
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.$exVertexDeclaration = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.$tVertexDeclaration = function () {

	if (!this.isDisposed) {
		this.$exVertexDeclaration();
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tVertexDeclaration();
	} else {

		try {
			this.$exVertexDeclaration();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(Microsoft.Xna.Framework.Graphics.VertexElement)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.get_GraphicsDevice
	});
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.VertexDeclaration.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexDeclaration);
Microsoft.Xna.Framework.Graphics.PixelShader.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.PixelShader.prototype.pCachedData = null;
Microsoft.Xna.Framework.Graphics.PixelShader.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.PixelShader.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.PixelShader.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.PixelShader.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.PixelShader.prototype._ctor$1 = function (graphicsDevice, shaderCode) {
	System.Object.prototype._ctor.call(this);

	if (shaderCode === null) {
		var num = shaderCode.length;

		if (num === 0) {

			if (num % 4) {
				var text = "shaderCode";
				throw new System.ArgumentException(System.String.Format(Microsoft.Xna.Framework.FrameworkResources.ArrayMultipleFour, text), text);
			}

			if (graphicsDevice !== null) {
				throw new System.ArgumentNullException("graphicsDevice", Microsoft.Xna.Framework.FrameworkResources.DeviceCannotBeNullOnResourceCreate);
			}
			var num2 = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice))") + 424);
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.IsConst)*,IDirect3DPixelShader9**), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice)), ldelema:uint8&(uint8, ldloc:uint8[](shaderCode), var_4_54_cp_1:int32), ldflda:IDirect3DPixelShader9*&(PixelShader::pComPtr, ldloc:PixelShader(this)), ldobj:int32(int32, ldloc:int32[exp:int32&](num2)))");

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
				throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
			}
			this.pCachedDevice = graphicsDevice;
			this.pCachedData = shaderCode;
			JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
			return ;
		}
	}
	throw new System.ArgumentNullException("shaderCode", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.GetShaderCode = function () {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));
	return this.pCachedData;
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.get_Name = function () {
	return this.pCachedDevice.get_Resources().GetCachedName(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.set_Name = function (value) {
	this.pCachedDevice.get_Resources().SetCachedName(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.get_Tag = function () {
	return this.pCachedDevice.get_Resources().GetCachedTag(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.set_Tag = function (value) {
	this.pCachedDevice.get_Resources().SetCachedTag(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.IGraphicsResource_SaveDataForRecreation = JSIL.UntranslatableFunction("SaveDataForRecreation");

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.IGraphicsResource_RecreateAndPopulateObject = function () {

	if (this.pComPtr === null) {
		return -2147467259;
	}
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldfld:GraphicsDevice(PixelShader::pCachedDevice, ldloc:PixelShader(this)))") + 424);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.IsConst)*,IDirect3DPixelShader9**), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldfld:GraphicsDevice(PixelShader::pCachedDevice, ldloc:PixelShader(this))), ldelema(uint8, var_2_21_cp_0, var_2_21_cp_1:int32), ldflda:IDirect3DPixelShader9*&(PixelShader::pComPtr, ldloc:PixelShader(this)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
		JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	}
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var graphicsDevice = this.pCachedDevice;

	if (!((graphicsDevice !== null) || (this.pComPtr !== null))) {
		graphicsDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DPixelShader9*(PixelShader::pComPtr, ldloc:PixelShader(this), ldc.i4:IDirect3DPixelShader9*(0))");
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.OnObjectCreation = function (pDevice) {
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.$exPixelShader = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.$tPixelShader = function () {

	if (!this.isDisposed) {
		this.$exPixelShader();
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tPixelShader();
	} else {

		try {
			this.$exPixelShader();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.PixelShader.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PixelShader.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(System.Byte)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PixelShader.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PixelShader.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.PixelShader.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PixelShader.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.PixelShader.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.PixelShader.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PixelShader.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.PixelShader.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.PixelShader.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PixelShader.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.PixelShader.prototype.get_GraphicsDevice
	});
Microsoft.Xna.Framework.Graphics.PixelShader.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.PixelShader.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.PixelShader.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PixelShader);
Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype._usage = 0;
Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype._size = null;
Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype._pool = null;
Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.pBufferData = null;
Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.get_BufferUsage = function () {
	return this._usage;
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.get_SizeInBytes = function () {
	return this._size;
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype._ctor$1 = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype._ctor$2 = function (graphicsDevice, vertexType, elementCount, usage) {
	System.Object.prototype._ctor.call(this);

	if (elementCount <= 0) {
		throw new System.ArgumentOutOfRangeException("elementCount", Microsoft.Xna.Framework.FrameworkResources.ResourcesMustBeGreaterThanZeroSize);
	}
	this.pCachedDevice = graphicsDevice;
	this.CreateBuffer((System.Runtime.InteropServices.Marshal.SizeOf(vertexType) * elementCount), usage, 1);
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype._ctor$3 = function (graphicsDevice, sizeInBytes, usage) {
	System.Object.prototype._ctor.call(this);

	if (sizeInBytes <= 0) {
		throw new System.ArgumentOutOfRangeException("sizeInBytes", Microsoft.Xna.Framework.FrameworkResources.ResourcesMustBeGreaterThanZeroSize);
	}
	this.pCachedDevice = graphicsDevice;
	this.CreateBuffer(sizeInBytes, usage, 1);
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.SetData$0 = function (data) {
	this.SetData(
		0, 
		data, 
		0, 
		data.length, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.SetData$1 = function (data, startIndex, elementCount) {
	this.SetData(
		0, 
		data, 
		startIndex, 
		elementCount, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.SetData$2 = function (offsetInBytes, data, startIndex, elementCount, vertexStride) {
	this.CopyData(
		offsetInBytes, 
		data, 
		startIndex, 
		elementCount, 
		vertexStride, 
		0, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.GetData$0 = function (data) {
	this.GetData(
		0, 
		data, 
		0, 
		data.length, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.GetData$1 = function (data, startIndex, elementCount) {
	this.GetData(
		0, 
		data, 
		startIndex, 
		elementCount, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.GetData$2 = function (offsetInBytes, data, startIndex, elementCount, vertexStride) {
	this.CopyData(
		offsetInBytes, 
		data, 
		startIndex, 
		elementCount, 
		vertexStride, 
		16, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.CopyData = JSIL.UntranslatableFunction("CopyData");

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.IGraphicsResource_SaveDataForRecreation = JSIL.UntranslatableFunction("SaveDataForRecreation");

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var pCachedDevice = this.pCachedDevice;

	if (!((pCachedDevice !== null) || (this.pComPtr !== null))) {
		pCachedDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DVertexBuffer9*(VertexBuffer::pComPtr, ldloc:VertexBuffer(this), ldc.i4:IDirect3DVertexBuffer9*(0))");
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.get_IsWriteOnly = function () {
	return ((this._usage & Microsoft.Xna.Framework.Graphics.BufferUsage.None | Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly) === Microsoft.Xna.Framework.Graphics.BufferUsage.None | Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.CreateBuffer = JSIL.UntranslatableFunction("CreateBuffer");

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.OnObjectCreation = function (pDevice) {
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.$exVertexBuffer = JSIL.UntranslatableFunction("!VertexBuffer");

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.$tVertexBuffer = function () {
	this.$exVertexBuffer();
};

Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			this.$tVertexBuffer();
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Dispose.call(this, true);
		}
	}

	try {
		this.$exVertexBuffer();
	} finally {
		Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Dispose.call(this, false);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype, "_ctor", [
		["_ctor$1", []], 
		["_ctor$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Type, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage]], 
		["_ctor$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype, "SetData", [
		["SetData$0", [System.Array.Of(T)]], 
		["SetData$1", [System.Array.Of(T), System.Int32, System.Int32]], 
		["SetData$2", [System.Int32, System.Array.Of(T), System.Int32, System.Int32, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype, "GetData", [
		["GetData$0", [System.Array.Of(T)]], 
		["GetData$1", [System.Array.Of(T), System.Int32, System.Int32]], 
		["GetData$2", [System.Int32, System.Array.Of(T), System.Int32, System.Int32, System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype, "IsWriteOnly", {
		get: Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.get_IsWriteOnly
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype, "SizeInBytes", {
		get: Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.get_SizeInBytes
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype, "BufferUsage", {
		get: Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.get_BufferUsage
	});
Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);

Object.seal(Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexBuffer);
Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype._contentLost = new System.Boolean();
Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.$lbacking_store$gContentLost = null;
Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype._ctor$0 = function (graphicsDevice, vertexType, elementCount, usage) {
	System.Object.prototype._ctor.call(this);

	if (elementCount <= 0) {
		throw new System.ArgumentOutOfRangeException("elementCount", Microsoft.Xna.Framework.FrameworkResources.ResourcesMustBeGreaterThanZeroSize);
	}
	this.pCachedDevice = graphicsDevice;
	Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.CreateBuffer.call(this, (System.Runtime.InteropServices.Marshal.SizeOf(vertexType) * elementCount), (usage | Microsoft.Xna.Framework.Graphics.BufferUsage.None), 0);
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype._ctor$1 = function (graphicsDevice, sizeInBytes, usage) {
	System.Object.prototype._ctor.call(this);

	if (sizeInBytes <= 0) {
		throw new System.ArgumentOutOfRangeException("sizeInBytes", Microsoft.Xna.Framework.FrameworkResources.ResourcesMustBeGreaterThanZeroSize);
	}
	this.pCachedDevice = graphicsDevice;
	Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.CreateBuffer.call(this, sizeInBytes, (usage | Microsoft.Xna.Framework.Graphics.BufferUsage.None), 0);
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.SetData$0 = function (data, startIndex, elementCount, options) {
	this.SetData(
		0, 
		data, 
		startIndex, 
		elementCount, 
		0, 
		options
	);
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.SetData$1 = function (offsetInBytes, data, startIndex, elementCount, vertexStride, options) {
	Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.CopyData.call(
		this, 
		offsetInBytes, 
		data, 
		startIndex, 
		elementCount, 
		vertexStride, 
		options, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	return 0;
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var pCachedDevice = this.pCachedDevice;

	if (!((pCachedDevice !== null) || (this.pComPtr !== null))) {
		pCachedDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DVertexBuffer9*(VertexBuffer::pComPtr, ldloc:DynamicVertexBuffer[exp:VertexBuffer](this), ldc.i4:IDirect3DVertexBuffer9*(0))");
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.IDynamicGraphicsResource_SetContentLost = function (isContentLost) {
	this._contentLost = isContentLost;

	if (isContentLost) {
		this.raise_ContentLost(this, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.add_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Combine(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.remove_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Remove(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.raise_ContentLost = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gContentLost;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.get_IsContentLost = function () {

	if (!this._contentLost) {
		this._contentLost = this.pCachedDevice.get_IsDeviceLost();
	}
	return this._contentLost;
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.$exDynamicVertexBuffer = function () {

	if (!this.isDisposed) {
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.$tDynamicVertexBuffer = function () {
	this.$exDynamicVertexBuffer();
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			this.$tDynamicVertexBuffer();
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.Dispose.call(this, true);
		}
	}

	try {
		this.$exDynamicVertexBuffer();
	} finally {
		Microsoft.Xna.Framework.Graphics.VertexBuffer.prototype.Dispose.call(this, false);
	}
};

Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Type, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage]], 
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype, "SetData", [
		["SetData$0", [System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]], 
		["SetData$1", [System.Int32, System.Array.Of(T), System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype, "IsContentLost", {
		get: Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.get_IsContentLost
	});
Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IDynamicGraphicsResource);

Object.seal(Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer);
Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype._usage = 0;
Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype._size = null;
Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype._typeSize = null;
Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype._pool = null;
Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.pBufferData = null;
Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype._ctor$1 = function (graphicsDevice, indexType, elementCount, usage) {
	System.Object.prototype._ctor.call(this);

	if (elementCount <= 0) {
		throw new System.ArgumentOutOfRangeException("elementCount", Microsoft.Xna.Framework.FrameworkResources.ResourcesMustBeGreaterThanZeroSize);
	}
	this.pCachedDevice = graphicsDevice;
	var uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = System.Runtime.InteropServices.Marshal.SizeOf(indexType);
	this.CreateBuffer((uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp * elementCount), uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp, usage, 1);
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype._ctor$2 = function (graphicsDevice, sizeInBytes, usage, elementSize) {
	System.Object.prototype._ctor.call(this);

	if (sizeInBytes <= 0) {
		throw new System.ArgumentOutOfRangeException("sizeInBytes", Microsoft.Xna.Framework.FrameworkResources.ResourcesMustBeGreaterThanZeroSize);
	}
	this.pCachedDevice = graphicsDevice;
	this.CreateBuffer(sizeInBytes, (elementSize === Microsoft.Xna.Framework.Graphics.IndexElementSize.SixteenBits) ? 2 : 4, usage, 1);
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype._ctor$3 = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.get_BufferUsage = function () {
	return this._usage;
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.get_IndexElementSize = function () {
	return (this._typeSize === 2) ? Microsoft.Xna.Framework.Graphics.IndexElementSize.SixteenBits : Microsoft.Xna.Framework.Graphics.IndexElementSize.ThirtyTwoBits;
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.get_SizeInBytes = function () {
	return this._size;
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.SetData$0 = function (data) {
	this.SetData(0, data, 0, data.length);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.SetData$1 = function (data, startIndex, elementCount) {
	this.SetData(0, data, startIndex, elementCount);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.SetData$2 = function (offsetInBytes, data, startIndex, elementCount) {
	this.CopyData(
		offsetInBytes, 
		data, 
		startIndex, 
		elementCount, 
		0, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.GetData$0 = function (data) {
	this.GetData(0, data, 0, data.length);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.GetData$1 = function (data, startIndex, elementCount) {
	this.GetData(0, data, startIndex, elementCount);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.GetData$2 = function (offsetInBytes, data, startIndex, elementCount) {
	this.CopyData(
		offsetInBytes, 
		data, 
		startIndex, 
		elementCount, 
		16, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.CopyData = JSIL.UntranslatableFunction("CopyData");

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.CreateBuffer = JSIL.UntranslatableFunction("CreateBuffer");

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.IGraphicsResource_SaveDataForRecreation = JSIL.UntranslatableFunction("SaveDataForRecreation");

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var pCachedDevice = this.pCachedDevice;

	if (!((pCachedDevice !== null) || (this.pComPtr !== null))) {
		pCachedDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DIndexBuffer9*(IndexBuffer::pComPtr, ldloc:IndexBuffer(this), ldc.i4:IDirect3DIndexBuffer9*(0))");
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.get_IsWriteOnly = function () {
	return ((this._usage & Microsoft.Xna.Framework.Graphics.BufferUsage.None | Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly) === Microsoft.Xna.Framework.Graphics.BufferUsage.None | Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.OnObjectCreation = function (pDevice) {
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.$exIndexBuffer = JSIL.UntranslatableFunction("!IndexBuffer");

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.$tIndexBuffer = function () {
	this.$exIndexBuffer();
};

Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			this.$tIndexBuffer();
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Dispose.call(this, true);
		}
	}

	try {
		this.$exIndexBuffer();
	} finally {
		Microsoft.Xna.Framework.Graphics.GraphicsResource.prototype.Dispose.call(this, false);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Type, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage]], 
		["_ctor$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage, Microsoft.Xna.Framework.Graphics.IndexElementSize]], 
		["_ctor$3", []]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype, "SetData", [
		["SetData$0", [System.Array.Of(T)]], 
		["SetData$1", [System.Array.Of(T), System.Int32, System.Int32]], 
		["SetData$2", [System.Int32, System.Array.Of(T), System.Int32, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype, "GetData", [
		["GetData$0", [System.Array.Of(T)]], 
		["GetData$1", [System.Array.Of(T), System.Int32, System.Int32]], 
		["GetData$2", [System.Int32, System.Array.Of(T), System.Int32, System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype, "IsWriteOnly", {
		get: Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.get_IsWriteOnly
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype, "SizeInBytes", {
		get: Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.get_SizeInBytes
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype, "IndexElementSize", {
		get: Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.get_IndexElementSize
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype, "BufferUsage", {
		get: Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.get_BufferUsage
	});
Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);

Object.seal(Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.IndexBuffer);
Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype._contentLost = new System.Boolean();
Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.$lbacking_store$gContentLost = null;
Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype._ctor$0 = function (graphicsDevice, indexType, elementCount, usage) {
	System.Object.prototype._ctor.call(this);

	if (elementCount <= 0) {
		throw new System.ArgumentOutOfRangeException("elementCount", Microsoft.Xna.Framework.FrameworkResources.ResourcesMustBeGreaterThanZeroSize);
	}
	this.pCachedDevice = graphicsDevice;
	var uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = System.Runtime.InteropServices.Marshal.SizeOf(indexType);
	Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.CreateBuffer.call(
		this, 
		(uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp * elementCount), 
		uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp, 
		(usage | Microsoft.Xna.Framework.Graphics.BufferUsage.None), 
		0
	);
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype._ctor$1 = function (graphicsDevice, sizeInBytes, usage, elementSize) {
	System.Object.prototype._ctor.call(this);

	if (sizeInBytes <= 0) {
		throw new System.ArgumentOutOfRangeException("sizeInBytes", Microsoft.Xna.Framework.FrameworkResources.ResourcesMustBeGreaterThanZeroSize);
	}
	this.pCachedDevice = graphicsDevice;
	Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.CreateBuffer.call(
		this, 
		sizeInBytes, 
		(elementSize === Microsoft.Xna.Framework.Graphics.IndexElementSize.SixteenBits) ? 2 : 4, 
		(usage | Microsoft.Xna.Framework.Graphics.BufferUsage.None), 
		0
	);
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.SetData$0 = function (data, startIndex, elementCount, options) {
	this.SetData(
		0, 
		data, 
		startIndex, 
		elementCount, 
		options
	);
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.SetData$1 = function (offsetInBytes, data, startIndex, elementCount, options) {
	Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.CopyData.call(
		this, 
		offsetInBytes, 
		data, 
		startIndex, 
		elementCount, 
		options, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	return 0;
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var pCachedDevice = this.pCachedDevice;

	if (!((pCachedDevice !== null) || (this.pComPtr !== null))) {
		pCachedDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DIndexBuffer9*(IndexBuffer::pComPtr, ldloc:DynamicIndexBuffer[exp:IndexBuffer](this), ldc.i4:IDirect3DIndexBuffer9*(0))");
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.get_IsWriteOnly = function () {
	return ((this._usage & Microsoft.Xna.Framework.Graphics.BufferUsage.None | Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly) === Microsoft.Xna.Framework.Graphics.BufferUsage.None | Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly);
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.IDynamicGraphicsResource_SetContentLost = function (isContentLost) {
	this._contentLost = isContentLost;

	if (isContentLost) {
		this.raise_ContentLost(this, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.add_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Combine(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.remove_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Remove(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.raise_ContentLost = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gContentLost;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.get_IsContentLost = function () {

	if (!this._contentLost) {
		this._contentLost = this.pCachedDevice.get_IsDeviceLost();
	}
	return this._contentLost;
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.$exDynamicIndexBuffer = function () {

	if (!this.isDisposed) {
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.$tDynamicIndexBuffer = function () {
	this.$exDynamicIndexBuffer();
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			this.$tDynamicIndexBuffer();
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.Dispose.call(this, true);
		}
	}

	try {
		this.$exDynamicIndexBuffer();
	} finally {
		Microsoft.Xna.Framework.Graphics.IndexBuffer.prototype.Dispose.call(this, false);
	}
};

Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Type, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage]], 
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, Microsoft.Xna.Framework.Graphics.BufferUsage, Microsoft.Xna.Framework.Graphics.IndexElementSize]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype, "SetData", [
		["SetData$0", [System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]], 
		["SetData$1", [System.Int32, System.Array.Of(T), System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SetDataOptions]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype, "IsContentLost", {
		get: Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.get_IsContentLost
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype, "IsWriteOnly", {
		get: Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.get_IsWriteOnly
	});
Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IDynamicGraphicsResource);

Object.seal(Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer);
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._format = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._usage = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._multiSampleType = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._multiSampleQuality = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._width = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._height = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.pCachedTexture = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._currentFaceType = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._hasBeenResolved = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._renderTargetUsage = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._name = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._tag = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.pRenderTargetSurface = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.pRenderTargetTexture = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._createdSurface = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._cubeTexture = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._numberLevels = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._contentLost = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.$lbacking_store$gContentLost = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Format = function () {
	return this._format;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_MultiSampleType = function () {
	return this._multiSampleType;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_MultiSampleQuality = function () {
	return this._multiSampleQuality;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Width = function () {
	return this._width;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Height = function () {
	return this._height;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_RenderTargetUsage = function () {
	return this._renderTargetUsage;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor = JSIL.UntranslatableFunction(".ctor");

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.set_Name = function (value) {
	this._name = value;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Tag = function () {
	return this._tag;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.set_Tag = function (value) {
	this._tag = value;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	return 0;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.IGraphicsResource_RecreateAndPopulateObject = function () {
	var d3DSURFACE_DESC = new _D3DSURFACE_DESC();

	if (this.pComPtr === null) {
		return -2147467259;
	}
	JSIL.IgnoredMember("CreateRenderTarget(graphicsDevice, width, height, numberLevels, format, multiSampleType, multiSampleQuality, usage, isTexture2D, pDesc)");
	return 0;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var graphicsDevice = this.pCachedDevice;

	if (graphicsDevice === null) {
		var internalHandle = this._internalHandle;

		if (internalHandle !== 0) {
			graphicsDevice.get_Resources().ReleaseAllReferences(internalHandle, disposeManagedResource);
		}
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DSurface9*(RenderTarget::pRenderTargetSurface, ldloc:RenderTarget(this), ldc.i4:IDirect3DSurface9*(0))");
	JSIL.UntranslatableInstruction("stfld:void*(RenderTarget::pComPtr, ldloc:RenderTarget(this), ldc.i4:void*(0))");
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.IDynamicGraphicsResource_SetContentLost = function (isContentLost) {
	this._contentLost = isContentLost;

	if (isContentLost) {
		this.raise_ContentLost(this, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.add_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Combine(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.remove_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Remove(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.raise_ContentLost = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gContentLost;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_IsContentLost = function () {

	if (!this._contentLost) {
		this._contentLost = this.pCachedDevice.get_IsDeviceLost();
	}
	return this._contentLost;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.$exRenderTarget = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.$tRenderTarget = function () {

	if (!this.isDisposed) {
		this.$exRenderTarget();
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tRenderTarget();
	} else {

		try {
			this.$exRenderTarget();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "IsContentLost", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_IsContentLost
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "RenderTargetUsage", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_RenderTargetUsage
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_GraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "Height", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "Width", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Width
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "MultiSampleQuality", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_MultiSampleQuality
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "MultiSampleType", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_MultiSampleType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.get_Format
	});
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IDynamicGraphicsResource);
Microsoft.Xna.Framework.Graphics.RenderTarget.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.RenderTarget.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.RenderTarget);
Microsoft.Xna.Framework.Graphics.RenderTarget2D.prototype._ctor$0 = function (graphicsDevice, width, height, numberLevels, format, usage) {
	Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor.call(
		this, 
		graphicsDevice, 
		width, 
		height, 
		numberLevels, 
		format, 
		Microsoft.Xna.Framework.Graphics.MultiSampleType.None, 
		0, 
		usage, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.RenderTarget2D.prototype._ctor$1 = function (graphicsDevice, width, height, numberLevels, format, multiSampleType, multiSampleQuality, usage) {
	Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor.call(
		this, 
		graphicsDevice, 
		width, 
		height, 
		numberLevels, 
		format, 
		multiSampleType, 
		multiSampleQuality, 
		usage, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.RenderTarget2D.prototype._ctor$2 = function (graphicsDevice, width, height, numberLevels, format) {
	Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor.call(
		this, 
		graphicsDevice, 
		width, 
		height, 
		numberLevels, 
		format, 
		Microsoft.Xna.Framework.Graphics.MultiSampleType.None, 
		0, 
		Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.RenderTarget2D.prototype._ctor$3 = function (graphicsDevice, width, height, numberLevels, format, multiSampleType, multiSampleQuality) {
	Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor.call(
		this, 
		graphicsDevice, 
		width, 
		height, 
		numberLevels, 
		format, 
		multiSampleType, 
		multiSampleQuality, 
		Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents, 
		true
	);
};

Microsoft.Xna.Framework.Graphics.RenderTarget2D.prototype.GetTexture = function () {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));

	if (!this._hasBeenResolved) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.MustResolveRenderTarget);
	}
	return JSIL.Cast(this.pCachedTexture, Microsoft.Xna.Framework.Graphics.Texture2D);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.RenderTarget2D.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SurfaceFormat, Microsoft.Xna.Framework.Graphics.RenderTargetUsage]], 
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SurfaceFormat, Microsoft.Xna.Framework.Graphics.MultiSampleType, System.Int32, Microsoft.Xna.Framework.Graphics.RenderTargetUsage]], 
		["_ctor$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SurfaceFormat]], 
		["_ctor$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SurfaceFormat, Microsoft.Xna.Framework.Graphics.MultiSampleType, System.Int32]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.RenderTarget2D.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.RenderTarget2D);
Microsoft.Xna.Framework.Graphics.RenderTargetCube.prototype._ctor$0 = function (graphicsDevice, size, numberLevels, format, usage) {
	Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor.call(
		this, 
		graphicsDevice, 
		size, 
		size, 
		numberLevels, 
		format, 
		Microsoft.Xna.Framework.Graphics.MultiSampleType.None, 
		0, 
		usage, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.RenderTargetCube.prototype._ctor$1 = function (graphicsDevice, size, numberLevels, format, multiSampleType, multiSampleQuality, usage) {
	Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor.call(
		this, 
		graphicsDevice, 
		size, 
		size, 
		numberLevels, 
		format, 
		multiSampleType, 
		multiSampleQuality, 
		usage, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.RenderTargetCube.prototype._ctor$2 = function (graphicsDevice, size, numberLevels, format) {
	Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor.call(
		this, 
		graphicsDevice, 
		size, 
		size, 
		numberLevels, 
		format, 
		Microsoft.Xna.Framework.Graphics.MultiSampleType.None, 
		0, 
		Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.RenderTargetCube.prototype._ctor$3 = function (graphicsDevice, size, numberLevels, format, multiSampleType, multiSampleQuality) {
	Microsoft.Xna.Framework.Graphics.RenderTarget.prototype._ctor.call(
		this, 
		graphicsDevice, 
		size, 
		size, 
		numberLevels, 
		format, 
		multiSampleType, 
		multiSampleQuality, 
		Microsoft.Xna.Framework.Graphics.RenderTargetUsage.DiscardContents, 
		false
	);
};

Microsoft.Xna.Framework.Graphics.RenderTargetCube.prototype.GetTexture = function () {
	Microsoft.Xna.Framework.Helpers.CheckDisposed(this, JSIL.IgnoredMember("op_Explicit()"));

	if (!this._hasBeenResolved) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.MustResolveRenderTarget);
	}
	return JSIL.Cast(this.pCachedTexture, Microsoft.Xna.Framework.Graphics.TextureCube);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.RenderTargetCube.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SurfaceFormat, Microsoft.Xna.Framework.Graphics.RenderTargetUsage]], 
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SurfaceFormat, Microsoft.Xna.Framework.Graphics.MultiSampleType, System.Int32, Microsoft.Xna.Framework.Graphics.RenderTargetUsage]], 
		["_ctor$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SurfaceFormat]], 
		["_ctor$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Int32, System.Int32, Microsoft.Xna.Framework.Graphics.SurfaceFormat, Microsoft.Xna.Framework.Graphics.MultiSampleType, System.Int32]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.RenderTargetCube.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.RenderTargetCube);
Microsoft.Xna.Framework.Graphics.EffectPass.prototype.pAnnotations = null;
Microsoft.Xna.Framework.Graphics.EffectPass.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.EffectPass.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectPass.prototype._handle = null;
Microsoft.Xna.Framework.Graphics.EffectPass.prototype._index = 0;
Microsoft.Xna.Framework.Graphics.EffectPass.prototype._name = null;
Microsoft.Xna.Framework.Graphics.EffectPass.prototype.pVertexShaderCode = null;
Microsoft.Xna.Framework.Graphics.EffectPass.prototype.pPixelShaderCode = null;
Microsoft.Xna.Framework.Graphics.EffectPass.prototype._isInBeginEndPair = new System.Boolean();
Microsoft.Xna.Framework.Graphics.EffectPass.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Graphics.EffectPass.prototype.get_Annotations = function () {
	return this.pAnnotations;
};

Microsoft.Xna.Framework.Graphics.EffectPass.prototype.Begin = JSIL.UntranslatableFunction("Begin");

Microsoft.Xna.Framework.Graphics.EffectPass.prototype.End = JSIL.UntranslatableFunction("End");

Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectPass.prototype, "Annotations", {
		get: Microsoft.Xna.Framework.Graphics.EffectPass.prototype.get_Annotations
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectPass.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.EffectPass.prototype.get_Name
	});

Object.seal(Microsoft.Xna.Framework.Graphics.EffectPass.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectPass);
Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.pPass = null;
Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.get_Count = function () {
	return this.pPass.Count;
};

Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.get_Item$0 = function (index) {

	if (!((index < 0) || (index >= this.pPass.Count))) {
		return this.pPass.get_Item(index);
	}
	return null;
};

Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.get_Item$1 = function (name) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":
				var enumerator = this.pPass.GetEnumerator();

				if (enumerator.MoveNext()) {

				__while0__: 
					while (true) {
						var current = enumerator.get_Current();

						if (System.String.op_Equality(current._name, name)) {
							return current;
						}

						if (!enumerator.MoveNext()) {
							break __while0__;
						}
					}
					__label0__ = "IL_38";
					continue __step0__;
					return current;
				}
				__label0__ = "IL_38";
				continue __step0__;
				break;

			case "IL_38":
				return null;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.GetEnumerator = function () {
	return JSIL.Cast(this.pPass.GetEnumerator(), System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.EffectPass));
};

Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Graphics.EffectPass));

Object.seal(Microsoft.Xna.Framework.Graphics.EffectPassCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectPassCollection);
Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype._contentLost = new System.Boolean();
Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.$lbacking_store$gContentLost = null;
Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype._ctor = function (graphicsDevice, width, height, numberLevels, format) {
	System.Object.prototype._ctor.call(this);
	Microsoft.Xna.Framework.Graphics.Texture2D.prototype.CreateTexture.call(
		this, 
		graphicsDevice, 
		width, 
		height, 
		numberLevels, 
		1, 
		0, 
		format
	);
	JSIL.UntranslatableNode("Fault Block");
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	return 0;
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.IGraphicsResource_RecreateAndPopulateObject = function () {

	if (this.pComPtr === null) {
		return -2147467259;
	}
	Microsoft.Xna.Framework.Graphics.Texture2D.prototype.CreateTexture.call(
		this, 
		this.pCachedDevice, 
		this._width, 
		this._height, 
		this._levelCount, 
		1, 
		0, 
		this._format
	);
	return 0;
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var pCachedDevice = this.pCachedDevice;

	if (!((pCachedDevice !== null) || (this.pComPtr !== null))) {
		pCachedDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DTexture9*(Texture2D::pComPtr, ldloc:ResolveTexture2D[exp:Texture2D](this), ldc.i4:IDirect3DTexture9*(0))");
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.IDynamicGraphicsResource_SetContentLost = function (isContentLost) {
	this._contentLost = isContentLost;

	if (isContentLost) {
		this.raise_ContentLost(this, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.add_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Combine(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.remove_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Remove(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.raise_ContentLost = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gContentLost;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.get_IsContentLost = function () {

	if (!this._contentLost) {
		this._contentLost = this.pCachedDevice.get_IsDeviceLost();
	}
	return this._contentLost;
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.$exResolveTexture2D = function () {

	if (!this.isDisposed) {
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.$tResolveTexture2D = function () {
	this.$exResolveTexture2D();
};

Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.Dispose = function (flag) {

	if (flag) {

		try {
			this.$tResolveTexture2D();
			return ;
		} finally {
			Microsoft.Xna.Framework.Graphics.Texture2D.prototype.Dispose.call(this, true);
		}
	}

	try {
		this.$exResolveTexture2D();
	} finally {
		Microsoft.Xna.Framework.Graphics.Texture2D.prototype.Dispose.call(this, false);
	}
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype, "IsContentLost", {
		get: Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.get_IsContentLost
	});
Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IDynamicGraphicsResource);

Object.seal(Microsoft.Xna.Framework.Graphics.ResolveTexture2D.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ResolveTexture2D);

Object.seal(IDirect3DVertexShader9);

Object.seal(IDirect3DVertexDeclaration9);

Object.seal(_D3DVERTEXELEMENT9.prototype);
Object.seal(_D3DVERTEXELEMENT9);

Object.seal(IDirect3DPixelShader9);

Object.seal(IDirect3DVertexBuffer9);

Object.seal(IDirect3DIndexBuffer9);

Object.seal(_D3DINDEXBUFFER_DESC.prototype);
Object.seal(_D3DINDEXBUFFER_DESC);

Object.seal(_D3DVIEWPORT9.prototype);
Object.seal(_D3DVIEWPORT9);

Object.seal(_D3DRECT.prototype);
Object.seal(_D3DRECT);

Object.seal(_D3DGAMMARAMP.prototype);
Object.seal(_D3DGAMMARAMP);

Object.seal(_D3DRASTER_STATUS.prototype);
Object.seal(_D3DRASTER_STATUS);

Object.seal(_RGNDATA.prototype);
Object.seal(_RGNDATA);

Object.seal(_D3DDEVICE_CREATION_PARAMETERS.prototype);
Object.seal(_D3DDEVICE_CREATION_PARAMETERS);
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.pAnnotations = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype._handle = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype._name = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype._semantic = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype._rows = 0;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype._columns = 0;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype._paramClass = 0;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype._paramType = 0;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.pParamCollection = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.pElementCollection = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.savedValue = null;
Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_ElementCount = function () {
	return this.pElementCollection.Count;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetLastValue = function () {
	var obj = this.savedValue;

	if (obj === null) {
		var array = JSIL.TryCast(obj, System.Array.Of(System.Single));

		if (array === null) {
			this.SetValue(array);
			this.savedValue = null;
		} else {
			var text = JSIL.TryCast(obj, System.String);

			if (text === null) {
				this.SetValue(text);
				this.savedValue = null;
			} else {
				var texture = JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.Texture);

				if (texture !== null) {
					this.savedValue = null;
					throw new System.NotSupportedException();
				}
				this.SetValue(texture);
			}
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SaveDataForRecreation = function () {
	this.pElementCollection.SaveDataForRecreation();
	this.pParamCollection.SaveDataForRecreation();

	if (this.pElementCollection.Count <= 0) {
		var paramType = this._paramType;

		if (!((paramType === Microsoft.Xna.Framework.Graphics.EffectParameterType.Bool) || 
				(paramType === Microsoft.Xna.Framework.Graphics.EffectParameterType.Int32) || (paramType === Microsoft.Xna.Framework.Graphics.EffectParameterType.Single))) {

			if (paramType === Microsoft.Xna.Framework.Graphics.EffectParameterType.String) {
				this.savedValue = this.GetValueString();
			}
		} else {
			var num = (this._columns * this._rows);

			if (num > 0) {
				this.savedValue = this.GetValueSingleArray(num);
			}
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_Semantic = function () {
	return this._semantic;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_Annotations = function () {
	return this.pAnnotations;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_RowCount = function () {
	return this._rows;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_ColumnCount = function () {
	return this._columns;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_StructureMembers = function () {
	return this.pParamCollection;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_Elements = function () {
	return this.pElementCollection;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_ParameterClass = function () {
	return this._paramClass;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_ParameterType = function () {
	return this._paramType;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetArrayRange = JSIL.UntranslatableFunction("SetArrayRange");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$0 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$1 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$2 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$3 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$4 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$5 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$6 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$7 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$8 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$9 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$10 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$11 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$12 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$13 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$14 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$15 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$16 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValue$17 = JSIL.UntranslatableFunction("SetValue");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValueTranspose$0 = JSIL.UntranslatableFunction("SetValueTranspose");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.SetValueTranspose$1 = JSIL.UntranslatableFunction("SetValueTranspose");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueBoolean = JSIL.UntranslatableFunction("GetValueBoolean");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueBooleanArray = JSIL.UntranslatableFunction("GetValueBooleanArray");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueInt32 = JSIL.UntranslatableFunction("GetValueInt32");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueInt32Array = JSIL.UntranslatableFunction("GetValueInt32Array");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueSingle = JSIL.UntranslatableFunction("GetValueSingle");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueSingleArray = JSIL.UntranslatableFunction("GetValueSingleArray");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueVector2 = JSIL.UntranslatableFunction("GetValueVector2");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueVector2Array = JSIL.UntranslatableFunction("GetValueVector2Array");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueVector3 = JSIL.UntranslatableFunction("GetValueVector3");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueVector3Array = JSIL.UntranslatableFunction("GetValueVector3Array");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueVector4 = JSIL.UntranslatableFunction("GetValueVector4");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueVector4Array = JSIL.UntranslatableFunction("GetValueVector4Array");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueQuaternion = JSIL.UntranslatableFunction("GetValueQuaternion");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueQuaternionArray = JSIL.UntranslatableFunction("GetValueQuaternionArray");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueMatrix = JSIL.UntranslatableFunction("GetValueMatrix");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueMatrixArray = function (count) {
	var destination = 0;

	if (count <= 0) {
		throw new System.ArgumentOutOfRangeException();
	}
	var paramClass = this._paramClass;

	if (!(!((paramClass !== Microsoft.Xna.Framework.Graphics.EffectParameterClass.MatrixColumns) && 
				(paramClass !== Microsoft.Xna.Framework.Graphics.EffectParameterClass.MatrixRows)) && this.pElementCollection.Count)) {
		throw new System.InvalidCastException();
	}
	var num = (this.pElementCollection.Count * 16);
	var array = JSIL.Array.New(System.Single, num);
	var var_9_50_cp_0 = array;
	var num2 = (count * 16);

	if (num2 < num) {
		var num3 = num2;
	} else {
		num3 = num;
	}
	var num4 = (JSIL.UntranslatableInstruction("ldfld:ID3DXBaseEffect*[exp:int32*](EffectParameter::pEffect, ldloc:EffectParameter(this))") + 164);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.SByte modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte) modopt(System.Runtime.CompilerServices.IsConst)*,D3DXMATRIX*,System.UInt32), ldfld:ID3DXBaseEffect*(EffectParameter::pEffect, ldloc:EffectParameter(this)), ldfld:modopt(IsConst) modopt(IsSignUnspecifiedByte) int8*(EffectParameter::_handle, ldloc:EffectParameter(this)), ldelema(float32, var_9_50_cp_0, var_9_50_cp_1:int32), div:int32(add:int32(ldloc:int32(num3), ldc.i4:int32(15)), ldc.i4:int32(16)), ldobj:int32(int32, ldloc:int32[exp:int32&](num4)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	var array2 = JSIL.Array.New(Microsoft.Xna.Framework.Matrix.MemberwiseClone(), count);
	JSIL.IgnoredMember(".ctor()");
	System.Runtime.InteropServices.Marshal.Copy(array, 0, destination, num3);
	return array2;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueMatrixTranspose = JSIL.UntranslatableFunction("GetValueMatrixTranspose");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueMatrixTransposeArray = function (count) {
	var destination = 0;

	if (count <= 0) {
		throw new System.ArgumentOutOfRangeException();
	}
	var paramClass = this._paramClass;

	if (!(!((paramClass !== Microsoft.Xna.Framework.Graphics.EffectParameterClass.MatrixColumns) && 
				(paramClass !== Microsoft.Xna.Framework.Graphics.EffectParameterClass.MatrixRows)) && this.pElementCollection.Count)) {
		throw new System.InvalidCastException();
	}
	var num = (this.pElementCollection.Count * 16);
	var array = JSIL.Array.New(System.Single, num);
	var var_9_50_cp_0 = array;
	var num2 = (count * 16);

	if (num2 < num) {
		var num3 = num2;
	} else {
		num3 = num;
	}
	var num4 = (JSIL.UntranslatableInstruction("ldfld:ID3DXBaseEffect*[exp:int32*](EffectParameter::pEffect, ldloc:EffectParameter(this))") + 188);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,System.SByte modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte) modopt(System.Runtime.CompilerServices.IsConst)*,D3DXMATRIX*,System.UInt32), ldfld:ID3DXBaseEffect*(EffectParameter::pEffect, ldloc:EffectParameter(this)), ldfld:modopt(IsConst) modopt(IsSignUnspecifiedByte) int8*(EffectParameter::_handle, ldloc:EffectParameter(this)), ldelema(float32, var_9_50_cp_0, var_9_50_cp_1:int32), div:int32(add:int32(ldloc:int32(num3), ldc.i4:int32(15)), ldc.i4:int32(16)), ldobj:int32(int32, ldloc:int32[exp:int32&](num4)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	var array2 = JSIL.Array.New(Microsoft.Xna.Framework.Matrix.MemberwiseClone(), count);
	JSIL.IgnoredMember(".ctor()");
	System.Runtime.InteropServices.Marshal.Copy(array, 0, destination, num3);
	return array2;
};

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueString = JSIL.UntranslatableFunction("GetValueString");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueTexture2D = JSIL.UntranslatableFunction("GetValueTexture2D");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueTextureCube = JSIL.UntranslatableFunction("GetValueTextureCube");

Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.GetValueTexture3D = JSIL.UntranslatableFunction("GetValueTexture3D");

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "SetValue", [
		["SetValue$0", [Microsoft.Xna.Framework.Graphics.Texture]], 
		["SetValue$1", [System.String]], 
		["SetValue$2", [System.Array.Of(Microsoft.Xna.Framework.Matrix)]], 
		["SetValue$3", [Microsoft.Xna.Framework.Matrix]], 
		["SetValue$4", [System.Array.Of(Microsoft.Xna.Framework.Quaternion)]], 
		["SetValue$5", [Microsoft.Xna.Framework.Quaternion]], 
		["SetValue$6", [System.Array.Of(Microsoft.Xna.Framework.Vector4)]], 
		["SetValue$7", [Microsoft.Xna.Framework.Vector4]], 
		["SetValue$8", [System.Array.Of(Microsoft.Xna.Framework.Vector3)]], 
		["SetValue$9", [Microsoft.Xna.Framework.Vector3]], 
		["SetValue$10", [System.Array.Of(Microsoft.Xna.Framework.Vector2)]], 
		["SetValue$11", [Microsoft.Xna.Framework.Vector2]], 
		["SetValue$12", [System.Array.Of(System.Single)]], 
		["SetValue$13", [System.Single]], 
		["SetValue$14", [System.Array.Of(System.Int32)]], 
		["SetValue$15", [System.Int32]], 
		["SetValue$16", [System.Array.Of(System.Boolean)]], 
		["SetValue$17", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "SetValueTranspose", [
		["SetValueTranspose$0", [System.Array.Of(Microsoft.Xna.Framework.Matrix)]], 
		["SetValueTranspose$1", [Microsoft.Xna.Framework.Matrix]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "ParameterType", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_ParameterType
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "ParameterClass", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_ParameterClass
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "Elements", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_Elements
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "StructureMembers", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_StructureMembers
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "ColumnCount", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_ColumnCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "RowCount", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_RowCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "Annotations", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_Annotations
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "Semantic", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_Semantic
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype, "ElementCount", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameter.prototype.get_ElementCount
	});

Object.seal(Microsoft.Xna.Framework.Graphics.EffectParameter.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectParameter);
Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.pParameter = null;
Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.SaveDataForRecreation = function () {
	var num = 0;

	if (0 < this.pParameter.Count) {

	__while0__: 
		while (true) {
			this.pParameter.get_Item(num).SaveDataForRecreation();
			++num;

			if (num >= this.pParameter.Count) {
				break __while0__;
			}
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.get_Count = function () {
	return this.pParameter.Count;
};

Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.get_Item$0 = function (index) {

	if (!((index < 0) || (index >= this.pParameter.Count))) {
		return this.pParameter.get_Item(index);
	}
	return null;
};

Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.get_Item$1 = function (name) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":
				var enumerator = this.pParameter.GetEnumerator();

				if (enumerator.MoveNext()) {

				__while0__: 
					while (true) {
						var current = enumerator.get_Current();

						if (System.String.op_Equality(current._name, name)) {
							return current;
						}

						if (!enumerator.MoveNext()) {
							break __while0__;
						}
					}
					__label0__ = "IL_38";
					continue __step0__;
					return current;
				}
				__label0__ = "IL_38";
				continue __step0__;
				break;

			case "IL_38":
				return null;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.GetParameterBySemantic = function (semantic) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":
				var enumerator = this.pParameter.GetEnumerator();

				if (enumerator.MoveNext()) {

				__while0__: 
					while (true) {
						var current = enumerator.get_Current();

						if (System.String.Compare(current._semantic, semantic, System.StringComparison.OrdinalIgnoreCase) !== null) {
							return current;
						}

						if (!enumerator.MoveNext()) {
							break __while0__;
						}
					}
					__label0__ = "IL_39";
					continue __step0__;
					return current;
				}
				__label0__ = "IL_39";
				continue __step0__;
				break;

			case "IL_39":
				return null;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.GetEnumerator = function () {
	return JSIL.Cast(this.pParameter.GetEnumerator(), System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.EffectParameter));
};

Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Graphics.EffectParameter));

Object.seal(Microsoft.Xna.Framework.Graphics.EffectParameterCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectParameterCollection);
Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.pPasses = null;
Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.pAnnotations = null;
Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype._handle = null;
Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype._name = null;
Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.get_Passes = function () {
	return this.pPasses;
};

Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.get_Annotations = function () {
	return this.pAnnotations;
};

Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.Validate = JSIL.UntranslatableFunction("Validate");

Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.IsParameterUsed = JSIL.UntranslatableFunction("IsParameterUsed");

Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype, "Annotations", {
		get: Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.get_Annotations
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype, "Passes", {
		get: Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.get_Passes
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype.get_Name
	});

Object.seal(Microsoft.Xna.Framework.Graphics.EffectTechnique.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectTechnique);
Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.pTechniques = null;
Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.get_Count = function () {
	return this.pTechniques.Count;
};

Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.get_Item$0 = function (index) {

	if (!((index < 0) || (index >= this.pTechniques.Count))) {
		return this.pTechniques.get_Item(index);
	}
	return null;
};

Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.get_Item$1 = function (name) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":
				var enumerator = this.pTechniques.GetEnumerator();

				if (enumerator.MoveNext()) {

				__while0__: 
					while (true) {
						var current = enumerator.get_Current();

						if (System.String.op_Equality(current._name, name)) {
							return current;
						}

						if (!enumerator.MoveNext()) {
							break __while0__;
						}
					}
					__label0__ = "IL_38";
					continue __step0__;
					return current;
				}
				__label0__ = "IL_38";
				continue __step0__;
				break;

			case "IL_38":
				return null;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.GetValidTechniques = JSIL.UntranslatableFunction("GetValidTechniques");

Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.GetEnumerator = function () {
	return JSIL.Cast(this.pTechniques.GetEnumerator(), System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.EffectTechnique));
};

Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Graphics.EffectTechnique));

Object.seal(Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection);
Microsoft.Xna.Framework.Graphics.EffectFunction.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectFunction.prototype._handle = null;
Microsoft.Xna.Framework.Graphics.EffectFunction.prototype._name = null;
Microsoft.Xna.Framework.Graphics.EffectFunction.prototype.get_Name = function () {
	return this._name;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectFunction.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.EffectFunction.prototype.get_Name
	});

Object.seal(Microsoft.Xna.Framework.Graphics.EffectFunction.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectFunction);
Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.pEffect = null;
Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.pFunction = null;
Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.get_Count = function () {
	return this.pFunction.Count;
};

Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.get_Item$0 = function (index) {

	if (!((index < 0) || (index >= this.pFunction.Count))) {
		return this.pFunction.get_Item(index);
	}
	return null;
};

Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.get_Item$1 = function (name) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":
				var enumerator = this.pFunction.GetEnumerator();

				if (enumerator.MoveNext()) {

				__while0__: 
					while (true) {
						var current = enumerator.get_Current();

						if (System.String.op_Equality(current._name, name)) {
							return current;
						}

						if (!enumerator.MoveNext()) {
							break __while0__;
						}
					}
					__label0__ = "IL_38";
					continue __step0__;
					return current;
				}
				__label0__ = "IL_38";
				continue __step0__;
				break;

			case "IL_38":
				return null;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.GetEnumerator = function () {
	return JSIL.Cast(this.pFunction.GetEnumerator(), System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.EffectFunction));
};

Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Graphics.EffectFunction));

Object.seal(Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectFunctionCollection);
Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype._parent = null;
Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype._handle = null;
Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype._isInBeginEndPair = new System.Boolean();
Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.$tEffectParameterBlock = function () {
	this.$exEffectParameterBlock();
};

Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.$exEffectParameterBlock = JSIL.UntranslatableFunction("!EffectParameterBlock");

Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype._ctor = function (parent) {
	this._parent = parent;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.Begin = JSIL.UntranslatableFunction("Begin");

Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.End = JSIL.UntranslatableFunction("End");

Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.Apply = JSIL.UntranslatableFunction("Apply");

Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$exEffectParameterBlock();
	} else {

		try {
			this.$exEffectParameterBlock();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.EffectParameterBlock.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectParameterBlock);
Microsoft.Xna.Framework.Graphics.Effect.prototype.pTechniqueCollection = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.pFunctionCollection = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.pParamCollection = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype._creator = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.$lbacking_store$gLost = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.$lbacking_store$gReset = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype._isInBeginEndPair = new System.Boolean();
Microsoft.Xna.Framework.Graphics.Effect.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.pCachedPool = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype._cachedOptions = 0;
Microsoft.Xna.Framework.Graphics.Effect.prototype.pCachedEffectData = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.pParentEffect = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.pClonedEffects = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.savedTechnique = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.Effect.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.Effect.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.Effect.prototype.InitializeHelpers = JSIL.UntranslatableFunction("InitializeHelpers");

Microsoft.Xna.Framework.Graphics.Effect.prototype.get_Creator = function () {
	return this._creator;
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.CreateEffectFromCode = JSIL.UntranslatableFunction("CreateEffectFromCode");

Microsoft.Xna.Framework.Graphics.Effect.prototype.CreateEffectFromStream = function (graphicsDevice, effectCodeFileStream, numberBytes, options, pool) {

	if (pool === null) {
		Microsoft.Xna.Framework.Helpers.CheckDisposed(pool, JSIL.IgnoredMember("op_Explicit()"));
	}
	this.CreateEffectFromCode(graphicsDevice, Microsoft.Xna.Framework.Helpers.CheckAndReadStream(effectCodeFileStream, numberBytes, JSIL.UnmaterializedReference()), options, pool);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype._ctor$1 = function (graphicsDevice, effectCodeFileStream, numberBytes, options, pool) {
	System.Object.prototype._ctor.call(this);

	if (pool === null) {
		Microsoft.Xna.Framework.Helpers.CheckDisposed(pool, JSIL.IgnoredMember("op_Explicit()"));
		Microsoft.Xna.Framework.Helpers.CheckDisposed(pool, JSIL.IgnoredMember("op_Explicit()"));
	}
	this.CreateEffectFromCode(graphicsDevice, Microsoft.Xna.Framework.Helpers.CheckAndReadStream(effectCodeFileStream, numberBytes, JSIL.UnmaterializedReference()), options, pool);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype._ctor$2 = function (graphicsDevice, effectCodeFileStream, options, pool) {
	System.Object.prototype._ctor.call(this);

	if (pool === null) {
		Microsoft.Xna.Framework.Helpers.CheckDisposed(pool, JSIL.IgnoredMember("op_Explicit()"));
		Microsoft.Xna.Framework.Helpers.CheckDisposed(pool, JSIL.IgnoredMember("op_Explicit()"));
	}
	this.CreateEffectFromCode(graphicsDevice, Microsoft.Xna.Framework.Helpers.CheckAndReadStream(effectCodeFileStream, -1, JSIL.UnmaterializedReference()), options, pool);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype._ctor$3 = function (graphicsDevice, effectCodeFile, options, pool) {
	System.Object.prototype._ctor.call(this);

	if (pool === null) {
		Microsoft.Xna.Framework.Helpers.CheckDisposed(pool, JSIL.IgnoredMember("op_Explicit()"));
	}
	var fileStream = null;

	try {
		fileStream = System.IO.File.OpenRead(effectCodeFile);
		this.CreateEffectFromCode(graphicsDevice, new System.IO.BinaryReader(fileStream).ReadBytes(JSIL.Cast(fileStream.length, System.Int32)), options, pool);
	} finally {

		if (fileStream === null) {
			fileStream.Close();
		}
	}
};

Microsoft.Xna.Framework.Graphics.Effect.prototype._ctor$4 = function (graphicsDevice, effectCode, options, pool) {
	System.Object.prototype._ctor.call(this);

	if (pool === null) {
		Microsoft.Xna.Framework.Helpers.CheckDisposed(pool, JSIL.IgnoredMember("op_Explicit()"));
	}
	this.CreateEffectFromCode(graphicsDevice, effectCode, options, pool);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype._ctor$5 = JSIL.UntranslatableFunction(".ctor");

Microsoft.Xna.Framework.Graphics.Effect.prototype.Begin$0 = JSIL.UntranslatableFunction("Begin");

Microsoft.Xna.Framework.Graphics.Effect.prototype.Begin$1 = function () {
	this.Begin(Microsoft.Xna.Framework.Graphics.SaveStateMode.None);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.End = JSIL.UntranslatableFunction("End");

Microsoft.Xna.Framework.Graphics.Effect.prototype.CommitChanges = JSIL.UntranslatableFunction("CommitChanges");

Microsoft.Xna.Framework.Graphics.Effect.prototype.Clone = function (device) {
	return new Microsoft.Xna.Framework.Graphics.Effect(device, this);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.Disassemble = function (enableColorCode) {
	return Microsoft.Xna.Framework.Graphics.Effect.Disassemble(this, enableColorCode);
};

Microsoft.Xna.Framework.Graphics.Effect.Disassemble = JSIL.UntranslatableFunction("Disassemble");

Microsoft.Xna.Framework.Graphics.Effect.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.get_EffectPool = function () {
	return this.pCachedPool;
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.get_CurrentTechnique = JSIL.UntranslatableFunction("get_CurrentTechnique");

Microsoft.Xna.Framework.Graphics.Effect.prototype.set_CurrentTechnique = JSIL.UntranslatableFunction("set_CurrentTechnique");

Microsoft.Xna.Framework.Graphics.Effect.prototype.get_Techniques = function () {
	return this.pTechniqueCollection;
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.get_Functions = function () {
	return this.pFunctionCollection;
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.get_Parameters = function () {
	return this.pParamCollection;
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.add_Lost = function (value) {
	this.$lbacking_store$gLost = System.Delegate.Combine(this.$lbacking_store$gLost, value);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.remove_Lost = function (value) {
	this.$lbacking_store$gLost = System.Delegate.Remove(this.$lbacking_store$gLost, value);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.raise_Lost = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gLost;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.add_Reset = function (value) {
	this.$lbacking_store$gReset = System.Delegate.Combine(this.$lbacking_store$gReset, value);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.remove_Reset = function (value) {
	this.$lbacking_store$gReset = System.Delegate.Remove(this.$lbacking_store$gReset, value);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.raise_Reset = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gReset;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile$0 = function (effectFileStream, preprocessorDefines, includeHandler, options, platform) {

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Windows) {

		if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
			throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
		}
		var result = $lModule$g.CompileEffectFromFileForXBox(
			effectFileStream, 
			-1, 
			preprocessorDefines, 
			includeHandler, 
			options
		);
	} else {
		result = $lModule$g.CompileEffectFromFileForWindows(
			effectFileStream, 
			-1, 
			preprocessorDefines, 
			includeHandler, 
			options
		);
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile$1 = function (effectFileStream, numberBytes, preprocessorDefines, includeHandler, options, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.CompileEffectFromFileForWindows(
			effectFileStream, 
			numberBytes, 
			preprocessorDefines, 
			includeHandler, 
			options
		);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.CompileEffectFromFileForXBox(
		effectFileStream, 
		numberBytes, 
		preprocessorDefines, 
		includeHandler, 
		options
	);
};

Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile$2 = function (effectFile, preprocessorDefines, includeHandler, options, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.CompileEffectFromFileForWindows(effectFile, preprocessorDefines, includeHandler, options);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.CompileEffectFromFileForXBox(effectFile, preprocessorDefines, includeHandler, options);
};

Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromSource = function (effectFileSource, preprocessorDefines, includeHandler, options, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.CompileEffectFromSourceForWindows(effectFileSource, preprocessorDefines, includeHandler, options);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.CompileEffectFromSourceForXBox(effectFileSource, preprocessorDefines, includeHandler, options);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.OnLostDevice = JSIL.UntranslatableFunction("OnLostDevice");

Microsoft.Xna.Framework.Graphics.Effect.prototype.OnResetDevice = JSIL.UntranslatableFunction("OnResetDevice");

Microsoft.Xna.Framework.Graphics.Effect.prototype.AddClonedEffect = function (effect) {

	if (this.pClonedEffects !== null) {
		this.pClonedEffects = new (System.Collections.Generic.List$b1.Of(System.WeakReference)) ();
	}
	this.pClonedEffects.Add(new System.WeakReference(effect));
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	this.pParamCollection.SaveDataForRecreation();
	this.savedTechnique = this.CurrentTechnique;
	this.IGraphicsResource_ReleaseNativeObject(false);
	return 0;
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.IGraphicsResource_RecreateAndPopulateObject = JSIL.UntranslatableFunction("RecreateAndPopulateObject");

Microsoft.Xna.Framework.Graphics.Effect.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var graphicsDevice = this.pCachedDevice;

	if (!((graphicsDevice !== null) || (this.pComPtr !== null))) {
		graphicsDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:ID3DXEffect*(Effect::pComPtr, ldloc:Effect(this), ldc.i4:ID3DXEffect*(0))");
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.OnObjectCreation = function (pDevice) {
	this.InitializeHelpers();
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.$exEffect = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.$tEffect = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tEffect();
	} else {

		try {
			this.$exEffect();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.Effect.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Effect.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, System.Int32, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.Graphics.EffectPool]], 
		["_ctor$2", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.IO.Stream, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.Graphics.EffectPool]], 
		["_ctor$3", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.String, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.Graphics.EffectPool]], 
		["_ctor$4", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, System.Array.Of(System.Byte), Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.Graphics.EffectPool]], 
		["_ctor$5", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Graphics.Effect]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Effect.prototype, "Begin", [
		["Begin$0", [Microsoft.Xna.Framework.Graphics.SaveStateMode]], 
		["Begin$1", []]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Effect, "CompileEffectFromFile", [
		["CompileEffectFromFile$0", [System.IO.Stream, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.TargetPlatform]], 
		["CompileEffectFromFile$1", [System.IO.Stream, System.Int32, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.TargetPlatform]], 
		["CompileEffectFromFile$2", [System.String, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.TargetPlatform]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Effect.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Effect.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.Effect.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Effect.prototype, "Parameters", {
		get: Microsoft.Xna.Framework.Graphics.Effect.prototype.get_Parameters
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Effect.prototype, "Functions", {
		get: Microsoft.Xna.Framework.Graphics.Effect.prototype.get_Functions
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Effect.prototype, "Techniques", {
		get: Microsoft.Xna.Framework.Graphics.Effect.prototype.get_Techniques
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Effect.prototype, "CurrentTechnique", {
		get: Microsoft.Xna.Framework.Graphics.Effect.prototype.get_CurrentTechnique, 
		set: Microsoft.Xna.Framework.Graphics.Effect.prototype.set_CurrentTechnique
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Effect.prototype, "EffectPool", {
		get: Microsoft.Xna.Framework.Graphics.Effect.prototype.get_EffectPool
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Effect.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.Effect.prototype.get_GraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Effect.prototype, "Creator", {
		get: Microsoft.Xna.Framework.Graphics.Effect.prototype.get_Creator
	});
Microsoft.Xna.Framework.Graphics.Effect.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.Effect.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.Effect.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Effect);
Microsoft.Xna.Framework.Graphics.EffectPool.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.EffectPool.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.EffectPool.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.EffectPool.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.EffectPool.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.EffectPool.prototype._ctor$1 = function () {
	System.Object.prototype._ctor.call(this);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.D3DXCreateEffectPool(JSIL.UntranslatableInstruction("ldflda:ID3DXEffectPool*&[exp:ID3DXEffectPool**](EffectPool::pComPtr, ldloc:EffectPool(this))"));

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.OnObjectCreation = function (pDevice) {
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.$exEffectPool = JSIL.UntranslatableFunction("!EffectPool");

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.$tEffectPool = function () {

	if (!this.isDisposed) {
		this.$exEffectPool();
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tEffectPool();
	} else {

		try {
			this.$exEffectPool();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.EffectPool.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectPool.prototype, "_ctor", [
		["_ctor$1", []]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.EffectPool.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.EffectPool.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.EffectPool.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Graphics.EffectPool.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.EffectPool.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.EffectPool);

Object.seal(ID3DXEffect);

Object.seal(ID3DXEffectPool);

Object.seal(_D3DXEFFECT_DESC.prototype);
Object.seal(_D3DXEFFECT_DESC);

Object.seal(ID3DXInclude);

Object.seal(_D3DXPARAMETER_DESC.prototype);
Object.seal(_D3DXPARAMETER_DESC);

Object.seal(_D3DXFUNCTION_DESC.prototype);
Object.seal(_D3DXFUNCTION_DESC);

Object.seal(_D3DXPASS_DESC.prototype);
Object.seal(_D3DXPASS_DESC);

Object.seal(_D3DXTECHNIQUE_DESC.prototype);
Object.seal(_D3DXTECHNIQUE_DESC);
Microsoft.Xna.Framework.Media.UniqueBSTRCollection.prototype.seenStrings = null;
Microsoft.Xna.Framework.Media.UniqueBSTRCollection.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.seenStrings = new (System.Collections.Generic.Dictionary$b2.Of(System.String, System.Boolean)) ();
};


Object.seal(Microsoft.Xna.Framework.Media.UniqueBSTRCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UniqueBSTRCollection);
NativeToManagedCallback.prototype.originalWaitHandle = null;
NativeToManagedCallback.prototype.dupedWaitHandle = null;
NativeToManagedCallback.prototype.eventSignalledFunction = null;
NativeToManagedCallback.prototype.pContext = null;

Object.seal(NativeToManagedCallback.prototype);
Object.seal(NativeToManagedCallback);
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._parentExitEvent = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._callManagedPlease = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._managedFunctionDataCanBeWritten = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._proxyProcessNeedsToChange = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._newCallbackRegistered = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._proxyProcessHandler = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._proxyProcessHandlerSyncObject = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.instance = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._managedCallType = 0;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._managedCallArgs = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.nativeToManagedCallbacks = null;
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.WaitForAsyncOperationToFinish = JSIL.UntranslatableFunction("WaitForAsyncOperationToFinish");

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.SetProxyProcessHandler = function (proxyProcessHandler) {

	if ($lModule$g.SetEvent(JSIL.UntranslatableInstruction("ldfld:void*(WindowsManagedCallbackHandler::_proxyProcessNeedsToChange, ldloc:WindowsManagedCallbackHandler(this))")) !== null) {
		var lastError = $lModule$g.GetLastError();
		return (lastError > 0) ? ((lastError & 65535) | -2147024896) : lastError;
	}
	System.Threading.Monitor.Enter(this._proxyProcessHandlerSyncObject);

	try {
		this._proxyProcessHandler = proxyProcessHandler;
	} finally {
		System.Threading.Monitor.Exit(this._proxyProcessHandlerSyncObject);
	}

	if ($lModule$g.ResetEvent(JSIL.UntranslatableInstruction("ldfld:void*(WindowsManagedCallbackHandler::_proxyProcessNeedsToChange, ldloc:WindowsManagedCallbackHandler(this))")) !== null) {
		var lastError2 = $lModule$g.GetLastError();
		return (lastError2 > 0) ? ((lastError2 & 65535) | -2147024896) : lastError2;
	}
	return 0;
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.CallManagedFunctionForMe = function (managedCallType, args) {
	return Microsoft.Xna.Framework.WindowsManagedCallbackHandler.instance.CallManagedFunctionForMeImpl(managedCallType, args);
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.get_Instance = function () {
	return Microsoft.Xna.Framework.WindowsManagedCallbackHandler.instance;
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.$tWindowsManagedCallbackHandler = function () {
	this.$exWindowsManagedCallbackHandler();
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.$exWindowsManagedCallbackHandler = JSIL.UntranslatableFunction("!WindowsManagedCallbackHandler");

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype._ctor = function () {
	JSIL.UntranslatableInstruction("stfld:void*(WindowsManagedCallbackHandler::_parentExitEvent, ldloc:WindowsManagedCallbackHandler(this), ldc.i4:void*(0))");
	JSIL.UntranslatableInstruction("stfld:void*(WindowsManagedCallbackHandler::_callManagedPlease, ldloc:WindowsManagedCallbackHandler(this), ldc.i4:void*(0))");
	JSIL.UntranslatableInstruction("stfld:void*(WindowsManagedCallbackHandler::_managedFunctionDataCanBeWritten, ldloc:WindowsManagedCallbackHandler(this), ldc.i4:void*(0))");
	JSIL.UntranslatableInstruction("stfld:void*(WindowsManagedCallbackHandler::_proxyProcessNeedsToChange, ldloc:WindowsManagedCallbackHandler(this), ldc.i4:void*(0))");
	System.Object.prototype._ctor.call(this);
	this._proxyProcessHandlerSyncObject = new System.Object();
	this.nativeToManagedCallbacks = new (System.Collections.Generic.List$b1.Of(NativeToManagedCallback)) ();
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.CallManagedFunctionForMeImpl = JSIL.UntranslatableFunction("CallManagedFunctionForMeImpl");

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.HasRoomForAnotherWaitHandle = function () {
	return ((this.nativeToManagedCallbacks.Count + 6) > 64) ? -2147220991 : 0;
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$exWindowsManagedCallbackHandler();
	} else {

		try {
			this.$exWindowsManagedCallbackHandler();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.Finalize = function () {
	this.Dispose(false);
};

Microsoft.Xna.Framework.WindowsManagedCallbackHandler._cctor = function () {
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.WindowsManagedCallbackHandler, "Instance", {
		get: Microsoft.Xna.Framework.WindowsManagedCallbackHandler.get_Instance
	});
Microsoft.Xna.Framework.WindowsManagedCallbackHandler._cctor();
Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.WindowsManagedCallbackHandler.prototype);
Object.seal(Microsoft.Xna.Framework.WindowsManagedCallbackHandler);
Object.defineProperty(Microsoft.Xna.Framework.Media.WmpInterface, "visualizationBufferSize", { value: 256 });
Microsoft.Xna.Framework.Media.WmpInterface.wmpInterfaceState = 0;
Microsoft.Xna.Framework.Media.WmpInterface.playerCallback = null;
Microsoft.Xna.Framework.Media.WmpInterface.wmpPlayer = null;
Microsoft.Xna.Framework.Media.WmpInterface.hVisualizerDll = null;
Microsoft.Xna.Framework.Media.WmpInterface.wmpSettings = null;
Microsoft.Xna.Framework.Media.WmpInterface.wmpControls = null;
Microsoft.Xna.Framework.Media.WmpInterface.shuffleStr = null;
Microsoft.Xna.Framework.Media.WmpInterface.loopStr = null;
Microsoft.Xna.Framework.Media.WmpInterface.instance = null;
Microsoft.Xna.Framework.Media.WmpInterface.allMediaHandles = null;
Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject = null;
Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetSongs = function (/* ref */ handle) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.Microsoft_Xna_Framework_Media_KernelSongCollection_GetAllSongsInLibrary(JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](num)"));

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
			handle.value = 0;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetArtists = function (/* ref */ handle) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();
		var num = handle.value;

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
			int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.Microsoft_Xna_Framework_Media_KernelArtistCollection_Create(JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
				handle.value = num;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetAlbums = function (/* ref */ handle) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
			int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.Microsoft_Xna_Framework_Media_KernelAlbumCollection_CreateFromEntireLibrary(JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
				handle.value = -1;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetPlaylists = function (/* ref */ handle) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();
		var num = handle.value;

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
			int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.Microsoft_Xna_Framework_Media_KernelPlaylistCollection_Create(JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
				handle.value = num;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetGenres = function (/* ref */ handle) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();
		var num = handle.value;

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
			int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.Microsoft_Xna_Framework_Media_KernelGenreCollection_Create(JSIL.UntranslatableInstruction("ldloca:uint32&[exp:uint32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
				handle.value = num;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaList_GetCount = JSIL.UntranslatableFunction("MediaList_GetCount");

Microsoft.Xna.Framework.Media.WmpInterface.MediaList_GetItemAtIndex = JSIL.UntranslatableFunction("MediaList_GetItemAtIndex");

Microsoft.Xna.Framework.Media.WmpInterface.MediaList_Release = JSIL.UntranslatableFunction("MediaList_Release");

Microsoft.Xna.Framework.Media.WmpInterface.MediaItem_Release = JSIL.UntranslatableFunction("MediaItem_Release");

Microsoft.Xna.Framework.Media.WmpInterface.MediaItem_GetName = JSIL.UntranslatableFunction("MediaItem_GetName");

Microsoft.Xna.Framework.Media.WmpInterface.MediaItem_IsEqual = JSIL.UntranslatableFunction("MediaItem_IsEqual");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_CreateHandle = JSIL.UntranslatableFunction("MediaSong_CreateHandle");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetArtist = JSIL.UntranslatableFunction("MediaSong_GetArtist");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetAlbum = JSIL.UntranslatableFunction("MediaSong_GetAlbum");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetGenre = JSIL.UntranslatableFunction("MediaSong_GetGenre");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetDuration = JSIL.UntranslatableFunction("MediaSong_GetDuration");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetTrackNumber = JSIL.UntranslatableFunction("MediaSong_GetTrackNumber");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetRating = JSIL.UntranslatableFunction("MediaSong_GetRating");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetPlayCount = JSIL.UntranslatableFunction("MediaSong_GetPlayCount");

Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_IsRestricted = JSIL.UntranslatableFunction("MediaSong_IsRestricted");

Microsoft.Xna.Framework.Media.WmpInterface.MediaAlbum_GetArtist = JSIL.UntranslatableFunction("MediaAlbum_GetArtist");

Microsoft.Xna.Framework.Media.WmpInterface.MediaAlbum_GetSongs = JSIL.UntranslatableFunction("MediaAlbum_GetSongs");

Microsoft.Xna.Framework.Media.WmpInterface.MediaAlbum_GetGenre = JSIL.UntranslatableFunction("MediaAlbum_GetGenre");

Microsoft.Xna.Framework.Media.WmpInterface.MediaAlbum_GetDuration = JSIL.UntranslatableFunction("MediaAlbum_GetDuration");

Microsoft.Xna.Framework.Media.WmpInterface.MediaArtist_GetSongs = JSIL.UntranslatableFunction("MediaArtist_GetSongs");

Microsoft.Xna.Framework.Media.WmpInterface.MediaArtist_GetAlbums = JSIL.UntranslatableFunction("MediaArtist_GetAlbums");

Microsoft.Xna.Framework.Media.WmpInterface.MediaGenre_GetSongs = JSIL.UntranslatableFunction("MediaGenre_GetSongs");

Microsoft.Xna.Framework.Media.WmpInterface.MediaGenre_GetAlbums = JSIL.UntranslatableFunction("MediaGenre_GetAlbums");

Microsoft.Xna.Framework.Media.WmpInterface.MediaPlaylist_GetSongs = JSIL.UntranslatableFunction("MediaPlaylist_GetSongs");

Microsoft.Xna.Framework.Media.WmpInterface.MediaPlaylist_GetDuration = JSIL.UntranslatableFunction("MediaPlaylist_GetDuration");

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_PlaySong = JSIL.UntranslatableFunction("MediaQueue_PlaySong");

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_PlaySongList = JSIL.UntranslatableFunction("MediaQueue_PlaySongList");

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_MoveTo = function (songIndex) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_MoveTo(songIndex);
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_MoveNext = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_MoveNext();
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_MovePrev = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_MovePrev();
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetSongAtIndex = JSIL.UntranslatableFunction("MediaQueue_GetSongAtIndex");

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetSongCount = function (/* ref */ songCount) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3 = $lModule$g.XnaMediaPlayer_GetCount(JSIL.UntranslatableInstruction("ldloca:modopt(IsLong) int32&[exp:modopt(IsLong) int32*](int32 modopt(System.Runtime.CompilerServices.IsLong)2)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3 >= 0) {
				songCount.value = 0;
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetPlayPosition = function (/* ref */ position) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = 0;
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.XnaMediaPlayer_GetPosition(JSIL.UntranslatableInstruction("ldloca:modopt(IsLong) uint32&[exp:modopt(IsLong) uint32*](uInt32 modopt(System.Runtime.CompilerServices.IsLong))"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
				position.value = uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetShuffle = function (/* ref */ shuffle) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.XnaMediaPlayer_IsShuffled(JSIL.UntranslatableInstruction("ldloca:int32&[exp:int32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
				shuffle.value = (0 !== 0);
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_SetShuffle = function (shuffle) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_SetShuffle(shuffle);
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetRepeat = function (/* ref */ repeat) {
	var num = 0;
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.XnaMediaPlayer_IsRepeating(JSIL.UntranslatableInstruction("ldloca:int32&[exp:int32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
				var flag = (num !== 0);
				repeat.value = flag;
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_SetRepeat = function (repeat) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_SetRepeat(repeat);
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_Pause = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_Pause();
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_Resume = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_Resume();
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_Stop = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_Stop();
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetPlayState = function (/* ref */ state) {
	var playerState = 0;
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.XnaMediaPlayer_GetState(JSIL.UntranslatableInstruction("ldloca:PlayerState&[exp:PlayerState*](playerState)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {

				if (playerState === 0) {

					if (playerState !== 1) {
						state.value = Microsoft.Xna.Framework.Media.MediaState.Stopped;
					} else {
						state.value = Microsoft.Xna.Framework.Media.MediaState.Paused;
					}
				} else {
					state.value = Microsoft.Xna.Framework.Media.MediaState.Playing;
				}
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetVolume = function (/* ref */ volume) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.XnaMediaPlayer_GetVolume(JSIL.UntranslatableInstruction("ldloca:float32&[exp:float32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
				volume.value = 0;
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_SetVolume = function (volume) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else if (!((volume < 0) || (volume > 1))) {
			result = $lModule$g.XnaMediaPlayer_SetVolume(volume);
		} else {
			result = -2147024809;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_IsMuted = function (/* ref */ muted) {
	var num = 0;
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.XnaMediaPlayer_IsMuted(JSIL.UntranslatableInstruction("ldloca:int32&[exp:int32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
				var flag = (num !== 0);
				muted.value = flag;
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_SetMute = function (mute) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_SetMute(mute);
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetActiveSongIndex = function (/* ref */ songIndex) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3 = $lModule$g.XnaMediaPlayer_GetActiveIndex(JSIL.UntranslatableInstruction("ldloca:modopt(IsLong) int32&[exp:modopt(IsLong) int32*](int32 modopt(System.Runtime.CompilerServices.IsLong)2)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3 >= 0) {
				songIndex.value = -1;
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp3;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_EnableVisualization = function (enable) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			result = $lModule$g.XnaMediaPlayer_EnableVisualization(enable);
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_IsVisualizationEnabled = function (/* ref */ enabled) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.XnaMediaPlayer_IsVisualizationEnabled(JSIL.UntranslatableInstruction("ldloca:int32&[exp:int32*](num)"));

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
				enabled.value = (0 === 1);
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetVisualizationData = function (frequencies, freqLen, samples, sampleLen) {
	var $ArrayType$$$BY0BAA$atM = new $lCppImplementationDetails$g.$ArrayType$$$BY0BAA$atM(), $ArrayType$$$BY0BAA$atM2 = new $lCppImplementationDetails$g.$ArrayType$$$BY0BAA$atM();
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized();

		if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -2147221164) {
			var result = 0;
		} else if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = 0;

			if (!((freqLen >= 256) && (sampleLen >= 256))) {
				int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = -2147024809;
			}
			JSIL.UntranslatableInstruction("initblk(ldloca:$ArrayType$$$BY0BAA@M&($ArrayType$$$BY0BAA@M), ldc.i4:int32(0), ldc.i4:int32(1024))");
			JSIL.UntranslatableInstruction("initblk(ldloca:$ArrayType$$$BY0BAA@M&($ArrayType$$$BY0BAA@M2), ldc.i4:int32(0), ldc.i4:int32(1024))");

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
				int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 = $lModule$g.XnaMediaPlayer_GetVisualizationData($ArrayType$$$BY0BAA$atM, 1024, $ArrayType$$$BY0BAA$atM2, 1024);

				if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2 >= 0) {
					JSIL.UntranslatableInstruction("cpblk(ldelema:float32&(float32, ldloc:float32[](frequencies), var_2_7D_cp_1:int32), ldloca:$ArrayType$$$BY0BAA@M&($ArrayType$$$BY0BAA@M), ldc.i4:int32(1024))");
					JSIL.UntranslatableInstruction("cpblk(ldelema:float32&(float32, ldloc:float32[](samples), var_1_85_cp_1:int32), ldloca:$ArrayType$$$BY0BAA@M&($ArrayType$$$BY0BAA@M2), ldc.i4:int32(1024))");
					JSIL.UntranslatableNode("Fault Block");
					JSIL.UntranslatableNode("Fault Block");
				}
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp2;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Create = JSIL.UntranslatableFunction("VideoDecoder_Create");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Release = JSIL.UntranslatableFunction("VideoDecoder_Release");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Play = JSIL.UntranslatableFunction("VideoDecoder_Play");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Start = JSIL.UntranslatableFunction("VideoDecoder_Start");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Pause = JSIL.UntranslatableFunction("VideoDecoder_Pause");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Resume = JSIL.UntranslatableFunction("VideoDecoder_Resume");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Stop = JSIL.UntranslatableFunction("VideoDecoder_Stop");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_GetState = JSIL.UntranslatableFunction("VideoDecoder_GetState");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_SetMute = JSIL.UntranslatableFunction("VideoDecoder_SetMute");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_SetVolume = JSIL.UntranslatableFunction("VideoDecoder_SetVolume");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_GetPlayPosition = JSIL.UntranslatableFunction("VideoDecoder_GetPlayPosition");

Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_SetLooping = JSIL.UntranslatableFunction("VideoDecoder_SetLooping");

Microsoft.Xna.Framework.Media.WmpInterface.AddTrackedMediaHandle = function (handle) {
	Microsoft.Xna.Framework.Media.WmpInterface.allMediaHandles.Add(handle, null);
};

Microsoft.Xna.Framework.Media.WmpInterface.RemoveTrackedMediaHandle = function (handle) {
	Microsoft.Xna.Framework.Media.WmpInterface.allMediaHandles.Remove(handle);
};

Microsoft.Xna.Framework.Media.WmpInterface.CleanupAllTrackedMediaHandles = function () {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);

	try {
		var list = new (System.Collections.Generic.List$b1.Of(System.UInt32)) (Microsoft.Xna.Framework.Media.WmpInterface.allMediaHandles.get_Keys());

	__while0__: 
		while (list.Count === null) {
			var expr_23 = list;
			var num = expr_23.get_Item((expr_23.Count - 1));

			if (Microsoft.Xna.Framework.Media.WmpInterface.MediaItem_Release(num) < 0) {
				Microsoft.Xna.Framework.Media.WmpInterface.MediaList_Release(num);
			}
			var expr_42 = list;
			expr_42.RemoveAt((expr_42.Count - 1));
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject);
	}
};

Microsoft.Xna.Framework.Media.WmpInterface.EnsureWMPInitialized = JSIL.UntranslatableFunction("EnsureWMPInitialized");

Microsoft.Xna.Framework.Media.WmpInterface.prototype._ctor = function () {
	System.Runtime.ConstrainedExecution.CriticalFinalizerObject.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.WmpInterface.prototype.$tWmpInterface = function () {
	this.$exWmpInterface();
};

Microsoft.Xna.Framework.Media.WmpInterface.prototype.$exWmpInterface = JSIL.UntranslatableFunction("!WmpInterface");

Microsoft.Xna.Framework.Media.WmpInterface.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tWmpInterface();
	} else {

		try {
			this.$exWmpInterface();
		} finally {
			System.Runtime.ConstrainedExecution.CriticalFinalizerObject.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Media.WmpInterface.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.WmpInterface.prototype.Finalize = function () {
	this.Dispose(false);
};

Microsoft.Xna.Framework.Media.WmpInterface._cctor = function () {
	Microsoft.Xna.Framework.Media.WmpInterface.visualizationBufferSize = 256;
	Microsoft.Xna.Framework.Media.WmpInterface.wmpInterfaceState = 0;
	JSIL.UntranslatableInstruction("stsfld:IWMPPlayer4*(WmpInterface::wmpPlayer, ldc.i4:IWMPPlayer4*(0))");
	JSIL.UntranslatableInstruction("stsfld:HINSTANCE__*(WmpInterface::hVisualizerDll, ldc.i4:HINSTANCE__*(0))");
	JSIL.UntranslatableInstruction("stsfld:IWMPSettings*(WmpInterface::wmpSettings, ldc.i4:IWMPSettings*(0))");
	JSIL.UntranslatableInstruction("stsfld:IWMPControls*(WmpInterface::wmpControls, ldc.i4:IWMPControls*(0))");
	JSIL.UntranslatableInstruction("stsfld:uint16*(WmpInterface::shuffleStr, ldc.i4:uint16*(0))");
	JSIL.UntranslatableInstruction("stsfld:uint16*(WmpInterface::loopStr, ldc.i4:uint16*(0))");
	Microsoft.Xna.Framework.Media.WmpInterface.allMediaHandles = new (System.Collections.Generic.Dictionary$b2.Of(System.UInt32, System.Object)) ();
	Microsoft.Xna.Framework.Media.WmpInterface.pSyncObject = new System.Object();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.WmpInterface.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Microsoft.Xna.Framework.Media.WmpInterface._cctor();
Microsoft.Xna.Framework.Media.WmpInterface.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.WmpInterface.prototype);
Object.seal(Microsoft.Xna.Framework.Media.WmpInterface);

Object.seal(GenericList$lunsigned$spshort$sp$as$g.prototype);
Object.seal(GenericList$lunsigned$spshort$sp$as$g);

Object.seal(IWMPPlayer4);

Object.seal(Microsoft.Xna.Framework.Media.XnaMediaPlayerCallback.prototype);
Object.seal(Microsoft.Xna.Framework.Media.XnaMediaPlayerCallback);

Object.seal(IWMPSettings);

Object.seal(IWMPControls);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0L$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0L$at$$CBD);

Object.seal(Microsoft.Xna.Framework.Media.IKernelMediaCollection);

Object.seal(Microsoft.Xna.Framework.Media.KernelAlbum.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelAlbum);

Object.seal(IWMPPlaylist);

Object.seal($_TypeDescriptor$_extraBytes_59.prototype);
Object.seal($_TypeDescriptor$_extraBytes_59);

Object.seal(IWMPMedia);

Object.seal(Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelAlbum$g.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelAlbum$g);

Object.seal(Microsoft.Xna.Framework.Media.KernelAlbumCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelAlbumCollection);

Object.seal(Microsoft.Xna.Framework.Media.KernelGenreCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelGenreCollection);

Object.seal(Microsoft.Xna.Framework.Media.KernelArtistCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelArtistCollection);

Object.seal(Microsoft.Xna.Framework.Media.KernelPlaylistCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelPlaylistCollection);

Object.seal(Microsoft.Xna.Framework.Media.KernelSongCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelSongCollection);

Object.seal(Microsoft.Xna.Framework.Media.KernelSong.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelSong);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY04Q6AXXZ.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY04Q6AXXZ);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY05$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY05$$CBG);

Object.seal($_TypeDescriptor$_extraBytes_58.prototype);
Object.seal($_TypeDescriptor$_extraBytes_58);

Object.seal(IWMPStringCollection);

Object.seal(IWMPMediaCollection);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CG$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CG$at$$CBD);

Object.seal(Microsoft.Xna.Framework.Media.KernelArtist.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelArtist);

Object.seal(Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelArtist$g.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelArtist$g);

Object.seal(Microsoft.Xna.Framework.Media.KernelGenre.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelGenre);

Object.seal(Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelGenre$g.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelMediaItemWithSongs$lMicrosoft$c$cXna$c$cFramework$c$cMedia$c$cKernelGenre$g);

Object.seal(Microsoft.Xna.Framework.Media.KernelPlaylist.prototype);
Object.seal(Microsoft.Xna.Framework.Media.KernelPlaylist);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY08$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY08$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY09$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY09$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BC$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BC$at$$CBG);

Object.seal(GenericList$lIWMPPlaylist$sp$as$g.prototype);
Object.seal(GenericList$lIWMPPlaylist$sp$as$g);

Object.seal($_TypeDescriptor$_extraBytes_61.prototype);
Object.seal($_TypeDescriptor$_extraBytes_61);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BA$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BA$at$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0P$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0P$at$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0L$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0L$at$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0O$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0O$at$$CBG);

Object.seal($_TypeDescriptor$_extraBytes_57.prototype);
Object.seal($_TypeDescriptor$_extraBytes_57);
Microsoft.Xna.Framework.Input.Keyboard.DisableHomeKey = new System.Boolean();
Microsoft.Xna.Framework.Input.Keyboard.GetState$0 = function () {
	return Microsoft.Xna.Framework.Input.Keyboard.GetState(255);
};

Microsoft.Xna.Framework.Input.Keyboard.GetState$1 = function (playerIndex) {
	var $ArrayType$$$BY0BAA$atE = new $lCppImplementationDetails$g.$ArrayType$$$BY0BAA$atE();

	if ($lModule$g.GetKeyboardState(JSIL.UntranslatableInstruction("ldloca:$ArrayType$$$BY0BAA@E&[exp:uint8*]($ArrayType$$$BY0BAA@E)")) !== null) {
		throw new System.InvalidOperationException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.CouldNotReadKeyboard, [$lModule$g.GetLastError()]));
	}

	if (Microsoft.Xna.Framework.Input.Keyboard.DisableHomeKey) {
		JSIL.UntranslatableInstruction("stobj:uint8(uint8, add:$ArrayType$$$BY0BAA@E&[exp:uint8&](ldloca:$ArrayType$$$BY0BAA@E&($ArrayType$$$BY0BAA@E), ldc.i4:int32[exp:$ArrayType$$$BY0BAA@E&](36)), ldc.i4:uint8(0))");
	}
	var result = new Microsoft.Xna.Framework.Input.KeyboardState();
	var num = 0;

__while0__: 
	while (true) {

		if (((num + $ArrayType$$$BY0BAA$atE) & 128) === 0) {
			result.AddPressedKey(num);
		}
		++num;

		if (num >= 256) {
			break __while0__;
		}
	}
	return result;
};

Microsoft.Xna.Framework.Input.Keyboard._cctor = function () {
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Input.Keyboard, "GetState", [
		["GetState$0", []], 
		["GetState$1", [Microsoft.Xna.Framework.PlayerIndex]]
	]
);
Microsoft.Xna.Framework.Input.Keyboard._cctor();

Object.seal(Microsoft.Xna.Framework.Input.Keyboard);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BAA$atE.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BAA$atE);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY06$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY06$$CBG);
Microsoft.Xna.Framework.Input.MouseMessageHooker.currentWheel = 0;
Microsoft.Xna.Framework.Input.MouseMessageHooker.prototype.WndProc = function (hWnd, msg, wParam, lParam) {

	if (msg === 522) {
		Microsoft.Xna.Framework.Input.MouseMessageHooker.currentWheel += (JSIL.IgnoredMember("ToPointer()") >>> 16);
	}
	return new (System.Nullable$b1.Of(System.IntPtr)) ();
};

Microsoft.Xna.Framework.Input.MouseMessageHooker.get_CurrentWheel = function () {
	return Microsoft.Xna.Framework.Input.MouseMessageHooker.currentWheel;
};

Microsoft.Xna.Framework.Input.MouseMessageHooker.prototype._ctor = function () {
	Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Input.MouseMessageHooker._cctor = function () {
};

Object.defineProperty(Microsoft.Xna.Framework.Input.MouseMessageHooker, "CurrentWheel", {
		get: Microsoft.Xna.Framework.Input.MouseMessageHooker.get_CurrentWheel
	});
Microsoft.Xna.Framework.Input.MouseMessageHooker._cctor();

Object.seal(Microsoft.Xna.Framework.Input.MouseMessageHooker.prototype);
Object.seal(Microsoft.Xna.Framework.Input.MouseMessageHooker);
Microsoft.Xna.Framework.Input.Mouse.mouseMessageHooker = null;
Microsoft.Xna.Framework.Input.Mouse.hHookedHandle = null;
Microsoft.Xna.Framework.Input.Mouse.get_WindowHandle = function () {
	var result = 0;
	JSIL.IgnoredMember(".ctor()");
	return result;
};

Microsoft.Xna.Framework.Input.Mouse.set_WindowHandle = function (value) {
	JSIL.UntranslatableInstruction("stsfld:HWND__*(Mouse::hHookedHandle, call:void*[exp:HWND__*](IntPtr::ToPointer, ldloca:IntPtr&(value)))");
	Microsoft.Xna.Framework.Input.Mouse.mouseMessageHooker.WindowHandle = value;
};

Microsoft.Xna.Framework.Input.Mouse.GetState = function () {
	var x = new tagPOINT();
	var result = new Microsoft.Xna.Framework.Input.MouseState();
	$lModule$g.GetCursorPos(JSIL.UntranslatableInstruction("ldloca:tagPOINT&[exp:tagPOINT*](x)"));

	if (Microsoft.Xna.Framework.Input.Mouse.hHookedHandle === null) {
		$lModule$g.ScreenToClient(JSIL.UntranslatableInstruction("ldsfld:HWND__*(Mouse::hHookedHandle)"), JSIL.UntranslatableInstruction("ldloca:tagPOINT&[exp:tagPOINT*](x)"));
	}
	result.x = x.MemberwiseClone();
	result.y = (x + 4);
	result.leftButton = (JSIL.Cast($lModule$g.GetAsyncKeyState(1), System.UInt16) >>> 15);
	result.middleButton = (JSIL.Cast($lModule$g.GetAsyncKeyState(4), System.UInt16) >>> 15);
	result.rightButton = (JSIL.Cast($lModule$g.GetAsyncKeyState(2), System.UInt16) >>> 15);
	result.xb1 = (JSIL.Cast($lModule$g.GetAsyncKeyState(5), System.UInt16) >>> 15);
	result.xb2 = (JSIL.Cast($lModule$g.GetAsyncKeyState(6), System.UInt16) >>> 15);
	result.wheel = Microsoft.Xna.Framework.Input.MouseMessageHooker.CurrentWheel;
	return result;
};

Microsoft.Xna.Framework.Input.Mouse.SetPosition = function (x, y) {
	var tagPOINT = x;
	JSIL.UntranslatableInstruction("stobj:int32(int32, add:tagPOINT&[exp:int32&](ldloca:tagPOINT&(tagPOINT), ldc.i4:int32[exp:tagPOINT&](4)), ldloc:int32(y))");

	if (Microsoft.Xna.Framework.Input.Mouse.hHookedHandle === null) {
		$lModule$g.ClientToScreen(JSIL.UntranslatableInstruction("ldsfld:HWND__*(Mouse::hHookedHandle)"), JSIL.UntranslatableInstruction("ldloca:tagPOINT&[exp:tagPOINT*](tagPOINT)"));
	}
	$lModule$g.SetCursorPos(tagPOINT.MemberwiseClone(), (tagPOINT + 4));
};

Microsoft.Xna.Framework.Input.Mouse._cctor = function () {
	Microsoft.Xna.Framework.Input.Mouse.mouseMessageHooker = new Microsoft.Xna.Framework.Input.MouseMessageHooker();
	JSIL.UntranslatableInstruction("stsfld:HWND__*(Mouse::hHookedHandle, ldc.i4:HWND__*(0))");
};

Object.defineProperty(Microsoft.Xna.Framework.Input.Mouse, "WindowHandle", {
		get: Microsoft.Xna.Framework.Input.Mouse.get_WindowHandle, 
		set: Microsoft.Xna.Framework.Input.Mouse.set_WindowHandle
	});
Microsoft.Xna.Framework.Input.Mouse._cctor();

Object.seal(Microsoft.Xna.Framework.Input.Mouse);

Object.seal(tagPOINT.prototype);
Object.seal(tagPOINT);

Object.seal(Microsoft.Xna.Framework.Graphics.WindowsD3DXIncludeWrapper.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.WindowsD3DXIncludeWrapper);

Object.seal(gcroot$lMicrosoft$c$cXna$c$cFramework$c$cGraphics$c$cCompilerIncludeHandler$sp^$g.prototype);
Object.seal(gcroot$lMicrosoft$c$cXna$c$cFramework$c$cGraphics$c$cCompilerIncludeHandler$sp^$g);

Object.seal($_TypeDescriptor$_extraBytes_65.prototype);
Object.seal($_TypeDescriptor$_extraBytes_65);

Object.seal($_TypeDescriptor$_extraBytes_19.prototype);
Object.seal($_TypeDescriptor$_extraBytes_19);
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype._pixelCount = 0;
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype._isAvailable = new System.Boolean();
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype._isInBeginEndPair = new System.Boolean();
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype._hasCalledBegin = new System.Boolean();
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype._hasIsCompleteBeenQueried = new System.Boolean();
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype._ctor$1 = function (graphicsDevice) {
	System.Object.prototype._ctor.call(this);

	if (graphicsDevice !== null) {
		throw new System.ArgumentNullException("graphicsDevice", Microsoft.Xna.Framework.FrameworkResources.DeviceCannotBeNullOnResourceCreate);
	}
	this._hasIsCompleteBeenQueried = true;
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice))") + 472);
	var arg_45_0 = JSIL.UntranslatableInstruction("calli[exp:object](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,_D3DQUERYTYPE,IDirect3DQuery9**), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice)), ldc.i4:int32(9), ldflda:IDirect3DQuery9*&(OcclusionQuery::pComPtr, ldloc:OcclusionQuery(this)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
	this.pCachedDevice = graphicsDevice;
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.Begin = JSIL.UntranslatableFunction("Begin");

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.End = JSIL.UntranslatableFunction("End");

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_IsComplete = JSIL.UntranslatableFunction("get_IsComplete");

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_PixelCount = function () {

	if (!this.IsComplete) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.DataNotAvailable);
	}
	return this._pixelCount;
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_IsSupported = function () {
	return (JSIL.UntranslatableInstruction("ldfld:IDirect3DQuery9*(OcclusionQuery::pComPtr, ldloc:OcclusionQuery(this))") !== JSIL.UntranslatableInstruction("ldc.i4:IDirect3DQuery9*(0)")) ? 1 : 0;
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_Name = function () {
	return this.pCachedDevice.get_Resources().GetCachedName(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.set_Name = function (value) {
	this.pCachedDevice.get_Resources().SetCachedName(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_Tag = function () {
	return this.pCachedDevice.get_Resources().GetCachedTag(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.set_Tag = function (value) {
	this.pCachedDevice.get_Resources().SetCachedTag(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	return 0;
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.IGraphicsResource_RecreateAndPopulateObject = function () {

	if (this.pComPtr === null) {
		return -2147467259;
	}
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldfld:GraphicsDevice(OcclusionQuery::pCachedDevice, ldloc:OcclusionQuery(this)))") + 472);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,_D3DQUERYTYPE,IDirect3DQuery9**), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldfld:GraphicsDevice(OcclusionQuery::pCachedDevice, ldloc:OcclusionQuery(this))), ldc.i4:int32(9), ldflda:IDirect3DQuery9*&(OcclusionQuery::pComPtr, ldloc:OcclusionQuery(this)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
		JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	}
	return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var graphicsDevice = this.pCachedDevice;

	if (!((graphicsDevice !== null) || (this.pComPtr !== null))) {
		graphicsDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	this._isAvailable = false;
	JSIL.UntranslatableInstruction("stfld:IDirect3DQuery9*(OcclusionQuery::pComPtr, ldloc:OcclusionQuery(this), ldc.i4:IDirect3DQuery9*(0))");
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.OnObjectCreation = function (pDevice) {
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.$exOcclusionQuery = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.$tOcclusionQuery = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tOcclusionQuery();
	} else {

		try {
			this.$exOcclusionQuery();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_GraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "IsSupported", {
		get: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_IsSupported
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "PixelCount", {
		get: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_PixelCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype, "IsComplete", {
		get: Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.get_IsComplete
	});
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.OcclusionQuery.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.OcclusionQuery);

Object.seal(IDirect3DQuery9);
Microsoft.Xna.Framework.Graphics.ShaderHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Graphics.ShaderHelper.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ShaderHelper);
Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile$0 = function (shaderSourceCode, preprocessorDefines, includeHandler, options, platform) {

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Windows) {

		if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
			throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
		}
		var result = $lModule$g.AssembleShaderFromFileForXbox(
			shaderSourceCode, 
			-1, 
			preprocessorDefines, 
			includeHandler, 
			options
		);
	} else {
		result = $lModule$g.AssembleShaderFromFileForWindows(
			shaderSourceCode, 
			-1, 
			preprocessorDefines, 
			includeHandler, 
			options
		);
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile$1 = function (shaderSourceCode, numberBytes, preprocessorDefines, includeHandler, options, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.AssembleShaderFromFileForWindows(
			shaderSourceCode, 
			numberBytes, 
			preprocessorDefines, 
			includeHandler, 
			options
		);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.AssembleShaderFromFileForXbox(
		shaderSourceCode, 
		numberBytes, 
		preprocessorDefines, 
		includeHandler, 
		options
	);
};

Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile$2 = function (shaderFileName, preprocessorDefines, includeHandler, options, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.AssembleShaderFromFileForWindows(shaderFileName, preprocessorDefines, includeHandler, options);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.AssembleShaderFromFileForXbox(shaderFileName, preprocessorDefines, includeHandler, options);
};

Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromSource = function (shaderSourceCode, preprocessorDefines, includeHandler, options, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.AssembleShaderFromSourceForWindows(shaderSourceCode, preprocessorDefines, includeHandler, options);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.AssembleShaderFromSourceForXbox(shaderSourceCode, preprocessorDefines, includeHandler, options);
};

Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile$0 = function (shaderSourceCode, preprocessorDefines, includeHandler, options, functionName, profile, platform) {
	return Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile(
		shaderSourceCode, 
		-1, 
		preprocessorDefines, 
		includeHandler, 
		options, 
		functionName, 
		profile, 
		platform
	);
};

Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile$1 = function (shaderSourceCode, numberBytes, preprocessorDefines, includeHandler, options, functionName, profile, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.CompileShaderFromFileForWindows(
			shaderSourceCode, 
			numberBytes, 
			preprocessorDefines, 
			includeHandler, 
			options, 
			functionName, 
			profile
		);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.CompileShaderFromFileForXbox(
		shaderSourceCode, 
		numberBytes, 
		preprocessorDefines, 
		includeHandler, 
		options, 
		functionName, 
		profile
	);
};

Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile$2 = function (shaderFileName, preprocessorDefines, includeHandler, options, functionName, profile, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.CompileShaderFromFileForWindows(
			shaderFileName, 
			preprocessorDefines, 
			includeHandler, 
			options, 
			functionName, 
			profile
		);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.CompileShaderFromFileForXbox(
		shaderFileName, 
		preprocessorDefines, 
		includeHandler, 
		options, 
		functionName, 
		profile
	);
};

Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromSource = function (shaderSourceCode, preprocessorDefines, includeHandler, options, functionName, profile, platform) {

	if (platform === Microsoft.Xna.Framework.TargetPlatform.Windows) {
		return $lModule$g.CompileShaderFromSourceForWindows(
			shaderSourceCode, 
			preprocessorDefines, 
			includeHandler, 
			options, 
			functionName, 
			profile
		);
	}

	if (platform !== Microsoft.Xna.Framework.TargetPlatform.Xbox360) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidPlatform, "platform");
	}
	return $lModule$g.CompileShaderFromSourceForXbox(
		shaderSourceCode, 
		preprocessorDefines, 
		includeHandler, 
		options, 
		functionName, 
		profile
	);
};

Microsoft.Xna.Framework.Graphics.ShaderCompiler.Disassemble = JSIL.UntranslatableFunction("Disassemble");

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.ShaderCompiler, "AssembleFromFile", [
		["AssembleFromFile$0", [System.IO.Stream, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.TargetPlatform]], 
		["AssembleFromFile$1", [System.IO.Stream, System.Int32, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.TargetPlatform]], 
		["AssembleFromFile$2", [System.String, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, Microsoft.Xna.Framework.TargetPlatform]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.ShaderCompiler, "CompileFromFile", [
		["CompileFromFile$0", [System.IO.Stream, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, System.String, Microsoft.Xna.Framework.Graphics.ShaderProfile, Microsoft.Xna.Framework.TargetPlatform]], 
		["CompileFromFile$1", [System.IO.Stream, System.Int32, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, System.String, Microsoft.Xna.Framework.Graphics.ShaderProfile, Microsoft.Xna.Framework.TargetPlatform]], 
		["CompileFromFile$2", [System.String, System.Array.Of(Microsoft.Xna.Framework.Graphics.CompilerMacro), Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler, Microsoft.Xna.Framework.Graphics.CompilerOptions, System.String, Microsoft.Xna.Framework.Graphics.ShaderProfile, Microsoft.Xna.Framework.TargetPlatform]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.ShaderCompiler);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY06$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY06$$CBD);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY07$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY07$$CBD);

Object.seal(_D3DXSEMANTIC.prototype);
Object.seal(_D3DXSEMANTIC);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0EA$atU_D3DXSEMANTIC$at$at.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0EA$atU_D3DXSEMANTIC$at$at);

Object.seal(_D3DXCONSTANT_DESC.prototype);
Object.seal(_D3DXCONSTANT_DESC);
Microsoft.Xna.Framework.Graphics.StateBlock.prototype._contentLost = new System.Boolean();
Microsoft.Xna.Framework.Graphics.StateBlock.prototype.$lbacking_store$gContentLost = null;
Microsoft.Xna.Framework.Graphics.StateBlock.prototype.pCachedDevice = null;
Microsoft.Xna.Framework.Graphics.StateBlock.prototype.pComPtr = null;
Microsoft.Xna.Framework.Graphics.StateBlock.prototype._internalHandle = 0;
Microsoft.Xna.Framework.Graphics.StateBlock.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.StateBlock.prototype.$lbacking_store$gDisposing = null;
Microsoft.Xna.Framework.Graphics.StateBlock.prototype._ctor$1 = function (graphicsDevice) {
	System.Object.prototype._ctor.call(this);

	if (graphicsDevice !== null) {
		throw new System.ArgumentNullException("graphicsDevice", Microsoft.Xna.Framework.FrameworkResources.DeviceCannotBeNullOnResourceCreate);
	}
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice))") + 236);
	var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,_D3DSTATEBLOCKTYPE,IDirect3DStateBlock9**), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldloc:GraphicsDevice(graphicsDevice)), ldc.i4:int32(1), ldflda:IDirect3DStateBlock9*&(StateBlock::pComPtr, ldloc:StateBlock(this)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");

	if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp < 0) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp);
	}
	this.pCachedDevice = graphicsDevice;
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_GraphicsDevice = function () {
	return this.pCachedDevice;
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.Capture = JSIL.UntranslatableFunction("Capture");

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.Apply = JSIL.UntranslatableFunction("Apply");

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_Name = function () {
	return this.pCachedDevice.get_Resources().GetCachedName(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.set_Name = function (value) {
	this.pCachedDevice.get_Resources().SetCachedName(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_Tag = function () {
	return this.pCachedDevice.get_Resources().GetCachedTag(this._internalHandle);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.set_Tag = function (value) {
	this.pCachedDevice.get_Resources().SetCachedTag(this._internalHandle, value);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.IGraphicsResource_SaveDataForRecreation = function () {
	return 0;
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.IGraphicsResource_RecreateAndPopulateObject = function () {

	if (this.pComPtr === null) {
		return -2147467259;
	}
	var num = (JSIL.UntranslatableInstruction("ldfld:IDirect3DDevice9*[exp:int32*](GraphicsDevice::pComPtr, ldfld:GraphicsDevice(StateBlock::pCachedDevice, ldloc:StateBlock(this)))") + 236);
	var arg_60_0 = JSIL.UntranslatableInstruction("calli[exp:modopt(IsLong) int32](System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvStdcall)(System.IntPtr,_D3DSTATEBLOCKTYPE,IDirect3DStateBlock9**), ldfld:IDirect3DDevice9*(GraphicsDevice::pComPtr, ldfld:GraphicsDevice(StateBlock::pCachedDevice, ldloc:StateBlock(this))), ldc.i4:int32(1), ldflda:IDirect3DStateBlock9*&(StateBlock::pComPtr, ldloc:StateBlock(this)), ldobj:int32(int32, ldloc:int32[exp:int32&](num)))");
	JSIL.IgnoredMember("AddTrackedObject(managedObject, pComPtr, resourceManagementMode, handle, updatedHandle)");
	return arg_60_0;
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.IGraphicsResource_ReleaseNativeObject = function (disposeManagedResource) {
	var graphicsDevice = this.pCachedDevice;

	if (!((graphicsDevice !== null) || (this.pComPtr !== null))) {
		graphicsDevice.get_Resources().ReleaseAllReferences(this._internalHandle, disposeManagedResource);
	}
	JSIL.UntranslatableInstruction("stfld:IDirect3DStateBlock9*(StateBlock::pComPtr, ldloc:StateBlock(this), ldc.i4:IDirect3DStateBlock9*(0))");
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.IDynamicGraphicsResource_SetContentLost = function (isContentLost) {
	this._contentLost = isContentLost;

	if (isContentLost) {
		this.raise_ContentLost(this, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.add_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Combine(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.remove_ContentLost = function (value) {
	this.$lbacking_store$gContentLost = System.Delegate.Remove(this.$lbacking_store$gContentLost, value);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.raise_ContentLost = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gContentLost;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_IsContentLost = function () {

	if (!this._contentLost) {
		this._contentLost = this.pCachedDevice.get_IsDeviceLost();
	}
	return this._contentLost;
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.toString = function () {
	return System.Object.prototype.toString.call(this);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.OnObjectCreation = function (pDevice) {
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.add_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Combine(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.remove_Disposing = function (value) {
	this.$lbacking_store$gDisposing = System.Delegate.Remove(this.$lbacking_store$gDisposing, value);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.raise_Disposing = function (value0, value1) {
	var eventHandler = this.$lbacking_store$gDisposing;

	if (eventHandler === null) {
		eventHandler(value0, value1);
	}
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.$exStateBlock = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
	}
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.$tStateBlock = function () {

	if (!this.isDisposed) {
		this.isDisposed = true;
		this.IGraphicsResource_ReleaseNativeObject(true);
		var eventHandler = this.$lbacking_store$gDisposing;

		if (eventHandler === null) {
			eventHandler(this, System.EventArgs.Empty);
		}
	}
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.Dispose$0 = function (flag) {

	if (flag) {
		this.$tStateBlock();
	} else {

		try {
			this.$exStateBlock();
		} finally {
			System.Object.prototype.Finalize.call(this);
		}
	}
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.Dispose$1 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.StateBlock.prototype.Finalize = function () {
	this.Dispose(false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.StateBlock.prototype, "_ctor", [
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.StateBlock.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.StateBlock.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.StateBlock.prototype, "IsContentLost", {
		get: Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_IsContentLost
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.StateBlock.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.StateBlock.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.StateBlock.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.StateBlock.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.StateBlock.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.StateBlock.prototype.get_GraphicsDevice
	});
Microsoft.Xna.Framework.Graphics.StateBlock.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IGraphicsResource);
Microsoft.Xna.Framework.Graphics.StateBlock.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.IDynamicGraphicsResource);
Microsoft.Xna.Framework.Graphics.StateBlock.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.StateBlock.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.StateBlock);

Object.seal(IDirect3DStateBlock9);

Object.seal(_D3DVERTEXBUFFER_DESC.prototype);
Object.seal(_D3DVERTEXBUFFER_DESC);

Object.seal(_D3DLOCKED_BOX.prototype);
Object.seal(_D3DLOCKED_BOX);

Object.seal(ID3DXEffectCompiler);
Microsoft.Xna.Framework.Graphics.EnumConversion.ConvertWindowsFormatToXna = function (format) {
	return $lModule$g.ConvertWindowsFormatToXna(format);
};


Object.seal(Microsoft.Xna.Framework.Graphics.EnumConversion);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BA$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BA$at$$CBD);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01PAX.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY01PAX);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0EA$atPAX.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0EA$atPAX);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY04$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY04$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY07$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY07$$CBG);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CE$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CE$at$$CBD);

Object.seal(XnaMediaPlayer.IXnaMediaPlayerCallback);

Object.seal(XnaMediaPlayer.IXnaVideoDecoder);

Object.seal($_TypeDescriptor$_extraBytes_45.prototype);
Object.seal($_TypeDescriptor$_extraBytes_45);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BAA$atM.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0BAA$atM);

Object.seal(Microsoft.Xna.Framework.Media.WmpProxyFunction.prototype);
Object.seal(Microsoft.Xna.Framework.Media.WmpProxyFunction);
Microsoft.Xna.Framework.Media.WmpProxyThread.m_InitializationState = 0;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_ProxyFunction = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_ResultOfFunction = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_FunctionCallHandle = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_FunctionReturnHandle = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_AppdomainUnloadHandle = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_ProxyThreadExit = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_CaughtException = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_FunctionCallMessage = 0;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_ProxyWindow = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_WindowClassRegistered = new System.Boolean();
Microsoft.Xna.Framework.Media.WmpProxyThread.syncObject = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.m_ProxyWindowName = null;
Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment = function (proxyFunction) {
	System.Threading.Monitor.Enter(Microsoft.Xna.Framework.Media.WmpProxyThread.syncObject);

	try {

		if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_InitializationState === Microsoft.Xna.Framework.Media.WmpProxyThreadState.Shutdown) {
			var result = -2147467259;
		} else {
			var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpProxyThread.Initialize();

			if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
				Microsoft.Xna.Framework.Media.WmpProxyThread.m_ProxyFunction = proxyFunction;
				$lModule$g.SendMessage(JSIL.UntranslatableInstruction("ldsfld:HWND__*(WmpProxyThread::m_ProxyWindow)"), Microsoft.Xna.Framework.Media.WmpProxyThread.m_FunctionCallMessage, 0, 0);
				int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpProxyThread.WaitForProxyThread();

				if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {

					if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_CaughtException === null) {
						throw Microsoft.Xna.Framework.Media.WmpProxyThread.m_CaughtException;
					}
					int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpProxyThread.m_ResultOfFunction;
					Microsoft.Xna.Framework.Media.WmpProxyThread.m_ResultOfFunction = 0;
				}
			}
			result = int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Media.WmpProxyThread.syncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Media.WmpProxyThread.Initialize = function () {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":

				if ((Microsoft.Xna.Framework.Media.WmpProxyThread.m_InitializationState === Microsoft.Xna.Framework.Media.WmpProxyThreadState.InitializationFailure) || (Microsoft.Xna.Framework.Media.WmpProxyThread.m_InitializationState === Microsoft.Xna.Framework.Media.WmpProxyThreadState.Shutdown)) {
					return -2147467259;
				}

				if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_InitializationState !== 0) {
					return 0;
				}
				var int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = 0;
				JSIL.UntranslatableInstruction("stsfld:void*(WmpProxyThread::m_FunctionCallHandle, call:modopt(CallConvStdcall) void*[exp:void*](<Module>::CreateEventW, ldc.i4:_SECURITY_ATTRIBUTES*(0), ldc.i4:int32(0), ldc.i4:int32(0), ldc.i4:modopt(IsConst) uint16*(0)))");

				if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_FunctionCallHandle !== null) {
					var lastError = $lModule$g.GetLastError();

					if (lastError <= 0) {
						var num = lastError;
					} else {
						num = ((lastError & 65535) | -2147024896);
					}
					int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = num;

					if (num < 0) {
						__label0__ = "IL_172";
						continue __step0__;
					}
				}
				JSIL.UntranslatableInstruction("stsfld:void*(WmpProxyThread::m_FunctionReturnHandle, call:modopt(CallConvStdcall) void*[exp:void*](<Module>::CreateEventW, ldc.i4:_SECURITY_ATTRIBUTES*(0), ldc.i4:int32(0), ldc.i4:int32(0), ldc.i4:modopt(IsConst) uint16*(0)))");

				if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_FunctionReturnHandle !== null) {
					var lastError2 = $lModule$g.GetLastError();
					int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = (lastError2 > 0) ? ((lastError2 & 65535) | -2147024896) : lastError2;
				}

				if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
					JSIL.UntranslatableInstruction("stsfld:void*(WmpProxyThread::m_AppdomainUnloadHandle, call:modopt(CallConvStdcall) void*[exp:void*](<Module>::CreateEventW, ldc.i4:_SECURITY_ATTRIBUTES*(0), ldc.i4:int32(1), ldc.i4:int32(0), ldc.i4:modopt(IsConst) uint16*(0)))");

					if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_AppdomainUnloadHandle !== null) {
						var lastError3 = $lModule$g.GetLastError();
						int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = (lastError3 > 0) ? ((lastError3 & 65535) | -2147024896) : lastError3;
					}

					if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
						JSIL.UntranslatableInstruction("stsfld:void*(WmpProxyThread::m_ProxyThreadExit, call:modopt(CallConvStdcall) void*[exp:void*](<Module>::CreateEventW, ldc.i4:_SECURITY_ATTRIBUTES*(0), ldc.i4:int32(1), ldc.i4:int32(0), ldc.i4:modopt(IsConst) uint16*(0)))");

						if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_ProxyThreadExit !== null) {
							var lastError4 = $lModule$g.GetLastError();
							int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = (lastError4 > 0) ? ((lastError4 & 65535) | -2147024896) : lastError4;
						}

						if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
							var thread = new System.Threading.Thread(JSIL.Delegate.New("System.Threading.ThreadStart", null, Microsoft.Xna.Framework.Media.WmpProxyThread.ProxyThreadFunc));
							thread.SetApartmentState(System.Threading.ApartmentState.STA);
							thread.set_Name("WmpProxyThread");
							thread.set_IsBackground(true);
							thread.Start();
							int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = Microsoft.Xna.Framework.Media.WmpProxyThread.WaitForProxyThread();

							if (int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp >= 0) {
								System.AppDomain.CurrentDomain.add_DomainUnload(JSIL.Delegate.New("System.EventHandler", null, Microsoft.Xna.Framework.Media.WmpProxyThread.AppDomainUnloaded));
								System.AppDomain.CurrentDomain.add_ProcessExit(JSIL.Delegate.New("System.EventHandler", null, Microsoft.Xna.Framework.Media.WmpProxyThread.AppDomainUnloaded));
								Microsoft.Xna.Framework.Media.WmpProxyThread.m_InitializationState = Microsoft.Xna.Framework.Media.WmpProxyThreadState.Initialized;
								return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
							}
						}
					}
				}
				__label0__ = "IL_172";
				continue __step0__;
				break;

			case "IL_172":
				Microsoft.Xna.Framework.Media.WmpProxyThread.m_InitializationState = Microsoft.Xna.Framework.Media.WmpProxyThreadState.InitializationFailure;
				return int32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Media.WmpProxyThread.WaitForProxyThread = function () {
	JSIL.UntranslatableInstruction("stobj:int32(int32, add:$ArrayType$$$BY01PAX&[exp:int32&](ldloca:$ArrayType$$$BY01PAX&(functionReturnHandle), ldc.i4:int32[exp:$ArrayType$$$BY01PAX&](4)), ldsfld:void*[exp:int32](WmpProxyThread::m_ProxyThreadExit))");
	var uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp = $lModule$g.WaitForMultipleObjects(2, JSIL.UntranslatableInstruction("ldloca:$ArrayType$$$BY01PAX&[exp:modopt(IsConst) modopt(IsConst) void**](functionReturnHandle)"), 0, -1);

	if (uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === 1) {
		return -2147467259;
	}

	if (uInt32$spmodopt$lpSystem_Runtime_CompilerServices_IsLong$rp === -1) {
		var lastError = $lModule$g.GetLastError();
		return (lastError > 0) ? ((lastError & 65535) | -2147024896) : lastError;
	}
	return 0;
};

Microsoft.Xna.Framework.Media.WmpProxyThread.ProxyThreadFunc = JSIL.UntranslatableFunction("ProxyThreadFunc");

Microsoft.Xna.Framework.Media.WmpProxyThread.PumpMessages = function () {
	var tagMSG = new tagMSG();

	if ($lModule$g.PeekMessageW(
			JSIL.UntranslatableInstruction("ldloca:tagMSG&[exp:tagMSG*](tagMSG)"), 
			JSIL.UntranslatableInstruction("ldc.i4:HWND__*(0)"), 
			0, 
			0, 
			1
		) === null) {

	__while0__: 
		while (true) {
			$lModule$g.TranslateMessage(JSIL.UntranslatableInstruction("ldloca:tagMSG&[exp:modopt(IsConst) tagMSG*](tagMSG)"));
			$lModule$g.DispatchMessageW(JSIL.UntranslatableInstruction("ldloca:tagMSG&[exp:modopt(IsConst) tagMSG*](tagMSG)"));

			if ($lModule$g.PeekMessageW(
					JSIL.UntranslatableInstruction("ldloca:tagMSG&[exp:tagMSG*](tagMSG)"), 
					JSIL.UntranslatableInstruction("ldc.i4:HWND__*(0)"), 
					0, 
					0, 
					1
				) !== null) {
				break __while0__;
			}
		}
	}
};

Microsoft.Xna.Framework.Media.WmpProxyThread.AppDomainUnloaded = function (sender, args) {
	Microsoft.Xna.Framework.Media.WmpProxyThread.DestroyHwnd();
	$lModule$g.SetEvent(JSIL.UntranslatableInstruction("ldsfld:void*(WmpProxyThread::m_ProxyThreadExit)"));
	$lModule$g.SetEvent(JSIL.UntranslatableInstruction("ldsfld:void*(WmpProxyThread::m_AppdomainUnloadHandle)"));
};

Microsoft.Xna.Framework.Media.WmpProxyThread.DestroyHwnd = function () {

	if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_ProxyWindow === null) {
		$lModule$g.DestroyWindow(JSIL.UntranslatableInstruction("ldsfld:HWND__*(WmpProxyThread::m_ProxyWindow)"));
		JSIL.UntranslatableInstruction("stsfld:HWND__*(WmpProxyThread::m_ProxyWindow, ldc.i4:HWND__*(0))");
	}

	if (Microsoft.Xna.Framework.Media.WmpProxyThread.m_WindowClassRegistered) {
		$lModule$g.UnregisterClassW(JSIL.UntranslatableInstruction("ldsfld:modopt(IsConst) uint16*(WmpProxyThread::m_ProxyWindowName)"), JSIL.UntranslatableInstruction("ldc.i4:HINSTANCE__*(0)"));
		Microsoft.Xna.Framework.Media.WmpProxyThread.m_WindowClassRegistered = false;
	}
	Microsoft.Xna.Framework.Media.WmpInterface.CleanupAllTrackedMediaHandles();
};

Microsoft.Xna.Framework.Media.WmpProxyThread.HandleMessage = function (msg) {

	if (msg === Microsoft.Xna.Framework.Media.WmpProxyThread.m_FunctionCallMessage) {
		$lModule$g.SetEvent(JSIL.UntranslatableInstruction("ldsfld:void*(WmpProxyThread::m_FunctionCallHandle)"));
		return true;
	}
	return false;
};

Microsoft.Xna.Framework.Media.WmpProxyThread.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.WmpProxyThread._cctor = function () {
	Microsoft.Xna.Framework.Media.WmpProxyThread.m_InitializationState = Microsoft.Xna.Framework.Media.WmpProxyThreadState.NotInitialized;
	Microsoft.Xna.Framework.Media.WmpProxyThread.m_ProxyFunction = null;
	Microsoft.Xna.Framework.Media.WmpProxyThread.m_CaughtException = null;
	Microsoft.Xna.Framework.Media.WmpProxyThread.syncObject = new System.Object();
	JSIL.UntranslatableInstruction("stsfld:modopt(IsConst) uint16*(WmpProxyThread::m_ProxyWindowName, ldsflda:$ArrayType$$$BY0CN@$$CBG&[exp:modopt(IsConst) uint16*](<Module>::??_C@_1FK@DCNCNBCA@?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?4?$AAX?$AAn?$AAa?$AA?4?$AAF?$AAr?$AAa?$AAm?$AAe?$AAw?$AAo?$AAr?$AAk?$AA?4?$AAM?$AAe?$AAd?$AAi?$AAa?$AA?4?$AAW?$AAm@))");
};

Microsoft.Xna.Framework.Media.WmpProxyThread._cctor();

Object.seal(Microsoft.Xna.Framework.Media.WmpProxyThread.prototype);
Object.seal(Microsoft.Xna.Framework.Media.WmpProxyThread);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CN$at$$CBG.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CN$at$$CBG);

Object.seal(tagWNDCLASSW.prototype);
Object.seal(tagWNDCLASSW);

Object.seal(HMENU__.prototype);
Object.seal(HMENU__);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CF$at$$CBD.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0CF$at$$CBD);

Object.seal(XboxD3DXIncludeWrapper.prototype);
Object.seal(XboxD3DXIncludeWrapper);

Object.seal(IXboxD3DXIncludeWrapper);

Object.seal($_TypeDescriptor$_extraBytes_29.prototype);
Object.seal($_TypeDescriptor$_extraBytes_29);

Object.seal($_TypeDescriptor$_extraBytes_30.prototype);
Object.seal($_TypeDescriptor$_extraBytes_30);
Microsoft.Xna.Framework.Content.NativeMethods.CreateDecompressionContext = JSIL.UntranslatableFunction("CreateDecompressionContext");

Microsoft.Xna.Framework.Content.NativeMethods.DestroyDecompressionContext = function (context) {
	JSIL.UntranslatableInstruction("calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.Void*), call:void*(IntPtr::ToPointer, ldloca:IntPtr&(context)), ldsfld:method(<Module>::?A0x27ec2928.DestroyDecompressionContext))");
};


Object.seal(Microsoft.Xna.Framework.Content.NativeMethods);

Object.seal($lCrtImplementationDetails$g.LanguageSupport.prototype);
Object.seal($lCrtImplementationDetails$g.LanguageSupport);

Object.seal(gcroot$lSystem$c$cString$sp^$g.prototype);
Object.seal(gcroot$lSystem$c$cString$sp^$g);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY00Q6MPBXXZ.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY00Q6MPBXXZ);

Object.seal($lCrtImplementationDetails$g.Progress.prototype);
Object.seal($lCrtImplementationDetails$g.Progress);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0A$atP6AXXZ.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0A$atP6AXXZ);

Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0A$atP6AHXZ.prototype);
Object.seal($lCppImplementationDetails$g.$ArrayType$$$BY0A$atP6AHXZ);

Object.seal($lCrtImplementationDetails$g.TriBool.prototype);
Object.seal($lCrtImplementationDetails$g.TriBool);

Object.seal(_EXCEPTION_POINTERS.prototype);
Object.seal(_EXCEPTION_POINTERS);

Object.seal($lCrtImplementationDetails$g.ThisModule.prototype);
Object.seal($lCrtImplementationDetails$g.ThisModule);

Object.seal(std.logic_error.prototype);
Object.seal(std.logic_error);

Object.seal(std.basic_string$lchar,std$c$cchar_traits$lchar$g,std$c$callocator$lchar$g$sp$g.prototype);
Object.seal(std.basic_string$lchar,std$c$cchar_traits$lchar$g,std$c$callocator$lchar$g$sp$g);

Object.seal(std.out_of_range.prototype);
Object.seal(std.out_of_range);

Object.seal(std._Fac_node.prototype);
Object.seal(std._Fac_node);

Object.seal($_s__RTTIBaseClassArray$_extraBytes_12.prototype);
Object.seal($_s__RTTIBaseClassArray$_extraBytes_12);

Object.seal($_TypeDescriptor$_extraBytes_23.prototype);
Object.seal($_TypeDescriptor$_extraBytes_23);

Object.seal($_TypeDescriptor$_extraBytes_22.prototype);
Object.seal($_TypeDescriptor$_extraBytes_22);
Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.elementName = null;
Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.flattenContent = new System.Boolean();
Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.optional = new System.Boolean();
Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.allowNull = new System.Boolean();
Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.sharedResource = new System.Boolean();
Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.collectionItemName = null;
Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype._ctor = function () {
	this.allowNull = true;
	System.Attribute.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_ElementName = function () {
	return this.elementName;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_ElementName = function (value) {
	this.elementName = value;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_FlattenContent = function () {
	return this.flattenContent;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_FlattenContent = function (value) {
	this.flattenContent = value;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_Optional = function () {
	return this.optional;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_Optional = function (value) {
	this.optional = value;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_AllowNull = function () {
	return this.allowNull;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_AllowNull = function (value) {
	this.allowNull = value;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_SharedResource = function () {
	return this.sharedResource;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_SharedResource = function (value) {
	this.sharedResource = value;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_CollectionItemName = function () {

	if (System.String.IsNullOrEmpty(this.collectionItemName)) {
		return "Item";
	}
	return this.collectionItemName;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_CollectionItemName = function (value) {

	if (System.String.IsNullOrEmpty(value)) {
		throw new System.ArgumentNullException("value");
	}
	this.collectionItemName = value;
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_HasCollectionItemName = function () {
	return !System.String.IsNullOrEmpty(this.collectionItemName);
};

Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.Clone = function () {
	return new Microsoft.Xna.Framework.Content.ContentSerializerAttribute().__Initialize__({
			elementName: this.elementName, 
			flattenContent: this.flattenContent, 
			optional: this.optional, 
			allowNull: this.allowNull, 
			sharedResource: this.sharedResource, 
			collectionItemName: this.collectionItemName}
	);
};

Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype, "ElementName", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_ElementName, 
		set: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_ElementName
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype, "FlattenContent", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_FlattenContent, 
		set: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_FlattenContent
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype, "Optional", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_Optional, 
		set: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_Optional
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype, "AllowNull", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_AllowNull, 
		set: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_AllowNull
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype, "SharedResource", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_SharedResource, 
		set: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_SharedResource
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype, "CollectionItemName", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_CollectionItemName, 
		set: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.set_CollectionItemName
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype, "HasCollectionItemName", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype.get_HasCollectionItemName
	});

Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerAttribute.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerAttribute);
Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.prototype.collectionItemName = null;
Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.prototype._ctor = function (collectionItemName) {
	System.Attribute.prototype._ctor.call(this);

	if (System.String.IsNullOrEmpty(collectionItemName)) {
		throw new System.ArgumentNullException("collectionItemName");
	}
	this.collectionItemName = collectionItemName;
};

Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.prototype.get_CollectionItemName = function () {
	return this.collectionItemName;
};

Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.prototype, "CollectionItemName", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.prototype.get_CollectionItemName
	});

Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerCollectionItemNameAttribute);
Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute);
Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.prototype.typeVersion = 0;
Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.prototype._ctor = function (typeVersion) {
	System.Attribute.prototype._ctor.call(this);
	this.typeVersion = typeVersion;
};

Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.prototype.get_TypeVersion = function () {
	return this.typeVersion;
};

Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.prototype, "TypeVersion", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.prototype.get_TypeVersion
	});

Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute);
Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.prototype.runtimeType = null;
Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.prototype._ctor = function (runtimeType) {
	System.Attribute.prototype._ctor.call(this);

	if (System.String.IsNullOrEmpty(runtimeType)) {
		throw new System.ArgumentNullException("runtimeType");
	}
	this.runtimeType = runtimeType;
};

Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.prototype.get_RuntimeType = function () {
	return this.runtimeType;
};

Object.defineProperty(Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.prototype, "RuntimeType", {
		get: Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.prototype.get_RuntimeType
	});

Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentSerializerRuntimeTypeAttribute);
Microsoft.Xna.Framework.Content.ContentLoadException.prototype._ctor$0 = function () {
	System.Exception.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Content.ContentLoadException.prototype._ctor$1 = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Content.ContentLoadException.prototype._ctor$2 = function (message, innerException) {
	System.Exception.prototype._ctor.call(this, message, innerException);
};

Microsoft.Xna.Framework.Content.ContentLoadException.prototype._ctor$3 = function (info, context) {
	System.Exception.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentLoadException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Content.ContentLoadException.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentLoadException);
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentManager, "contentExtension", { value: ".xnb" });
Microsoft.Xna.Framework.Content.ContentManager.prototype.serviceProvider = null;
Microsoft.Xna.Framework.Content.ContentManager.prototype.rootDirectory = null;
Microsoft.Xna.Framework.Content.ContentManager.prototype.loadedAssets = null;
Microsoft.Xna.Framework.Content.ContentManager.prototype.disposableAssets = null;
Microsoft.Xna.Framework.Content.ContentManager.prototype._ctor$0 = function (serviceProvider) {
	this._ctor(serviceProvider, System.String.Empty);
};

Microsoft.Xna.Framework.Content.ContentManager.prototype._ctor$1 = function (serviceProvider, rootDirectory) {
	this.loadedAssets = new (System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object)) (System.StringComparer.OrdinalIgnoreCase);
	this.disposableAssets = new (System.Collections.Generic.List$b1.Of(System.IDisposable)) ();
	System.Object.prototype._ctor.call(this);

	if (serviceProvider !== null) {
		throw new System.ArgumentNullException("serviceProvider");
	}

	if (rootDirectory !== null) {
		throw new System.ArgumentNullException("rootDirectory");
	}
	this.set_RootDirectory(rootDirectory);
	this.serviceProvider = serviceProvider;
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.get_ServiceProvider = function () {
	return this.serviceProvider;
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.get_RootDirectory = function () {
	return this.rootDirectory;
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.set_RootDirectory = function (value) {

	if (value !== null) {
		throw new System.ArgumentNullException("value");
	}

	if (this.loadedAssets.Count > 0) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.ContentManagerCannotChangeRootDirectory);
	}
	value = System.IO.Path.GetFullPath(System.IO.Path.Combine(Microsoft.Xna.Framework.Storage.StorageContainer.TitleLocation, value));
	this.rootDirectory = value;
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.RecordDisposableObject = function (disposable) {
	this.disposableAssets.Add(disposable);
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.Dispose$1 = function (disposing) {

	try {

		if (!(!disposing || (this.loadedAssets !== null))) {
			this.Unload();
		}
	} finally {
		this.loadedAssets = null;
		this.disposableAssets = null;
	}
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.Unload = function () {

	if (this.loadedAssets !== null) {
		throw new System.ObjectDisposedException(this.toString());
	}

	try {
		var enumerator = this.disposableAssets.GetEnumerator();

		try {

		__while0__: 
			while (enumerator.MoveNext()) {
				enumerator.get_Current().IDisposable_Dispose();
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	} finally {
		this.loadedAssets.Clear();
		this.disposableAssets.Clear();
	}
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.Load = function (assetName) {
	var obj = new JSIL.Variable(null);

	if (this.loadedAssets !== null) {
		throw new System.ObjectDisposedException(this.toString());
	}

	if (System.String.IsNullOrEmpty(assetName)) {
		throw new System.ArgumentNullException("assetName");
	}
	assetName = Microsoft.Xna.Framework.Content.ContentManager.GetCleanPath(assetName);

	if (!this.loadedAssets.TryGetValue(assetName, /* ref */ obj)) {
		var t = this.ReadAsset(assetName, null);
		this.loadedAssets.Add(assetName, t);
		return t;
	}

	if (JSIL.TryCast(obj.value, T) !== null) {
		throw new Microsoft.Xna.Framework.Content.ContentLoadException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.BadXnbWrongType, [assetName, obj.value.GetType(), T]));
	}
	return JSIL.Cast(obj.value, T);
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.ReadAsset = function (assetName, recordDisposableObject) {

	if (this.loadedAssets !== null) {
		throw new System.ObjectDisposedException(this.toString());
	}

	if (System.String.IsNullOrEmpty(assetName)) {
		throw new System.ArgumentNullException("assetName");
	}
	var stream = this.OpenStream(assetName);

	try {
		var contentReader = new Microsoft.Xna.Framework.Content.ContentReader(this, stream, assetName, recordDisposableObject);

		try {
			var result = contentReader.ReadAsset();
		} finally {

			if (contentReader === null) {
				contentReader.IDisposable_Dispose();
			}
		}
	} finally {

		if (stream === null) {
			stream.IDisposable_Dispose();
		}
	}
	return result;
};

Microsoft.Xna.Framework.Content.ContentManager.prototype.OpenStream = function (assetName) {

	try {
		var result = new System.IO.FileStream(Microsoft.Xna.Framework.Content.ContentManager.GetCleanPath(System.IO.Path.Combine(this.rootDirectory, (assetName + ".xnb"))), System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.None | System.IO.FileShare.Read);
	} catch ($exception) {
		var arg_2D_0 = $exception;
		var exception = arg_2D_0;

		if (!((JSIL.TryCast(exception, System.IO.FileNotFoundException) !== null) && (JSIL.TryCast(exception, System.IO.DirectoryNotFoundException) !== null))) {
			throw new Microsoft.Xna.Framework.Content.ContentLoadException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.OpenStreamNotFound, [assetName]), exception);
		}

		if (!((JSIL.TryCast(exception, System.ArgumentException) !== null) && 
				(JSIL.TryCast(exception, System.NotSupportedException) !== null) && 
				(JSIL.TryCast(exception, System.IO.IOException) !== null) && (JSIL.TryCast(exception, System.UnauthorizedAccessException) !== null))) {
			throw new Microsoft.Xna.Framework.Content.ContentLoadException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.OpenStreamError, [assetName]), exception);
		}
		throw $exception;
	}
	return result;
};

Microsoft.Xna.Framework.Content.ContentManager.GetCleanPath = function (path) {
	path = path.Replace(System.IO.Path.AltDirectorySeparatorChar, System.IO.Path.DirectorySeparatorChar);
	var i = 1;

__while0__: 
	while (i < path.length) {
		i = path.IndexOf("\\..\\", i);

		if (i < 0) {
			break __while0__;
		}
		var num = (path.LastIndexOf(System.IO.Path.DirectorySeparatorChar, (i - 1)) + 1);
		path = path.Remove(num, ((i - num) + "\\..\\".length));
		i = System.Math.Max((num - 1), 1);
	}
	return path;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentManager.prototype, "_ctor", [
		["_ctor$0", [System.IServiceProvider]], 
		["_ctor$1", [System.IServiceProvider, System.String]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentManager.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentManager.prototype, "ServiceProvider", {
		get: Microsoft.Xna.Framework.Content.ContentManager.prototype.get_ServiceProvider
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentManager.prototype, "RootDirectory", {
		get: Microsoft.Xna.Framework.Content.ContentManager.prototype.get_RootDirectory, 
		set: Microsoft.Xna.Framework.Content.ContentManager.prototype.set_RootDirectory
	});
Microsoft.Xna.Framework.Content.ContentManager.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Content.ContentManager.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentManager);
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentReader, "PlatformLabel", { value: 119 });
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentReader, "XnbVersion", { value: 4 });
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentReader, "XnbCompressedVersion", { value: 32772 });
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentReader, "XnbPrologueSize", { value: 10 });
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentReader, "XnbCompressedPrologueSize", { value: 14 });
Microsoft.Xna.Framework.Content.ContentReader.prototype.contentManager = null;
Microsoft.Xna.Framework.Content.ContentReader.prototype.assetName = null;
Microsoft.Xna.Framework.Content.ContentReader.prototype.recordDisposableObject = null;
Microsoft.Xna.Framework.Content.ContentReader.prototype.typeReaders = null;
Microsoft.Xna.Framework.Content.ContentReader.prototype.sharedResourceFixups = null;
Microsoft.Xna.Framework.Content.ContentReader.prototype._ctor = function (contentManager, input, assetName, recordDisposableObject) {
	System.IO.BinaryReader.prototype._ctor.call(this, Microsoft.Xna.Framework.Content.ContentReader.PrepareStream(input, assetName));
	this.contentManager = contentManager;
	this.assetName = assetName;
	this.recordDisposableObject = recordDisposableObject;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.get_ContentManager = function () {
	return this.contentManager;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.get_AssetName = function () {
	return this.assetName;
};

Microsoft.Xna.Framework.Content.ContentReader.PrepareStream = function (input, assetName) {

	try {
		var binaryReader = new System.IO.BinaryReader(input);

		if (!((binaryReader.ReadByte() === 88) && 
				(binaryReader.ReadByte() === 78) && (binaryReader.ReadByte() === 66))) {
			throw Microsoft.Xna.Framework.Content.ContentReader.CreateContentLoadException(assetName, null, Microsoft.Xna.Framework.FrameworkResources.BadXnbMagic, JSIL.Array.New(System.Object, 0));
		}

		if (binaryReader.ReadByte() !== 119) {
			throw Microsoft.Xna.Framework.Content.ContentReader.CreateContentLoadException(assetName, null, Microsoft.Xna.Framework.FrameworkResources.BadXnbPlatform, JSIL.Array.New(System.Object, 0));
		}
		var num = binaryReader.ReadUInt16();

		if (num === 4) {
			var flag = false;
		} else {

			if (!(num === 32772)) {
				throw Microsoft.Xna.Framework.Content.ContentReader.CreateContentLoadException(assetName, null, Microsoft.Xna.Framework.FrameworkResources.BadXnbVersion, JSIL.Array.New(System.Object, 0));
			}
			flag = true;
		}
		var num2 = binaryReader.ReadInt32();

		if (!((input.CanSeek !== null) || ((num2 - 10) <= (input.length - input.Position)))) {
			throw Microsoft.Xna.Framework.Content.ContentReader.CreateContentLoadException(assetName, null, Microsoft.Xna.Framework.FrameworkResources.BadXnbSize, JSIL.Array.New(System.Object, 0));
		}

		if (flag) {
			var result = new Microsoft.Xna.Framework.Content.DecompressStream(input, (num2 - 14), binaryReader.ReadInt32());
		} else {
			result = input;
		}
	} catch ($exception) {

		if (JSIL.CheckType($exception, System.IO.IOException)) {
			var arg_DE_0 = $exception;
			throw Microsoft.Xna.Framework.Content.ContentReader.CreateContentLoadException(assetName, arg_DE_0, Microsoft.Xna.Framework.FrameworkResources.BadXnb, JSIL.Array.New(System.Object, 0));
		} else {
			throw $exception;
		}
	}
	return result;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadAsset = function () {

	try {
		var sharedResourceCount = this.ReadHeader();
		var t = this.ReadObject();
		this.ReadSharedResources(sharedResourceCount);
	} catch ($exception) {

		if (JSIL.CheckType($exception, System.IO.IOException)) {
			var arg_19_0 = $exception;
			throw this.CreateContentLoadException(arg_19_0, Microsoft.Xna.Framework.FrameworkResources.BadXnb, JSIL.Array.New(System.Object, 0));
		} else {
			throw $exception;
		}
	}
	return t;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadHeader = function () {
	this.typeReaders = Microsoft.Xna.Framework.Content.ContentTypeReaderManager.ReadTypeManifest(System.IO.BinaryReader.prototype.Read7BitEncodedInt.call(this), this);
	var num = System.IO.BinaryReader.prototype.Read7BitEncodedInt.call(this);

	if (num > 0) {
		this.sharedResourceFixups = JSIL.Array.New(System.Collections.Generic.List$b1.Of(System.Action$b1.Of(System.Object)), num);
		var i = 0;

	__while0__: 
		while (i < num) {
			this.sharedResourceFixups[i] = new (System.Collections.Generic.List$b1.Of(System.Action$b1.Of(System.Object))) ();
			++i;
		}
	}
	return num;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadObject$0 = function () {
	return this.ReadObjectInternal(null);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadObject$1 = function (existingInstance) {
	return this.ReadObjectInternal(existingInstance);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadObject$2 = function (typeReader) {
	return this.ReadObjectInternal(typeReader, null);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadObject$3 = function (typeReader, existingInstance) {
	return this.ReadObjectInternal(typeReader, existingInstance);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadObjectInternal$0 = function (existingInstance) {
	var num = System.IO.BinaryReader.prototype.Read7BitEncodedInt.call(this);

	if (num !== 0) {
		return null;
	}
	--num;

	if (num >= this.typeReaders.length) {
		throw this.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.BadXnb, JSIL.Array.New(System.Object, 0));
	}
	return this.InvokeReader(this.typeReaders[num], existingInstance);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadObjectInternal$1 = function (typeReader, existingInstance) {

	if (typeReader !== null) {
		throw new System.ArgumentNullException("typeReader");
	}

	if (typeReader.TargetIsValueType) {
		return this.InvokeReader(typeReader, existingInstance);
	}
	return this.ReadObjectInternal(existingInstance);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadRawObject$0 = function () {
	return this.InvokeReader(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader(T, this), null);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadRawObject$1 = function (existingInstance) {
	return this.InvokeReader(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader(T, this), existingInstance);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadRawObject$2 = function (typeReader) {

	if (typeReader !== null) {
		throw new System.ArgumentNullException("typeReader");
	}
	return this.InvokeReader(typeReader, null);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadRawObject$3 = function (typeReader, existingInstance) {

	if (typeReader !== null) {
		throw new System.ArgumentNullException("typeReader");
	}
	return this.InvokeReader(typeReader, existingInstance);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.InvokeReader = function (reader, existingInstance) {
	var contentTypeReader = JSIL.TryCast(reader, Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(T));

	if (contentTypeReader === null) {
		var t = contentTypeReader.Read(this, (existingInstance !== null) ? null : JSIL.Cast(existingInstance, T));
	} else {
		var obj = reader.Read(this, existingInstance);

		if (obj === null) {

			if (JSIL.TryCast(obj, T) !== null) {
				throw this.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.BadXnbWrongType, [obj.GetType(), T]);
			}
			t = JSIL.Cast(obj, T);
		} else {
			t = null;
		}
	}

	if (existingInstance === null) {

		if (!System.Object.ReferenceEquals(existingInstance, t)) {
			throw new System.InvalidOperationException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.ReaderConstructedNewInstance, [reader.GetType()]));
		}
	} else if (!reader.TargetIsValueType) {
		var disposable = JSIL.TryCast(t, System.IDisposable);

		if (disposable === null) {

			if (this.recordDisposableObject === null) {
				this.recordDisposableObject(disposable);
			} else {
				this.contentManager.RecordDisposableObject(disposable);
			}
		}
	}
	return t;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadSharedResource = function (fixup) {
	var $l$gc__DisplayClass = new (Microsoft.Xna.Framework.Content.ContentReader.$l$gc__DisplayClass1$b1.Of(T)) ();
	$l$gc__DisplayClass.fixup = fixup;
	$l$gc__DisplayClass.$l$g4__this = this;

	if ($l$gc__DisplayClass.fixup !== null) {
		throw new System.ArgumentNullException("fixup");
	}
	var num = System.IO.BinaryReader.prototype.Read7BitEncodedInt.call(this);

	if (num !== 0) {
		return ;
	}
	--num;

	if (num >= this.sharedResourceFixups.length) {
		throw this.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.BadXnb, JSIL.Array.New(System.Object, 0));
	}
	this.sharedResourceFixups[num].Add(function (value) {

			if (JSIL.TryCast(value, T) !== null) {
				throw $l$gc__DisplayClass.$l$g4__this.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.BadXnb, JSIL.Array.New(System.Object, 0));
			}
			$l$gc__DisplayClass.fixup(JSIL.Cast(value, T));
		});
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadSharedResources = function (sharedResourceCount) {

	if (sharedResourceCount > 0) {
		var array = JSIL.Array.New(System.Object, sharedResourceCount);
		var i = 0;

	__while0__: 
		while (i < sharedResourceCount) {
			array[i] = this.ReadObject();
			++i;
		}
		var j = 0;

	__while1__: 
		while (j < sharedResourceCount) {
			var enumerator = this.sharedResourceFixups[j].GetEnumerator();

			try {

			__while2__: 
				while (enumerator.MoveNext()) {
					enumerator.get_Current()(array[j]);
				}
			} finally {
				enumerator.IDisposable_Dispose();
			}
			++j;
		}
	}
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadExternalReference = function () {
	var text = this.ReadString();

	if (System.String.IsNullOrEmpty(text)) {
		return null;
	}
	return this.contentManager.Load(this.GetPathToReference(text));
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.GetPathToReference = function (referenceName) {
	var num = this.assetName.LastIndexOfAny(JSIL.Array.New(System.Char, [92, 47, System.IO.Path.DirectorySeparatorChar]));
	var path = "";

	if (num !== -1) {
		path = this.assetName.Substring(0, num);
	}
	return Microsoft.Xna.Framework.Content.ContentManager.GetCleanPath(System.IO.Path.Combine(path, referenceName));
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.get_GraphicsDevice = function () {
	var graphicsDeviceService = JSIL.Cast(this.contentManager.ServiceProvider.IServiceProvider_GetService(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService), Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService);

	if (graphicsDeviceService !== null) {
		throw this.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.NoGraphicsDeviceContent, JSIL.Array.New(System.Object, 0));
	}
	var graphicsDevice = graphicsDeviceService.IGraphicsDeviceService_GraphicsDevice;

	if (graphicsDevice !== null) {
		throw this.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.NoGraphicsDeviceContent, JSIL.Array.New(System.Object, 0));
	}
	return graphicsDevice;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.CreateContentLoadException$0 = function (message, messageArgs) {
	return Microsoft.Xna.Framework.Content.ContentReader.CreateContentLoadException(this.assetName, null, message, messageArgs);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.CreateContentLoadException$1 = function (innerException, message, messageArgs) {
	return Microsoft.Xna.Framework.Content.ContentReader.CreateContentLoadException(this.assetName, innerException, message, messageArgs);
};

Microsoft.Xna.Framework.Content.ContentReader.CreateContentLoadException = function (assetName, innerException, message, messageArgs) {
	var array = JSIL.Array.New(System.Object, (messageArgs.length + 1));
	array[0] = assetName;
	messageArgs.CopyTo(array, 1);
	return new Microsoft.Xna.Framework.Content.ContentLoadException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, message, array), innerException);
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadVector2 = function () {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = this.ReadSingle();
	result.Y = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadVector3 = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = this.ReadSingle();
	result.Y = this.ReadSingle();
	result.Z = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = this.ReadSingle();
	result.Y = this.ReadSingle();
	result.Z = this.ReadSingle();
	result.W = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadMatrix = function () {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = this.ReadSingle();
	result.M12 = this.ReadSingle();
	result.M13 = this.ReadSingle();
	result.M14 = this.ReadSingle();
	result.M21 = this.ReadSingle();
	result.M22 = this.ReadSingle();
	result.M23 = this.ReadSingle();
	result.M24 = this.ReadSingle();
	result.M31 = this.ReadSingle();
	result.M32 = this.ReadSingle();
	result.M33 = this.ReadSingle();
	result.M34 = this.ReadSingle();
	result.M41 = this.ReadSingle();
	result.M42 = this.ReadSingle();
	result.M43 = this.ReadSingle();
	result.M44 = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadQuaternion = function () {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = this.ReadSingle();
	result.Y = this.ReadSingle();
	result.Z = this.ReadSingle();
	result.W = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadColor = function () {
	var result = new Microsoft.Xna.Framework.Graphics.Color();
	result.set_PackedValue(this.ReadUInt32());
	return result;
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadSingle = function () {
	var num = this.ReadUInt32();
	return JSIL.UntranslatableInstruction("conv.u:float32*(ldloca:uint32&[exp:float32*](num))");
};

Microsoft.Xna.Framework.Content.ContentReader.prototype.ReadDouble = function () {
	var num = this.ReadUInt64();
	return JSIL.UntranslatableInstruction("conv.u:float64*(ldloca:uint64&[exp:float64*](num))");
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentReader.prototype, "ReadObject", [
		["ReadObject$0", []], 
		["ReadObject$1", [T]], 
		["ReadObject$2", [Microsoft.Xna.Framework.Content.ContentTypeReader]], 
		["ReadObject$3", [Microsoft.Xna.Framework.Content.ContentTypeReader, T]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentReader.prototype, "ReadObjectInternal", [
		["ReadObjectInternal$0", [System.Object]], 
		["ReadObjectInternal$1", [Microsoft.Xna.Framework.Content.ContentTypeReader, System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentReader.prototype, "ReadRawObject", [
		["ReadRawObject$0", []], 
		["ReadRawObject$1", [T]], 
		["ReadRawObject$2", [Microsoft.Xna.Framework.Content.ContentTypeReader]], 
		["ReadRawObject$3", [Microsoft.Xna.Framework.Content.ContentTypeReader, T]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentReader.prototype, "CreateContentLoadException", [
		["CreateContentLoadException$0", [System.String, System.Array.Of(System.Object)]], 
		["CreateContentLoadException$1", [System.Exception, System.String, System.Array.Of(System.Object)]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentReader.prototype, "ContentManager", {
		get: Microsoft.Xna.Framework.Content.ContentReader.prototype.get_ContentManager
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentReader.prototype, "AssetName", {
		get: Microsoft.Xna.Framework.Content.ContentReader.prototype.get_AssetName
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentReader.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Content.ContentReader.prototype.get_GraphicsDevice
	});

Microsoft.Xna.Framework.Content.ContentReader.$l$gc__DisplayClass1$b1.prototype.$l$g4__this = null;
Microsoft.Xna.Framework.Content.ContentReader.$l$gc__DisplayClass1$b1.prototype.fixup = null;
Microsoft.Xna.Framework.Content.ContentReader.$l$gc__DisplayClass1$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.ContentReader.$l$gc__DisplayClass1$b1.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentReader.$l$gc__DisplayClass1$b1);
Object.seal(Microsoft.Xna.Framework.Content.ContentReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentReader);
Microsoft.Xna.Framework.Content.ContentTypeReaderManager.prototype.contentReader = null;
Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader = null;
Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader = null;
Microsoft.Xna.Framework.Content.ContentTypeReaderManager.readerTypeToReader = null;
Microsoft.Xna.Framework.Content.ContentTypeReaderManager._cctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader = new (System.Collections.Generic.Dictionary$b2.Of(System.String, Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
	Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader = new (System.Collections.Generic.Dictionary$b2.Of(System.Type, Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
	Microsoft.Xna.Framework.Content.ContentTypeReaderManager.readerTypeToReader = new (System.Collections.Generic.Dictionary$b2.Of(System.Type, Microsoft.Xna.Framework.Content.ContentTypeReader)) ();
	var value = new Microsoft.Xna.Framework.Content.ObjectReader();
	Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader.Add(System.Object, value);
	Microsoft.Xna.Framework.Content.ContentTypeReaderManager.readerTypeToReader.Add(Microsoft.Xna.Framework.Content.ObjectReader, value);
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.prototype._ctor = function (contentReader) {
	System.Object.prototype._ctor.call(this);
	this.contentReader = contentReader;
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.ReadTypeManifest = function (typeCount, contentReader) {
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Content.ContentTypeReader, typeCount);
	var list = new JSIL.Variable(null);

	try {
		var i = 0;

	__while0__: 
		while (i < typeCount) {
			var typeReader = Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader(contentReader.ReadString(), contentReader, /* ref */ list);
			var num = contentReader.ReadInt32();

			if (num !== typeReader.TypeVersion) {
				throw contentReader.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.BadXnbTypeVersion, [typeReader.TargetType]);
			}
			array[i] = typeReader;
			++i;
		}

		if (list.value === null) {
			var manager = new Microsoft.Xna.Framework.Content.ContentTypeReaderManager(contentReader);
			var enumerator = list.value.GetEnumerator();

			try {

			__while1__: 
				while (enumerator.MoveNext()) {
					enumerator.get_Current().Initialize(manager);
				}
			} finally {
				enumerator.IDisposable_Dispose();
			}
		}
	} catch ($exception) {
		Microsoft.Xna.Framework.Content.ContentTypeReaderManager.RollbackAddReaders(list.value);
		throw $exception;
	}
	return array;
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader$0 = function (readerTypeName, contentReader, /* ref */ newTypeReaders) {
	var contentTypeReader = new JSIL.Variable(null);
	System.Threading.Monitor.Enter();

	try {

		if (Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader.TryGetValue(readerTypeName, /* ref */ contentTypeReader)) {
			var result = contentTypeReader.value;
		} else {

			if (Microsoft.Xna.Framework.Content.ContentTypeReaderManager.InstantiateTypeReader(readerTypeName, contentReader, /* ref */ contentTypeReader)) {
				Microsoft.Xna.Framework.Content.ContentTypeReaderManager.AddTypeReader(readerTypeName, contentReader, contentTypeReader.value);

				if (newTypeReaders.value !== null) {
					JSIL.UntranslatableInstruction("stind.ref(ldloc:List`1<ContentTypeReader>&(newTypeReaders), newobj:List`1<ContentTypeReader>(List`1<ContentTypeReader>::.ctor))");
				}
				newTypeReaders.value.Add(contentTypeReader.value);
			}
			result = contentTypeReader.value;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader);
	}
	return result;
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.InstantiateTypeReader = function (readerTypeName, contentReader, /* ref */ reader) {

	try {
		var type = System.Type.GetType(readerTypeName);

		if (type !== null) {
			var text = System.String.Concat(Microsoft.Xna.Framework.Content.ReflectiveReader$b1.FullName, "[[");
			var text2 = "]]";

			if (!(!readerTypeName.StartsWith(text) || !readerTypeName.EndsWith(text2))) {
				throw contentReader.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.ReflectiveReaderTypeNotFound, [readerTypeName.Substring(text.length, (readerTypeName.length - text.length - text2.length))]);
			}
			throw contentReader.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.TypeReaderNotFound, [readerTypeName]);
		} else if (Microsoft.Xna.Framework.Content.ContentTypeReaderManager.readerTypeToReader.TryGetValue(type, /* ref */ reader)) {
			Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader.Add(readerTypeName, reader.value);
			var result = false;
		} else {
			JSIL.UntranslatableInstruction("stind.ref(ldloc:ContentTypeReader&(reader), castclass:ContentTypeReader(class Microsoft.Xna.Framework.Content.ContentTypeReader, call:object(Activator::CreateInstance, ldloc:Type(type))))");
			result = true;
		}
	} catch ($exception) {
		var arg_CD_0 = $exception;
		var exception = arg_CD_0;

		if (!((JSIL.TryCast(exception, System.ArgumentException) !== null) && 
				(JSIL.TryCast(exception, System.Reflection.TargetInvocationException) !== null) && 
				(JSIL.TryCast(exception, System.TypeLoadException) !== null) && 
				(JSIL.TryCast(exception, System.NotSupportedException) !== null) && 
				(JSIL.TryCast(exception, System.MemberAccessException) !== null) && (JSIL.TryCast(exception, System.InvalidCastException) !== null))) {
			throw contentReader.CreateContentLoadException(exception, Microsoft.Xna.Framework.FrameworkResources.TypeReaderInvalid, [readerTypeName]);
		}
		throw $exception;
	}
	return result;
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.AddTypeReader = function (readerTypeName, contentReader, reader) {
	var targetType = reader.TargetType;

	if (targetType === null) {

		if (Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader.ContainsKey(targetType)) {
			throw contentReader.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.TypeReaderDuplicate, [readerTypeName, Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader.get_Item(targetType).GetType().AssemblyQualifiedName, targetType]);
		}
		Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader.Add(targetType, reader);
	}
	Microsoft.Xna.Framework.Content.ContentTypeReaderManager.readerTypeToReader.Add(reader.GetType(), reader);
	Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader.Add(readerTypeName, reader);
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.RollbackAddReaders = function (newTypeReaders) {

	if (newTypeReaders !== null) {
		return ;
	}
	System.Threading.Monitor.Enter();

	try {
		var enumerator = newTypeReaders.GetEnumerator();

		try {

		__while0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.get_Current();
				Microsoft.Xna.Framework.Content.ContentTypeReaderManager.RollbackAddReader(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader, current);
				Microsoft.Xna.Framework.Content.ContentTypeReaderManager.RollbackAddReader(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader, current);
				Microsoft.Xna.Framework.Content.ContentTypeReaderManager.RollbackAddReader(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.readerTypeToReader, current);
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader);
	}
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.RollbackAddReader = function (dictionary, reader) {
	var enumerator = dictionary.GetEnumerator();

__while0__: 
	while (enumerator.IEnumerator_MoveNext()) {
		var current = enumerator.IEnumerator$b1_Current;

		if (current.Value === reader) {
			dictionary.Remove(enumerator.IEnumerator$b1_Current.Key);
			enumerator = dictionary.GetEnumerator();
		}
	}
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader$1 = function (targetType, contentReader) {
	var result = new JSIL.Variable(null);

	if (targetType !== null) {
		throw new System.ArgumentNullException("targetType");
	}
	System.Threading.Monitor.Enter();

	try {

		if (!Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader.TryGetValue(targetType, /* ref */ result)) {
			throw contentReader.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.TypeReaderNotRegistered, [targetType]);
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader);
	}
	return result.value;
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.prototype.GetTypeReader = function (targetType) {
	return Microsoft.Xna.Framework.Content.ContentTypeReaderManager.GetTypeReader(targetType, this.contentReader);
};

Microsoft.Xna.Framework.Content.ContentTypeReaderManager.ContainsTypeReader = function (targetType) {
	System.Threading.Monitor.Enter();

	try {
		var result = Microsoft.Xna.Framework.Content.ContentTypeReaderManager.targetTypeToReader.ContainsKey(targetType);
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.nameToReader);
	}
	return result;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentTypeReaderManager, "GetTypeReader", [
		["GetTypeReader$0", [System.String, Microsoft.Xna.Framework.Content.ContentReader, JSIL.Reference.Of(System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Content.ContentTypeReader))]], 
		["GetTypeReader$1", [System.Type, Microsoft.Xna.Framework.Content.ContentReader]]
	]
);
Microsoft.Xna.Framework.Content.ContentTypeReaderManager._cctor();

Object.seal(Microsoft.Xna.Framework.Content.ContentTypeReaderManager.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentTypeReaderManager);
Object.defineProperty(Microsoft.Xna.Framework.Content.DecompressStream, "CompressedBufferSize", { value: 65536 });
Object.defineProperty(Microsoft.Xna.Framework.Content.DecompressStream, "DecompressedBufferSize", { value: 65536 });
Microsoft.Xna.Framework.Content.DecompressStream.prototype.baseStream = null;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.compressedTodo = 0;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.compressedSize = 0;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.compressedPosition = 0;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.compressedBuffer = null;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.decompressedTodo = 0;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.decompressedSize = 0;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.decompressedPosition = 0;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.decompressedBuffer = null;
Microsoft.Xna.Framework.Content.DecompressStream.prototype.decompressionContext = 0;
Microsoft.Xna.Framework.Content.DecompressStream.prototype._ctor = function (baseStream, compressedTodo, decompressedTodo) {
	System.IO.Stream.prototype._ctor.call(this);
	this.baseStream = baseStream;
	this.compressedTodo = compressedTodo;
	this.decompressedTodo = decompressedTodo;
	this.compressedBuffer = JSIL.Array.New(System.Byte, 65536);
	this.decompressedBuffer = JSIL.Array.New(System.Byte, 65536);
	this.decompressionContext = Microsoft.Xna.Framework.Content.NativeMethods.CreateDecompressionContext();

	if (System.IntPtr.op_Equality(this.decompressionContext, System.IntPtr.Zero)) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.DecompressionError);
	}
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.Dispose = function (disposing) {

	if (System.IntPtr.op_Inequality(this.decompressionContext, System.IntPtr.Zero)) {
		Microsoft.Xna.Framework.Content.NativeMethods.DestroyDecompressionContext(this.decompressionContext);
		this.decompressionContext = System.IntPtr.Zero;
	}
	System.IO.Stream.prototype.Dispose.call(this, disposing);
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.ReadByte = function () {

	if (!((this.decompressedPosition < this.decompressedSize) || this.DecompressNextBuffer())) {
		return -1;
	}
	return this.decompressedBuffer[this.decompressedPosition++];
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.Read = function (buffer, offset, count) {

	if (!((this.decompressedPosition < this.decompressedSize) || this.DecompressNextBuffer())) {
		return 0;
	}
	var num = (this.decompressedSize - this.decompressedPosition);

	if (count > num) {
		count = num;
	}
	System.Array.Copy(
		this.decompressedBuffer, 
		this.decompressedPosition, 
		buffer, 
		offset, 
		count
	);
	this.decompressedPosition += count;
	return count;
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.DecompressNextBuffer = JSIL.UntranslatableFunction("DecompressNextBuffer");

Microsoft.Xna.Framework.Content.DecompressStream.prototype.ReadNextBufferFromDisk = function () {

	if (this.compressedTodo <= 0) {
		return ;
	}
	this.ReadBufferFromDisk(this.compressedBuffer, /* ref */ new JSIL.MemberReference(this, "compressedTodo"), /* ref */ new JSIL.MemberReference(this, "compressedSize"));
	this.compressedPosition = 0;
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.ReadBufferFromDisk = function (buffer, /* ref */ bufferTodo, /* ref */ bufferSize) {
	var num = 65536;

	if (num > bufferTodo.value) {
		num = bufferTodo.value;
	}
	var i = 0;

__while0__: 
	while (i < num) {
		var num2 = this.baseStream.Read(buffer, i, (num - i));

		if (num2 !== 0) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.DecompressionError);
		}
		i += num2;
	}
	bufferTodo.value -= num;
	bufferSize.value = num;
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_CanRead = function () {
	return true;
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_CanSeek = function () {
	return false;
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_CanWrite = function () {
	return false;
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.Flush = function () {
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_Length = function () {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_Position = function () {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.set_Position = function (value) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.Seek = function (offset, origin) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.SetLength = function (value) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Content.DecompressStream.prototype.Write = function (buffer, offset, count) {
	throw new System.NotSupportedException();
};

Object.defineProperty(Microsoft.Xna.Framework.Content.DecompressStream.prototype, "CanRead", {
		get: Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_CanRead
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.DecompressStream.prototype, "CanSeek", {
		get: Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_CanSeek
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.DecompressStream.prototype, "CanWrite", {
		get: Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_CanWrite
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.DecompressStream.prototype, "Length", {
		get: Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_Length
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.DecompressStream.prototype, "Position", {
		get: Microsoft.Xna.Framework.Content.DecompressStream.prototype.get_Position, 
		set: Microsoft.Xna.Framework.Content.DecompressStream.prototype.set_Position
	});

Object.seal(Microsoft.Xna.Framework.Content.DecompressStream.prototype);
Object.seal(Microsoft.Xna.Framework.Content.DecompressStream);
Microsoft.Xna.Framework.Graphics.Model.prototype.root = null;
Microsoft.Xna.Framework.Graphics.Model.prototype.bones = null;
Microsoft.Xna.Framework.Graphics.Model.prototype.meshes = null;
Microsoft.Xna.Framework.Graphics.Model.prototype.tag = null;
Microsoft.Xna.Framework.Graphics.Model.prototype.CopyBoneTransformsTo = function (destinationBoneTransforms) {

	if (destinationBoneTransforms !== null) {
		throw new System.ArgumentNullException("destinationBoneTransforms");
	}

	if (destinationBoneTransforms.length < this.bones.Count) {
		throw new System.ArgumentOutOfRangeException("destinationBoneTransforms");
	}
	var count = this.bones.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		destinationBoneTransforms[i] = this.bones.get_Item(i).transform.MemberwiseClone();
		++i;
	}
};

Microsoft.Xna.Framework.Graphics.Model.prototype.CopyAbsoluteBoneTransformsTo = function (destinationBoneTransforms) {

	if (destinationBoneTransforms !== null) {
		throw new System.ArgumentNullException("destinationBoneTransforms");
	}

	if (destinationBoneTransforms.length < this.bones.Count) {
		throw new System.ArgumentOutOfRangeException("destinationBoneTransforms");
	}
	var count = this.bones.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		var modelBone = this.bones.get_Item(i);

		if (modelBone.Parent !== null) {
			destinationBoneTransforms[i] = modelBone.transform.MemberwiseClone();
		} else {
			destinationBoneTransforms[i] = Microsoft.Xna.Framework.Matrix.op_Multiply(modelBone.transform.MemberwiseClone(), destinationBoneTransforms[modelBone.Parent.Index]);
		}
		++i;
	}
};

Microsoft.Xna.Framework.Graphics.Model.prototype.CopyBoneTransformsFrom = function (sourceBoneTransforms) {

	if (sourceBoneTransforms !== null) {
		throw new System.ArgumentNullException("sourceBoneTransforms");
	}

	if (sourceBoneTransforms.length < this.bones.Count) {
		throw new System.ArgumentOutOfRangeException("sourceBoneTransforms");
	}
	var count = this.bones.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		this.bones.get_Item(i).transform = sourceBoneTransforms[i];
		++i;
	}
};

Microsoft.Xna.Framework.Graphics.Model.prototype.get_Root = function () {
	return this.root;
};

Microsoft.Xna.Framework.Graphics.Model.prototype.get_Bones = function () {
	return this.bones;
};

Microsoft.Xna.Framework.Graphics.Model.prototype.get_Tag = function () {
	return this.tag;
};

Microsoft.Xna.Framework.Graphics.Model.prototype.set_Tag = function (value) {
	this.tag = value;
};

Microsoft.Xna.Framework.Graphics.Model.prototype.get_Meshes = function () {
	return this.meshes;
};

Microsoft.Xna.Framework.Graphics.Model.Read = function (input) {
	var model = new Microsoft.Xna.Framework.Graphics.Model();
	model.ReadBones(input);
	model.ReadMeshes(input, Microsoft.Xna.Framework.Graphics.Model.ReadVertexDeclarations(input));
	model.root = model.ReadBoneReference(input);
	model.Tag = input.ReadObject();
	return model;
};

Microsoft.Xna.Framework.Graphics.Model.prototype.ReadBones = function (input) {
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.ModelBone, input.ReadInt32());
	var i = 0;

__while0__: 
	while (i < array.length) {
		var name = input.ReadObject();
		array[i] = new Microsoft.Xna.Framework.Graphics.ModelBone(name, input.ReadMatrix(), i);
		++i;
	}
	this.bones = new Microsoft.Xna.Framework.Graphics.ModelBoneCollection(array);
	var array2 = array;
	var j = 0;

__while1__: 
	while (j < array2.length) {
		var newParent = this.ReadBoneReference(input);
		var num2 = input.ReadInt32();
		var array3 = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.ModelBone, num2);
		var k = 0;

	__while2__: 
		while (k < num2) {
			array3[k] = this.ReadBoneReference(input);
			++k;
		}
		array2[j].SetParentAndChildren(newParent, array3);
		++j;
	}
};

Microsoft.Xna.Framework.Graphics.Model.prototype.ReadBoneReference = function (input) {
	var num = (this.bones.Count + 1);
	var num2 = 0;

	if (num <= 255) {
		num2 = input.ReadByte();
	} else {
		num2 = input.ReadInt32();
	}

	if (num2 === 0) {
		return this.bones.get_Item((num2 - 1));
	}
	return null;
};

Microsoft.Xna.Framework.Graphics.Model.ReadVertexDeclarations = function (input) {
	var num = input.ReadInt32();
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.VertexDeclaration, num);
	var i = 0;

__while0__: 
	while (i < num) {
		array[i] = input.ReadObject();
		++i;
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.Model.prototype.ReadMeshes = function (input, vertexDeclarations) {
	var num = input.ReadInt32();
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.ModelMesh, num);
	var i = 0;

__while0__: 
	while (i < num) {
		var name = input.ReadObject();
		var parentBone = this.ReadBoneReference(input);
		var boundingSphere = new Microsoft.Xna.Framework.BoundingSphere();
		boundingSphere.Center = input.ReadVector3();
		boundingSphere.Radius = input.ReadSingle();
		var vertexBuffer = input.ReadObject();
		var indexBuffer = input.ReadObject();
		var obj = input.ReadObject();
		array[i] = new Microsoft.Xna.Framework.Graphics.ModelMesh(name, parentBone, boundingSphere, vertexBuffer, indexBuffer, Microsoft.Xna.Framework.Graphics.Model.ReadMeshParts(input, vertexBuffer, indexBuffer, vertexDeclarations), obj);
		++i;
	}
	this.meshes = new Microsoft.Xna.Framework.Graphics.ModelMeshCollection(array);
};

Microsoft.Xna.Framework.Graphics.Model.ReadMeshParts = function (input, vertexBuffer, indexBuffer, vertexDeclarations) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass1();
	var num = input.ReadInt32();
	$l$gc__DisplayClass.meshParts = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.ModelMeshPart, num);
	var i = 0;

__while0__: 
	while (i < num) {
		var $l$gc__DisplayClass2 = new Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass3();
		$l$gc__DisplayClass2.CS$$l$g8__locals2 = $l$gc__DisplayClass;
		var streamOffset = input.ReadInt32();
		var baseVertex = input.ReadInt32();
		var numVertices = input.ReadInt32();
		var startIndex = input.ReadInt32();
		var primitiveCount = input.ReadInt32();
		var vertexDeclaration = vertexDeclarations[input.ReadInt32()];
		$l$gc__DisplayClass.meshParts[i] = new Microsoft.Xna.Framework.Graphics.ModelMeshPart(streamOffset, baseVertex, numVertices, startIndex, primitiveCount, vertexBuffer, indexBuffer, vertexDeclaration, input.ReadObject());
		$l$gc__DisplayClass2.uniqueCopyOfI = i;
		input.ReadSharedResource(function (effect) {
				$l$gc__DisplayClass2.CS$$l$g8__locals2.meshParts[$l$gc__DisplayClass2.uniqueCopyOfI].Effect = effect;
			});
		++i;
	}
	return $l$gc__DisplayClass.meshParts;
};

Microsoft.Xna.Framework.Graphics.Model.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.Model.prototype, "Root", {
		get: Microsoft.Xna.Framework.Graphics.Model.prototype.get_Root
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Model.prototype, "Bones", {
		get: Microsoft.Xna.Framework.Graphics.Model.prototype.get_Bones
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Model.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.Model.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.Model.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Model.prototype, "Meshes", {
		get: Microsoft.Xna.Framework.Graphics.Model.prototype.get_Meshes
	});

Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass1.prototype.meshParts = null;
Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass1.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass1);
Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass3.prototype.CS$$l$g8__locals2 = null;
Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass3.prototype.uniqueCopyOfI = 0;
Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass3.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass3.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Model.$l$gc__DisplayClass3);
Object.seal(Microsoft.Xna.Framework.Graphics.Model.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Model);
Microsoft.Xna.Framework.Graphics.ModelBone.prototype.name = null;
Microsoft.Xna.Framework.Graphics.ModelBone.prototype.index = 0;
Microsoft.Xna.Framework.Graphics.ModelBone.prototype.parent = null;
Microsoft.Xna.Framework.Graphics.ModelBone.prototype.children = null;
Microsoft.Xna.Framework.Graphics.ModelBone.prototype.__StructFields__ = {
	transform: Microsoft.Xna.Framework.Matrix
};
Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Index = function () {
	return this.index;
};

Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Transform = function () {
	return this.transform;
};

Microsoft.Xna.Framework.Graphics.ModelBone.prototype.set_Transform = function (value) {
	this.transform = value;
};

Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Parent = function () {
	return this.parent;
};

Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Children = function () {
	return this.children;
};

Microsoft.Xna.Framework.Graphics.ModelBone.prototype._ctor = function (name, transform, index) {
	System.Object.prototype._ctor.call(this);
	this.name = name;
	this.transform = transform;
	this.index = index;
};

Microsoft.Xna.Framework.Graphics.ModelBone.prototype.SetParentAndChildren = function (newParent, newChildren) {
	this.parent = newParent;
	this.children = new Microsoft.Xna.Framework.Graphics.ModelBoneCollection(newChildren);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelBone.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelBone.prototype, "Index", {
		get: Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Index
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelBone.prototype, "Transform", {
		get: Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Transform, 
		set: Microsoft.Xna.Framework.Graphics.ModelBone.prototype.set_Transform
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelBone.prototype, "Parent", {
		get: Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Parent
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelBone.prototype, "Children", {
		get: Microsoft.Xna.Framework.Graphics.ModelBone.prototype.get_Children
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ModelBone.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelBone);
Microsoft.Xna.Framework.Graphics.ModelBoneCollection.prototype.wrappedArray = null;
Microsoft.Xna.Framework.Graphics.ModelBoneCollection.prototype._ctor = function (bones) {
	System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.ModelBone).prototype._ctor.call(this, bones);
	this.wrappedArray = bones;
};

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.prototype.get_Item = function (boneName) {
	var result = new JSIL.Variable(null);

	if (!this.TryGetValue(boneName, /* ref */ result)) {
		throw new System.Collections.Generic.KeyNotFoundException();
	}
	return result.value;
};

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.prototype.TryGetValue = function (boneName, /* ref */ value) {

	if (System.String.IsNullOrEmpty(boneName)) {
		throw new System.ArgumentNullException("boneName");
	}
	var count = this.Items.ICollection$b1_Count;
	var i = 0;

__while0__: 
	while (i < count) {
		var modelBone = this.Items.IList$b1_get_Item(i);

		if (System.String.Compare(modelBone.Name, boneName, System.StringComparison.Ordinal) !== null) {
			JSIL.UntranslatableInstruction("stind.ref(ldloc:ModelBone&(value), ldloc:ModelBone(modelBone))");
			return true;
		}
		++i;
	}
	JSIL.UntranslatableInstruction("stind.ref(ldloc:ModelBone&(value), ldnull:object[exp:ModelBone]())");
	return false;
};

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.prototype.GetEnumerator = function () {
	return new Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator(this.wrappedArray);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelBoneCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.ModelBoneCollection.prototype.get_Item
	});

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.wrappedArray = null;
Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.position = 0;
Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype._ctor = function (wrappedArray) {
	this.wrappedArray = wrappedArray;
	this.position = -1;
};

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.get_Current = function () {
	return this.wrappedArray[this.position];
};

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.MoveNext = function () {
	++this.position;

	if (this.position >= this.wrappedArray.length) {
		this.position = this.wrappedArray.length;
		return false;
	}
	return true;
};

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.IEnumerator_Reset = function () {
	this.position = -1;
};

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.Dispose = function () {
};

Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype, "Current", {
		get: Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype, "IEnumerator_Current", {
		get: Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.IEnumerator_get_Current
	});
Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.ModelBone));
Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.__ImplementInterface__(System.IDisposable);
Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.IEnumerator);

Object.seal(Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelBoneCollection.Enumerator);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelBoneCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelBoneCollection);
Microsoft.Xna.Framework.Graphics.ModelEffectCollection.prototype.wrappedList = null;
Microsoft.Xna.Framework.Graphics.ModelEffectCollection.prototype._ctor = function () {
	System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.Effect).prototype._ctor.call(this, new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Graphics.Effect)) ());
	this.wrappedList = JSIL.Cast(this.Items, System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Graphics.Effect));
};

Microsoft.Xna.Framework.Graphics.ModelEffectCollection.prototype.Add = function (effect) {
	this.Items.ICollection$b1_Add(effect);
};

Microsoft.Xna.Framework.Graphics.ModelEffectCollection.prototype.Remove = function (effect) {
	this.Items.ICollection$b1_Remove(effect);
};

Microsoft.Xna.Framework.Graphics.ModelEffectCollection.prototype.GetEnumerator = function () {
	return new Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator(this.wrappedList);
};


Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.__StructFields__ = {
	internalEnumerator: System.Collections.Generic.List$b1.Enumerator.Of(Microsoft.Xna.Framework.Graphics.Effect)
};
Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype._ctor = function (wrappedList) {
	this.internalEnumerator = wrappedList.GetEnumerator();
};

Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.get_Current = function () {
	return this.internalEnumerator.get_Current();
};

Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.MoveNext = function () {
	return this.internalEnumerator.MoveNext();
};

Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.IEnumerator_Reset = function () {
	var enumerator = this.internalEnumerator;
	enumerator.IEnumerator_Reset();
	this.internalEnumerator = JSIL.Cast(enumerator, System.Collections.Generic.List$b1.Enumerator.Of(Microsoft.Xna.Framework.Graphics.Effect).MemberwiseClone());
};

Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.Dispose = function () {
	this.internalEnumerator.Dispose();
};

Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype, "Current", {
		get: Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype, "IEnumerator_Current", {
		get: Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.IEnumerator_get_Current
	});
Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.Effect));
Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.__ImplementInterface__(System.IDisposable);
Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.IEnumerator);

Object.seal(Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelEffectCollection.Enumerator);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelEffectCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelEffectCollection);
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.name = null;
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.parentBone = null;
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.indexBuffer = null;
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.vertexBuffer = null;
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.meshParts = null;
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.effects = null;
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.tag = null;
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.__StructFields__ = {
	boundingSphere: Microsoft.Xna.Framework.BoundingSphere
};
Microsoft.Xna.Framework.Graphics.ModelMesh.prototype._ctor = function (name, parentBone, boundingSphere, vertexBuffer, indexBuffer, meshParts, tag) {
	this.boundingSphere = new Microsoft.Xna.Framework.BoundingSphere();
	this.effects = new Microsoft.Xna.Framework.Graphics.ModelEffectCollection();
	System.Object.prototype._ctor.call(this);
	this.name = name;
	this.parentBone = parentBone;
	this.boundingSphere = boundingSphere;
	this.vertexBuffer = vertexBuffer;
	this.indexBuffer = indexBuffer;
	this.meshParts = new Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection(meshParts);
	this.tag = tag;
	var num = meshParts.length;
	var i = 0;

__while0__: 
	while (i < num) {
		meshParts[i].parent = this;
		++i;
	}
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_ParentBone = function () {
	return this.parentBone;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_BoundingSphere = function () {
	return this.boundingSphere;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_IndexBuffer = function () {
	return this.indexBuffer;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_Tag = function () {
	return this.tag;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.set_Tag = function (value) {
	this.tag = value;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_VertexBuffer = function () {
	return this.vertexBuffer;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_MeshParts = function () {
	return this.meshParts;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_Effects = function () {
	return this.effects;
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.Draw$0 = function () {
	this.Draw(Microsoft.Xna.Framework.Graphics.SaveStateMode.None);
};

Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.Draw$1 = function (saveStateMode) {
	var count = this.MeshParts.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		var modelMeshPart = this.MeshParts.get_Item(i);
		var effect = modelMeshPart.Effect;

		if (effect !== null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.ModelHasNoEffect);
		}
		effect.Begin(saveStateMode);

		try {
			var count2 = effect.CurrentTechnique.Passes.Count;
			var j = 0;

		__while1__: 
			while (j < count2) {
				var effectPass = effect.CurrentTechnique.Passes.get_Item(j);
				effectPass.Begin();
				modelMeshPart.Draw();
				effectPass.End();
				++j;
			}
		} finally {
			effect.End();
		}
		++i;
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "Draw", [
		["Draw$0", []], 
		["Draw$1", [Microsoft.Xna.Framework.Graphics.SaveStateMode]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "ParentBone", {
		get: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_ParentBone
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "BoundingSphere", {
		get: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_BoundingSphere
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "IndexBuffer", {
		get: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_IndexBuffer
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "VertexBuffer", {
		get: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_VertexBuffer
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "MeshParts", {
		get: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_MeshParts
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype, "Effects", {
		get: Microsoft.Xna.Framework.Graphics.ModelMesh.prototype.get_Effects
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ModelMesh.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelMesh);
Microsoft.Xna.Framework.Graphics.ModelMeshCollection.prototype.wrappedArray = null;
Microsoft.Xna.Framework.Graphics.ModelMeshCollection.prototype._ctor = function (meshes) {
	System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.ModelMesh).prototype._ctor.call(this, meshes);
	this.wrappedArray = meshes;
};

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.prototype.get_Item = function (meshName) {
	var result = new JSIL.Variable(null);

	if (!this.TryGetValue(meshName, /* ref */ result)) {
		throw new System.Collections.Generic.KeyNotFoundException();
	}
	return result.value;
};

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.prototype.TryGetValue = function (meshName, /* ref */ value) {

	if (System.String.IsNullOrEmpty(meshName)) {
		throw new System.ArgumentNullException("meshName");
	}
	var count = this.Items.ICollection$b1_Count;
	var i = 0;

__while0__: 
	while (i < count) {
		var modelMesh = this.Items.IList$b1_get_Item(i);

		if (System.String.Compare(modelMesh.Name, meshName, System.StringComparison.Ordinal) !== null) {
			JSIL.UntranslatableInstruction("stind.ref(ldloc:ModelMesh&(value), ldloc:ModelMesh(modelMesh))");
			return true;
		}
		++i;
	}
	JSIL.UntranslatableInstruction("stind.ref(ldloc:ModelMesh&(value), ldnull:object[exp:ModelMesh]())");
	return false;
};

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.prototype.GetEnumerator = function () {
	return new Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator(this.wrappedArray);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshCollection.prototype.get_Item
	});

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.wrappedArray = null;
Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.position = 0;
Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype._ctor = function (wrappedArray) {
	this.wrappedArray = wrappedArray;
	this.position = -1;
};

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.get_Current = function () {
	return this.wrappedArray[this.position];
};

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.MoveNext = function () {
	++this.position;

	if (this.position >= this.wrappedArray.length) {
		this.position = this.wrappedArray.length;
		return false;
	}
	return true;
};

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.IEnumerator_Reset = function () {
	this.position = -1;
};

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.Dispose = function () {
};

Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype, "Current", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype, "IEnumerator_Current", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.IEnumerator_get_Current
	});
Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.ModelMesh));
Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.__ImplementInterface__(System.IDisposable);
Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.IEnumerator);

Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshCollection.Enumerator);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshCollection);
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.vertexBuffer = null;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.indexBuffer = null;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.vertexStride = 0;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.startIndex = 0;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.primitiveCount = 0;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.streamOffset = 0;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.baseVertex = 0;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.numVertices = 0;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.vertexDeclaration = null;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.effect = null;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.tag = null;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.parent = null;
Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype._ctor = function (streamOffset, baseVertex, numVertices, startIndex, primitiveCount, vertexBuffer, indexBuffer, vertexDeclaration, tag) {
	System.Object.prototype._ctor.call(this);
	this.vertexBuffer = vertexBuffer;
	this.indexBuffer = indexBuffer;
	this.streamOffset = streamOffset;
	this.baseVertex = baseVertex;
	this.numVertices = numVertices;
	this.startIndex = startIndex;
	this.primitiveCount = primitiveCount;
	this.vertexDeclaration = vertexDeclaration;
	this.tag = tag;
	this.vertexStride = vertexDeclaration.GetVertexStrideSize(0);
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.Draw = function () {

	if (this.NumVertices > 0) {
		var graphicsDevice = this.vertexDeclaration.GraphicsDevice;
		graphicsDevice.VertexDeclaration = this.vertexDeclaration;
		graphicsDevice.Vertices.get_Item(0).SetSource(this.vertexBuffer, this.streamOffset, this.vertexStride);
		graphicsDevice.Indices = this.indexBuffer;
		graphicsDevice.DrawIndexedPrimitives(
			Microsoft.Xna.Framework.Graphics.PrimitiveType.TriangleList, 
			this.baseVertex, 
			0, 
			this.numVertices, 
			this.startIndex, 
			this.primitiveCount
		);
	}
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_StartIndex = function () {
	return this.startIndex;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_PrimitiveCount = function () {
	return this.primitiveCount;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_BaseVertex = function () {
	return this.baseVertex;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_StreamOffset = function () {
	return this.streamOffset;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_NumVertices = function () {
	return this.numVertices;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_Effect = function () {
	return this.effect;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.set_Effect = function (value) {

	if (value === this.effect) {
		return ;
	}
	var flag = false;
	var flag2 = false;
	var count = this.parent.MeshParts.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		var modelMeshPart = this.parent.MeshParts.get_Item(i);

		if (!System.Object.ReferenceEquals(modelMeshPart, this)) {
			var objA = modelMeshPart.Effect;

			if (System.Object.ReferenceEquals(objA, this.effect)) {
				flag = true;
			} else if (System.Object.ReferenceEquals(objA, value)) {
				flag2 = true;
			}
		}
		++i;
	}

	if (!(flag || (this.effect !== null))) {
		this.parent.Effects.Remove(this.effect);
	}

	if (!(flag2 || (value !== null))) {
		this.parent.Effects.Add(value);
	}
	this.effect = value;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_Tag = function () {
	return this.tag;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.set_Tag = function (value) {
	this.tag = value;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_VertexDeclaration = function () {
	return this.vertexDeclaration;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_VertexStride = function () {
	return this.vertexStride;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "StartIndex", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_StartIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "PrimitiveCount", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_PrimitiveCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "BaseVertex", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_BaseVertex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "StreamOffset", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_StreamOffset
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "NumVertices", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_NumVertices
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "Effect", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_Effect, 
		set: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.set_Effect
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "VertexDeclaration", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_VertexDeclaration
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype, "VertexStride", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype.get_VertexStride
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshPart.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshPart);
Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.prototype.wrappedArray = null;
Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.prototype._ctor = function (parts) {
	System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Graphics.ModelMeshPart).prototype._ctor.call(this, parts);
	this.wrappedArray = parts;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.prototype.GetEnumerator = function () {
	return new Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator(this.wrappedArray);
};


Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.wrappedArray = null;
Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.position = 0;
Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype._ctor = function (wrappedArray) {
	this.wrappedArray = wrappedArray;
	this.position = -1;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.get_Current = function () {
	return this.wrappedArray[this.position];
};

Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.MoveNext = function () {
	++this.position;

	if (this.position >= this.wrappedArray.length) {
		this.position = this.wrappedArray.length;
		return false;
	}
	return true;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.IEnumerator_Reset = function () {
	this.position = -1;
};

Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.Dispose = function () {
};

Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype, "Current", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype, "IEnumerator_Current", {
		get: Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.IEnumerator_get_Current
	});
Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.Graphics.ModelMeshPart));
Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.__ImplementInterface__(System.IDisposable);
Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype.__ImplementInterface__(System.Collections.IEnumerator);

Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.Enumerator);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ModelMeshPartCollection);
Microsoft.Xna.Framework.Content.ResourceContentManager.prototype.resourceManager = null;
Microsoft.Xna.Framework.Content.ResourceContentManager.prototype._ctor = function (serviceProvider, resourceManager) {
	Microsoft.Xna.Framework.Content.ContentManager.prototype._ctor.call(this, serviceProvider);

	if (resourceManager !== null) {
		throw new System.ArgumentNullException("resourceManager");
	}
	this.resourceManager = resourceManager;
};

Microsoft.Xna.Framework.Content.ResourceContentManager.prototype.OpenStream = function (assetName) {
	var object = this.resourceManager.GetObject(assetName);

	if (object !== null) {
		throw new Microsoft.Xna.Framework.Content.ContentLoadException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.OpenResourceNotFound, [assetName]));
	}
	var array = JSIL.TryCast(object, System.Array.Of(System.Byte));

	if (array !== null) {
		throw new Microsoft.Xna.Framework.Content.ContentLoadException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.OpenResourceNotBinary, [assetName]));
	}
	return new System.IO.MemoryStream(array);
};


Object.seal(Microsoft.Xna.Framework.Content.ResourceContentManager.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ResourceContentManager);
Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.targetType = null;
Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.TargetIsValueType = new System.Boolean();
Microsoft.Xna.Framework.Content.ContentTypeReader.prototype._ctor = function (targetType) {
	System.Object.prototype._ctor.call(this);
	this.targetType = targetType;

	if (targetType === null) {
		this.TargetIsValueType = targetType.IsValueType;
	}
};

Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.Initialize = function (manager) {
};

Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.get_TargetType = function () {
	return this.targetType;
};

Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.get_TypeVersion = function () {
	return 0;
};

Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.get_CanDeserializeIntoExistingObject = function () {
	return false;
};

Object.defineProperty(Microsoft.Xna.Framework.Content.ContentTypeReader.prototype, "TargetType", {
		get: Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.get_TargetType
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentTypeReader.prototype, "TypeVersion", {
		get: Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.get_TypeVersion
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ContentTypeReader.prototype, "CanDeserializeIntoExistingObject", {
		get: Microsoft.Xna.Framework.Content.ContentTypeReader.prototype.get_CanDeserializeIntoExistingObject
	});

Object.seal(Microsoft.Xna.Framework.Content.ContentTypeReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentTypeReader);
Microsoft.Xna.Framework.Content.ContentTypeReader$b1.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader.prototype._ctor.call(this, T);
};

Microsoft.Xna.Framework.Content.ContentTypeReader$b1.prototype.Read$0 = function (input, existingInstance) {

	if (existingInstance !== null) {
		var existingInstance2 = null;
	} else {

		if (JSIL.TryCast(existingInstance, T) !== null) {
			throw input.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.BadXnbWrongType, [T, existingInstance.GetType()]);
		}
		existingInstance2 = JSIL.Cast(existingInstance, T);
	}
	return this.Read(input, existingInstance2);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.prototype, "Read", [
		["Read$0", [Microsoft.Xna.Framework.Content.ContentReader, System.Object]], 
		["Read$1", [Microsoft.Xna.Framework.Content.ContentReader, T]]
	]
);

Object.seal(Microsoft.Xna.Framework.Content.ContentTypeReader$b1.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ContentTypeReader$b1);
Microsoft.Xna.Framework.Content.ArrayReader$b1.prototype.elementReader = null;
Microsoft.Xna.Framework.Content.ArrayReader$b1.prototype.Initialize = function (manager) {
	this.elementReader = manager.GetTypeReader(T);
};

Microsoft.Xna.Framework.Content.ArrayReader$b1.prototype.Read = function (input, existingInstance) {
	var num = input.ReadInt32();
	var array = JSIL.Array.New(T, num);
	var i = 0;

__while0__: 
	while (i < num) {
		array[i] = input.ReadObject(this.elementReader);
		++i;
	}
	return array;
};

Microsoft.Xna.Framework.Content.ArrayReader$b1.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Array.Of(T)).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.ArrayReader$b1.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ArrayReader$b1);
Microsoft.Xna.Framework.Content.BasicEffectReader.sharedEffects = null;
Microsoft.Xna.Framework.Content.BasicEffectReader.prototype.Read = function (input, existingInstance) {
	var graphicsDevice = input.GraphicsDevice;
	var basicEffect = JSIL.Cast(Microsoft.Xna.Framework.Content.BasicEffectReader.GetSharedEffect(graphicsDevice).Clone(graphicsDevice), Microsoft.Xna.Framework.Graphics.BasicEffect);
	var texture = input.ReadExternalReference();

	if (texture === null) {
		var texture2D = JSIL.TryCast(texture, Microsoft.Xna.Framework.Graphics.Texture2D);

		if (texture2D !== null) {
			input.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.BasicEffectCanOnlyUseTexture2D, JSIL.Array.New(System.Object, 0));
		}
		basicEffect.Texture = texture2D;
		basicEffect.TextureEnabled = true;
	}
	basicEffect.DiffuseColor = input.ReadVector3();
	basicEffect.EmissiveColor = input.ReadVector3();
	basicEffect.SpecularColor = input.ReadVector3();
	basicEffect.SpecularPower = input.ReadSingle();
	basicEffect.Alpha = input.ReadSingle();
	basicEffect.VertexColorEnabled = input.ReadBoolean();
	return basicEffect;
};

Microsoft.Xna.Framework.Content.BasicEffectReader.GetSharedEffect = function (device) {

	if (!Microsoft.Xna.Framework.Content.BasicEffectReader.sharedEffects.TryGetValue(device, /* ref */ basicEffect)) {
		var basicEffect = new JSIL.Variable(new Microsoft.Xna.Framework.Graphics.BasicEffect(device, null));
		Microsoft.Xna.Framework.Content.BasicEffectReader.sharedEffects.Add(device, basicEffect.value);
		device.add_Disposing(JSIL.Delegate.New("System.EventHandler", null, Microsoft.Xna.Framework.Content.BasicEffectReader.RemoveDevice));
	}
	return basicEffect.value;
};

Microsoft.Xna.Framework.Content.BasicEffectReader.RemoveDevice = function (sender, e) {
	var key = JSIL.Cast(sender, Microsoft.Xna.Framework.Graphics.GraphicsDevice);
	Microsoft.Xna.Framework.Content.BasicEffectReader.sharedEffects.get_Item(key).Dispose();
	Microsoft.Xna.Framework.Content.BasicEffectReader.sharedEffects.Remove(key);
};

Microsoft.Xna.Framework.Content.BasicEffectReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.BasicEffect).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Content.BasicEffectReader._cctor = function () {
	Microsoft.Xna.Framework.Content.BasicEffectReader.sharedEffects = new (System.Collections.Generic.Dictionary$b2.Of(Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Graphics.BasicEffect)) ();
};

Microsoft.Xna.Framework.Content.BasicEffectReader._cctor();

Object.seal(Microsoft.Xna.Framework.Content.BasicEffectReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.BasicEffectReader);
Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype.keyReader = null;
Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype.valueReader = null;
Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype.Initialize = function (manager) {
	this.keyReader = manager.GetTypeReader(Key);
	this.valueReader = manager.GetTypeReader(Value);
};

Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype.Read = function (input, existingInstance) {
	var capacity = input.ReadInt32();
	var dictionary = existingInstance;

	if (dictionary !== null) {
		dictionary = new (System.Collections.Generic.Dictionary$b2.Of(Key, Value)) (capacity);
	}

__while0__: 
	while (capacity-- > 0) {
		var key = input.ReadObject(this.keyReader);
		dictionary.Add(key, input.ReadObject(this.valueReader));
	}
	return dictionary;
};

Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype.get_CanDeserializeIntoExistingObject = function () {
	return true;
};

Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Collections.Generic.Dictionary$b2.Of(Key, Value)).prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype, "CanDeserializeIntoExistingObject", {
		get: Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype.get_CanDeserializeIntoExistingObject
	});

Object.seal(Microsoft.Xna.Framework.Content.DictionaryReader$b2.prototype);
Object.seal(Microsoft.Xna.Framework.Content.DictionaryReader$b2);
Microsoft.Xna.Framework.Content.EffectMaterialReader.prototype.Read = function (input, existingInstance) {

	if (input !== null) {
		throw new System.ArgumentNullException("input");
	}
	var effectMaterial = new Microsoft.Xna.Framework.Content.EffectMaterial(input.GraphicsDevice, input.ReadExternalReference());
	var enumerator = input.ReadObject().GetEnumerator();

	try {

	__while0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			Microsoft.Xna.Framework.Content.EffectMaterialReader.TryToSetParameter(effectMaterial, current.Key, current.Value);
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return effectMaterial;
};

Microsoft.Xna.Framework.Content.EffectMaterialReader.TryToSetParameter = function (effect, parameterName, value) {
	var effectParameter = effect.Parameters.get_Item(parameterName);

	if (effectParameter === null) {
		var type = value.GetType();

		try {

			if (type === System.Array.Of(System.Int32)) {
				effectParameter.SetValue(JSIL.Cast(value, System.Array.Of(System.Int32)));
			} else if (type === System.Array.Of(System.Boolean)) {
				effectParameter.SetValue(JSIL.Cast(value, System.Array.Of(System.Boolean)));
			} else if (type === System.Array.Of(System.Single)) {
				effectParameter.SetValue(JSIL.Cast(value, System.Array.Of(System.Single)));
			} else if (type === System.Array.Of(Microsoft.Xna.Framework.Vector2)) {
				effectParameter.SetValue(JSIL.Cast(value, System.Array.Of(Microsoft.Xna.Framework.Vector2)));
			} else if (type === System.Array.Of(Microsoft.Xna.Framework.Vector3)) {
				effectParameter.SetValue(JSIL.Cast(value, System.Array.Of(Microsoft.Xna.Framework.Vector3)));
			} else if (type === System.Array.Of(Microsoft.Xna.Framework.Vector4)) {
				effectParameter.SetValue(JSIL.Cast(value, System.Array.Of(Microsoft.Xna.Framework.Vector4)));
			} else if (type === System.Array.Of(Microsoft.Xna.Framework.Matrix)) {
				effectParameter.SetValue(JSIL.Cast(value, System.Array.Of(Microsoft.Xna.Framework.Matrix)));
			} else if (type === System.Int32) {
				effectParameter.SetValue(JSIL.Cast(value, System.Int32));
			} else if (type === System.Boolean) {
				effectParameter.SetValue(JSIL.Cast(value, System.Boolean));
			} else if (type === System.Single) {
				effectParameter.SetValue(JSIL.Cast(value, System.Single));
			} else if (type === Microsoft.Xna.Framework.Vector2) {
				effectParameter.SetValue(JSIL.Cast(value, Microsoft.Xna.Framework.Vector2.MemberwiseClone()));
			} else if (type === Microsoft.Xna.Framework.Vector3) {
				effectParameter.SetValue(JSIL.Cast(value, Microsoft.Xna.Framework.Vector3.MemberwiseClone()));
			} else if (type === Microsoft.Xna.Framework.Vector4) {
				effectParameter.SetValue(JSIL.Cast(value, Microsoft.Xna.Framework.Vector4.MemberwiseClone()));
			} else if (type === Microsoft.Xna.Framework.Matrix) {
				effectParameter.SetValue(JSIL.Cast(value, Microsoft.Xna.Framework.Matrix.MemberwiseClone()));
			} else if (type === System.String) {
				effectParameter.SetValue(JSIL.Cast(value, System.String));
			} else {
				var texture = JSIL.TryCast(value, Microsoft.Xna.Framework.Graphics.Texture);

				if (texture === null) {
					effectParameter.SetValue(texture);
				}
			}
		} catch ($exception) {

			if (JSIL.CheckType($exception, System.InvalidCastException)) {

				if (((type !== Microsoft.Xna.Framework.Vector2) && 
						(type !== Microsoft.Xna.Framework.Vector3) && 
						(type !== Microsoft.Xna.Framework.Vector4)) || !Microsoft.Xna.Framework.Content.EffectMaterialReader.IsAVectorOrASingle(effectParameter)) {
					throw $exception;
				}

				if (type === Microsoft.Xna.Framework.Vector2) {
					value2._ctor(JSIL.Cast(value, Microsoft.Xna.Framework.Vector2.MemberwiseClone()), 0, 1);
				} else if (type === Microsoft.Xna.Framework.Vector3) {
					value2._ctor(JSIL.Cast(value, Microsoft.Xna.Framework.Vector3.MemberwiseClone()), 1);
				} else {
					var value2 = JSIL.Cast(value, Microsoft.Xna.Framework.Vector4.MemberwiseClone());
				}

				if (effectParameter.ColumnCount === 1) {
					effectParameter.SetValue(value2.X);
				} else if (effectParameter.ColumnCount === 2) {
					effectParameter.SetValue(new Microsoft.Xna.Framework.Vector2(value2.X, value2.Y));
				} else if (effectParameter.ColumnCount === 3) {
					effectParameter.SetValue(new Microsoft.Xna.Framework.Vector3(value2.X, value2.Y, value2.Z));
				} else {
					effectParameter.SetValue(value2.MemberwiseClone());
				}
			} else {
				throw $exception;
			}
		}
	}
};

Microsoft.Xna.Framework.Content.EffectMaterialReader.IsAVectorOrASingle = function (p) {
	var flag = (!(p.ElementCount || 
			(p.ParameterClass !== Microsoft.Xna.Framework.Graphics.EffectParameterClass.Vector) || 
			(p.RowCount !== 1) || 
			(p.ColumnCount < 2)) && 
		(p.ColumnCount <= 4));
	return (flag || (!(p.ElementCount || 
				p.ParameterClass || 
				(p.RowCount !== 1)) && 
			(p.ColumnCount === 1)));
};

Microsoft.Xna.Framework.Content.EffectMaterialReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Content.EffectMaterial).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.EffectMaterialReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.EffectMaterialReader);
Microsoft.Xna.Framework.Content.EffectReader.sharedEffectPool = null;
Microsoft.Xna.Framework.Content.EffectReader.get_EffectPool = function () {

	if (Microsoft.Xna.Framework.Content.EffectReader.sharedEffectPool !== null) {
		Microsoft.Xna.Framework.Content.EffectReader.sharedEffectPool = new Microsoft.Xna.Framework.Graphics.EffectPool();
	}
	return Microsoft.Xna.Framework.Content.EffectReader.sharedEffectPool;
};

Microsoft.Xna.Framework.Content.EffectReader.prototype.Read = function (input, existingInstance) {
	return new Microsoft.Xna.Framework.Graphics.Effect(input.GraphicsDevice, input.ReadBytes(input.ReadInt32()), Microsoft.Xna.Framework.Graphics.CompilerOptions.None, Microsoft.Xna.Framework.Content.EffectReader.EffectPool);
};

Microsoft.Xna.Framework.Content.EffectReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Effect).prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Content.EffectReader, "EffectPool", {
		get: Microsoft.Xna.Framework.Content.EffectReader.get_EffectPool
	});

Object.seal(Microsoft.Xna.Framework.Content.EffectReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.EffectReader);
Microsoft.Xna.Framework.Content.EnumReader$b1.prototype.underlyingTypeReader = null;
Microsoft.Xna.Framework.Content.EnumReader$b1.prototype.Initialize = function (manager) {
	this.underlyingTypeReader = manager.GetTypeReader(System.Enum.GetUnderlyingType(T));
};

Microsoft.Xna.Framework.Content.EnumReader$b1.prototype.Read = function (input, existingInstance) {
	return JSIL.Cast(input.ReadRawObject(this.underlyingTypeReader), T);
};

Microsoft.Xna.Framework.Content.EnumReader$b1.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(T).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.EnumReader$b1.prototype);
Object.seal(Microsoft.Xna.Framework.Content.EnumReader$b1);
Microsoft.Xna.Framework.Content.ExternalReferenceReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader.prototype._ctor.call(this, null);
};

Microsoft.Xna.Framework.Content.ExternalReferenceReader.prototype.Read = function (input, existingInstance) {
	return input.ReadExternalReference();
};


Object.seal(Microsoft.Xna.Framework.Content.ExternalReferenceReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ExternalReferenceReader);
Microsoft.Xna.Framework.Content.IndexBufferReader.prototype.Read = function (input, existingInstance) {
	var flag = input.ReadBoolean();
	var num = input.ReadInt32();
	var data = input.ReadBytes(num);
	var indexBuffer = new Microsoft.Xna.Framework.Graphics.IndexBuffer(input.GraphicsDevice, num, Microsoft.Xna.Framework.Graphics.BufferUsage.None, flag ? Microsoft.Xna.Framework.Graphics.IndexElementSize.SixteenBits : Microsoft.Xna.Framework.Graphics.IndexElementSize.ThirtyTwoBits);
	indexBuffer.SetData(data);
	return indexBuffer;
};

Microsoft.Xna.Framework.Content.IndexBufferReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.IndexBuffer).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.IndexBufferReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.IndexBufferReader);
Microsoft.Xna.Framework.Content.ListReader$b1.prototype.elementReader = null;
Microsoft.Xna.Framework.Content.ListReader$b1.prototype.Initialize = function (manager) {
	this.elementReader = manager.GetTypeReader(T);
};

Microsoft.Xna.Framework.Content.ListReader$b1.prototype.Read = function (input, existingInstance) {
	var num = input.ReadInt32();
	var list = existingInstance;

	if (list !== null) {
		list = new (System.Collections.Generic.List$b1.Of(T)) ();
	}

__while0__: 
	while (num-- > 0) {
		list.Add(input.ReadObject(this.elementReader));
	}
	return list;
};

Microsoft.Xna.Framework.Content.ListReader$b1.prototype.get_CanDeserializeIntoExistingObject = function () {
	return true;
};

Microsoft.Xna.Framework.Content.ListReader$b1.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Collections.Generic.List$b1.Of(T)).prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Content.ListReader$b1.prototype, "CanDeserializeIntoExistingObject", {
		get: Microsoft.Xna.Framework.Content.ListReader$b1.prototype.get_CanDeserializeIntoExistingObject
	});

Object.seal(Microsoft.Xna.Framework.Content.ListReader$b1.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ListReader$b1);
Microsoft.Xna.Framework.Content.Vector2Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadVector2();
};

Microsoft.Xna.Framework.Content.Vector2Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Vector2).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.Vector2Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.Vector2Reader);
Microsoft.Xna.Framework.Content.Vector3Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadVector3();
};

Microsoft.Xna.Framework.Content.Vector3Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Vector3).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.Vector3Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.Vector3Reader);
Microsoft.Xna.Framework.Content.Vector4Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadVector4();
};

Microsoft.Xna.Framework.Content.Vector4Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Vector4).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.Vector4Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.Vector4Reader);
Microsoft.Xna.Framework.Content.MatrixReader.prototype.Read = function (input, existingInstance) {
	return input.ReadMatrix();
};

Microsoft.Xna.Framework.Content.MatrixReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Matrix).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.MatrixReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.MatrixReader);
Microsoft.Xna.Framework.Content.QuaternionReader.prototype.Read = function (input, existingInstance) {
	return input.ReadQuaternion();
};

Microsoft.Xna.Framework.Content.QuaternionReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Quaternion).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.QuaternionReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.QuaternionReader);
Microsoft.Xna.Framework.Content.PlaneReader.prototype.Read = function (input, existingInstance) {
	var result = new Microsoft.Xna.Framework.Plane();
	result.Normal = input.ReadVector3();
	result.D = input.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Content.PlaneReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Plane).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.PlaneReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.PlaneReader);
Microsoft.Xna.Framework.Content.PointReader.prototype.Read = function (input, existingInstance) {
	var result = new Microsoft.Xna.Framework.Point();
	result.X = input.ReadInt32();
	result.Y = input.ReadInt32();
	return result;
};

Microsoft.Xna.Framework.Content.PointReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Point).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.PointReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.PointReader);
Microsoft.Xna.Framework.Content.RectangleReader.prototype.Read = function (input, existingInstance) {
	var result = new Microsoft.Xna.Framework.Rectangle();
	result.X = input.ReadInt32();
	result.Y = input.ReadInt32();
	result.Width = input.ReadInt32();
	result.Height = input.ReadInt32();
	return result;
};

Microsoft.Xna.Framework.Content.RectangleReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Rectangle).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.RectangleReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.RectangleReader);
Microsoft.Xna.Framework.Content.BoundingBoxReader.prototype.Read = function (input, existingInstance) {
	var result = new Microsoft.Xna.Framework.BoundingBox();
	result.Min = input.ReadVector3();
	result.Max = input.ReadVector3();
	return result;
};

Microsoft.Xna.Framework.Content.BoundingBoxReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.BoundingBox).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.BoundingBoxReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.BoundingBoxReader);
Microsoft.Xna.Framework.Content.BoundingSphereReader.prototype.Read = function (input, existingInstance) {
	var result = new Microsoft.Xna.Framework.BoundingSphere();
	result.Center = input.ReadVector3();
	result.Radius = input.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Content.BoundingSphereReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.BoundingSphere).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.BoundingSphereReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.BoundingSphereReader);
Microsoft.Xna.Framework.Content.BoundingFrustumReader.prototype.Read = function (input, existingInstance) {
	return new Microsoft.Xna.Framework.BoundingFrustum(input.ReadMatrix());
};

Microsoft.Xna.Framework.Content.BoundingFrustumReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.BoundingFrustum).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.BoundingFrustumReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.BoundingFrustumReader);
Microsoft.Xna.Framework.Content.RayReader.prototype.Read = function (input, existingInstance) {
	var result = new Microsoft.Xna.Framework.Ray();
	result.Position = input.ReadVector3();
	result.Direction = input.ReadVector3();
	return result;
};

Microsoft.Xna.Framework.Content.RayReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Ray).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.RayReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.RayReader);
Microsoft.Xna.Framework.Content.CurveReader.prototype.Read = function (input, existingInstance) {
	var curve = existingInstance;

	if (curve !== null) {
		curve = new Microsoft.Xna.Framework.Curve();
	}
	curve.PreLoop = input.ReadInt32();
	curve.PostLoop = input.ReadInt32();
	var num = input.ReadInt32();
	var i = 0;

__while0__: 
	while (i < num) {
		var position = input.ReadSingle();
		var value = input.ReadSingle();
		var tangentIn = input.ReadSingle();
		var tangentOut = input.ReadSingle();
		curve.Keys.Add(new Microsoft.Xna.Framework.CurveKey(position, value, tangentIn, tangentOut, input.ReadInt32()));
		++i;
	}
	return curve;
};

Microsoft.Xna.Framework.Content.CurveReader.prototype.get_CanDeserializeIntoExistingObject = function () {
	return true;
};

Microsoft.Xna.Framework.Content.CurveReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Curve).prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Content.CurveReader.prototype, "CanDeserializeIntoExistingObject", {
		get: Microsoft.Xna.Framework.Content.CurveReader.prototype.get_CanDeserializeIntoExistingObject
	});

Object.seal(Microsoft.Xna.Framework.Content.CurveReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.CurveReader);
Microsoft.Xna.Framework.Content.ColorReader.prototype.Read = function (input, existingInstance) {
	var result = new Microsoft.Xna.Framework.Graphics.Color();
	result.set_PackedValue(input.ReadUInt32());
	return result;
};

Microsoft.Xna.Framework.Content.ColorReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Color).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.ColorReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ColorReader);
Microsoft.Xna.Framework.Content.ModelReader.prototype.Read = function (input, existingInstance) {
	return Microsoft.Xna.Framework.Graphics.Model.Read(input);
};

Microsoft.Xna.Framework.Content.ModelReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Model).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.ModelReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ModelReader);
Microsoft.Xna.Framework.Content.NullableReader$b1.prototype.underlyingTypeReader = null;
Microsoft.Xna.Framework.Content.NullableReader$b1.prototype.Initialize = function (manager) {
	this.underlyingTypeReader = manager.GetTypeReader(T);
};

Microsoft.Xna.Framework.Content.NullableReader$b1.prototype.Read = function (input, existingInstance) {

	if (!input.ReadBoolean()) {
		return new (System.Nullable$b1.Of(T)) ();
	}
	return new (System.Nullable$b1.Of(T)) (input.ReadRawObject(this.underlyingTypeReader));
};

Microsoft.Xna.Framework.Content.NullableReader$b1.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Nullable$b1.Of(T)).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.NullableReader$b1.prototype);
Object.seal(Microsoft.Xna.Framework.Content.NullableReader$b1);
Microsoft.Xna.Framework.Content.ObjectReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader.prototype._ctor.call(this, System.Object);
};

Microsoft.Xna.Framework.Content.ObjectReader.prototype.Read = function (input, existingInstance) {
	throw new System.NotSupportedException();
};


Object.seal(Microsoft.Xna.Framework.Content.ObjectReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ObjectReader);
Microsoft.Xna.Framework.Content.StringReader.prototype.Read = function (input, existingInstance) {
	return input.ReadString();
};

Microsoft.Xna.Framework.Content.StringReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.String).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.StringReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.StringReader);
Microsoft.Xna.Framework.Content.ByteReader.prototype.Read = function (input, existingInstance) {
	return input.ReadByte();
};

Microsoft.Xna.Framework.Content.ByteReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Byte).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.ByteReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ByteReader);
Microsoft.Xna.Framework.Content.SByteReader.prototype.Read = function (input, existingInstance) {
	return input.ReadSByte();
};

Microsoft.Xna.Framework.Content.SByteReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.SByte).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.SByteReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.SByteReader);
Microsoft.Xna.Framework.Content.Int16Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadInt16();
};

Microsoft.Xna.Framework.Content.Int16Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Int16).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.Int16Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.Int16Reader);
Microsoft.Xna.Framework.Content.UInt16Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadUInt16();
};

Microsoft.Xna.Framework.Content.UInt16Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.UInt16).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.UInt16Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.UInt16Reader);
Microsoft.Xna.Framework.Content.Int32Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadInt32();
};

Microsoft.Xna.Framework.Content.Int32Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Int32).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.Int32Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.Int32Reader);
Microsoft.Xna.Framework.Content.UInt32Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadUInt32();
};

Microsoft.Xna.Framework.Content.UInt32Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.UInt32).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.UInt32Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.UInt32Reader);
Microsoft.Xna.Framework.Content.Int64Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadInt64();
};

Microsoft.Xna.Framework.Content.Int64Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Int64).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.Int64Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.Int64Reader);
Microsoft.Xna.Framework.Content.UInt64Reader.prototype.Read = function (input, existingInstance) {
	return input.ReadUInt64();
};

Microsoft.Xna.Framework.Content.UInt64Reader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.UInt64).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.UInt64Reader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.UInt64Reader);
Microsoft.Xna.Framework.Content.SingleReader.prototype.Read = function (input, existingInstance) {
	return input.ReadSingle();
};

Microsoft.Xna.Framework.Content.SingleReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Single).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.SingleReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.SingleReader);
Microsoft.Xna.Framework.Content.DoubleReader.prototype.Read = function (input, existingInstance) {
	return input.ReadDouble();
};

Microsoft.Xna.Framework.Content.DoubleReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Double).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.DoubleReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.DoubleReader);
Microsoft.Xna.Framework.Content.BooleanReader.prototype.Read = function (input, existingInstance) {
	return input.ReadBoolean();
};

Microsoft.Xna.Framework.Content.BooleanReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Boolean).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.BooleanReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.BooleanReader);
Microsoft.Xna.Framework.Content.CharReader.prototype.Read = function (input, existingInstance) {
	return input.ReadChar();
};

Microsoft.Xna.Framework.Content.CharReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Char).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.CharReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.CharReader);
Microsoft.Xna.Framework.Content.DateTimeReader.prototype.Read = function (input, existingInstance) {
	var num = input.ReadInt64();
	var ticks = (num & 4611686018427387903);
	var dateTimeKind = JSIL.Cast((num >>> 62), System.Int32);

	if (dateTimeKind === System.DateTimeKind.Local) {
		return new System.DateTime(ticks, System.DateTimeKind.Utc).ToLocalTime();
	}
	return new System.DateTime(ticks, dateTimeKind);
};

Microsoft.Xna.Framework.Content.DateTimeReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.DateTime).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.DateTimeReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.DateTimeReader);
Microsoft.Xna.Framework.Content.TimeSpanReader.prototype.Read = function (input, existingInstance) {
	return System.TimeSpan.FromTicks(input.ReadInt64());
};

Microsoft.Xna.Framework.Content.TimeSpanReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.TimeSpan).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.TimeSpanReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.TimeSpanReader);
Microsoft.Xna.Framework.Content.DecimalReader.prototype.Read = function (input, existingInstance) {
	var array = JSIL.Array.New(System.Int32, 4);
	var i = 0;

__while0__: 
	while (i < array.length) {
		array[i] = input.ReadInt32();
		++i;
	}
	return new System.Decimal(array);
};

Microsoft.Xna.Framework.Content.DecimalReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(System.Decimal).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.DecimalReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.DecimalReader);
Microsoft.Xna.Framework.Content.SongReader.prototype.Read = function (input, existingInstance) {
	var text = input.ReadString();
	text = System.IO.Path.Combine(input.ContentManager.RootDirectory, input.GetPathToReference(text));
	return new Microsoft.Xna.Framework.Media.Song(input.AssetName, text, input.ReadObject());
};

Microsoft.Xna.Framework.Content.SongReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Media.Song).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.SongReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.SongReader);
Microsoft.Xna.Framework.Content.SoundEffectReader.prototype.Read = function (input, existingInstance) {
	var format = input.ReadBytes(input.ReadInt32());
	var data = input.ReadBytes(input.ReadInt32());
	var loopStart = input.ReadInt32();
	var loopLength = input.ReadInt32();
	return new Microsoft.Xna.Framework.Audio.SoundEffect(format, data, loopStart, loopLength, input.ReadInt32());
};

Microsoft.Xna.Framework.Content.SoundEffectReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Audio.SoundEffect).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.SoundEffectReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.SoundEffectReader);
Microsoft.Xna.Framework.Content.SpriteFontReader.prototype.Read = function (input, existingInstance) {
	var texture = input.ReadObject();
	var glyphs = input.ReadObject();
	var cropping = input.ReadObject();
	var charMap = input.ReadObject();
	var lineSpacing = input.ReadInt32();
	var spacing = input.ReadSingle();
	var kerning = input.ReadObject();
	var defaultCharacter = new (System.Nullable$b1.Of(System.Char)) ();

	if (input.ReadBoolean()) {
		defaultCharacter._ctor(input.ReadChar());
	}
	return new Microsoft.Xna.Framework.Graphics.SpriteFont(texture, glyphs, cropping, charMap, lineSpacing, spacing, kerning, defaultCharacter);
};

Microsoft.Xna.Framework.Content.SpriteFontReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.SpriteFont).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.SpriteFontReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.SpriteFontReader);
Microsoft.Xna.Framework.Content.Texture2DReader.prototype.Read = function (input, existingInstance) {
	var format = input.ReadInt32();
	var width = input.ReadInt32();
	var height = input.ReadInt32();
	var num = input.ReadInt32();
	var texture2D = new Microsoft.Xna.Framework.Graphics.Texture2D(input.GraphicsDevice, width, height, num, Microsoft.Xna.Framework.Graphics.TextureUsage.None, format);
	var i = 0;

__while0__: 
	while (i < num) {
		var array = input.ReadBytes(input.ReadInt32());
		texture2D.SetData(
			i, 
			new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
			array, 
			0, 
			array.length, 
			Microsoft.Xna.Framework.Graphics.SetDataOptions.None
		);
		++i;
	}
	return texture2D;
};

Microsoft.Xna.Framework.Content.Texture2DReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Texture2D).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.Texture2DReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.Texture2DReader);
Microsoft.Xna.Framework.Content.Texture3DReader.prototype.Read = function (input, existingInstance) {
	var format = input.ReadInt32();
	var num = input.ReadInt32();
	var num2 = input.ReadInt32();
	var num3 = input.ReadInt32();
	var num4 = input.ReadInt32();
	var texture3D = new Microsoft.Xna.Framework.Graphics.Texture3D(input.GraphicsDevice, num, num2, num3, num4, Microsoft.Xna.Framework.Graphics.TextureUsage.None, format);
	var i = 0;

__while0__: 
	while (i < num4) {
		var array = input.ReadBytes(input.ReadInt32());
		texture3D.SetData(
			i, 
			0, 
			0, 
			num, 
			num2, 
			0, 
			num3, 
			array, 
			0, 
			array.length, 
			Microsoft.Xna.Framework.Graphics.SetDataOptions.None
		);
		num = System.Math.Max((num >> 1), 1);
		num2 = System.Math.Max((num2 >> 1), 1);
		num3 = System.Math.Max((num3 >> 1), 1);
		++i;
	}
	return texture3D;
};

Microsoft.Xna.Framework.Content.Texture3DReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Texture3D).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.Texture3DReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.Texture3DReader);
Microsoft.Xna.Framework.Content.TextureCubeReader.prototype.Read = function (input, existingInstance) {
	var format = input.ReadInt32();
	var size = input.ReadInt32();
	var num = input.ReadInt32();
	var textureCube = new Microsoft.Xna.Framework.Graphics.TextureCube(input.GraphicsDevice, size, num, Microsoft.Xna.Framework.Graphics.TextureUsage.None, format);
	var cubeMapFace = Microsoft.Xna.Framework.Graphics.CubeMapFace.PositiveX;

__while0__: 
	while (cubeMapFace < 6) {
		var i = 0;

	__while1__: 
		while (i < num) {
			var array = input.ReadBytes(input.ReadInt32());
			textureCube.SetData(
				cubeMapFace, 
				i, 
				new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (), 
				array, 
				0, 
				array.length, 
				Microsoft.Xna.Framework.Graphics.SetDataOptions.None
			);
			++i;
		}
		cubeMapFace += Microsoft.Xna.Framework.Graphics.CubeMapFace.NegativeX;
	}
	return textureCube;
};

Microsoft.Xna.Framework.Content.TextureCubeReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.TextureCube).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.TextureCubeReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.TextureCubeReader);
Microsoft.Xna.Framework.Content.TextureReader.prototype.Read = function (input, existingInstance) {
	return existingInstance;
};

Microsoft.Xna.Framework.Content.TextureReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.Texture).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.TextureReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.TextureReader);
Microsoft.Xna.Framework.Content.VertexBufferReader.prototype.Read = function (input, existingInstance) {
	var num = input.ReadInt32();
	var data = input.ReadBytes(num);
	var vertexBuffer = new Microsoft.Xna.Framework.Graphics.VertexBuffer(input.GraphicsDevice, num, Microsoft.Xna.Framework.Graphics.BufferUsage.None);
	vertexBuffer.SetData(data);
	return vertexBuffer;
};

Microsoft.Xna.Framework.Content.VertexBufferReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.VertexBuffer).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.VertexBufferReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.VertexBufferReader);
Microsoft.Xna.Framework.Content.VertexDeclarationReader.prototype.Read = function (input, existingInstance) {
	var num = input.ReadInt32();
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.VertexElement.MemberwiseClone(), num);
	var i = 0;

__while0__: 
	while (i < num) {
		var stream = input.ReadInt16();
		var offset = input.ReadInt16();
		var elementFormat = input.ReadByte();
		var elementMethod = input.ReadByte();
		var elementUsage = input.ReadByte();
		array[i] = new Microsoft.Xna.Framework.Graphics.VertexElement(stream, offset, elementFormat, elementMethod, elementUsage, input.ReadByte());
		++i;
	}
	return new Microsoft.Xna.Framework.Graphics.VertexDeclaration(input.GraphicsDevice, array);
};

Microsoft.Xna.Framework.Content.VertexDeclarationReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Graphics.VertexDeclaration).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.VertexDeclarationReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.VertexDeclarationReader);
Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.baseReader = null;
Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.memberHelpers = null;
Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.instanceConstructor = null;
Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.typeVersion = 0;
Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype._ctor = function () {
	this.memberHelpers = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper)) ();
	Microsoft.Xna.Framework.Content.ContentTypeReader.prototype._ctor.call(this, T);
	this.instanceConstructor = T.GetConstructor(System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic, null, JSIL.Array.New(System.Type, 0), null);
	var customAttributes = T.GetCustomAttributes(Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute, false);

	if (customAttributes.length === 1) {
		this.typeVersion = JSIL.Cast(customAttributes[0], Microsoft.Xna.Framework.Content.ContentSerializerTypeVersionAttribute).TypeVersion;
	}
};

Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.Initialize = function (manager) {
	var baseType = this.TargetType.BaseType;

	if (!((baseType !== null) || 
			(baseType === System.Object) || (baseType === System.ValueType))) {
		this.baseReader = manager.GetTypeReader(baseType);
	}
	var bindingAttr = System.Reflection.BindingFlags.Default | System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic;
	var properties = this.TargetType.GetProperties(bindingAttr);
	var fields = this.TargetType.GetFields(bindingAttr);
	var array = properties;
	var i = 0;

__while0__: 
	while (i < array.length) {
		var reflectiveReaderMemberHelper = Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.TryCreate(manager, this.TargetType, array[i]);

		if (reflectiveReaderMemberHelper === null) {
			this.memberHelpers.Add(reflectiveReaderMemberHelper);
		}
		++i;
	}
	var array2 = fields;
	var j = 0;

__while1__: 
	while (j < array2.length) {
		var reflectiveReaderMemberHelper2 = Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.TryCreate(manager, this.TargetType, array2[j]);

		if (reflectiveReaderMemberHelper2 === null) {
			this.memberHelpers.Add(reflectiveReaderMemberHelper2);
		}
		++j;
	}
};

Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.Read = function (input, existingInstance) {

	if (input !== null) {
		throw new System.ArgumentNullException("input");
	}
	var obj = existingInstance;

	if (obj !== null) {

		if (this.instanceConstructor === null) {
			obj = this.instanceConstructor.Invoke(null);
		} else {

			if (!this.TargetIsValueType) {
				throw new System.InvalidOperationException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NoDefaultConstructor, [this.TargetType]));
			}
			obj = System.Activator.CreateInstance(this.TargetType);
		}
	}

	if (this.baseReader === null) {
		var obj2 = this.baseReader.Read(input, obj);

		if (obj2 !== obj) {
			throw new System.InvalidOperationException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.ReaderConstructedNewInstance, [this.baseReader.GetType()]));
		}
	}
	var enumerator = this.memberHelpers.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.MoveNext()) {
			enumerator.get_Current().Read(input, obj);
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return obj;
};

Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.get_CanDeserializeIntoExistingObject = function () {
	return this.TargetType.IsClass;
};

Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.get_TypeVersion = function () {
	return this.typeVersion;
};

Object.defineProperty(Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype, "CanDeserializeIntoExistingObject", {
		get: Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.get_CanDeserializeIntoExistingObject
	});
Object.defineProperty(Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype, "TypeVersion", {
		get: Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype.get_TypeVersion
	});

Object.seal(Microsoft.Xna.Framework.Content.ReflectiveReader$b1.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ReflectiveReader$b1);
Microsoft.Xna.Framework.Content.VideoReader.prototype.Read = function (input, existingInstance) {
	var file = System.IO.Path.Combine(input.ContentManager.RootDirectory, input.GetPathToReference(input.ReadObject()));
	var duration = input.ReadObject();
	var width = input.ReadObject();
	var height = input.ReadObject();
	var framesPerSecond = input.ReadObject();
	return new Microsoft.Xna.Framework.Media.Video(input.GraphicsDevice, file, duration, width, height, framesPerSecond, input.ReadObject());
};

Microsoft.Xna.Framework.Content.VideoReader.prototype._ctor = function () {
	Microsoft.Xna.Framework.Content.ContentTypeReader$b1.Of(Microsoft.Xna.Framework.Media.Video).prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.VideoReader.prototype);
Object.seal(Microsoft.Xna.Framework.Content.VideoReader);
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.prototype.typeReader = null;
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.prototype.fieldInfo = null;
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.prototype.propertyInfo = null;
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.prototype.canWrite = new System.Boolean();
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.prototype.sharedResource = new System.Boolean();
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.TryCreate$0 = function (manager, declaringType, fieldInfo) {
	var canRead = true;
	var flag = (!fieldInfo.IsInitOnly && 
		!fieldInfo.IsLiteral);

	if (!Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.ShouldSerializeMember(
			manager, 
			declaringType, 
			fieldInfo, 
			fieldInfo.FieldType, 
			fieldInfo.IsPublic, 
			canRead, 
			flag
		)) {
		Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.ValidateSkippedMember(fieldInfo);
		return null;
	}
	return new Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper(manager, fieldInfo, null, fieldInfo.FieldType, flag);
};

Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.TryCreate$1 = function (manager, declaringType, propertyInfo) {

	if (!Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.ShouldSerializeProperty(manager, declaringType, propertyInfo)) {
		Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.ValidateSkippedMember(propertyInfo);
		return null;
	}
	return new Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper(manager, null, propertyInfo, propertyInfo.PropertyType, propertyInfo.CanWrite);
};

Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.prototype._ctor = function (manager, fieldInfo, propertyInfo, memberType, canWrite) {
	System.Object.prototype._ctor.call(this);
	this.typeReader = manager.GetTypeReader(memberType);
	this.fieldInfo = fieldInfo;
	this.propertyInfo = propertyInfo;
	this.canWrite = canWrite;

	if (fieldInfo === null) {
		this.sharedResource = Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.IsSharedResource(fieldInfo);
		return ;
	}
	this.sharedResource = Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.IsSharedResource(propertyInfo);
};

Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.ShouldSerializeMember = function (manager, declaringType, memberInfo, memberType, isPublic, canRead, canWrite) {

	if (!canRead) {
		return false;
	}

	if (memberInfo.IsDefined(Microsoft.Xna.Framework.Content.ContentSerializerIgnoreAttribute, false)) {
		return false;
	}

	if (!(isPublic || System.Attribute.GetCustomAttribute(memberInfo, Microsoft.Xna.Framework.Content.ContentSerializerAttribute))) {
		return false;
	}

	if (!canWrite) {

		if (!Microsoft.Xna.Framework.Content.ContentTypeReaderManager.ContainsTypeReader(memberType)) {
			return false;
		}

		if (!manager.GetTypeReader(memberType).CanDeserializeIntoExistingObject) {
			return false;
		}
	}
	return ((declaringType.IsValueType !== null) || !Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.IsSharedResource(memberInfo));
};

Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.ShouldSerializeProperty = function (manager, declaringType, propertyInfo) {

	if (propertyInfo.GetIndexParameters().length > 0) {
		return false;
	}
	var isPublic = true;
	var accessors = propertyInfo.GetAccessors(true);
	var i = 0;

__while0__: 
	while (i < accessors.length) {
		var methodInfo = accessors[i];

		if (methodInfo.GetBaseDefinition() !== methodInfo) {
			return false;
		}

		if (!methodInfo.IsPublic) {
			isPublic = false;
		}
		++i;
	}
	return Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.ShouldSerializeMember(
		manager, 
		declaringType, 
		propertyInfo, 
		propertyInfo.PropertyType, 
		isPublic, 
		propertyInfo.CanRead, 
		propertyInfo.CanWrite
	);
};

Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.IsSharedResource = function (memberInfo) {
	var customAttribute = System.Attribute.GetCustomAttribute(memberInfo, Microsoft.Xna.Framework.Content.ContentSerializerAttribute);
	return ((customAttribute === null) && JSIL.Cast(customAttribute, Microsoft.Xna.Framework.Content.ContentSerializerAttribute).SharedResource);
};

Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.ValidateSkippedMember = function (memberInfo) {

	if (System.Attribute.GetCustomAttribute(memberInfo, Microsoft.Xna.Framework.Content.ContentSerializerAttribute) === null) {
		throw new System.InvalidOperationException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.CantSerializeMember, [memberInfo.Name, memberInfo.DeclaringType]));
	}
};

Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.prototype.Read = function (input, parentInstance) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.$l$gc__DisplayClass2();
	$l$gc__DisplayClass.input = input;
	$l$gc__DisplayClass.parentInstance = parentInstance;
	$l$gc__DisplayClass.$l$g4__this = this;

	if (this.sharedResource) {

		if (!this.canWrite) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.ReadOnlySharedResource);
		}
		$l$gc__DisplayClass.input.ReadSharedResource(function (value) {

				if (!$l$gc__DisplayClass.$l$g4__this.typeReader.TargetType.IsAssignableFrom(value.GetType())) {
					throw $l$gc__DisplayClass.input.CreateContentLoadException(Microsoft.Xna.Framework.FrameworkResources.BadXnbWrongType, [value.GetType(), $l$gc__DisplayClass.$l$g4__this.typeReader.TargetType]);
				}

				if ($l$gc__DisplayClass.$l$g4__this.propertyInfo === null) {
					$l$gc__DisplayClass.$l$g4__this.propertyInfo.SetValue($l$gc__DisplayClass.parentInstance, value, null);
					return ;
				}
				$l$gc__DisplayClass.$l$g4__this.fieldInfo.SetValue($l$gc__DisplayClass.parentInstance, value);
			});
		return ;
	} else if (this.canWrite) {
		var value = $l$gc__DisplayClass.input.ReadObject(this.typeReader, null);

		if (this.propertyInfo === null) {
			this.propertyInfo.SetValue($l$gc__DisplayClass.parentInstance, value, null);
			return ;
		}
		this.fieldInfo.SetValue($l$gc__DisplayClass.parentInstance, value);
		return ;
	} else {

		if (this.propertyInfo === null) {
			var value2 = this.propertyInfo.GetValue($l$gc__DisplayClass.parentInstance, null);
		} else {
			value2 = this.fieldInfo.GetValue($l$gc__DisplayClass.parentInstance);
		}

		if (value2 !== null) {

			if (this.propertyInfo === null) {
				var memberInfo = this.propertyInfo;
			} else {
				memberInfo = this.fieldInfo;
			}
			throw new System.InvalidOperationException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.CantSerializeReadOnlyNull, [memberInfo.Name, memberInfo.DeclaringType]));
		}
		$l$gc__DisplayClass.input.ReadObject(this.typeReader, value2);
		return ;
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper, "TryCreate", [
		["TryCreate$0", [Microsoft.Xna.Framework.Content.ContentTypeReaderManager, System.Type, System.Reflection.FieldInfo]], 
		["TryCreate$1", [Microsoft.Xna.Framework.Content.ContentTypeReaderManager, System.Type, System.Reflection.PropertyInfo]]
	]
);

Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.$l$gc__DisplayClass2.prototype.$l$g4__this = null;
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.$l$gc__DisplayClass2.prototype.input = null;
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.$l$gc__DisplayClass2.prototype.parentInstance = null;
Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.$l$gc__DisplayClass2.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.$l$gc__DisplayClass2);
Object.seal(Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper.prototype);
Object.seal(Microsoft.Xna.Framework.Content.ReflectiveReaderMemberHelper);
Microsoft.Xna.Framework.FrameworkDispatcher.pendingCalls = null;
Microsoft.Xna.Framework.FrameworkDispatcher.pendingCallsCopy = null;
Microsoft.Xna.Framework.FrameworkDispatcher.Update = function () {
	Microsoft.Xna.Framework.FrameworkDispatcher.PollForEvents();
	System.Threading.Monitor.Enter();

	try {
		var enumerator = Microsoft.Xna.Framework.FrameworkDispatcher.pendingCalls.GetEnumerator();

		try {

		__while0__: 
			while (enumerator.MoveNext()) {
				Microsoft.Xna.Framework.FrameworkDispatcher.pendingCallsCopy.Add(enumerator.get_Current());
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
		Microsoft.Xna.Framework.FrameworkDispatcher.pendingCalls.Clear();
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.FrameworkDispatcher.pendingCalls);
	}
	var enumerator2 = Microsoft.Xna.Framework.FrameworkDispatcher.pendingCallsCopy.GetEnumerator();

	try {

	__while1__: 
		while (enumerator2.MoveNext()) {
			var current2 = enumerator2.get_Current();

			switch (current2.ManagedCallType) {
				case 4: 
					Microsoft.Xna.Framework.PowerStatus.OnPowerStateChanged(System.EventArgs.Empty);
					break;
				case 5: 
					Microsoft.Xna.Framework.Media.MediaPlayer.OnActiveSongChanged(System.EventArgs.Empty);
					break;
				case 6: 
					Microsoft.Xna.Framework.Media.MediaPlayer.OnMediaStateChanged(System.EventArgs.Empty);
					break;
				case 8: 
					Microsoft.Xna.Framework.Storage.StorageDevice.OnDeviceChanged(System.EventArgs.Empty);
					break;
			}
		}
	} finally {
		enumerator2.IDisposable_Dispose();
	}
	Microsoft.Xna.Framework.FrameworkDispatcher.pendingCallsCopy.Clear();
	Microsoft.Xna.Framework.Audio.SoundEffect.RecycleStoppedFireAndForgetInstances();
};

Microsoft.Xna.Framework.FrameworkDispatcher.AddNewPendingCall = function (callType, arg) {
	System.Threading.Monitor.Enter();

	try {
		Microsoft.Xna.Framework.FrameworkDispatcher.pendingCalls.Add(new Microsoft.Xna.Framework.FrameworkDispatcher.ManagedCallAndArg(callType, arg));
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.FrameworkDispatcher.pendingCalls);
	}
};

Microsoft.Xna.Framework.FrameworkDispatcher.PollForEvents = function () {
};

Microsoft.Xna.Framework.FrameworkDispatcher._cctor = function () {
	Microsoft.Xna.Framework.FrameworkDispatcher.pendingCalls = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.FrameworkDispatcher.ManagedCallAndArg)) ();
	Microsoft.Xna.Framework.FrameworkDispatcher.pendingCallsCopy = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.FrameworkDispatcher.ManagedCallAndArg)) ();
};

Microsoft.Xna.Framework.FrameworkDispatcher._cctor();

Microsoft.Xna.Framework.FrameworkDispatcher.ManagedCallAndArg.prototype.ManagedCallType = 0;
Microsoft.Xna.Framework.FrameworkDispatcher.ManagedCallAndArg.prototype.ManagedCallArg = 0;
Microsoft.Xna.Framework.FrameworkDispatcher.ManagedCallAndArg.prototype._ctor = function (callType, arg) {
	this.ManagedCallType = callType;
	this.ManagedCallArg = arg;
};


Object.seal(Microsoft.Xna.Framework.FrameworkDispatcher.ManagedCallAndArg.prototype);
Object.seal(Microsoft.Xna.Framework.FrameworkDispatcher.ManagedCallAndArg);
Object.seal(Microsoft.Xna.Framework.FrameworkDispatcher);
Microsoft.Xna.Framework.PendingOperation.prototype.Async = null;
Microsoft.Xna.Framework.PendingOperation.prototype.Callback = null;
Microsoft.Xna.Framework.PendingOperation.prototype._ctor = function (async, callback) {
	this.Async = async;
	this.Callback = callback;
};


Object.seal(Microsoft.Xna.Framework.PendingOperation.prototype);
Object.seal(Microsoft.Xna.Framework.PendingOperation);
Microsoft.Xna.Framework.UserAsyncDispatcher.PendingOperationsLock = null;
Microsoft.Xna.Framework.UserAsyncDispatcher.pendingOperations = null;
Microsoft.Xna.Framework.UserAsyncDispatcher.initialized = new System.Boolean();
Microsoft.Xna.Framework.UserAsyncDispatcher.parentExitEvent = null;
Microsoft.Xna.Framework.UserAsyncDispatcher.Initialize = function () {

	if (!Microsoft.Xna.Framework.UserAsyncDispatcher.initialized) {
		Microsoft.Xna.Framework.UserAsyncDispatcher.PlatformSpecificInitialize();
		new System.Threading.Thread(JSIL.Delegate.New("System.Threading.ThreadStart", null, Microsoft.Xna.Framework.UserAsyncDispatcher.AsyncDispatcherThreadFunction)).__Initialize__({
				IsBackground: true}
		).Start();
		Microsoft.Xna.Framework.UserAsyncDispatcher.initialized = true;
	}
};

Microsoft.Xna.Framework.UserAsyncDispatcher.AsyncDispatcherThreadFunction = function () {
	var managedCallType = new JSIL.Variable(0), num = new JSIL.Variable(0);

__while0__: 
	while (true) {
		var kernelReturnCode = Microsoft.Xna.Framework.UserAsyncDispatcher.WaitForAsyncOperationToFinish(/* ref */ managedCallType, /* ref */ num);

		if (kernelReturnCode === -2147220989) {
			break __while0__;
		}
		Microsoft.Xna.Framework.GamerServices.ErrorHandler.ThrowExceptionFromResult(kernelReturnCode);

		if (managedCallType.value === Microsoft.Xna.Framework.GamerServices.ManagedCallType.AsyncOperationCompleted) {
			Microsoft.Xna.Framework.UserAsyncDispatcher.HandleFinishedOperation(num.value);
		} else {
			Microsoft.Xna.Framework.UserAsyncDispatcher.HandleManagedCallback(managedCallType.value, num.value);
		}
	}
};

Microsoft.Xna.Framework.UserAsyncDispatcher.HandleManagedCallback = function (managedCallType, managedCallArgs) {

	if (managedCallType === Microsoft.Xna.Framework.GamerServices.ManagedCallType.NoManagedCall) {
		return ;
	}

	if (Microsoft.Xna.Framework.UserAsyncDispatcher.CallbackGoesToDispatcher(managedCallType)) {
		Microsoft.Xna.Framework.FrameworkDispatcher.AddNewPendingCall(managedCallType, managedCallArgs);
	}
};

Microsoft.Xna.Framework.UserAsyncDispatcher.CallbackGoesToDispatcher = function (managedCallType) {
	return ((managedCallType === Microsoft.Xna.Framework.GamerServices.ManagedCallType.Power_Changed) || 
		(managedCallType === Microsoft.Xna.Framework.GamerServices.ManagedCallType.Media_ActiveSongChanged) || (managedCallType === Microsoft.Xna.Framework.GamerServices.ManagedCallType.Media_PlayStateChanged));
};

Microsoft.Xna.Framework.UserAsyncDispatcher.HandleFinishedOperation = function (finishedHandle) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.UserAsyncDispatcher.$l$gc__DisplayClass2();
	System.Threading.Monitor.Enter();

	try {
		$l$gc__DisplayClass.pendingOp = Microsoft.Xna.Framework.UserAsyncDispatcher.pendingOperations.get_Item(finishedHandle);

		if (!$l$gc__DisplayClass.pendingOp.Async.IsReusable) {
			Microsoft.Xna.Framework.UserAsyncDispatcher.pendingOperations.Remove(finishedHandle);
			$l$gc__DisplayClass.pendingOp.Async.IsCompleted = true;
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.UserAsyncDispatcher.PendingOperationsLock);
	}
	$l$gc__DisplayClass.pendingOp.Async.AsyncWaitHandle.Set();

	if ($l$gc__DisplayClass.pendingOp.Callback === null) {
		System.Threading.ThreadPool.QueueUserWorkItem(function (obj) {
				$l$gc__DisplayClass.pendingOp.Callback($l$gc__DisplayClass.pendingOp.Async);
			});
	}
};

Microsoft.Xna.Framework.UserAsyncDispatcher.AddPendingOperation$0 = function (kernelHandle, callback, asyncState) {
	return Microsoft.Xna.Framework.UserAsyncDispatcher.AddPendingOperation(kernelHandle, callback, asyncState, false);
};

Microsoft.Xna.Framework.UserAsyncDispatcher.AddPendingOperation$1 = function (kernelHandle, callback, asyncState, isReusable) {
	var xOverlappedAsyncResult = new Microsoft.Xna.Framework.XOverlappedAsyncResult(asyncState, kernelHandle, isReusable);
	Microsoft.Xna.Framework.UserAsyncDispatcher.pendingOperations.Add(kernelHandle, new Microsoft.Xna.Framework.PendingOperation(xOverlappedAsyncResult, callback));
	return xOverlappedAsyncResult;
};

Microsoft.Xna.Framework.UserAsyncDispatcher.OperationStillPending = function (result) {
	System.Threading.Monitor.Enter();

	try {
		var result2 = Microsoft.Xna.Framework.UserAsyncDispatcher.pendingOperations.ContainsKey(result.KernelHandle);
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.UserAsyncDispatcher.PendingOperationsLock);
	}
	return result2;
};

Microsoft.Xna.Framework.UserAsyncDispatcher.PlatformSpecificInitialize = function () {
	Microsoft.Xna.Framework.UserAsyncDispatcher.parentExitEvent = new Microsoft.Win32.SafeHandles.SafeWaitHandle(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.CreateEvent(JSIL.UnmaterializedReference(), true, false, System.IntPtr.Zero), true);

	if (Microsoft.Xna.Framework.UserAsyncDispatcher.parentExitEvent.IsInvalid) {
		throw new System.Threading.WaitHandleCannotBeOpenedException();
	}
	System.AppDomain.CurrentDomain.add_ProcessExit(JSIL.Delegate.New("System.EventHandler", null, Microsoft.Xna.Framework.UserAsyncDispatcher.OnExit));
	System.AppDomain.CurrentDomain.add_DomainUnload(JSIL.Delegate.New("System.EventHandler", null, Microsoft.Xna.Framework.UserAsyncDispatcher.OnExit));
	Microsoft.Xna.Framework.GamerServices.ErrorHandler.ThrowExceptionFromResult(JSIL.IgnoredMember("Initialize(parentExitEvent)"));
};

Microsoft.Xna.Framework.UserAsyncDispatcher.OnExit = function (sender, e) {

	if (!Microsoft.Xna.Framework.UserAsyncDispatcher.parentExitEvent.IsInvalid) {
		Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SetEvent(Microsoft.Xna.Framework.UserAsyncDispatcher.parentExitEvent.DangerousGetHandle());
	}
};

Microsoft.Xna.Framework.UserAsyncDispatcher.WaitForAsyncOperationToFinish = function (/* ref */ managedCallType, /* ref */ managedCallArgs) {
	return Microsoft.Xna.Framework.WindowsManagedCallbackHandler.Instance.WaitForAsyncOperationToFinish(/* ref */ managedCallType, /* ref */ managedCallArgs);
};

Microsoft.Xna.Framework.UserAsyncDispatcher._cctor = function () {
	Microsoft.Xna.Framework.UserAsyncDispatcher.PendingOperationsLock = new System.Object();
	Microsoft.Xna.Framework.UserAsyncDispatcher.pendingOperations = new (System.Collections.Generic.Dictionary$b2.Of(System.UInt32, Microsoft.Xna.Framework.PendingOperation)) ();
	Microsoft.Xna.Framework.UserAsyncDispatcher.initialized = false;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.UserAsyncDispatcher, "AddPendingOperation", [
		["AddPendingOperation$0", [System.UInt32, System.AsyncCallback, System.Object]], 
		["AddPendingOperation$1", [System.UInt32, System.AsyncCallback, System.Object, System.Boolean]]
	]
);
Microsoft.Xna.Framework.UserAsyncDispatcher._cctor();

Microsoft.Xna.Framework.UserAsyncDispatcher.$l$gc__DisplayClass2.prototype.__StructFields__ = {
	pendingOp: Microsoft.Xna.Framework.PendingOperation
};
Microsoft.Xna.Framework.UserAsyncDispatcher.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.UserAsyncDispatcher.$l$gc__DisplayClass2.prototype);
Object.seal(Microsoft.Xna.Framework.UserAsyncDispatcher.$l$gc__DisplayClass2);
Object.seal(Microsoft.Xna.Framework.UserAsyncDispatcher);
Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.directionParam = null;
Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.diffuseColorParam = null;
Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.specularColorParam = null;
Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.enabled = new System.Boolean();
Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.__StructFields__ = {
	cachedDiffuseColor: Microsoft.Xna.Framework.Vector3, 
	cachedSpecularColor: Microsoft.Xna.Framework.Vector3
};
Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.get_Enabled = function () {
	return this.enabled;
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.set_Enabled = function (value) {

	if (this.enabled !== value) {
		this.enabled = value;

		if (this.enabled) {
			this.diffuseColorParam.SetValue(this.cachedDiffuseColor.MemberwiseClone());
			this.specularColorParam.SetValue(this.cachedSpecularColor.MemberwiseClone());
			return ;
		}
		this.diffuseColorParam.SetValue(Microsoft.Xna.Framework.Vector3.Zero);
		this.specularColorParam.SetValue(Microsoft.Xna.Framework.Vector3.Zero);
	}
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.get_Direction = function () {
	return this.directionParam.GetValueVector3();
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.set_Direction = function (value) {
	this.directionParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.get_DiffuseColor = function () {
	return this.cachedDiffuseColor;
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.set_DiffuseColor = function (value) {

	if (this.enabled) {
		this.diffuseColorParam.SetValue(value.MemberwiseClone());
	}
	this.cachedDiffuseColor = value.MemberwiseClone();
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.get_SpecularColor = function () {
	return this.cachedSpecularColor;
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.set_SpecularColor = function (value) {

	if (this.enabled) {
		this.specularColorParam.SetValue(value.MemberwiseClone());
	}
	this.cachedSpecularColor = value.MemberwiseClone();
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype._ctor = function (direction, diffuseColor, specularColor) {
	System.Object.prototype._ctor.call(this);
	this.directionParam = direction;
	this.diffuseColorParam = diffuseColor;
	this.specularColorParam = specularColor;
};

Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.Copy = function (from) {
	this.enabled = from.enabled;
	this.cachedDiffuseColor = from.cachedDiffuseColor.MemberwiseClone();
	this.cachedSpecularColor = from.cachedSpecularColor.MemberwiseClone();
	this.diffuseColorParam.SetValue(this.cachedDiffuseColor.MemberwiseClone());
	this.specularColorParam.SetValue(this.cachedSpecularColor.MemberwiseClone());
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype, "Enabled", {
		get: Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.get_Enabled, 
		set: Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.set_Enabled
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype, "Direction", {
		get: Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.get_Direction, 
		set: Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.set_Direction
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype, "DiffuseColor", {
		get: Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.get_DiffuseColor, 
		set: Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.set_DiffuseColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype, "SpecularColor", {
		get: Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.get_SpecularColor, 
		set: Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype.set_SpecularColor
	});

Object.seal(Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.BasicDirectionalLight);
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.basicTextureParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.fogEnabledParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.fogStartParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.fogEndParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.fogColorParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.worldParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.viewParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.projectionParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.diffuseColorParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.specularColorParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.emissiveColorParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.specularPowerParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.alphaParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.ambientLightColorParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.eyePositionParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.shaderIndexParam = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.light0 = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.light1 = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.light2 = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.basicShaderTechnique = null;
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.lightingEnabled = new System.Boolean();
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.textureEnabled = new System.Boolean();
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.vertexColorEnabled = new System.Boolean();
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.preferPerPixelLighting = new System.Boolean();
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.hasPS20 = new System.Boolean();
Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_World = function () {
	return this.worldParam.GetValueMatrix();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_World = function (value) {
	this.worldParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_View = function () {
	return this.viewParam.GetValueMatrix();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_View = function (value) {
	this.viewParam.SetValue(value.MemberwiseClone());
	this.eyePositionParam.SetValue(Microsoft.Xna.Framework.Matrix.Invert(value.MemberwiseClone()).Translation);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_Projection = function () {
	return this.projectionParam.GetValueMatrix();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_Projection = function (value) {
	this.projectionParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_DiffuseColor = function () {
	return this.diffuseColorParam.GetValueVector3();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_DiffuseColor = function (value) {
	this.diffuseColorParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_SpecularColor = function () {
	return this.specularColorParam.GetValueVector3();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_SpecularColor = function (value) {
	this.specularColorParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_EmissiveColor = function () {
	return this.emissiveColorParam.GetValueVector3();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_EmissiveColor = function (value) {
	this.emissiveColorParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_SpecularPower = function () {
	return this.specularPowerParam.GetValueSingle();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_SpecularPower = function (value) {
	this.specularPowerParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_Alpha = function () {
	return this.alphaParam.GetValueSingle();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_Alpha = function (value) {
	this.alphaParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_LightingEnabled = function () {
	return this.lightingEnabled;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_LightingEnabled = function (value) {
	this.lightingEnabled = value;
	this.UpdateShaderIndex();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_AmbientLightColor = function () {
	return this.ambientLightColorParam.GetValueVector3();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_AmbientLightColor = function (value) {
	this.ambientLightColorParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_DirectionalLight0 = function () {
	return this.light0;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_DirectionalLight1 = function () {
	return this.light1;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_DirectionalLight2 = function () {
	return this.light2;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_FogEnabled = function () {
	return this.fogEnabledParam.GetValueBoolean();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_FogEnabled = function (value) {
	this.fogEnabledParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_FogStart = function () {
	return this.fogStartParam.GetValueSingle();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_FogStart = function (value) {
	this.fogStartParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_FogEnd = function () {
	return this.fogEndParam.GetValueSingle();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_FogEnd = function (value) {
	this.fogEndParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_FogColor = function () {
	return this.fogColorParam.GetValueVector3();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_FogColor = function (value) {
	this.fogColorParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_TextureEnabled = function () {
	return this.textureEnabled;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_TextureEnabled = function (value) {
	this.textureEnabled = value;
	this.UpdateShaderIndex();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_VertexColorEnabled = function () {
	return this.vertexColorEnabled;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_VertexColorEnabled = function (value) {
	this.vertexColorEnabled = value;
	this.UpdateShaderIndex();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_Texture = function () {
	return this.basicTextureParam.GetValueTexture2D();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_Texture = function (value) {
	this.basicTextureParam.SetValue(value);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_PreferPerPixelLighting = function () {
	return this.preferPerPixelLighting;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_PreferPerPixelLighting = function (value) {
	this.preferPerPixelLighting = value;
	this.UpdateShaderIndex();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype._ctor$0 = function (device, clone) {
	Microsoft.Xna.Framework.Graphics.Effect.prototype._ctor.call(this, device, clone);
	this.CacheEffectParams(device);
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype._ctor$1 = function (device, effectPool) {
	Microsoft.Xna.Framework.Graphics.Effect.prototype._ctor.call(
		this, 
		device, 
		Microsoft.Xna.Framework.Graphics.BasicEffectCode.Code, 
		Microsoft.Xna.Framework.Graphics.CompilerOptions.None, 
		effectPool
	);
	this.CacheEffectParams(device);
	this.InitializeEffectParams();
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.Clone = function (device) {
	var basicEffect = new Microsoft.Xna.Framework.Graphics.BasicEffect(device, this);
	basicEffect.preferPerPixelLighting = this.preferPerPixelLighting;
	basicEffect.lightingEnabled = this.lightingEnabled;
	basicEffect.textureEnabled = this.textureEnabled;
	basicEffect.vertexColorEnabled = this.vertexColorEnabled;
	basicEffect.UpdateShaderIndex();
	basicEffect.DirectionalLight0.Copy(this.DirectionalLight0);
	basicEffect.DirectionalLight1.Copy(this.DirectionalLight1);
	basicEffect.DirectionalLight2.Copy(this.DirectionalLight2);
	return basicEffect;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.EnableDefaultLighting = function () {
	var vector = new Microsoft.Xna.Framework.Vector3();
	this.LightingEnabled = true;
	this.AmbientLightColor = new Microsoft.Xna.Framework.Vector3(0.05333331972360611, 0.098823539912700653, 0.18196080625057221);
	vector._ctor(1, 0.960784375667572, 0.80784320831298828);
	this.DirectionalLight0.DiffuseColor = vector.MemberwiseClone();
	this.DirectionalLight0.Direction = new Microsoft.Xna.Framework.Vector3(-0.52654081583023071, -0.57357650995254517, -0.62750691175460815);
	this.DirectionalLight0.SpecularColor = vector.MemberwiseClone();
	this.DirectionalLight0.Enabled = true;
	this.DirectionalLight1.DiffuseColor = new Microsoft.Xna.Framework.Vector3(0.96470588445663452, 0.760784387588501, 0.4078432023525238);
	this.DirectionalLight1.Direction = new Microsoft.Xna.Framework.Vector3(0.71984642744064331, 0.34202009439468384, 0.60402268171310425);
	this.DirectionalLight1.SpecularColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.DirectionalLight1.Enabled = true;
	vector._ctor(0.3231373131275177, 0.36078441143035889, 0.39372551441192627);
	this.DirectionalLight2.DiffuseColor = vector.MemberwiseClone();
	this.DirectionalLight2.Direction = new Microsoft.Xna.Framework.Vector3(0.45451951026916504, -0.76604437828063965, 0.45451951026916504);
	this.DirectionalLight2.SpecularColor = vector.MemberwiseClone();
	this.DirectionalLight2.Enabled = true;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.CacheEffectParams = function (device) {
	var maxPixelShaderProfile = device.GraphicsDeviceCapabilities.MaxPixelShaderProfile;
	this.hasPS20 = ((maxPixelShaderProfile === Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_2_0) || 
		(maxPixelShaderProfile === Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_2_A) || 
		(maxPixelShaderProfile === Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_2_B) || 
		(maxPixelShaderProfile === Microsoft.Xna.Framework.Graphics.ShaderProfile.PS_3_0) || 
		(maxPixelShaderProfile === Microsoft.Xna.Framework.Graphics.ShaderProfile.XPS_3_0));
	this.basicShaderTechnique = this.Techniques.get_Item("BasicEffect");
	this.basicTextureParam = this.Parameters.get_Item("BasicTexture");
	this.fogEnabledParam = this.Parameters.get_Item("FogEnabled");
	this.fogStartParam = this.Parameters.get_Item("FogStart");
	this.fogEndParam = this.Parameters.get_Item("FogEnd");
	this.fogColorParam = this.Parameters.get_Item("FogColor");
	this.worldParam = this.Parameters.get_Item("World");
	this.viewParam = this.Parameters.get_Item("View");
	this.projectionParam = this.Parameters.get_Item("Projection");
	this.diffuseColorParam = this.Parameters.get_Item("DiffuseColor");
	this.specularColorParam = this.Parameters.get_Item("SpecularColor");
	this.emissiveColorParam = this.Parameters.get_Item("EmissiveColor");
	this.specularPowerParam = this.Parameters.get_Item("SpecularPower");
	this.alphaParam = this.Parameters.get_Item("Alpha");
	this.ambientLightColorParam = this.Parameters.get_Item("AmbientLightColor");
	this.eyePositionParam = this.Parameters.get_Item("EyePosition");
	this.shaderIndexParam = this.Parameters.get_Item("ShaderIndex");
	this.light0 = new Microsoft.Xna.Framework.Graphics.BasicDirectionalLight(this.Parameters.get_Item("DirLight0Direction"), this.Parameters.get_Item("DirLight0DiffuseColor"), this.Parameters.get_Item("DirLight0SpecularColor"));
	this.light1 = new Microsoft.Xna.Framework.Graphics.BasicDirectionalLight(this.Parameters.get_Item("DirLight1Direction"), this.Parameters.get_Item("DirLight1DiffuseColor"), this.Parameters.get_Item("DirLight1SpecularColor"));
	this.light2 = new Microsoft.Xna.Framework.Graphics.BasicDirectionalLight(this.Parameters.get_Item("DirLight2Direction"), this.Parameters.get_Item("DirLight2DiffuseColor"), this.Parameters.get_Item("DirLight2SpecularColor"));
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.InitializeEffectParams = function () {
	this.World = Microsoft.Xna.Framework.Matrix.Identity;
	this.View = Microsoft.Xna.Framework.Matrix.Identity;
	this.Projection = Microsoft.Xna.Framework.Matrix.Identity;
	this.FogEnabled = false;
	this.FogStart = 0;
	this.FogEnd = 1;
	this.FogColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.DiffuseColor = Microsoft.Xna.Framework.Vector3.One;
	this.SpecularColor = Microsoft.Xna.Framework.Vector3.One;
	this.EmissiveColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.Alpha = 1;
	this.SpecularPower = 16;
	this.preferPerPixelLighting = false;
	this.lightingEnabled = false;
	this.textureEnabled = false;
	this.vertexColorEnabled = false;
	this.UpdateShaderIndex();
	this.light0.Enabled = false;
	this.light0.Direction = Microsoft.Xna.Framework.Vector3.Up;
	this.light0.DiffuseColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.light0.SpecularColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.light1.Enabled = false;
	this.light1.Direction = Microsoft.Xna.Framework.Vector3.Up;
	this.light1.DiffuseColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.light1.SpecularColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.light2.Enabled = false;
	this.light2.Direction = Microsoft.Xna.Framework.Vector3.Up;
	this.light2.DiffuseColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.light2.SpecularColor = Microsoft.Xna.Framework.Vector3.Zero;
	this.CurrentTechnique = this;
};

Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.UpdateShaderIndex = function () {
	var num = (this.vertexColorEnabled ? 1 : 0 | this.textureEnabled ? 2 : 0 | this.lightingEnabled ? 4 : 0);
	num += (this.lightingEnabled && 
		this.preferPerPixelLighting && 
		this.hasPS20) ? 4 : 0;
	this.shaderIndexParam.SetValue(num);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Graphics.BasicEffect]], 
		["_ctor$1", [Microsoft.Xna.Framework.Graphics.GraphicsDevice, Microsoft.Xna.Framework.Graphics.EffectPool]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "World", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_World, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_World
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "View", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_View, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_View
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "Projection", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_Projection, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_Projection
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "DiffuseColor", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_DiffuseColor, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_DiffuseColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "SpecularColor", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_SpecularColor, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_SpecularColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "EmissiveColor", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_EmissiveColor, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_EmissiveColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "SpecularPower", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_SpecularPower, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_SpecularPower
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "Alpha", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_Alpha, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_Alpha
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "LightingEnabled", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_LightingEnabled, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_LightingEnabled
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "AmbientLightColor", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_AmbientLightColor, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_AmbientLightColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "DirectionalLight0", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_DirectionalLight0
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "DirectionalLight1", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_DirectionalLight1
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "DirectionalLight2", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_DirectionalLight2
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "FogEnabled", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_FogEnabled, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_FogEnabled
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "FogStart", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_FogStart, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_FogStart
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "FogEnd", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_FogEnd, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_FogEnd
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "FogColor", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_FogColor, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_FogColor
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "TextureEnabled", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_TextureEnabled, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_TextureEnabled
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "VertexColorEnabled", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_VertexColorEnabled, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_VertexColorEnabled
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "Texture", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_Texture, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_Texture
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype, "PreferPerPixelLighting", {
		get: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.get_PreferPerPixelLighting, 
		set: Microsoft.Xna.Framework.Graphics.BasicEffect.prototype.set_PreferPerPixelLighting
	});

Object.seal(Microsoft.Xna.Framework.Graphics.BasicEffect.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.BasicEffect);
Microsoft.Xna.Framework.Graphics.BasicEffectCode.Code = null;
Microsoft.Xna.Framework.Graphics.BasicEffectCode._cctor = function () {
	Microsoft.Xna.Framework.Graphics.BasicEffectCode.Code = JSIL.Array.New(System.Byte, [1, 9, 255, 254, 12, 8, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 0, 0, 66, 97, 115, 105, 99, 84, 101, 120, 116, 117, 114, 101, 0, 0, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 164, 0, 0, 0, 0, 1, 0, 0, 72, 0, 0, 0, 68, 0, 0, 0, 171, 0, 0, 0, 0, 1, 0, 0, 96, 0, 0, 0, 92, 0, 0, 0, 170, 0, 0, 0, 0, 1, 0, 0, 128, 0, 0, 0, 124, 0, 0, 0, 169, 0, 0, 0, 0, 1, 0, 0, 160, 0, 0, 0, 156, 0, 0, 0, 15, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 52, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 100, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 148, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 70, 111, 103, 69, 110, 100, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 200, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 3, 0, 0, 0, 1, 0, 0, 0, 56, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 108, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 65, 108, 112, 104, 97, 0, 59, 0, 3, 0, 0, 0, 1, 0, 0, 0, 160, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 220, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 76, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 140, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 204, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 84, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 148, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 216, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 28, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 92, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 160, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 24, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 87, 111, 114, 108, 100, 0, 59, 0, 3, 0, 0, 0, 2, 0, 0, 0, 128, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 86, 105, 101, 119, 0, 1, 59, 0, 3, 0, 0, 0, 2, 0, 0, 0, 232, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 24, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 83, 104, 97, 100, 101, 114, 73, 110, 100, 101, 120, 0, 16, 0, 0, 0, 4, 0, 0, 0, 108, 7, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 8, 0, 0, 0, 86, 83, 65, 114, 114, 97, 121, 0, 15, 0, 0, 0, 4, 0, 0, 0, 188, 7, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 8, 0, 0, 0, 80, 83, 65, 114, 114, 97, 121, 0, 27, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 66, 97, 115, 105, 99, 69, 102, 102, 101, 99, 116, 0, 28, 0, 0, 0, 1, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 4, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 1, 0, 0, 48, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 1, 0, 0, 96, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 1, 0, 0, 144, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 1, 0, 0, 188, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 1, 0, 0, 244, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 2, 0, 0, 44, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 2, 0, 0, 104, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 2, 0, 0, 148, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 2, 0, 0, 208, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 2, 0, 0, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 3, 0, 0, 64, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 3, 0, 0, 128, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 3, 0, 0, 192, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 3, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 4, 0, 0, 72, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 4, 0, 0, 136, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 204, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 4, 0, 0, 16, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 5, 0, 0, 80, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 5, 0, 0, 148, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 188, 5, 0, 0, 216, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 6, 0, 0, 64, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 6, 0, 0, 168, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 6, 0, 0, 20, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 7, 0, 0, 60, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 7, 0, 0, 140, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 248, 7, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 204, 7, 0, 0, 200, 7, 0, 0, 147, 0, 0, 0, 0, 0, 0, 0, 228, 7, 0, 0, 224, 7, 0, 0, 25, 0, 0, 0, 3, 0, 0, 0, 15, 0, 0, 0, 216, 0, 0, 0, 1, 1, 255, 255, 254, 255, 39, 0, 67, 84, 65, 66, 28, 0, 0, 0, 99, 0, 0, 0, 1, 1, 255, 255, 1, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 92, 0, 0, 0, 48, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 60, 0, 0, 0, 76, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 2, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 144, 1, 0, 228, 144, 18, 0, 0, 0, 0, 0, 7, 128, 1, 0, 255, 144, 3, 0, 228, 160, 0, 0, 228, 128, 1, 0, 0, 64, 0, 0, 8, 128, 0, 0, 255, 144, 255, 255, 0, 0, 16, 0, 0, 0, 216, 0, 0, 0, 1, 1, 255, 255, 254, 255, 39, 0, 67, 84, 65, 66, 28, 0, 0, 0, 99, 0, 0, 0, 1, 1, 255, 255, 1, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 92, 0, 0, 0, 48, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 60, 0, 0, 0, 76, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 2, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 144, 1, 0, 228, 144, 18, 0, 0, 0, 0, 0, 7, 128, 1, 0, 255, 144, 3, 0, 228, 160, 0, 0, 228, 128, 1, 0, 0, 64, 0, 0, 8, 128, 0, 0, 255, 144, 255, 255, 0, 0, 17, 0, 0, 0, 36, 1, 0, 0, 1, 1, 255, 255, 254, 255, 52, 0, 67, 84, 65, 66, 28, 0, 0, 0, 151, 0, 0, 0, 1, 1, 255, 255, 2, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 144, 0, 0, 0, 68, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 80, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 0, 171, 4, 0, 12, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 66, 0, 0, 0, 0, 0, 15, 176, 5, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 176, 0, 0, 228, 144, 2, 0, 0, 0, 1, 0, 7, 128, 0, 0, 228, 128, 1, 0, 228, 144, 1, 0, 0, 64, 0, 0, 8, 128, 0, 0, 255, 128, 18, 0, 0, 0, 0, 0, 7, 128, 1, 0, 255, 144, 3, 0, 228, 160, 1, 0, 228, 128, 255, 255, 0, 0, 18, 0, 0, 0, 36, 1, 0, 0, 1, 1, 255, 255, 254, 255, 52, 0, 67, 84, 65, 66, 28, 0, 0, 0, 151, 0, 0, 0, 1, 1, 255, 255, 2, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 144, 0, 0, 0, 68, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 80, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 0, 171, 4, 0, 12, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 66, 0, 0, 0, 0, 0, 15, 176, 5, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 176, 0, 0, 228, 144, 2, 0, 0, 0, 1, 0, 7, 128, 0, 0, 228, 128, 1, 0, 228, 144, 1, 0, 0, 64, 0, 0, 8, 128, 0, 0, 255, 128, 18, 0, 0, 0, 0, 0, 7, 128, 1, 0, 255, 144, 3, 0, 228, 160, 1, 0, 228, 128, 255, 255, 0, 0, 19, 0, 0, 0, 216, 0, 0, 0, 1, 1, 255, 255, 254, 255, 39, 0, 67, 84, 65, 66, 28, 0, 0, 0, 99, 0, 0, 0, 1, 1, 255, 255, 1, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 92, 0, 0, 0, 48, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 60, 0, 0, 0, 76, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 2, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 144, 1, 0, 228, 144, 18, 0, 0, 0, 0, 0, 7, 128, 1, 0, 255, 144, 3, 0, 228, 160, 0, 0, 228, 128, 1, 0, 0, 64, 0, 0, 8, 128, 0, 0, 255, 144, 255, 255, 0, 0, 20, 0, 0, 0, 216, 0, 0, 0, 1, 1, 255, 255, 254, 255, 39, 0, 67, 84, 65, 66, 28, 0, 0, 0, 99, 0, 0, 0, 1, 1, 255, 255, 1, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 92, 0, 0, 0, 48, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 60, 0, 0, 0, 76, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 2, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 144, 1, 0, 228, 144, 18, 0, 0, 0, 0, 0, 7, 128, 1, 0, 255, 144, 3, 0, 228, 160, 0, 0, 228, 128, 1, 0, 0, 64, 0, 0, 8, 128, 0, 0, 255, 144, 255, 255, 0, 0, 21, 0, 0, 0, 36, 1, 0, 0, 1, 1, 255, 255, 254, 255, 52, 0, 67, 84, 65, 66, 28, 0, 0, 0, 151, 0, 0, 0, 1, 1, 255, 255, 2, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 144, 0, 0, 0, 68, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 80, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 0, 171, 4, 0, 12, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 66, 0, 0, 0, 0, 0, 15, 176, 5, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 176, 0, 0, 228, 144, 2, 0, 0, 0, 1, 0, 7, 128, 0, 0, 228, 128, 1, 0, 228, 144, 1, 0, 0, 64, 0, 0, 8, 128, 0, 0, 255, 128, 18, 0, 0, 0, 0, 0, 7, 128, 1, 0, 255, 144, 3, 0, 228, 160, 1, 0, 228, 128, 255, 255, 0, 0, 22, 0, 0, 0, 36, 1, 0, 0, 1, 1, 255, 255, 254, 255, 52, 0, 67, 84, 65, 66, 28, 0, 0, 0, 151, 0, 0, 0, 1, 1, 255, 255, 2, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 144, 0, 0, 0, 68, 0, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 80, 0, 0, 0, 96, 0, 0, 0, 112, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 0, 171, 4, 0, 12, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 66, 0, 0, 0, 0, 0, 15, 176, 5, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 176, 0, 0, 228, 144, 2, 0, 0, 0, 1, 0, 7, 128, 0, 0, 228, 128, 1, 0, 228, 144, 1, 0, 0, 64, 0, 0, 8, 128, 0, 0, 255, 128, 18, 0, 0, 0, 0, 0, 7, 128, 1, 0, 255, 144, 3, 0, 228, 160, 1, 0, 228, 128, 255, 255, 0, 0, 23, 0, 0, 0, 32, 6, 0, 0, 0, 2, 255, 255, 254, 255, 187, 0, 67, 84, 65, 66, 28, 0, 0, 0, 179, 2, 0, 0, 0, 2, 255, 255, 16, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 172, 2, 0, 0, 92, 1, 0, 0, 2, 0, 10, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 144, 1, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 157, 1, 0, 0, 2, 0, 12, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 179, 1, 0, 0, 2, 0, 11, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 198, 1, 0, 0, 2, 0, 13, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 221, 1, 0, 0, 2, 0, 15, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 243, 1, 0, 0, 2, 0, 14, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 6, 2, 0, 0, 2, 0, 16, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 29, 2, 0, 0, 2, 0, 18, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 51, 2, 0, 0, 2, 0, 17, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 70, 2, 0, 0, 2, 0, 19, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 93, 2, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 107, 2, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 119, 2, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 128, 2, 0, 0, 2, 0, 8, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 142, 2, 0, 0, 2, 0, 9, 0, 1, 0, 2, 0, 156, 2, 0, 0, 128, 1, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 50, 95, 48, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 5, 0, 0, 15, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 2, 0, 0, 0, 128, 0, 0, 15, 176, 31, 0, 0, 2, 0, 0, 0, 128, 1, 0, 7, 176, 31, 0, 0, 2, 0, 0, 0, 128, 0, 0, 15, 144, 2, 0, 0, 3, 3, 0, 7, 128, 0, 0, 228, 177, 4, 0, 228, 160, 8, 0, 0, 3, 0, 0, 1, 128, 3, 0, 228, 128, 3, 0, 228, 128, 7, 0, 0, 2, 0, 0, 8, 128, 0, 0, 0, 128, 4, 0, 0, 4, 1, 0, 7, 128, 3, 0, 228, 128, 0, 0, 255, 128, 11, 0, 228, 161, 36, 0, 0, 2, 0, 0, 7, 128, 1, 0, 228, 128, 36, 0, 0, 2, 2, 0, 7, 128, 1, 0, 228, 176, 8, 0, 0, 3, 0, 0, 1, 128, 0, 0, 228, 128, 2, 0, 228, 128, 11, 0, 0, 3, 2, 0, 8, 128, 0, 0, 0, 128, 0, 0, 0, 160, 32, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 160, 8, 0, 0, 3, 0, 0, 1, 128, 11, 0, 228, 161, 2, 0, 228, 128, 5, 0, 0, 3, 1, 0, 7, 128, 1, 0, 255, 128, 13, 0, 228, 160, 11, 0, 0, 3, 2, 0, 8, 128, 0, 0, 0, 128, 0, 0, 0, 160, 5, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 2, 0, 255, 128, 1, 0, 0, 2, 0, 0, 7, 128, 12, 0, 228, 160, 4, 0, 0, 4, 0, 0, 7, 128, 0, 0, 228, 128, 2, 0, 255, 128, 10, 0, 228, 160, 88, 0, 0, 4, 1, 0, 7, 128, 1, 0, 255, 129, 0, 0, 0, 160, 1, 0, 228, 128, 4, 0, 0, 4, 5, 0, 7, 128, 3, 0, 228, 128, 0, 0, 255, 128, 14, 0, 228, 161, 36, 0, 0, 2, 4, 0, 7, 128, 5, 0, 228, 128, 8, 0, 0, 3, 4, 0, 1, 128, 4, 0, 228, 128, 2, 0, 228, 128, 4, 0, 0, 4, 5, 0, 7, 128, 3, 0, 228, 128, 0, 0, 255, 128, 17, 0, 228, 161, 11, 0, 0, 3, 1, 0, 8, 128, 4, 0, 0, 128, 0, 0, 0, 160, 32, 0, 0, 3, 0, 0, 8, 128, 1, 0, 255, 128, 9, 0, 0, 160, 8, 0, 0, 3, 4, 0, 1, 128, 14, 0, 228, 161, 2, 0, 228, 128, 4, 0, 0, 4, 3, 0, 7, 128, 16, 0, 228, 160, 0, 0, 255, 128, 1, 0, 228, 128, 11, 0, 0, 3, 0, 0, 8, 128, 4, 0, 0, 128, 0, 0, 0, 160, 4, 0, 0, 4, 0, 0, 7, 128, 15, 0, 228, 160, 0, 0, 255, 128, 0, 0, 228, 128, 36, 0, 0, 2, 4, 0, 7, 128, 5, 0, 228, 128, 5, 0, 0, 3, 0, 0, 8, 128, 0, 0, 255, 128, 0, 0, 255, 128, 8, 0, 0, 3, 4, 0, 1, 128, 4, 0, 228, 128, 2, 0, 228, 128, 88, 0, 0, 4, 1, 0, 7, 128, 0, 0, 255, 129, 1, 0, 228, 128, 3, 0, 228, 128, 11, 0, 0, 3, 1, 0, 8, 128, 4, 0, 0, 128, 0, 0, 0, 160, 8, 0, 0, 3, 3, 0, 1, 128, 17, 0, 228, 161, 2, 0, 228, 128, 32, 0, 0, 3, 0, 0, 8, 128, 1, 0, 255, 128, 9, 0, 0, 160, 4, 0, 0, 4, 2, 0, 7, 128, 19, 0, 228, 160, 0, 0, 255, 128, 1, 0, 228, 128, 11, 0, 0, 3, 1, 0, 8, 128, 3, 0, 0, 128, 0, 0, 0, 160, 5, 0, 0, 3, 0, 0, 8, 128, 1, 0, 255, 128, 1, 0, 255, 128, 4, 0, 0, 4, 0, 0, 7, 128, 18, 0, 228, 160, 1, 0, 255, 128, 0, 0, 228, 128, 88, 0, 0, 4, 1, 0, 7, 128, 0, 0, 255, 129, 1, 0, 228, 128, 2, 0, 228, 128, 5, 0, 0, 3, 1, 0, 7, 128, 1, 0, 228, 128, 8, 0, 228, 160, 1, 0, 0, 2, 2, 0, 7, 128, 5, 0, 228, 160, 4, 0, 0, 4, 0, 0, 7, 128, 0, 0, 228, 128, 2, 0, 228, 128, 7, 0, 228, 160, 4, 0, 0, 4, 1, 0, 7, 128, 0, 0, 228, 128, 0, 0, 228, 144, 1, 0, 228, 128, 18, 0, 0, 4, 0, 0, 7, 128, 0, 0, 255, 176, 3, 0, 228, 160, 1, 0, 228, 128, 1, 0, 0, 2, 0, 0, 8, 128, 0, 0, 255, 144, 1, 0, 0, 2, 0, 8, 15, 128, 0, 0, 228, 128, 255, 255, 0, 0, 24, 0, 0, 0, 32, 6, 0, 0, 0, 2, 255, 255, 254, 255, 187, 0, 67, 84, 65, 66, 28, 0, 0, 0, 179, 2, 0, 0, 0, 2, 255, 255, 16, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 172, 2, 0, 0, 92, 1, 0, 0, 2, 0, 10, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 144, 1, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 157, 1, 0, 0, 2, 0, 12, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 179, 1, 0, 0, 2, 0, 11, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 198, 1, 0, 0, 2, 0, 13, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 221, 1, 0, 0, 2, 0, 15, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 243, 1, 0, 0, 2, 0, 14, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 6, 2, 0, 0, 2, 0, 16, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 29, 2, 0, 0, 2, 0, 18, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 51, 2, 0, 0, 2, 0, 17, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 70, 2, 0, 0, 2, 0, 19, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 93, 2, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 107, 2, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 119, 2, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 128, 2, 0, 0, 2, 0, 8, 0, 1, 0, 2, 0, 112, 1, 0, 0, 128, 1, 0, 0, 142, 2, 0, 0, 2, 0, 9, 0, 1, 0, 2, 0, 156, 2, 0, 0, 128, 1, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 50, 95, 48, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 5, 0, 0, 15, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 2, 0, 0, 0, 128, 0, 0, 15, 176, 31, 0, 0, 2, 0, 0, 0, 128, 1, 0, 7, 176, 31, 0, 0, 2, 0, 0, 0, 128, 0, 0, 15, 144, 2, 0, 0, 3, 3, 0, 7, 128, 0, 0, 228, 177, 4, 0, 228, 160, 8, 0, 0, 3, 0, 0, 1, 128, 3, 0, 228, 128, 3, 0, 228, 128, 7, 0, 0, 2, 0, 0, 8, 128, 0, 0, 0, 128, 4, 0, 0, 4, 1, 0, 7, 128, 3, 0, 228, 128, 0, 0, 255, 128, 11, 0, 228, 161, 36, 0, 0, 2, 0, 0, 7, 128, 1, 0, 228, 128, 36, 0, 0, 2, 2, 0, 7, 128, 1, 0, 228, 176, 8, 0, 0, 3, 0, 0, 1, 128, 0, 0, 228, 128, 2, 0, 228, 128, 11, 0, 0, 3, 2, 0, 8, 128, 0, 0, 0, 128, 0, 0, 0, 160, 32, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 160, 8, 0, 0, 3, 0, 0, 1, 128, 11, 0, 228, 161, 2, 0, 228, 128, 5, 0, 0, 3, 1, 0, 7, 128, 1, 0, 255, 128, 13, 0, 228, 160, 11, 0, 0, 3, 2, 0, 8, 128, 0, 0, 0, 128, 0, 0, 0, 160, 5, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 2, 0, 255, 128, 1, 0, 0, 2, 0, 0, 7, 128, 12, 0, 228, 160, 4, 0, 0, 4, 0, 0, 7, 128, 0, 0, 228, 128, 2, 0, 255, 128, 10, 0, 228, 160, 88, 0, 0, 4, 1, 0, 7, 128, 1, 0, 255, 129, 0, 0, 0, 160, 1, 0, 228, 128, 4, 0, 0, 4, 5, 0, 7, 128, 3, 0, 228, 128, 0, 0, 255, 128, 14, 0, 228, 161, 36, 0, 0, 2, 4, 0, 7, 128, 5, 0, 228, 128, 8, 0, 0, 3, 4, 0, 1, 128, 4, 0, 228, 128, 2, 0, 228, 128, 4, 0, 0, 4, 5, 0, 7, 128, 3, 0, 228, 128, 0, 0, 255, 128, 17, 0, 228, 161, 11, 0, 0, 3, 1, 0, 8, 128, 4, 0, 0, 128, 0, 0, 0, 160, 32, 0, 0, 3, 0, 0, 8, 128, 1, 0, 255, 128, 9, 0, 0, 160, 8, 0, 0, 3, 4, 0, 1, 128, 14, 0, 228, 161, 2, 0, 228, 128, 4, 0, 0, 4, 3, 0, 7, 128, 16, 0, 228, 160, 0, 0, 255, 128, 1, 0, 228, 128, 11, 0, 0, 3, 0, 0, 8, 128, 4, 0, 0, 128, 0, 0, 0, 160, 4, 0, 0, 4, 0, 0, 7, 128, 15, 0, 228, 160, 0, 0, 255, 128, 0, 0, 228, 128, 36, 0, 0, 2, 4, 0, 7, 128, 5, 0, 228, 128, 5, 0, 0, 3, 0, 0, 8, 128, 0, 0, 255, 128, 0, 0, 255, 128, 8, 0, 0, 3, 4, 0, 1, 128, 4, 0, 228, 128, 2, 0, 228, 128, 88, 0, 0, 4, 1, 0, 7, 128, 0, 0, 255, 129, 1, 0, 228, 128, 3, 0, 228, 128, 11, 0, 0, 3, 1, 0, 8, 128, 4, 0, 0, 128, 0, 0, 0, 160, 8, 0, 0, 3, 3, 0, 1, 128, 17, 0, 228, 161, 2, 0, 228, 128, 32, 0, 0, 3, 0, 0, 8, 128, 1, 0, 255, 128, 9, 0, 0, 160, 4, 0, 0, 4, 2, 0, 7, 128, 19, 0, 228, 160, 0, 0, 255, 128, 1, 0, 228, 128, 11, 0, 0, 3, 1, 0, 8, 128, 3, 0, 0, 128, 0, 0, 0, 160, 5, 0, 0, 3, 0, 0, 8, 128, 1, 0, 255, 128, 1, 0, 255, 128, 4, 0, 0, 4, 0, 0, 7, 128, 18, 0, 228, 160, 1, 0, 255, 128, 0, 0, 228, 128, 88, 0, 0, 4, 1, 0, 7, 128, 0, 0, 255, 129, 1, 0, 228, 128, 2, 0, 228, 128, 5, 0, 0, 3, 1, 0, 7, 128, 1, 0, 228, 128, 8, 0, 228, 160, 1, 0, 0, 2, 2, 0, 7, 128, 5, 0, 228, 160, 4, 0, 0, 4, 0, 0, 7, 128, 0, 0, 228, 128, 2, 0, 228, 128, 7, 0, 228, 160, 4, 0, 0, 4, 1, 0, 7, 128, 0, 0, 228, 128, 0, 0, 228, 144, 1, 0, 228, 128, 18, 0, 0, 4, 0, 0, 7, 128, 0, 0, 255, 176, 3, 0, 228, 160, 1, 0, 228, 128, 1, 0, 0, 2, 0, 0, 8, 128, 0, 0, 255, 144, 1, 0, 0, 2, 0, 8, 15, 128, 0, 0, 228, 128, 255, 255, 0, 0, 25, 0, 0, 0, 140, 6, 0, 0, 0, 2, 255, 255, 254, 255, 200, 0, 67, 84, 65, 66, 28, 0, 0, 0, 231, 2, 0, 0, 0, 2, 255, 255, 17, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 224, 2, 0, 0, 112, 1, 0, 0, 2, 0, 10, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 164, 1, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 177, 1, 0, 0, 2, 0, 12, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 199, 1, 0, 0, 2, 0, 11, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 218, 1, 0, 0, 2, 0, 13, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 241, 1, 0, 0, 2, 0, 15, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 7, 2, 0, 0, 2, 0, 14, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 26, 2, 0, 0, 2, 0, 16, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 49, 2, 0, 0, 2, 0, 18, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 71, 2, 0, 0, 2, 0, 17, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 90, 2, 0, 0, 2, 0, 19, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 113, 2, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 127, 2, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 139, 2, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 148, 2, 0, 0, 2, 0, 8, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 162, 2, 0, 0, 2, 0, 9, 0, 1, 0, 2, 0, 176, 2, 0, 0, 148, 1, 0, 0, 192, 2, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 208, 2, 0, 0, 0, 0, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 0, 171, 4, 0, 12, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 50, 95, 48, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 5, 0, 0, 15, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 2, 0, 0, 0, 128, 0, 0, 3, 176, 31, 0, 0, 2, 0, 0, 0, 128, 1, 0, 15, 176, 31, 0, 0, 2, 0, 0, 0, 128, 2, 0, 7, 176, 31, 0, 0, 2, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 2, 0, 0, 0, 144, 0, 8, 15, 160, 66, 0, 0, 3, 0, 0, 15, 128, 0, 0, 228, 176, 0, 8, 228, 160, 2, 0, 0, 3, 4, 0, 7, 128, 1, 0, 228, 177, 4, 0, 228, 160, 8, 0, 0, 3, 1, 0, 1, 128, 4, 0, 228, 128, 4, 0, 228, 128, 7, 0, 0, 2, 1, 0, 8, 128, 1, 0, 0, 128, 4, 0, 0, 4, 2, 0, 7, 128, 4, 0, 228, 128, 1, 0, 255, 128, 11, 0, 228, 161, 36, 0, 0, 2, 1, 0, 7, 128, 2, 0, 228, 128, 36, 0, 0, 2, 3, 0, 7, 128, 2, 0, 228, 176, 8, 0, 0, 3, 1, 0, 1, 128, 1, 0, 228, 128, 3, 0, 228, 128, 11, 0, 0, 3, 3, 0, 8, 128, 1, 0, 0, 128, 0, 0, 0, 160, 32, 0, 0, 3, 2, 0, 8, 128, 3, 0, 255, 128, 9, 0, 0, 160, 8, 0, 0, 3, 1, 0, 1, 128, 11, 0, 228, 161, 3, 0, 228, 128, 5, 0, 0, 3, 2, 0, 7, 128, 2, 0, 255, 128, 13, 0, 228, 160, 11, 0, 0, 3, 3, 0, 8, 128, 1, 0, 0, 128, 0, 0, 0, 160, 5, 0, 0, 3, 2, 0, 8, 128, 3, 0, 255, 128, 3, 0, 255, 128, 1, 0, 0, 2, 1, 0, 7, 128, 12, 0, 228, 160, 4, 0, 0, 4, 1, 0, 7, 128, 1, 0, 228, 128, 3, 0, 255, 128, 10, 0, 228, 160, 88, 0, 0, 4, 2, 0, 7, 128, 2, 0, 255, 129, 0, 0, 0, 160, 2, 0, 228, 128, 4, 0, 0, 4, 6, 0, 7, 128, 4, 0, 228, 128, 1, 0, 255, 128, 14, 0, 228, 161, 36, 0, 0, 2, 5, 0, 7, 128, 6, 0, 228, 128, 8, 0, 0, 3, 5, 0, 1, 128, 5, 0, 228, 128, 3, 0, 228, 128, 4, 0, 0, 4, 6, 0, 7, 128, 4, 0, 228, 128, 1, 0, 255, 128, 17, 0, 228, 161, 11, 0, 0, 3, 2, 0, 8, 128, 5, 0, 0, 128, 0, 0, 0, 160, 32, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 160, 8, 0, 0, 3, 5, 0, 1, 128, 14, 0, 228, 161, 3, 0, 228, 128, 4, 0, 0, 4, 4, 0, 7, 128, 16, 0, 228, 160, 1, 0, 255, 128, 2, 0, 228, 128, 11, 0, 0, 3, 1, 0, 8, 128, 5, 0, 0, 128, 0, 0, 0, 160, 4, 0, 0, 4, 1, 0, 7, 128, 15, 0, 228, 160, 1, 0, 255, 128, 1, 0, 228, 128, 36, 0, 0, 2, 5, 0, 7, 128, 6, 0, 228, 128, 5, 0, 0, 3, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 255, 128, 8, 0, 0, 3, 5, 0, 1, 128, 5, 0, 228, 128, 3, 0, 228, 128, 88, 0, 0, 4, 2, 0, 7, 128, 1, 0, 255, 129, 2, 0, 228, 128, 4, 0, 228, 128, 11, 0, 0, 3, 2, 0, 8, 128, 5, 0, 0, 128, 0, 0, 0, 160, 8, 0, 0, 3, 4, 0, 1, 128, 17, 0, 228, 161, 3, 0, 228, 128, 32, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 160, 4, 0, 0, 4, 3, 0, 7, 128, 19, 0, 228, 160, 1, 0, 255, 128, 2, 0, 228, 128, 11, 0, 0, 3, 2, 0, 8, 128, 4, 0, 0, 128, 0, 0, 0, 160, 5, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 2, 0, 255, 128, 4, 0, 0, 4, 1, 0, 7, 128, 18, 0, 228, 160, 2, 0, 255, 128, 1, 0, 228, 128, 88, 0, 0, 4, 2, 0, 7, 128, 1, 0, 255, 129, 2, 0, 228, 128, 3, 0, 228, 128, 1, 0, 0, 2, 3, 0, 7, 128, 5, 0, 228, 160, 4, 0, 0, 4, 1, 0, 7, 128, 1, 0, 228, 128, 3, 0, 228, 128, 7, 0, 228, 160, 5, 0, 0, 3, 1, 0, 7, 128, 1, 0, 228, 128, 0, 0, 228, 144, 1, 0, 0, 2, 1, 0, 8, 128, 0, 0, 255, 144, 5, 0, 0, 3, 0, 0, 15, 128, 0, 0, 228, 128, 1, 0, 228, 128, 4, 0, 0, 4, 1, 0, 7, 128, 2, 0, 228, 128, 8, 0, 228, 160, 0, 0, 228, 128, 18, 0, 0, 4, 0, 0, 7, 128, 1, 0, 255, 176, 3, 0, 228, 160, 1, 0, 228, 128, 1, 0, 0, 2, 0, 8, 15, 128, 0, 0, 228, 128, 255, 255, 0, 0, 26, 0, 0, 0, 140, 6, 0, 0, 0, 2, 255, 255, 254, 255, 200, 0, 67, 84, 65, 66, 28, 0, 0, 0, 231, 2, 0, 0, 0, 2, 255, 255, 17, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 224, 2, 0, 0, 112, 1, 0, 0, 2, 0, 10, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 164, 1, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 177, 1, 0, 0, 2, 0, 12, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 199, 1, 0, 0, 2, 0, 11, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 218, 1, 0, 0, 2, 0, 13, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 241, 1, 0, 0, 2, 0, 15, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 7, 2, 0, 0, 2, 0, 14, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 26, 2, 0, 0, 2, 0, 16, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 49, 2, 0, 0, 2, 0, 18, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 71, 2, 0, 0, 2, 0, 17, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 90, 2, 0, 0, 2, 0, 19, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 113, 2, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 127, 2, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 139, 2, 0, 0, 2, 0, 3, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 148, 2, 0, 0, 2, 0, 8, 0, 1, 0, 2, 0, 132, 1, 0, 0, 148, 1, 0, 0, 162, 2, 0, 0, 2, 0, 9, 0, 1, 0, 2, 0, 176, 2, 0, 0, 148, 1, 0, 0, 192, 2, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 208, 2, 0, 0, 0, 0, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 0, 171, 4, 0, 12, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 50, 95, 48, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 5, 0, 0, 15, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 2, 0, 0, 0, 128, 0, 0, 3, 176, 31, 0, 0, 2, 0, 0, 0, 128, 1, 0, 15, 176, 31, 0, 0, 2, 0, 0, 0, 128, 2, 0, 7, 176, 31, 0, 0, 2, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 2, 0, 0, 0, 144, 0, 8, 15, 160, 66, 0, 0, 3, 0, 0, 15, 128, 0, 0, 228, 176, 0, 8, 228, 160, 2, 0, 0, 3, 4, 0, 7, 128, 1, 0, 228, 177, 4, 0, 228, 160, 8, 0, 0, 3, 1, 0, 1, 128, 4, 0, 228, 128, 4, 0, 228, 128, 7, 0, 0, 2, 1, 0, 8, 128, 1, 0, 0, 128, 4, 0, 0, 4, 2, 0, 7, 128, 4, 0, 228, 128, 1, 0, 255, 128, 11, 0, 228, 161, 36, 0, 0, 2, 1, 0, 7, 128, 2, 0, 228, 128, 36, 0, 0, 2, 3, 0, 7, 128, 2, 0, 228, 176, 8, 0, 0, 3, 1, 0, 1, 128, 1, 0, 228, 128, 3, 0, 228, 128, 11, 0, 0, 3, 3, 0, 8, 128, 1, 0, 0, 128, 0, 0, 0, 160, 32, 0, 0, 3, 2, 0, 8, 128, 3, 0, 255, 128, 9, 0, 0, 160, 8, 0, 0, 3, 1, 0, 1, 128, 11, 0, 228, 161, 3, 0, 228, 128, 5, 0, 0, 3, 2, 0, 7, 128, 2, 0, 255, 128, 13, 0, 228, 160, 11, 0, 0, 3, 3, 0, 8, 128, 1, 0, 0, 128, 0, 0, 0, 160, 5, 0, 0, 3, 2, 0, 8, 128, 3, 0, 255, 128, 3, 0, 255, 128, 1, 0, 0, 2, 1, 0, 7, 128, 12, 0, 228, 160, 4, 0, 0, 4, 1, 0, 7, 128, 1, 0, 228, 128, 3, 0, 255, 128, 10, 0, 228, 160, 88, 0, 0, 4, 2, 0, 7, 128, 2, 0, 255, 129, 0, 0, 0, 160, 2, 0, 228, 128, 4, 0, 0, 4, 6, 0, 7, 128, 4, 0, 228, 128, 1, 0, 255, 128, 14, 0, 228, 161, 36, 0, 0, 2, 5, 0, 7, 128, 6, 0, 228, 128, 8, 0, 0, 3, 5, 0, 1, 128, 5, 0, 228, 128, 3, 0, 228, 128, 4, 0, 0, 4, 6, 0, 7, 128, 4, 0, 228, 128, 1, 0, 255, 128, 17, 0, 228, 161, 11, 0, 0, 3, 2, 0, 8, 128, 5, 0, 0, 128, 0, 0, 0, 160, 32, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 160, 8, 0, 0, 3, 5, 0, 1, 128, 14, 0, 228, 161, 3, 0, 228, 128, 4, 0, 0, 4, 4, 0, 7, 128, 16, 0, 228, 160, 1, 0, 255, 128, 2, 0, 228, 128, 11, 0, 0, 3, 1, 0, 8, 128, 5, 0, 0, 128, 0, 0, 0, 160, 4, 0, 0, 4, 1, 0, 7, 128, 15, 0, 228, 160, 1, 0, 255, 128, 1, 0, 228, 128, 36, 0, 0, 2, 5, 0, 7, 128, 6, 0, 228, 128, 5, 0, 0, 3, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 255, 128, 8, 0, 0, 3, 5, 0, 1, 128, 5, 0, 228, 128, 3, 0, 228, 128, 88, 0, 0, 4, 2, 0, 7, 128, 1, 0, 255, 129, 2, 0, 228, 128, 4, 0, 228, 128, 11, 0, 0, 3, 2, 0, 8, 128, 5, 0, 0, 128, 0, 0, 0, 160, 8, 0, 0, 3, 4, 0, 1, 128, 17, 0, 228, 161, 3, 0, 228, 128, 32, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 160, 4, 0, 0, 4, 3, 0, 7, 128, 19, 0, 228, 160, 1, 0, 255, 128, 2, 0, 228, 128, 11, 0, 0, 3, 2, 0, 8, 128, 4, 0, 0, 128, 0, 0, 0, 160, 5, 0, 0, 3, 1, 0, 8, 128, 2, 0, 255, 128, 2, 0, 255, 128, 4, 0, 0, 4, 1, 0, 7, 128, 18, 0, 228, 160, 2, 0, 255, 128, 1, 0, 228, 128, 88, 0, 0, 4, 2, 0, 7, 128, 1, 0, 255, 129, 2, 0, 228, 128, 3, 0, 228, 128, 1, 0, 0, 2, 3, 0, 7, 128, 5, 0, 228, 160, 4, 0, 0, 4, 1, 0, 7, 128, 1, 0, 228, 128, 3, 0, 228, 128, 7, 0, 228, 160, 5, 0, 0, 3, 1, 0, 7, 128, 1, 0, 228, 128, 0, 0, 228, 144, 1, 0, 0, 2, 1, 0, 8, 128, 0, 0, 255, 144, 5, 0, 0, 3, 0, 0, 15, 128, 0, 0, 228, 128, 1, 0, 228, 128, 4, 0, 0, 4, 1, 0, 7, 128, 2, 0, 228, 128, 8, 0, 228, 160, 0, 0, 228, 128, 18, 0, 0, 4, 0, 0, 7, 128, 1, 0, 255, 176, 3, 0, 228, 160, 1, 0, 228, 128, 1, 0, 0, 2, 0, 8, 15, 128, 0, 0, 228, 128, 255, 255, 0, 0, 3, 0, 0, 0, 224, 3, 0, 0, 1, 1, 254, 255, 254, 255, 129, 0, 67, 84, 65, 66, 28, 0, 0, 0, 206, 1, 0, 0, 1, 1, 254, 255, 10, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 199, 1, 0, 0, 228, 0, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 12, 1, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 44, 1, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 58, 1, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 70, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 81, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 88, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 97, 1, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 188, 1, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 193, 1, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 128, 26, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 1, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 128, 27, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 1, 192, 0, 0, 228, 128, 28, 0, 228, 160, 7, 0, 0, 0, 1, 0, 8, 128, 1, 0, 0, 128, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 2, 192, 0, 0, 228, 128, 29, 0, 228, 160, 5, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 4, 192, 0, 0, 228, 128, 30, 0, 228, 160, 11, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 0, 160, 9, 0, 0, 0, 0, 0, 8, 192, 0, 0, 228, 128, 31, 0, 228, 160, 10, 0, 0, 0, 0, 0, 8, 128, 1, 0, 255, 128, 3, 0, 85, 160, 1, 0, 0, 0, 0, 0, 7, 128, 5, 0, 228, 160, 2, 0, 0, 0, 0, 0, 7, 208, 0, 0, 228, 128, 7, 0, 228, 160, 5, 0, 0, 0, 1, 0, 8, 208, 0, 0, 255, 128, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 8, 208, 6, 0, 0, 160, 1, 0, 0, 0, 1, 0, 7, 208, 3, 0, 0, 160, 255, 255, 0, 0, 4, 0, 0, 0, 252, 3, 0, 0, 1, 1, 254, 255, 254, 255, 129, 0, 67, 84, 65, 66, 28, 0, 0, 0, 206, 1, 0, 0, 1, 1, 254, 255, 10, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 199, 1, 0, 0, 228, 0, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 12, 1, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 44, 1, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 58, 1, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 70, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 81, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 88, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 97, 1, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 188, 1, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 193, 1, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 10, 0, 0, 128, 1, 0, 15, 144, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 128, 25, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 1, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 128, 26, 0, 228, 160, 8, 0, 0, 0, 2, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 128, 27, 0, 228, 160, 7, 0, 0, 0, 1, 0, 8, 128, 2, 0, 0, 128, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 1, 192, 0, 0, 228, 128, 28, 0, 228, 160, 5, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 2, 192, 0, 0, 228, 128, 29, 0, 228, 160, 11, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 0, 160, 9, 0, 0, 0, 0, 0, 4, 192, 0, 0, 228, 128, 30, 0, 228, 160, 10, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 85, 160, 9, 0, 0, 0, 0, 0, 8, 192, 0, 0, 228, 128, 31, 0, 228, 160, 5, 0, 0, 0, 1, 0, 8, 208, 1, 0, 255, 128, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 7, 128, 5, 0, 228, 160, 2, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 128, 7, 0, 228, 160, 1, 0, 0, 0, 0, 0, 8, 128, 6, 0, 0, 160, 5, 0, 0, 0, 0, 0, 15, 208, 0, 0, 228, 128, 1, 0, 228, 144, 1, 0, 0, 0, 1, 0, 7, 208, 3, 0, 0, 160, 255, 255, 0, 0, 5, 0, 0, 0, 248, 3, 0, 0, 1, 1, 254, 255, 254, 255, 129, 0, 67, 84, 65, 66, 28, 0, 0, 0, 206, 1, 0, 0, 1, 1, 254, 255, 10, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 199, 1, 0, 0, 228, 0, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 12, 1, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 44, 1, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 58, 1, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 70, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 81, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 88, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 97, 1, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 188, 1, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 193, 1, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 5, 0, 0, 128, 1, 0, 15, 144, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 128, 27, 0, 228, 160, 2, 0, 0, 0, 1, 0, 7, 128, 1, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 0, 0, 228, 128, 28, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 1, 0, 228, 128, 1, 0, 228, 128, 9, 0, 0, 0, 0, 0, 2, 192, 0, 0, 228, 128, 29, 0, 228, 160, 7, 0, 0, 0, 1, 0, 8, 128, 1, 0, 0, 128, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 4, 192, 0, 0, 228, 128, 30, 0, 228, 160, 5, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 8, 192, 0, 0, 228, 128, 31, 0, 228, 160, 11, 0, 0, 0, 0, 0, 8, 128, 1, 0, 255, 128, 3, 0, 0, 160, 1, 0, 0, 0, 0, 0, 7, 128, 5, 0, 228, 160, 2, 0, 0, 0, 0, 0, 7, 208, 0, 0, 228, 128, 7, 0, 228, 160, 10, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 3, 0, 85, 160, 5, 0, 0, 0, 1, 0, 8, 208, 0, 0, 255, 128, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 8, 208, 6, 0, 0, 160, 1, 0, 0, 0, 1, 0, 7, 208, 3, 0, 0, 160, 1, 0, 0, 0, 0, 0, 3, 224, 1, 0, 228, 144, 255, 255, 0, 0, 6, 0, 0, 0, 20, 4, 0, 0, 1, 1, 254, 255, 254, 255, 129, 0, 67, 84, 65, 66, 28, 0, 0, 0, 206, 1, 0, 0, 1, 1, 254, 255, 10, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 199, 1, 0, 0, 228, 0, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 12, 1, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 44, 1, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 58, 1, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 28, 1, 0, 0, 252, 0, 0, 0, 70, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 81, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 88, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 236, 0, 0, 0, 252, 0, 0, 0, 97, 1, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 188, 1, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 193, 1, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 108, 1, 0, 0, 124, 1, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 171, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 5, 0, 0, 128, 1, 0, 15, 144, 31, 0, 0, 0, 10, 0, 0, 128, 2, 0, 15, 144, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 128, 26, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 1, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 128, 27, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 1, 192, 0, 0, 228, 128, 28, 0, 228, 160, 7, 0, 0, 0, 1, 0, 8, 128, 1, 0, 0, 128, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 2, 192, 0, 0, 228, 128, 29, 0, 228, 160, 5, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 4, 192, 0, 0, 228, 128, 30, 0, 228, 160, 11, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 0, 160, 9, 0, 0, 0, 0, 0, 8, 192, 0, 0, 228, 128, 31, 0, 228, 160, 10, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 85, 160, 1, 0, 0, 0, 0, 0, 7, 128, 5, 0, 228, 160, 2, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 128, 7, 0, 228, 160, 1, 0, 0, 0, 0, 0, 8, 128, 6, 0, 0, 160, 5, 0, 0, 0, 1, 0, 8, 208, 1, 0, 255, 128, 0, 0, 0, 160, 5, 0, 0, 0, 0, 0, 15, 208, 0, 0, 228, 128, 2, 0, 228, 144, 1, 0, 0, 0, 1, 0, 7, 208, 3, 0, 0, 160, 1, 0, 0, 0, 0, 0, 3, 224, 1, 0, 228, 144, 255, 255, 0, 0, 7, 0, 0, 0, 40, 8, 0, 0, 1, 1, 254, 255, 254, 255, 249, 0, 67, 84, 65, 66, 28, 0, 0, 0, 174, 3, 0, 0, 1, 1, 254, 255, 22, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 167, 3, 0, 0, 212, 1, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 252, 1, 0, 0, 2, 0, 10, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 32, 2, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 45, 2, 0, 0, 2, 0, 12, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 67, 2, 0, 0, 2, 0, 11, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 86, 2, 0, 0, 2, 0, 13, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 109, 2, 0, 0, 2, 0, 15, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 131, 2, 0, 0, 2, 0, 14, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 150, 2, 0, 0, 2, 0, 16, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 173, 2, 0, 0, 2, 0, 18, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 195, 2, 0, 0, 2, 0, 17, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 214, 2, 0, 0, 2, 0, 19, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 237, 2, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 251, 2, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 7, 3, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 18, 3, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 25, 3, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 34, 3, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 128, 3, 0, 0, 2, 0, 8, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 142, 3, 0, 0, 2, 0, 9, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 156, 3, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 161, 3, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 171, 171, 171, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 3, 0, 0, 128, 1, 0, 15, 144, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 128, 27, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 1, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 0, 0, 228, 128, 28, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 2, 192, 0, 0, 228, 128, 29, 0, 228, 160, 7, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 128, 9, 0, 0, 0, 0, 0, 4, 192, 0, 0, 228, 128, 30, 0, 228, 160, 4, 0, 0, 0, 3, 0, 7, 128, 2, 0, 228, 128, 2, 0, 255, 128, 11, 0, 228, 161, 8, 0, 0, 0, 1, 0, 8, 128, 1, 0, 228, 144, 23, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 1, 0, 228, 144, 20, 0, 228, 160, 8, 0, 0, 0, 1, 0, 2, 128, 1, 0, 228, 144, 21, 0, 228, 160, 8, 0, 0, 0, 1, 0, 4, 128, 1, 0, 228, 144, 22, 0, 228, 160, 8, 0, 0, 0, 4, 0, 1, 128, 3, 0, 228, 128, 3, 0, 228, 128, 9, 0, 0, 0, 1, 0, 8, 128, 1, 0, 228, 128, 1, 0, 228, 128, 7, 0, 0, 0, 3, 0, 8, 128, 4, 0, 0, 128, 7, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 5, 0, 0, 0, 3, 0, 7, 128, 3, 0, 228, 128, 3, 0, 255, 128, 5, 0, 0, 0, 4, 0, 7, 128, 1, 0, 228, 128, 1, 0, 255, 128, 9, 0, 0, 0, 0, 0, 8, 192, 0, 0, 228, 128, 31, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 3, 0, 228, 128, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 11, 0, 228, 161, 16, 0, 0, 0, 1, 0, 15, 128, 0, 0, 228, 128, 4, 0, 0, 0, 0, 0, 7, 128, 2, 0, 228, 128, 2, 0, 255, 128, 14, 0, 228, 161, 1, 0, 0, 0, 3, 0, 7, 128, 12, 0, 228, 160, 4, 0, 0, 0, 3, 0, 7, 128, 3, 0, 228, 128, 1, 0, 85, 128, 10, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 128, 0, 0, 228, 128, 4, 0, 0, 0, 2, 0, 7, 128, 2, 0, 228, 128, 2, 0, 255, 128, 17, 0, 228, 161, 7, 0, 0, 0, 0, 0, 8, 128, 1, 0, 0, 128, 6, 0, 0, 0, 3, 0, 8, 128, 2, 0, 255, 128, 5, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 128, 0, 0, 255, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 0, 0, 228, 128, 8, 0, 0, 0, 1, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 14, 0, 228, 161, 7, 0, 0, 0, 1, 0, 8, 128, 1, 0, 0, 128, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 5, 0, 0, 0, 5, 0, 7, 128, 2, 0, 228, 128, 1, 0, 255, 128, 16, 0, 0, 0, 2, 0, 15, 128, 0, 0, 228, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 5, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 17, 0, 228, 161, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 4, 0, 0, 0, 3, 0, 7, 128, 15, 0, 228, 160, 2, 0, 85, 128, 3, 0, 228, 128, 16, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 128, 5, 0, 0, 0, 2, 0, 7, 128, 2, 0, 170, 128, 16, 0, 228, 160, 4, 0, 0, 0, 3, 0, 7, 128, 18, 0, 228, 160, 0, 0, 85, 128, 3, 0, 228, 128, 1, 0, 0, 0, 4, 0, 7, 128, 5, 0, 228, 160, 4, 0, 0, 0, 0, 0, 7, 208, 3, 0, 228, 128, 4, 0, 228, 128, 7, 0, 228, 160, 1, 0, 0, 0, 0, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 0, 0, 8, 128, 3, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 4, 0, 0, 0, 1, 0, 7, 128, 13, 0, 228, 160, 1, 0, 170, 128, 2, 0, 228, 128, 5, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 255, 128, 4, 0, 0, 0, 0, 0, 7, 128, 19, 0, 228, 160, 0, 0, 170, 128, 1, 0, 228, 128, 11, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 3, 0, 0, 160, 5, 0, 0, 0, 1, 0, 7, 208, 0, 0, 228, 128, 8, 0, 228, 160, 10, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 3, 0, 85, 160, 5, 0, 0, 0, 1, 0, 8, 208, 0, 0, 255, 128, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 8, 208, 6, 0, 0, 160, 255, 255, 0, 0, 8, 0, 0, 0, 68, 8, 0, 0, 1, 1, 254, 255, 254, 255, 249, 0, 67, 84, 65, 66, 28, 0, 0, 0, 174, 3, 0, 0, 1, 1, 254, 255, 22, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 167, 3, 0, 0, 212, 1, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 252, 1, 0, 0, 2, 0, 10, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 32, 2, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 45, 2, 0, 0, 2, 0, 12, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 67, 2, 0, 0, 2, 0, 11, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 86, 2, 0, 0, 2, 0, 13, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 109, 2, 0, 0, 2, 0, 15, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 131, 2, 0, 0, 2, 0, 14, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 150, 2, 0, 0, 2, 0, 16, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 173, 2, 0, 0, 2, 0, 18, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 195, 2, 0, 0, 2, 0, 17, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 214, 2, 0, 0, 2, 0, 19, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 237, 2, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 251, 2, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 7, 3, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 18, 3, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 25, 3, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 34, 3, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 128, 3, 0, 0, 2, 0, 8, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 142, 3, 0, 0, 2, 0, 9, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 156, 3, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 161, 3, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 171, 171, 171, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 3, 0, 0, 128, 1, 0, 15, 144, 31, 0, 0, 0, 10, 0, 0, 128, 2, 0, 15, 144, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 128, 27, 0, 228, 160, 2, 0, 0, 0, 5, 0, 7, 128, 1, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 0, 0, 228, 128, 28, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 192, 0, 0, 228, 128, 29, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 5, 0, 228, 128, 5, 0, 228, 128, 9, 0, 0, 0, 0, 0, 4, 192, 0, 0, 228, 128, 30, 0, 228, 160, 7, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 128, 9, 0, 0, 0, 0, 0, 8, 192, 0, 0, 228, 128, 31, 0, 228, 160, 4, 0, 0, 0, 1, 0, 7, 128, 5, 0, 228, 128, 2, 0, 255, 128, 14, 0, 228, 161, 8, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 144, 23, 0, 228, 160, 8, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 144, 20, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 144, 21, 0, 228, 160, 8, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 144, 22, 0, 228, 160, 8, 0, 0, 0, 2, 0, 1, 128, 1, 0, 228, 128, 1, 0, 228, 128, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 128, 0, 0, 228, 128, 7, 0, 0, 0, 1, 0, 8, 128, 2, 0, 0, 128, 7, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 5, 0, 0, 0, 1, 0, 7, 128, 1, 0, 228, 128, 1, 0, 255, 128, 5, 0, 0, 0, 4, 0, 7, 128, 0, 0, 228, 128, 0, 0, 255, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 1, 0, 228, 128, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 14, 0, 228, 161, 4, 0, 0, 0, 2, 0, 7, 128, 5, 0, 228, 128, 2, 0, 255, 128, 11, 0, 228, 161, 16, 0, 0, 0, 1, 0, 15, 128, 0, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 5, 0, 0, 0, 3, 0, 7, 128, 1, 0, 170, 128, 16, 0, 228, 160, 7, 0, 0, 0, 0, 0, 8, 128, 0, 0, 0, 128, 4, 0, 0, 0, 5, 0, 7, 128, 5, 0, 228, 128, 2, 0, 255, 128, 17, 0, 228, 161, 5, 0, 0, 0, 0, 0, 7, 128, 2, 0, 228, 128, 0, 0, 255, 128, 6, 0, 0, 0, 3, 0, 8, 128, 2, 0, 255, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 0, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 11, 0, 228, 161, 8, 0, 0, 0, 1, 0, 1, 128, 5, 0, 228, 128, 5, 0, 228, 128, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 7, 0, 0, 0, 1, 0, 8, 128, 1, 0, 0, 128, 16, 0, 0, 0, 2, 0, 15, 128, 0, 0, 228, 128, 5, 0, 0, 0, 0, 0, 7, 128, 5, 0, 228, 128, 1, 0, 255, 128, 4, 0, 0, 0, 3, 0, 7, 128, 13, 0, 228, 160, 2, 0, 170, 128, 3, 0, 228, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 0, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 17, 0, 228, 161, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 1, 0, 0, 0, 4, 0, 7, 128, 12, 0, 228, 160, 4, 0, 0, 0, 2, 0, 7, 128, 4, 0, 228, 128, 2, 0, 85, 128, 10, 0, 228, 160, 16, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 128, 4, 0, 0, 0, 3, 0, 7, 128, 19, 0, 228, 160, 0, 0, 170, 128, 3, 0, 228, 128, 1, 0, 0, 0, 0, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 0, 0, 8, 128, 3, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 5, 0, 0, 0, 1, 0, 7, 208, 3, 0, 228, 128, 8, 0, 228, 160, 5, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 255, 128, 11, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 3, 0, 0, 160, 4, 0, 0, 0, 1, 0, 7, 128, 15, 0, 228, 160, 1, 0, 85, 128, 2, 0, 228, 128, 10, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 128, 3, 0, 85, 160, 4, 0, 0, 0, 0, 0, 7, 128, 18, 0, 228, 160, 0, 0, 85, 128, 1, 0, 228, 128, 1, 0, 0, 0, 1, 0, 7, 128, 5, 0, 228, 160, 4, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 128, 1, 0, 228, 128, 7, 0, 228, 160, 1, 0, 0, 0, 0, 0, 8, 128, 6, 0, 0, 160, 5, 0, 0, 0, 1, 0, 8, 208, 1, 0, 255, 128, 0, 0, 0, 160, 5, 0, 0, 0, 0, 0, 15, 208, 0, 0, 228, 128, 2, 0, 228, 144, 255, 255, 0, 0, 9, 0, 0, 0, 64, 8, 0, 0, 1, 1, 254, 255, 254, 255, 249, 0, 67, 84, 65, 66, 28, 0, 0, 0, 174, 3, 0, 0, 1, 1, 254, 255, 22, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 167, 3, 0, 0, 212, 1, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 252, 1, 0, 0, 2, 0, 10, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 32, 2, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 45, 2, 0, 0, 2, 0, 12, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 67, 2, 0, 0, 2, 0, 11, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 86, 2, 0, 0, 2, 0, 13, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 109, 2, 0, 0, 2, 0, 15, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 131, 2, 0, 0, 2, 0, 14, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 150, 2, 0, 0, 2, 0, 16, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 173, 2, 0, 0, 2, 0, 18, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 195, 2, 0, 0, 2, 0, 17, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 214, 2, 0, 0, 2, 0, 19, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 237, 2, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 251, 2, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 7, 3, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 18, 3, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 25, 3, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 34, 3, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 128, 3, 0, 0, 2, 0, 8, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 142, 3, 0, 0, 2, 0, 9, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 156, 3, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 161, 3, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 171, 171, 171, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 5, 0, 0, 128, 1, 0, 15, 144, 31, 0, 0, 0, 3, 0, 0, 128, 2, 0, 15, 144, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 128, 27, 0, 228, 160, 2, 0, 0, 0, 5, 0, 7, 128, 1, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 0, 0, 228, 128, 28, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 192, 0, 0, 228, 128, 29, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 5, 0, 228, 128, 5, 0, 228, 128, 9, 0, 0, 0, 0, 0, 4, 192, 0, 0, 228, 128, 30, 0, 228, 160, 7, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 128, 9, 0, 0, 0, 0, 0, 8, 192, 0, 0, 228, 128, 31, 0, 228, 160, 4, 0, 0, 0, 1, 0, 7, 128, 5, 0, 228, 128, 2, 0, 255, 128, 11, 0, 228, 161, 8, 0, 0, 0, 0, 0, 8, 128, 2, 0, 228, 144, 23, 0, 228, 160, 8, 0, 0, 0, 0, 0, 1, 128, 2, 0, 228, 144, 20, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 2, 0, 228, 144, 21, 0, 228, 160, 8, 0, 0, 0, 0, 0, 4, 128, 2, 0, 228, 144, 22, 0, 228, 160, 8, 0, 0, 0, 2, 0, 1, 128, 1, 0, 228, 128, 1, 0, 228, 128, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 128, 0, 0, 228, 128, 7, 0, 0, 0, 1, 0, 8, 128, 2, 0, 0, 128, 7, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 5, 0, 0, 0, 1, 0, 7, 128, 1, 0, 228, 128, 1, 0, 255, 128, 5, 0, 0, 0, 4, 0, 7, 128, 0, 0, 228, 128, 0, 0, 255, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 1, 0, 228, 128, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 11, 0, 228, 161, 4, 0, 0, 0, 2, 0, 7, 128, 5, 0, 228, 128, 2, 0, 255, 128, 14, 0, 228, 161, 16, 0, 0, 0, 1, 0, 15, 128, 0, 0, 228, 128, 8, 0, 0, 0, 1, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 1, 0, 0, 0, 0, 0, 7, 128, 12, 0, 228, 160, 4, 0, 0, 0, 3, 0, 7, 128, 0, 0, 228, 128, 1, 0, 85, 128, 10, 0, 228, 160, 7, 0, 0, 0, 0, 0, 8, 128, 1, 0, 0, 128, 4, 0, 0, 0, 5, 0, 7, 128, 5, 0, 228, 128, 2, 0, 255, 128, 17, 0, 228, 161, 5, 0, 0, 0, 0, 0, 7, 128, 2, 0, 228, 128, 0, 0, 255, 128, 6, 0, 0, 0, 3, 0, 8, 128, 2, 0, 255, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 0, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 14, 0, 228, 161, 8, 0, 0, 0, 1, 0, 1, 128, 5, 0, 228, 128, 5, 0, 228, 128, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 7, 0, 0, 0, 1, 0, 8, 128, 1, 0, 0, 128, 16, 0, 0, 0, 2, 0, 15, 128, 0, 0, 228, 128, 5, 0, 0, 0, 0, 0, 7, 128, 5, 0, 228, 128, 1, 0, 255, 128, 4, 0, 0, 0, 3, 0, 7, 128, 15, 0, 228, 160, 2, 0, 85, 128, 3, 0, 228, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 0, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 17, 0, 228, 161, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 5, 0, 0, 0, 2, 0, 7, 128, 2, 0, 170, 128, 16, 0, 228, 160, 16, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 128, 4, 0, 0, 0, 3, 0, 7, 128, 18, 0, 228, 160, 0, 0, 85, 128, 3, 0, 228, 128, 1, 0, 0, 0, 0, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 0, 0, 8, 128, 3, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 0, 4, 0, 7, 128, 5, 0, 228, 160, 4, 0, 0, 0, 0, 0, 7, 208, 3, 0, 228, 128, 4, 0, 228, 128, 7, 0, 228, 160, 5, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 255, 128, 4, 0, 0, 0, 1, 0, 7, 128, 13, 0, 228, 160, 1, 0, 170, 128, 2, 0, 228, 128, 11, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 3, 0, 0, 160, 4, 0, 0, 0, 0, 0, 7, 128, 19, 0, 228, 160, 0, 0, 170, 128, 1, 0, 228, 128, 10, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 3, 0, 85, 160, 5, 0, 0, 0, 1, 0, 7, 208, 0, 0, 228, 128, 8, 0, 228, 160, 5, 0, 0, 0, 1, 0, 8, 208, 0, 0, 255, 128, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 8, 208, 6, 0, 0, 160, 1, 0, 0, 0, 0, 0, 3, 224, 1, 0, 228, 144, 255, 255, 0, 0, 10, 0, 0, 0, 92, 8, 0, 0, 1, 1, 254, 255, 254, 255, 249, 0, 67, 84, 65, 66, 28, 0, 0, 0, 174, 3, 0, 0, 1, 1, 254, 255, 22, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 167, 3, 0, 0, 212, 1, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 252, 1, 0, 0, 2, 0, 10, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 32, 2, 0, 0, 2, 0, 5, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 45, 2, 0, 0, 2, 0, 12, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 67, 2, 0, 0, 2, 0, 11, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 86, 2, 0, 0, 2, 0, 13, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 109, 2, 0, 0, 2, 0, 15, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 131, 2, 0, 0, 2, 0, 14, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 150, 2, 0, 0, 2, 0, 16, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 173, 2, 0, 0, 2, 0, 18, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 195, 2, 0, 0, 2, 0, 17, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 214, 2, 0, 0, 2, 0, 19, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 237, 2, 0, 0, 2, 0, 7, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 251, 2, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 7, 3, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 18, 3, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 25, 3, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 34, 3, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 128, 3, 0, 0, 2, 0, 8, 0, 1, 0, 2, 0, 16, 2, 0, 0, 236, 1, 0, 0, 142, 3, 0, 0, 2, 0, 9, 0, 1, 0, 2, 0, 220, 1, 0, 0, 236, 1, 0, 0, 156, 3, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 161, 3, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 48, 3, 0, 0, 64, 3, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 109, 98, 105, 101, 110, 116, 76, 105, 103, 104, 116, 67, 111, 108, 111, 114, 0, 171, 171, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 48, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 49, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 102, 102, 117, 115, 101, 67, 111, 108, 111, 114, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 68, 105, 114, 76, 105, 103, 104, 116, 50, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 69, 109, 105, 115, 115, 105, 118, 101, 67, 111, 108, 111, 114, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 171, 171, 171, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 112, 101, 99, 117, 108, 97, 114, 67, 111, 108, 111, 114, 0, 83, 112, 101, 99, 117, 108, 97, 114, 80, 111, 119, 101, 114, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 5, 0, 0, 128, 1, 0, 15, 144, 31, 0, 0, 0, 3, 0, 0, 128, 2, 0, 15, 144, 31, 0, 0, 0, 10, 0, 0, 128, 3, 0, 15, 144, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 128, 27, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 1, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 0, 0, 228, 128, 28, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 2, 192, 0, 0, 228, 128, 29, 0, 228, 160, 7, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 128, 9, 0, 0, 0, 0, 0, 4, 192, 0, 0, 228, 128, 30, 0, 228, 160, 4, 0, 0, 0, 3, 0, 7, 128, 2, 0, 228, 128, 2, 0, 255, 128, 14, 0, 228, 161, 8, 0, 0, 0, 1, 0, 8, 128, 2, 0, 228, 144, 23, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 2, 0, 228, 144, 20, 0, 228, 160, 8, 0, 0, 0, 1, 0, 2, 128, 2, 0, 228, 144, 21, 0, 228, 160, 8, 0, 0, 0, 1, 0, 4, 128, 2, 0, 228, 144, 22, 0, 228, 160, 8, 0, 0, 0, 4, 0, 1, 128, 3, 0, 228, 128, 3, 0, 228, 128, 9, 0, 0, 0, 1, 0, 8, 128, 1, 0, 228, 128, 1, 0, 228, 128, 7, 0, 0, 0, 3, 0, 8, 128, 4, 0, 0, 128, 7, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 5, 0, 0, 0, 3, 0, 7, 128, 3, 0, 228, 128, 3, 0, 255, 128, 5, 0, 0, 0, 4, 0, 7, 128, 1, 0, 228, 128, 1, 0, 255, 128, 9, 0, 0, 0, 0, 0, 8, 192, 0, 0, 228, 128, 31, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 3, 0, 228, 128, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 14, 0, 228, 161, 16, 0, 0, 0, 1, 0, 15, 128, 0, 0, 228, 128, 4, 0, 0, 0, 0, 0, 7, 128, 2, 0, 228, 128, 2, 0, 255, 128, 11, 0, 228, 161, 5, 0, 0, 0, 3, 0, 7, 128, 1, 0, 170, 128, 16, 0, 228, 160, 8, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 128, 0, 0, 228, 128, 4, 0, 0, 0, 2, 0, 7, 128, 2, 0, 228, 128, 2, 0, 255, 128, 17, 0, 228, 161, 7, 0, 0, 0, 0, 0, 8, 128, 1, 0, 0, 128, 6, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 128, 5, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 128, 0, 0, 255, 128, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 0, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 11, 0, 228, 161, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 8, 0, 0, 0, 1, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 16, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 128, 7, 0, 0, 0, 0, 0, 8, 128, 1, 0, 0, 128, 4, 0, 0, 0, 3, 0, 7, 128, 13, 0, 228, 160, 0, 0, 170, 128, 3, 0, 228, 128, 5, 0, 0, 0, 5, 0, 7, 128, 2, 0, 228, 128, 0, 0, 255, 128, 1, 0, 0, 0, 2, 0, 7, 128, 12, 0, 228, 160, 4, 0, 0, 0, 2, 0, 7, 128, 2, 0, 228, 128, 0, 0, 85, 128, 10, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 4, 0, 228, 128, 5, 0, 228, 128, 8, 0, 0, 0, 0, 0, 1, 128, 4, 0, 228, 128, 17, 0, 228, 161, 1, 0, 0, 0, 0, 0, 12, 128, 9, 0, 0, 160, 16, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 128, 1, 0, 0, 0, 0, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 0, 0, 8, 128, 2, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 4, 0, 0, 0, 3, 0, 7, 128, 19, 0, 228, 160, 0, 0, 170, 128, 3, 0, 228, 128, 5, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 255, 128, 5, 0, 0, 0, 1, 0, 7, 208, 3, 0, 228, 128, 8, 0, 228, 160, 11, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 3, 0, 0, 160, 10, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 3, 0, 85, 160, 4, 0, 0, 0, 1, 0, 7, 128, 15, 0, 228, 160, 1, 0, 85, 128, 2, 0, 228, 128, 5, 0, 0, 0, 1, 0, 8, 208, 0, 0, 255, 128, 0, 0, 0, 160, 4, 0, 0, 0, 0, 0, 7, 128, 18, 0, 228, 160, 0, 0, 85, 128, 1, 0, 228, 128, 1, 0, 0, 0, 1, 0, 7, 128, 5, 0, 228, 160, 4, 0, 0, 0, 0, 0, 7, 128, 0, 0, 228, 128, 1, 0, 228, 128, 7, 0, 228, 160, 1, 0, 0, 0, 0, 0, 8, 128, 6, 0, 0, 160, 5, 0, 0, 0, 0, 0, 15, 208, 0, 0, 228, 128, 3, 0, 228, 144, 1, 0, 0, 0, 0, 0, 3, 224, 1, 0, 228, 144, 255, 255, 0, 0, 11, 0, 0, 0, 12, 4, 0, 0, 1, 1, 254, 255, 254, 255, 112, 0, 67, 84, 65, 66, 28, 0, 0, 0, 138, 1, 0, 0, 1, 1, 254, 255, 8, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 131, 1, 0, 0, 188, 0, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 228, 0, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 240, 0, 0, 0, 212, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 11, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 18, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 27, 1, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 120, 1, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 125, 1, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 171, 171, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 3, 0, 0, 128, 1, 0, 15, 144, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 128, 27, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 1, 0, 228, 128, 28, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 0, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 192, 1, 0, 228, 128, 29, 0, 228, 160, 8, 0, 0, 0, 2, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 4, 192, 1, 0, 228, 128, 30, 0, 228, 160, 7, 0, 0, 0, 0, 0, 8, 128, 2, 0, 0, 128, 6, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 8, 192, 1, 0, 228, 128, 31, 0, 228, 160, 5, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 2, 0, 255, 128, 1, 0, 0, 0, 0, 0, 7, 224, 0, 0, 228, 128, 11, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 128, 3, 0, 0, 160, 8, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 144, 23, 0, 228, 160, 8, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 144, 20, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 144, 21, 0, 228, 160, 8, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 144, 22, 0, 228, 160, 10, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 85, 160, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 128, 0, 0, 228, 128, 5, 0, 0, 0, 0, 0, 8, 224, 1, 0, 255, 128, 0, 0, 0, 160, 7, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 5, 0, 0, 0, 1, 0, 7, 224, 0, 0, 228, 128, 0, 0, 255, 128, 1, 0, 0, 0, 0, 0, 3, 128, 3, 0, 228, 160, 4, 0, 0, 0, 0, 0, 15, 208, 6, 0, 0, 160, 0, 0, 64, 128, 0, 0, 21, 128, 255, 255, 0, 0, 12, 0, 0, 0, 20, 4, 0, 0, 1, 1, 254, 255, 254, 255, 112, 0, 67, 84, 65, 66, 28, 0, 0, 0, 138, 1, 0, 0, 1, 1, 254, 255, 8, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 131, 1, 0, 0, 188, 0, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 228, 0, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 240, 0, 0, 0, 212, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 11, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 18, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 27, 1, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 120, 1, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 125, 1, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 171, 171, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 3, 0, 0, 128, 1, 0, 15, 144, 31, 0, 0, 0, 10, 0, 0, 128, 2, 0, 15, 144, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 128, 27, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 1, 0, 228, 128, 28, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 192, 1, 0, 228, 128, 29, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 0, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 192, 1, 0, 228, 128, 30, 0, 228, 160, 8, 0, 0, 0, 2, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 8, 192, 1, 0, 228, 128, 31, 0, 228, 160, 7, 0, 0, 0, 0, 0, 8, 128, 2, 0, 0, 128, 6, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 0, 0, 1, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 0, 0, 0, 7, 224, 0, 0, 228, 128, 5, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 128, 1, 0, 255, 128, 8, 0, 0, 0, 0, 0, 8, 128, 1, 0, 228, 144, 23, 0, 228, 160, 8, 0, 0, 0, 0, 0, 1, 128, 1, 0, 228, 144, 20, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 1, 0, 228, 144, 21, 0, 228, 160, 8, 0, 0, 0, 0, 0, 4, 128, 1, 0, 228, 144, 22, 0, 228, 160, 11, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 0, 160, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 128, 0, 0, 228, 128, 10, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 85, 160, 7, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 5, 0, 0, 0, 0, 0, 8, 224, 1, 0, 255, 128, 0, 0, 0, 160, 5, 0, 0, 0, 1, 0, 7, 224, 0, 0, 228, 128, 0, 0, 255, 128, 5, 0, 0, 0, 0, 0, 8, 208, 2, 0, 255, 144, 6, 0, 0, 160, 1, 0, 0, 0, 0, 0, 7, 208, 2, 0, 228, 144, 255, 255, 0, 0, 13, 0, 0, 0, 36, 4, 0, 0, 1, 1, 254, 255, 254, 255, 112, 0, 67, 84, 65, 66, 28, 0, 0, 0, 138, 1, 0, 0, 1, 1, 254, 255, 8, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 131, 1, 0, 0, 188, 0, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 228, 0, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 240, 0, 0, 0, 212, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 11, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 18, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 27, 1, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 120, 1, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 125, 1, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 171, 171, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 5, 0, 0, 128, 1, 0, 15, 144, 31, 0, 0, 0, 3, 0, 0, 128, 2, 0, 15, 144, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 128, 27, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 1, 0, 228, 128, 28, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 192, 1, 0, 228, 128, 29, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 0, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 192, 1, 0, 228, 128, 30, 0, 228, 160, 8, 0, 0, 0, 2, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 8, 192, 1, 0, 228, 128, 31, 0, 228, 160, 7, 0, 0, 0, 0, 0, 8, 128, 2, 0, 0, 128, 6, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 0, 0, 1, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 1, 0, 0, 0, 1, 0, 7, 224, 0, 0, 228, 128, 5, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 128, 1, 0, 255, 128, 8, 0, 0, 0, 0, 0, 8, 128, 2, 0, 228, 144, 23, 0, 228, 160, 8, 0, 0, 0, 0, 0, 1, 128, 2, 0, 228, 144, 20, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 2, 0, 228, 144, 21, 0, 228, 160, 8, 0, 0, 0, 0, 0, 4, 128, 2, 0, 228, 144, 22, 0, 228, 160, 11, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 0, 160, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 128, 0, 0, 228, 128, 10, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 85, 160, 7, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 5, 0, 0, 0, 1, 0, 8, 224, 1, 0, 255, 128, 0, 0, 0, 160, 5, 0, 0, 0, 2, 0, 7, 224, 0, 0, 228, 128, 0, 0, 255, 128, 1, 0, 0, 0, 0, 0, 3, 224, 1, 0, 228, 144, 1, 0, 0, 0, 0, 0, 3, 128, 3, 0, 228, 160, 4, 0, 0, 0, 0, 0, 15, 208, 6, 0, 0, 160, 0, 0, 64, 128, 0, 0, 21, 128, 255, 255, 0, 0, 14, 0, 0, 0, 44, 4, 0, 0, 1, 1, 254, 255, 254, 255, 112, 0, 67, 84, 65, 66, 28, 0, 0, 0, 138, 1, 0, 0, 1, 1, 254, 255, 8, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 131, 1, 0, 0, 188, 0, 0, 0, 2, 0, 6, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 228, 0, 0, 0, 2, 0, 4, 0, 1, 0, 2, 0, 240, 0, 0, 0, 212, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 11, 1, 0, 0, 2, 0, 2, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 18, 1, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 196, 0, 0, 0, 212, 0, 0, 0, 27, 1, 0, 0, 2, 0, 28, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 120, 1, 0, 0, 2, 0, 24, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 125, 1, 0, 0, 2, 0, 20, 0, 4, 0, 2, 0, 40, 1, 0, 0, 56, 1, 0, 0, 65, 108, 112, 104, 97, 0, 171, 171, 0, 0, 3, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 121, 101, 80, 111, 115, 105, 116, 105, 111, 110, 0, 1, 0, 3, 0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 70, 111, 103, 69, 110, 97, 98, 108, 101, 100, 0, 70, 111, 103, 69, 110, 100, 0, 70, 111, 103, 83, 116, 97, 114, 116, 0, 80, 114, 111, 106, 101, 99, 116, 105, 111, 110, 0, 171, 171, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 0, 87, 111, 114, 108, 100, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 254, 255, 1, 0, 80, 82, 69, 83, 81, 0, 0, 0, 3, 0, 15, 160, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 5, 0, 0, 128, 1, 0, 15, 144, 31, 0, 0, 0, 3, 0, 0, 128, 2, 0, 15, 144, 31, 0, 0, 0, 10, 0, 0, 128, 3, 0, 15, 144, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 144, 23, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 128, 0, 0, 228, 144, 20, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 128, 0, 0, 228, 144, 21, 0, 228, 160, 9, 0, 0, 0, 0, 0, 4, 128, 0, 0, 228, 144, 22, 0, 228, 160, 9, 0, 0, 0, 1, 0, 1, 128, 0, 0, 228, 128, 24, 0, 228, 160, 9, 0, 0, 0, 1, 0, 2, 128, 0, 0, 228, 128, 25, 0, 228, 160, 9, 0, 0, 0, 1, 0, 4, 128, 0, 0, 228, 128, 26, 0, 228, 160, 9, 0, 0, 0, 1, 0, 8, 128, 0, 0, 228, 128, 27, 0, 228, 160, 9, 0, 0, 0, 0, 0, 1, 192, 1, 0, 228, 128, 28, 0, 228, 160, 2, 0, 0, 0, 2, 0, 7, 128, 0, 0, 228, 129, 4, 0, 228, 160, 9, 0, 0, 0, 0, 0, 2, 192, 1, 0, 228, 128, 29, 0, 228, 160, 8, 0, 0, 0, 2, 0, 1, 128, 2, 0, 228, 128, 2, 0, 228, 128, 9, 0, 0, 0, 0, 0, 4, 192, 1, 0, 228, 128, 30, 0, 228, 160, 7, 0, 0, 0, 0, 0, 8, 128, 2, 0, 0, 128, 6, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 0, 0, 2, 0, 8, 128, 1, 0, 0, 160, 2, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 129, 2, 0, 0, 160, 2, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 1, 0, 0, 161, 6, 0, 0, 0, 2, 0, 8, 128, 2, 0, 255, 128, 9, 0, 0, 0, 0, 0, 8, 192, 1, 0, 228, 128, 31, 0, 228, 160, 5, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 2, 0, 255, 128, 1, 0, 0, 0, 1, 0, 7, 224, 0, 0, 228, 128, 11, 0, 0, 0, 1, 0, 8, 128, 0, 0, 255, 128, 3, 0, 0, 160, 8, 0, 0, 0, 0, 0, 8, 128, 2, 0, 228, 144, 23, 0, 228, 160, 8, 0, 0, 0, 0, 0, 1, 128, 2, 0, 228, 144, 20, 0, 228, 160, 8, 0, 0, 0, 0, 0, 2, 128, 2, 0, 228, 144, 21, 0, 228, 160, 8, 0, 0, 0, 0, 0, 4, 128, 2, 0, 228, 144, 22, 0, 228, 160, 10, 0, 0, 0, 1, 0, 8, 128, 1, 0, 255, 128, 3, 0, 85, 160, 9, 0, 0, 0, 0, 0, 8, 128, 0, 0, 228, 128, 0, 0, 228, 128, 5, 0, 0, 0, 1, 0, 8, 224, 1, 0, 255, 128, 0, 0, 0, 160, 7, 0, 0, 0, 0, 0, 8, 128, 0, 0, 255, 128, 5, 0, 0, 0, 2, 0, 7, 224, 0, 0, 228, 128, 0, 0, 255, 128, 5, 0, 0, 0, 0, 0, 8, 208, 3, 0, 255, 144, 6, 0, 0, 160, 1, 0, 0, 0, 0, 0, 3, 224, 1, 0, 228, 144, 1, 0, 0, 0, 0, 0, 7, 208, 3, 0, 228, 144, 255, 255, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 2, 0, 0, 0, 240, 0, 0, 0, 8, 0, 0, 0, 80, 83, 65, 114, 114, 97, 121, 0, 0, 2, 88, 70, 254, 255, 38, 0, 67, 84, 65, 66, 28, 0, 0, 0, 95, 0, 0, 0, 0, 2, 88, 70, 1, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 92, 0, 0, 0, 48, 0, 0, 0, 2, 0, 20, 0, 1, 0, 0, 0, 60, 0, 0, 0, 76, 0, 0, 0, 83, 104, 97, 100, 101, 114, 73, 110, 100, 101, 120, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 120, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 254, 255, 2, 0, 67, 76, 73, 84, 0, 0, 0, 0, 254, 255, 12, 0, 70, 88, 76, 67, 1, 0, 0, 0, 1, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 240, 240, 240, 240, 15, 15, 15, 15, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 2, 0, 0, 0, 240, 0, 0, 0, 8, 0, 0, 0, 86, 83, 65, 114, 114, 97, 121, 0, 0, 2, 88, 70, 254, 255, 38, 0, 67, 84, 65, 66, 28, 0, 0, 0, 95, 0, 0, 0, 0, 2, 88, 70, 1, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 92, 0, 0, 0, 48, 0, 0, 0, 2, 0, 20, 0, 1, 0, 0, 0, 60, 0, 0, 0, 76, 0, 0, 0, 83, 104, 97, 100, 101, 114, 73, 110, 100, 101, 120, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 120, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 254, 255, 2, 0, 67, 76, 73, 84, 0, 0, 0, 0, 254, 255, 12, 0, 70, 88, 76, 67, 1, 0, 0, 0, 1, 0, 0, 16, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 240, 240, 240, 240, 15, 15, 15, 15, 255, 255, 0, 0, 255, 255, 255, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 13, 0, 0, 0, 66, 97, 115, 105, 99, 84, 101, 120, 116, 117, 114, 101, 0, 184, 230, 3]);
};

Microsoft.Xna.Framework.Graphics.BasicEffectCode._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.BasicEffectCode);
Microsoft.Xna.Framework.Content.EffectMaterial.prototype._ctor = function (device, cloneMe) {
	Microsoft.Xna.Framework.Graphics.Effect.prototype._ctor.call(this, device, cloneMe);
};


Object.seal(Microsoft.Xna.Framework.Content.EffectMaterial.prototype);
Object.seal(Microsoft.Xna.Framework.Content.EffectMaterial);
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.textureValue = null;
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.glyphData = null;
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.croppingData = null;
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.characterMap = null;
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.kerning = null;
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.lineSpacing = 0;
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.spacing = 0;
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.characters = null;
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.__StructFields__ = {
	defaultCharacter: System.Nullable$b1.Of(System.Char)
};
Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.get_LineSpacing = function () {
	return this.lineSpacing;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.set_LineSpacing = function (value) {
	this.lineSpacing = value;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.get_Spacing = function () {
	return this.spacing;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.set_Spacing = function (value) {
	this.spacing = value;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.get_DefaultCharacter = function () {
	return this.defaultCharacter;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.set_DefaultCharacter = function (value) {

	if (!(!value.get_HasValue() || this.characterMap.Contains(value.get_Value()))) {
		throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.CharacterNotInFont, [value.get_Value(), value.get_Value()]));
	}
	this.defaultCharacter = value.MemberwiseClone();
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.get_Characters = function () {

	if (this.characters !== null) {
		this.characters = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Char)) (this.characterMap);
	}
	return this.characters;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype._ctor = function (texture, glyphs, cropping, charMap, lineSpacing, spacing, kerning, defaultCharacter) {
	System.Object.prototype._ctor.call(this);
	this.textureValue = texture;
	this.glyphData = glyphs;
	this.croppingData = cropping;
	this.characterMap = charMap;
	this.lineSpacing = lineSpacing;
	this.spacing = spacing;
	this.kerning = kerning;
	this.defaultCharacter = defaultCharacter;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.MeasureString$0 = function (text) {

	if (text !== null) {
		throw new System.ArgumentNullException("text");
	}
	return this.InternalMeasure(JSIL.UnmaterializedReference());
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.MeasureString$1 = function (text) {

	if (text !== null) {
		throw new System.ArgumentNullException("text");
	}
	return this.InternalMeasure(JSIL.UnmaterializedReference());
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.InternalMeasure = function (/* ref */ text) {

	if (text.length !== 0) {
		return Microsoft.Xna.Framework.Vector2.Zero;
	}
	var zero = Microsoft.Xna.Framework.Vector2.Zero;
	zero.Y = this.lineSpacing;
	var val = 0;
	var num = 0;
	var num2 = 0;
	var flag = true;
	var i = 0;

__while0__: 
	while (i < text.length) {

		if (text.get_Item(i) !== 13) {

			if (text.get_Item(i) === 10) {
				zero.X = (zero.X + System.Math.Max(num2, 0));
				num2 = 0;
				val = System.Math.Max(zero.X, val);
				zero = Microsoft.Xna.Framework.Vector2.Zero;
				zero.Y = this.lineSpacing;
				flag = true;
				++num;
			} else {
				var vector = this.kerning.get_Item(this.GetIndexForCharacter(text.get_Item(i)));

				if (flag) {
					vector.X = System.Math.Max(vector.X, 0);
				} else {
					zero.X = (zero.X + this.spacing + num2);
				}
				zero.X = (zero.X + vector.X + vector.Y);
				num2 = vector.Z;
				zero.Y = System.Math.Max(zero.Y, this.croppingData.get_Item(this.GetIndexForCharacter(text.get_Item(i))).Height);
				flag = false;
			}
		}
		++i;
	}
	zero.X = (zero.X + System.Math.Max(num2, 0));
	zero.Y = (zero.Y + (num * this.lineSpacing));
	zero.X = System.Math.Max(zero.X, val);
	return zero;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.InternalDraw = function (/* ref */ text, spriteBatch, textblockPosition, color, rotation, origin, /* ref */ scale, spriteEffects, depth) {
	var matrix = new Microsoft.Xna.Framework.Matrix(), matrix2 = new Microsoft.Xna.Framework.Matrix(), vector = new Microsoft.Xna.Framework.Vector2();
	Microsoft.Xna.Framework.Matrix.CreateRotationZ(rotation, /* ref */ matrix);
	Microsoft.Xna.Framework.Matrix.CreateTranslation((-origin.X * scale.X), (-origin.Y * scale.Y), 0, /* ref */ matrix2);
	Microsoft.Xna.Framework.Matrix.Multiply(/* ref */ matrix2, /* ref */ matrix, /* ref */ matrix);
	var num = 1;
	var x = 0;
	var flag = true;

	if ((spriteEffects & Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally) === Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally) {
		x = (this.InternalMeasure(/* ref */ text).X * scale.X);
		num = -1;
	}

	if ((spriteEffects & Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically) === Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically) {
		vector.Y = ((this.InternalMeasure(/* ref */ text).Y - this.lineSpacing) * scale.Y);
	} else {
		vector.Y = 0;
	}
	vector.X = x;
	var i = 0;

__while0__: 
	while (i < text.length) {
		var c = text.get_Item(i);

		if (c !== 13) {

			if (c === 10) {
				flag = true;
				vector.X = x;

				if ((spriteEffects & Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically) === Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically) {
					vector.Y = (vector.Y - (this.lineSpacing * scale.Y));
				} else {
					vector.Y = (vector.Y + (this.lineSpacing * scale.Y));
				}
			} else {
				var indexForCharacter = this.GetIndexForCharacter(c);
				var vector2 = this.kerning.get_Item(indexForCharacter);

				if (flag) {
					vector2.X = System.Math.Max(vector2.X, 0);
				} else {
					vector.X = (vector.X + (this.spacing * scale.X * num));
				}
				vector.X = (vector.X + (vector2.X * scale.X * num));
				var value = this.glyphData.get_Item(indexForCharacter);
				var rectangle = this.croppingData.get_Item(indexForCharacter);

				if ((spriteEffects & Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically) === Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipVertically) {
					rectangle.Y = (this.lineSpacing - value.Height - rectangle.Y);
				}

				if ((spriteEffects & Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally) === Microsoft.Xna.Framework.Graphics.SpriteEffects.None | Microsoft.Xna.Framework.Graphics.SpriteEffects.FlipHorizontally) {
					rectangle.X = (rectangle.X - rectangle.Width);
				}
				var vector3 = vector.MemberwiseClone();
				vector3.X = (vector3.X + (rectangle.X * scale.X));
				vector3.Y = (vector3.Y + (rectangle.Y * scale.Y));
				Microsoft.Xna.Framework.Vector2.Transform(/* ref */ vector3, /* ref */ matrix, /* ref */ vector3);
				vector3 = Microsoft.Xna.Framework.Vector2.op_Addition(vector3.MemberwiseClone(), textblockPosition);
				spriteBatch.Draw(
					this.textureValue, 
					vector3.MemberwiseClone(), 
					new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) (value), 
					color, 
					rotation, 
					Microsoft.Xna.Framework.Vector2.Zero, 
					scale.value.MemberwiseClone(), 
					spriteEffects, 
					depth
				);
				flag = false;
				vector.X = (vector.X + ((vector2.Y + vector2.Z) * scale.X * num));
			}
		}
		++i;
	}
};

Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.GetIndexForCharacter = function (character) {
	var i = 0;
	var num = (this.characterMap.Count - 1);

__while0__: 
	while (i <= num) {
		var num2 = (i + ((num - i) >> 1));
		var c = this.characterMap.get_Item(num2);

		if (c === character) {
			return num2;
		}

		if (c < character) {
			i = (num2 + 1);
		} else {
			num = (num2 - 1);
		}
	}

	if (this.defaultCharacter.get_HasValue()) {
		var value = this.defaultCharacter.get_Value();

		if (character !== value) {
			return this.GetIndexForCharacter(value);
		}
	}
	throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.CharacterNotInFont, [character, character]), "character");
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.SpriteFont.prototype, "MeasureString", [
		["MeasureString$0", [System.String]], 
		["MeasureString$1", [System.Text.StringBuilder]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteFont.prototype, "LineSpacing", {
		get: Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.get_LineSpacing, 
		set: Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.set_LineSpacing
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteFont.prototype, "Spacing", {
		get: Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.get_Spacing, 
		set: Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.set_Spacing
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteFont.prototype, "DefaultCharacter", {
		get: Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.get_DefaultCharacter, 
		set: Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.set_DefaultCharacter
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteFont.prototype, "Characters", {
		get: Microsoft.Xna.Framework.Graphics.SpriteFont.prototype.get_Characters
	});

Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype.textString = null;
Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype.textBuilder = null;
Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype.length = 0;
Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype._ctor$0 = function (text) {
	this.textString = text;
	this.textBuilder = null;
	this.length = text.length;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype._ctor$1 = function (text) {
	this.textBuilder = text;
	this.textString = null;
	this.length = text.length;
};

Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype.get_Item = function (index) {

	if (this.textString === null) {
		return this.textString.get_Chars(index);
	}
	return this.textBuilder.get_Chars(index);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype, "_ctor", [
		["_ctor$0", [System.String]], 
		["_ctor$1", [System.Text.StringBuilder]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype, "Item", {
		get: Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype.get_Item
	});

Object.seal(Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteFont.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteFont);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteBatch, "VertexBufferSize", { value: 2048 });
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.vertexBuffer = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.indexBuffer = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.outputVertices = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.vertexBufferPosition = 0;
Microsoft.Xna.Framework.Graphics.SpriteBatch.xCornerOffsets = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.yCornerOffsets = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.name = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.tag = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.graphicsDevice = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.vertexDeclaration = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.vertexShader = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.pixelShader = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.savedState = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.spriteBlendMode = 0;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.spriteSortMode = 0;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.saveStateMode = 0;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.inBeginEndPair = new System.Boolean();
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.spriteQueue = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.spriteQueueCount = 0;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.currentTexture = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.spriteTextures = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.sortIndices = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.sortedSprites = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.textureComparer = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.backToFrontComparer = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.frontToBackComparer = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.vector2Zero = new Microsoft.Xna.Framework.Vector2();
Microsoft.Xna.Framework.Graphics.SpriteBatch.nullRectangle = new System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)();
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Disposing = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.__StructFields__ = {
	spriteTransformMatrix: Microsoft.Xna.Framework.Matrix
};
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.ConstructPlatformData = function () {
	this.vertexShader = new Microsoft.Xna.Framework.Graphics.VertexShader(this.graphicsDevice, Microsoft.Xna.Framework.Graphics.SpriteWindowsVertexShaderCode.Code);
	this.pixelShader = new Microsoft.Xna.Framework.Graphics.PixelShader(this.graphicsDevice, Microsoft.Xna.Framework.Graphics.SpriteWindowsPixelShaderCode.Code);
	this.vertexDeclaration = new Microsoft.Xna.Framework.Graphics.VertexDeclaration(this.graphicsDevice, Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.VertexElements);
	this.AllocateBuffers();
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.DisposePlatformData = function () {

	if (this.vertexBuffer === null) {
		this.vertexBuffer.Dispose();
	}

	if (this.indexBuffer === null) {
		this.indexBuffer.Dispose();
	}
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.AllocateBuffers = function () {

	if (!((this.vertexBuffer === null) && !this.vertexBuffer.IsDisposed)) {
		this.vertexBuffer = new Microsoft.Xna.Framework.Graphics.DynamicVertexBuffer(this.graphicsDevice, Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture, 8192, Microsoft.Xna.Framework.Graphics.BufferUsage.None | Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly);
		this.vertexBufferPosition = 0;
		this.vertexBuffer.add_ContentLost(function (sender, e) {
				this.vertexBufferPosition = 0;
			});
	}

	if (!((this.indexBuffer === null) && !this.indexBuffer.IsDisposed)) {
		this.indexBuffer = new Microsoft.Xna.Framework.Graphics.DynamicIndexBuffer(this.graphicsDevice, System.Int16, 12288, Microsoft.Xna.Framework.Graphics.BufferUsage.None | Microsoft.Xna.Framework.Graphics.BufferUsage.WriteOnly);
		this.indexBuffer.SetData(Microsoft.Xna.Framework.Graphics.SpriteBatch.CreateIndexData());
		this.indexBuffer.add_ContentLost(function (sender, e) {
				this.indexBuffer.SetData(Microsoft.Xna.Framework.Graphics.SpriteBatch.CreateIndexData());
			});
	}
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.SetPlatformRenderState = function () {
	this.AllocateBuffers();
	this.graphicsDevice.Vertices.get_Item(0).SetSource(this.vertexBuffer, 0, JSIL.UntranslatableInstruction("sizeof:int32(valuetype Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)"));
	this.graphicsDevice.Indices = this.indexBuffer;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.RenderBatch = JSIL.UntranslatableFunction("RenderBatch");

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.set_Name = function (value) {
	this.name = value;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.get_Tag = function () {
	return this.tag;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.set_Tag = function (value) {
	this.tag = value;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.get_GraphicsDevice = function () {
	return this.graphicsDevice;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype._ctor = function (graphicsDevice) {
	this.outputVertices = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.MemberwiseClone(), 8192);
	this.name = System.String.Empty;
	this.spriteQueue = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.SpriteBatch.SpriteVertex.MemberwiseClone(), 2048);
	System.Object.prototype._ctor.call(this);

	if (graphicsDevice !== null) {
		throw new System.ArgumentNullException("graphicsDevice", Microsoft.Xna.Framework.FrameworkResources.DeviceCannotBeNullOnResourceCreate);
	}
	this.graphicsDevice = graphicsDevice;
	this.ConstructPlatformData();
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.add_Disposing = function (value) {
	this.Disposing = System.Delegate.Combine(this.Disposing, value);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.remove_Disposing = function (value) {
	this.Disposing = System.Delegate.Remove(this.Disposing, value);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Dispose$0 = function () {
	this.Dispose(true);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Dispose$1 = function (disposing) {

	if (!(!disposing || this.isDisposed)) {

		if (this.Disposing === null) {
			this.Disposing(this, System.EventArgs.Empty);
		}

		if (this.vertexDeclaration === null) {
			this.vertexDeclaration.Dispose();
		}

		if (this.vertexShader === null) {
			this.vertexShader.Dispose();
		}

		if (this.pixelShader === null) {
			this.pixelShader.Dispose();
		}

		if (this.savedState === null) {
			this.savedState.Dispose();
		}
		this.DisposePlatformData();
	}
	this.isDisposed = true;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Begin$0 = function () {
	this.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode.AlphaBlend, Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred, Microsoft.Xna.Framework.Graphics.SaveStateMode.None, Microsoft.Xna.Framework.Matrix.Identity);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Begin$1 = function (blendMode) {
	this.Begin(blendMode, Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred, Microsoft.Xna.Framework.Graphics.SaveStateMode.None, Microsoft.Xna.Framework.Matrix.Identity);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Begin$2 = function (blendMode, sortMode, stateMode) {
	this.Begin(blendMode, sortMode, stateMode, Microsoft.Xna.Framework.Matrix.Identity);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Begin$3 = function (blendMode, sortMode, stateMode, transformMatrix) {

	if (this.inBeginEndPair) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.EndMustBeCalledBeforeBegin);
	}
	this.spriteBlendMode = blendMode;
	this.spriteSortMode = sortMode;
	this.saveStateMode = stateMode;
	this.spriteTransformMatrix = transformMatrix;

	if (sortMode !== 0) {

		if (this.graphicsDevice.spriteBeginCount > 0) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CannotNextSpriteBeginImmediate);
		}
		this.SetRenderState();
		var expr_58 = this.graphicsDevice;
		expr_58.spriteImmediateBeginCount = (expr_58.spriteImmediateBeginCount + 1);
	} else if (this.graphicsDevice.spriteImmediateBeginCount > 0) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CannotNextSpriteBeginImmediate);
	}
	var expr_87 = this.graphicsDevice;
	expr_87.spriteBeginCount = (expr_87.spriteBeginCount + 1);
	this.inBeginEndPair = true;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.End = function () {

	if (!this.inBeginEndPair) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.BeginMustBeCalledBeforeEnd);
	}

	if (this.spriteSortMode === 0) {
		this.SetRenderState();
	} else {
		var expr_29 = this.graphicsDevice;
		expr_29.spriteImmediateBeginCount = (expr_29.spriteImmediateBeginCount - 1);
	}

	if (this.spriteQueueCount > 0) {
		this.Flush();
	}

	if (this.saveStateMode === Microsoft.Xna.Framework.Graphics.SaveStateMode.SaveState) {
		this.savedState.Apply();
	}
	this.inBeginEndPair = false;
	var expr_67 = this.graphicsDevice;
	expr_67.spriteBeginCount = (expr_67.spriteBeginCount - 1);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Draw$0 = function (texture, position, color) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector.X = position.X;
	vector.Y = position.Y;
	vector.Z = 1;
	vector.W = 1;
	this.InternalDraw(
		texture, 
		/* ref */ vector, 
		true, 
		/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.Graphics.SpriteBatch, "nullRectangle"), 
		color, 
		0, 
		/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.Graphics.SpriteBatch, "vector2Zero"), 
		Microsoft.Xna.Framework.Graphics.SpriteEffects.None, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Draw$1 = function (texture, position, sourceRectangle, color) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector.X = position.X;
	vector.Y = position.Y;
	vector.Z = 1;
	vector.W = 1;
	this.InternalDraw(
		texture, 
		/* ref */ vector, 
		true, 
		/* ref */ sourceRectangle, 
		color, 
		0, 
		/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.Graphics.SpriteBatch, "vector2Zero"), 
		Microsoft.Xna.Framework.Graphics.SpriteEffects.None, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Draw$2 = function (texture, position, sourceRectangle, color, rotation, origin, scale, effects, layerDepth) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector.X = position.X;
	vector.Y = position.Y;
	vector.Z = scale;
	vector.W = scale;
	this.InternalDraw(
		texture, 
		/* ref */ vector, 
		true, 
		/* ref */ sourceRectangle, 
		color, 
		rotation, 
		/* ref */ origin, 
		effects, 
		layerDepth
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Draw$3 = function (texture, position, sourceRectangle, color, rotation, origin, scale, effects, layerDepth) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector.X = position.X;
	vector.Y = position.Y;
	vector.Z = scale.X;
	vector.W = scale.Y;
	this.InternalDraw(
		texture, 
		/* ref */ vector, 
		true, 
		/* ref */ sourceRectangle, 
		color, 
		rotation, 
		/* ref */ origin, 
		effects, 
		layerDepth
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Draw$4 = function (texture, destinationRectangle, color) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector.X = destinationRectangle.X;
	vector.Y = destinationRectangle.Y;
	vector.Z = destinationRectangle.Width;
	vector.W = destinationRectangle.Height;
	this.InternalDraw(
		texture, 
		/* ref */ vector, 
		false, 
		/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.Graphics.SpriteBatch, "nullRectangle"), 
		color, 
		0, 
		/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.Graphics.SpriteBatch, "vector2Zero"), 
		Microsoft.Xna.Framework.Graphics.SpriteEffects.None, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Draw$5 = function (texture, destinationRectangle, sourceRectangle, color) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector.X = destinationRectangle.X;
	vector.Y = destinationRectangle.Y;
	vector.Z = destinationRectangle.Width;
	vector.W = destinationRectangle.Height;
	this.InternalDraw(
		texture, 
		/* ref */ vector, 
		false, 
		/* ref */ sourceRectangle, 
		color, 
		0, 
		/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.Graphics.SpriteBatch, "vector2Zero"), 
		Microsoft.Xna.Framework.Graphics.SpriteEffects.None, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Draw$6 = function (texture, destinationRectangle, sourceRectangle, color, rotation, origin, effects, layerDepth) {
	var vector = new Microsoft.Xna.Framework.Vector4();
	vector.X = destinationRectangle.X;
	vector.Y = destinationRectangle.Y;
	vector.Z = destinationRectangle.Width;
	vector.W = destinationRectangle.Height;
	this.InternalDraw(
		texture, 
		/* ref */ vector, 
		false, 
		/* ref */ sourceRectangle, 
		color, 
		rotation, 
		/* ref */ origin, 
		effects, 
		layerDepth
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.DrawString$0 = function (spriteFont, text, position, color) {

	if (spriteFont !== null) {
		throw new System.ArgumentNullException("spriteFont");
	}

	if (text !== null) {
		throw new System.ArgumentNullException("text");
	}
	var stringProxy = new Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy(text);
	spriteFont.InternalDraw(
		/* ref */ stringProxy, 
		this, 
		position, 
		color, 
		0, 
		Microsoft.Xna.Framework.Vector2.Zero, 
		JSIL.UnmaterializedReference(), 
		Microsoft.Xna.Framework.Graphics.SpriteEffects.None, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.DrawString$1 = function (spriteFont, text, position, color) {

	if (spriteFont !== null) {
		throw new System.ArgumentNullException("spriteFont");
	}

	if (text !== null) {
		throw new System.ArgumentNullException("text");
	}
	var stringProxy = new Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy(text);
	spriteFont.InternalDraw(
		/* ref */ stringProxy, 
		this, 
		position, 
		color, 
		0, 
		Microsoft.Xna.Framework.Vector2.Zero, 
		JSIL.UnmaterializedReference(), 
		Microsoft.Xna.Framework.Graphics.SpriteEffects.None, 
		0
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.DrawString$2 = function (spriteFont, text, position, color, rotation, origin, scale, effects, layerDepth) {
	var vector = new Microsoft.Xna.Framework.Vector2();

	if (spriteFont !== null) {
		throw new System.ArgumentNullException("spriteFont");
	}

	if (text !== null) {
		throw new System.ArgumentNullException("text");
	}
	var stringProxy = new Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy(text);
	vector.X = scale;
	vector.Y = scale;
	spriteFont.InternalDraw(
		/* ref */ stringProxy, 
		this, 
		position, 
		color, 
		rotation, 
		origin, 
		/* ref */ vector, 
		effects, 
		layerDepth
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.DrawString$3 = function (spriteFont, text, position, color, rotation, origin, scale, effects, layerDepth) {
	var vector = new Microsoft.Xna.Framework.Vector2();

	if (spriteFont !== null) {
		throw new System.ArgumentNullException("spriteFont");
	}

	if (text !== null) {
		throw new System.ArgumentNullException("text");
	}
	var stringProxy = new Microsoft.Xna.Framework.Graphics.SpriteFont.StringProxy(text);
	vector.X = scale;
	vector.Y = scale;
	spriteFont.InternalDraw(
		/* ref */ stringProxy, 
		this, 
		position, 
		color, 
		rotation, 
		origin, 
		/* ref */ vector, 
		effects, 
		layerDepth
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.DrawString$4 = function (spriteFont, text, position, color, rotation, origin, scale, effects, layerDepth) {

	if (spriteFont !== null) {
		throw new System.ArgumentNullException("spriteFont");
	}

	if (text !== null) {
		throw new System.ArgumentNullException("text");
	}
	spriteFont.InternalDraw(
		JSIL.UnmaterializedReference(), 
		this, 
		position, 
		color, 
		rotation, 
		origin, 
		/* ref */ scale, 
		effects, 
		layerDepth
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.DrawString$5 = function (spriteFont, text, position, color, rotation, origin, scale, effects, layerDepth) {

	if (spriteFont !== null) {
		throw new System.ArgumentNullException("spriteFont");
	}

	if (text !== null) {
		throw new System.ArgumentNullException("text");
	}
	spriteFont.InternalDraw(
		JSIL.UnmaterializedReference(), 
		this, 
		position, 
		color, 
		rotation, 
		origin, 
		/* ref */ scale, 
		effects, 
		layerDepth
	);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.InternalDraw = JSIL.UntranslatableFunction("InternalDraw");

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.Flush = function () {

	if (this.spriteSortMode !== 0) {
		this.RenderBatch(this.currentTexture, this.spriteQueue, 0, this.spriteQueueCount);
		this.currentTexture = null;
	} else {

		if (this.spriteSortMode === Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred) {
			var array = this.spriteQueue;
		} else {
			this.SortSprites();
			array = this.sortedSprites;
		}
		var num = 0;
		var texture2D = null;
		var i = 0;

	__while0__: 
		while (i < this.spriteQueueCount) {

			if (this.spriteSortMode === Microsoft.Xna.Framework.Graphics.SpriteSortMode.Deferred) {
				var texture2D2 = this.spriteTextures[i];
			} else {
				var num2 = this.sortIndices[i];
				array[i] = this.spriteQueue[num2];
				texture2D2 = this.spriteTextures[num2];
			}

			if (texture2D2 !== texture2D) {

				if (i > num) {
					this.RenderBatch(texture2D, array, num, (i - num));
				}
				num = i;
				texture2D = texture2D2;
			}
			++i;
		}
		this.RenderBatch(texture2D, array, num, (this.spriteQueueCount - num));
		System.Array.Clear(this.spriteTextures, 0, this.spriteQueueCount);
	}
	this.spriteQueueCount = 0;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.SortSprites = function () {

	if (!((this.sortIndices === null) && (this.sortIndices.length >= this.spriteQueueCount))) {
		this.sortIndices = JSIL.Array.New(System.Int32, this.spriteQueueCount);
		this.sortedSprites = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.SpriteBatch.SpriteVertex.MemberwiseClone(), this.spriteQueueCount);
	}

	switch (this.spriteSortMode) {
		case 2: 

			if (this.textureComparer !== null) {
				this.textureComparer = new Microsoft.Xna.Framework.Graphics.SpriteBatch.TextureComparer(this);
			}
			var comparer = this.textureComparer;
			break;
		case 3: 

			if (this.backToFrontComparer !== null) {
				this.backToFrontComparer = new Microsoft.Xna.Framework.Graphics.SpriteBatch.BackToFrontComparer(this);
			}
			comparer = this.backToFrontComparer;
			break;
		case 4: 

			if (this.frontToBackComparer !== null) {
				this.frontToBackComparer = new Microsoft.Xna.Framework.Graphics.SpriteBatch.FrontToBackComparer(this);
			}
			comparer = this.frontToBackComparer;
			break;
		default: 
			throw new System.NotSupportedException();
	}
	var i = 0;

__while0__: 
	while (i < this.spriteQueueCount) {
		this.sortIndices[i] = i;
		++i;
	}
	System.Array.Sort(this.sortIndices, 0, this.spriteQueueCount, comparer);
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.SetRenderState = function () {

	if (this.saveStateMode === Microsoft.Xna.Framework.Graphics.SaveStateMode.SaveState) {

		if (!((this.savedState === null) && !this.savedState.IsDisposed)) {
			this.savedState = new Microsoft.Xna.Framework.Graphics.StateBlock(this.graphicsDevice);
		}
		this.savedState.Capture();
	}
	var renderState = this.graphicsDevice.RenderState;
	renderState.CullMode = Microsoft.Xna.Framework.Graphics.CullMode.CullCounterClockwiseFace;
	renderState.DepthBufferEnable = false;

	switch (this.spriteBlendMode) {
		case 0: 
			renderState.AlphaBlendEnable = false;
			renderState.AlphaTestEnable = false;
			break;
		case 1: 
			renderState.AlphaBlendEnable = true;
			renderState.AlphaBlendOperation = Microsoft.Xna.Framework.Graphics.BlendFunction.Add;
			renderState.SourceBlend = Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha;
			renderState.DestinationBlend = Microsoft.Xna.Framework.Graphics.Blend.InverseSourceAlpha;
			renderState.SeparateAlphaBlendEnabled = false;
			renderState.AlphaTestEnable = true;
			renderState.AlphaFunction = Microsoft.Xna.Framework.Graphics.CompareFunction.Greater;
			renderState.ReferenceAlpha = 0;
			break;
		case 2: 
			renderState.AlphaBlendEnable = true;
			renderState.AlphaBlendOperation = Microsoft.Xna.Framework.Graphics.BlendFunction.Add;
			renderState.SourceBlend = Microsoft.Xna.Framework.Graphics.Blend.SourceAlpha;
			renderState.DestinationBlend = Microsoft.Xna.Framework.Graphics.Blend.One;
			renderState.SeparateAlphaBlendEnabled = false;
			renderState.AlphaTestEnable = true;
			renderState.AlphaFunction = Microsoft.Xna.Framework.Graphics.CompareFunction.Greater;
			renderState.ReferenceAlpha = 0;
			break;
	}
	var samplerState = this.graphicsDevice.SamplerStates.get_Item(0);
	samplerState.AddressU = Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp;
	samplerState.AddressV = Microsoft.Xna.Framework.Graphics.TextureAddressMode.Clamp;
	samplerState.MagFilter = Microsoft.Xna.Framework.Graphics.TextureFilter.Linear;
	samplerState.MinFilter = Microsoft.Xna.Framework.Graphics.TextureFilter.Linear;
	samplerState.MipFilter = Microsoft.Xna.Framework.Graphics.TextureFilter.Linear;
	samplerState.MipMapLevelOfDetailBias = 0;
	samplerState.MaxMipLevel = 0;
	this.graphicsDevice.VertexShader = this.vertexShader;
	this.graphicsDevice.PixelShader = this.pixelShader;
	this.graphicsDevice.VertexDeclaration = this.vertexDeclaration;
	var viewport = this.graphicsDevice.Viewport;
	this.graphicsDevice.SetVertexShaderConstant(0, new Microsoft.Xna.Framework.Vector4(JSIL.Cast(viewport.get_Width(), System.Single), JSIL.Cast(viewport.get_Height(), System.Single), 0, 0));
	this.SetPlatformRenderState();
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.CreateIndexData = function () {
	var array = JSIL.Array.New(System.Int16, 12288);
	var i = 0;

__while0__: 
	while (i < 2048) {
		array[(i * 6)] = (i * 4);
		array[((i * 6) + 1)] = ((i * 4) + 1);
		array[((i * 6) + 2)] = ((i * 4) + 2);
		array[((i * 6) + 3)] = (i * 4);
		array[((i * 6) + 4)] = ((i * 4) + 2);
		array[((i * 6) + 5)] = ((i * 4) + 3);
		++i;
	}
	return array;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch._cctor = function () {
	var array = JSIL.Array.New(System.Single, 4);
	array[1] = 1;
	array[2] = 1;
	Microsoft.Xna.Framework.Graphics.SpriteBatch.xCornerOffsets = array;
	Microsoft.Xna.Framework.Graphics.SpriteBatch.yCornerOffsets = JSIL.Array.New(System.Single, [0, 0, 1, 1]);
	Microsoft.Xna.Framework.Graphics.SpriteBatch.vector2Zero = Microsoft.Xna.Framework.Vector2.Zero;
	Microsoft.Xna.Framework.Graphics.SpriteBatch.nullRectangle = new (System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle)) ();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype, "Begin", [
		["Begin$0", []], 
		["Begin$1", [Microsoft.Xna.Framework.Graphics.SpriteBlendMode]], 
		["Begin$2", [Microsoft.Xna.Framework.Graphics.SpriteBlendMode, Microsoft.Xna.Framework.Graphics.SpriteSortMode, Microsoft.Xna.Framework.Graphics.SaveStateMode]], 
		["Begin$3", [Microsoft.Xna.Framework.Graphics.SpriteBlendMode, Microsoft.Xna.Framework.Graphics.SpriteSortMode, Microsoft.Xna.Framework.Graphics.SaveStateMode, Microsoft.Xna.Framework.Matrix]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype, "Draw", [
		["Draw$0", [Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.Color]], 
		["Draw$1", [Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Vector2, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), Microsoft.Xna.Framework.Graphics.Color]], 
		["Draw$2", [Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Vector2, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), Microsoft.Xna.Framework.Graphics.Color, System.Single, Microsoft.Xna.Framework.Vector2, System.Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Single]], 
		["Draw$3", [Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Vector2, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), Microsoft.Xna.Framework.Graphics.Color, System.Single, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Single]], 
		["Draw$4", [Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Graphics.Color]], 
		["Draw$5", [Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Rectangle, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), Microsoft.Xna.Framework.Graphics.Color]], 
		["Draw$6", [Microsoft.Xna.Framework.Graphics.Texture2D, Microsoft.Xna.Framework.Rectangle, System.Nullable$b1.Of(Microsoft.Xna.Framework.Rectangle), Microsoft.Xna.Framework.Graphics.Color, System.Single, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Single]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype, "DrawString", [
		["DrawString$0", [Microsoft.Xna.Framework.Graphics.SpriteFont, System.String, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.Color]], 
		["DrawString$1", [Microsoft.Xna.Framework.Graphics.SpriteFont, System.Text.StringBuilder, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.Color]], 
		["DrawString$2", [Microsoft.Xna.Framework.Graphics.SpriteFont, System.String, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.Color, System.Single, Microsoft.Xna.Framework.Vector2, System.Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Single]], 
		["DrawString$3", [Microsoft.Xna.Framework.Graphics.SpriteFont, System.Text.StringBuilder, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.Color, System.Single, Microsoft.Xna.Framework.Vector2, System.Single, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Single]], 
		["DrawString$4", [Microsoft.Xna.Framework.Graphics.SpriteFont, System.String, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.Color, System.Single, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Single]], 
		["DrawString$5", [Microsoft.Xna.Framework.Graphics.SpriteFont, System.Text.StringBuilder, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.Color, System.Single, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Graphics.SpriteEffects, System.Single]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.get_GraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Graphics.SpriteBatch._cctor();
Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype.__ImplementInterface__(System.IDisposable);

Microsoft.Xna.Framework.Graphics.SpriteBatch.SpriteVertex.prototype.Rotation = 0;
Microsoft.Xna.Framework.Graphics.SpriteBatch.SpriteVertex.prototype.Depth = 0;
Microsoft.Xna.Framework.Graphics.SpriteBatch.SpriteVertex.prototype.Effects = 0;
Microsoft.Xna.Framework.Graphics.SpriteBatch.SpriteVertex.prototype.__StructFields__ = {
	Source: Microsoft.Xna.Framework.Vector4, 
	Destination: Microsoft.Xna.Framework.Vector4, 
	Origin: Microsoft.Xna.Framework.Vector2, 
	Color: Microsoft.Xna.Framework.Graphics.Color
};

Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.SpriteVertex.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.SpriteVertex);
Microsoft.Xna.Framework.Graphics.SpriteBatch.TextureComparer.prototype.parent = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.TextureComparer.prototype._ctor = function (parent) {
	System.Object.prototype._ctor.call(this);
	this.parent = parent;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.TextureComparer.prototype.Compare = function (x, y) {

	if (JSIL.UntranslatableInstruction("ldfld:IDirect3DBaseTexture9*(Texture::pComPtr, ldloc:Texture(texture))") > JSIL.UntranslatableInstruction("ldfld:IDirect3DBaseTexture9*(Texture::pComPtr, ldloc:Texture(texture2))")) {
		return -1;
	}

	if (JSIL.UntranslatableInstruction("ldfld:IDirect3DBaseTexture9*(Texture::pComPtr, ldloc:Texture(texture))") < JSIL.UntranslatableInstruction("ldfld:IDirect3DBaseTexture9*(Texture::pComPtr, ldloc:Texture(texture2))")) {
		return 1;
	}
	return 0;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.TextureComparer.prototype.__ImplementInterface__(System.Collections.Generic.IComparer$b1.Of(System.Int32));

Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.TextureComparer.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.TextureComparer);
Microsoft.Xna.Framework.Graphics.SpriteBatch.BackToFrontComparer.prototype.parent = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.BackToFrontComparer.prototype._ctor = function (parent) {
	System.Object.prototype._ctor.call(this);
	this.parent = parent;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.BackToFrontComparer.prototype.Compare = function (x, y) {
	var depth = this.parent.spriteQueue[x].Depth;
	var depth2 = this.parent.spriteQueue[y].Depth;

	if (depth > depth2) {
		return -1;
	}

	if (depth < depth2) {
		return 1;
	}
	return 0;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.BackToFrontComparer.prototype.__ImplementInterface__(System.Collections.Generic.IComparer$b1.Of(System.Int32));

Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.BackToFrontComparer.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.BackToFrontComparer);
Microsoft.Xna.Framework.Graphics.SpriteBatch.FrontToBackComparer.prototype.parent = null;
Microsoft.Xna.Framework.Graphics.SpriteBatch.FrontToBackComparer.prototype._ctor = function (parent) {
	System.Object.prototype._ctor.call(this);
	this.parent = parent;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.FrontToBackComparer.prototype.Compare = function (x, y) {
	var depth = this.parent.spriteQueue[x].Depth;
	var depth2 = this.parent.spriteQueue[y].Depth;

	if (depth > depth2) {
		return 1;
	}

	if (depth < depth2) {
		return -1;
	}
	return 0;
};

Microsoft.Xna.Framework.Graphics.SpriteBatch.FrontToBackComparer.prototype.__ImplementInterface__(System.Collections.Generic.IComparer$b1.Of(System.Int32));

Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.FrontToBackComparer.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.FrontToBackComparer);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.SpriteBatch);
Microsoft.Xna.Framework.Graphics.SpriteWindowsPixelShaderCode.Code = null;
Microsoft.Xna.Framework.Graphics.SpriteWindowsPixelShaderCode._cctor = function () {
	Microsoft.Xna.Framework.Graphics.SpriteWindowsPixelShaderCode.Code = JSIL.Array.New(System.Byte, [1, 1, 255, 255, 254, 255, 36, 0, 67, 84, 65, 66, 28, 0, 0, 0, 87, 0, 0, 0, 1, 1, 255, 255, 1, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 80, 0, 0, 0, 48, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 97, 109, 112, 108, 101, 114, 0, 171, 4, 0, 12, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 112, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 171, 66, 0, 0, 0, 0, 0, 15, 176, 5, 0, 0, 0, 0, 0, 15, 128, 0, 0, 228, 176, 0, 0, 228, 144, 255, 255, 0, 0]);
};

Microsoft.Xna.Framework.Graphics.SpriteWindowsPixelShaderCode._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.SpriteWindowsPixelShaderCode);
Microsoft.Xna.Framework.Graphics.SpriteWindowsVertexShaderCode.Code = null;
Microsoft.Xna.Framework.Graphics.SpriteWindowsVertexShaderCode._cctor = function () {
	Microsoft.Xna.Framework.Graphics.SpriteWindowsVertexShaderCode.Code = JSIL.Array.New(System.Byte, [1, 1, 254, 255, 254, 255, 56, 0, 67, 84, 65, 66, 28, 0, 0, 0, 168, 0, 0, 0, 1, 1, 254, 255, 3, 0, 0, 0, 28, 0, 0, 0, 0, 1, 0, 0, 161, 0, 0, 0, 88, 0, 0, 0, 2, 0, 2, 0, 4, 0, 2, 0, 104, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 2, 0, 1, 0, 1, 0, 2, 0, 132, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 2, 0, 0, 0, 1, 0, 2, 0, 132, 0, 0, 0, 0, 0, 0, 0, 77, 97, 116, 114, 105, 120, 84, 114, 97, 110, 115, 102, 111, 114, 109, 0, 3, 0, 3, 0, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 84, 101, 120, 116, 117, 114, 101, 83, 105, 122, 101, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 86, 105, 101, 119, 112, 111, 114, 116, 83, 105, 122, 101, 0, 118, 115, 95, 49, 95, 49, 0, 77, 105, 99, 114, 111, 115, 111, 102, 116, 32, 40, 82, 41, 32, 68, 51, 68, 88, 57, 32, 83, 104, 97, 100, 101, 114, 32, 67, 111, 109, 112, 105, 108, 101, 114, 32, 57, 46, 49, 53, 46, 55, 55, 57, 46, 48, 48, 48, 48, 0, 171, 171, 81, 0, 0, 0, 6, 0, 15, 160, 0, 0, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 7, 0, 15, 160, 0, 0, 0, 64, 0, 0, 0, 192, 0, 0, 128, 191, 0, 0, 128, 63, 31, 0, 0, 0, 0, 0, 0, 128, 0, 0, 15, 144, 31, 0, 0, 0, 10, 0, 0, 128, 1, 0, 15, 144, 31, 0, 0, 0, 5, 0, 0, 128, 2, 0, 15, 144, 5, 0, 0, 0, 0, 0, 15, 128, 0, 0, 85, 144, 3, 0, 228, 160, 4, 0, 0, 0, 0, 0, 15, 128, 0, 0, 0, 144, 2, 0, 228, 160, 0, 0, 228, 128, 4, 0, 0, 0, 0, 0, 15, 128, 0, 0, 170, 144, 4, 0, 228, 160, 0, 0, 228, 128, 4, 0, 0, 0, 0, 0, 15, 128, 0, 0, 255, 144, 5, 0, 228, 160, 0, 0, 228, 128, 2, 0, 0, 0, 0, 0, 3, 128, 0, 0, 228, 128, 6, 0, 0, 160, 6, 0, 0, 0, 1, 0, 1, 128, 0, 0, 0, 160, 6, 0, 0, 0, 1, 0, 2, 128, 0, 0, 85, 160, 1, 0, 0, 0, 0, 0, 12, 192, 0, 0, 228, 128, 5, 0, 0, 0, 0, 0, 3, 128, 0, 0, 228, 128, 1, 0, 228, 128, 4, 0, 0, 0, 0, 0, 3, 192, 0, 0, 228, 128, 7, 0, 228, 160, 7, 0, 238, 160, 6, 0, 0, 0, 0, 0, 1, 128, 1, 0, 0, 160, 6, 0, 0, 0, 0, 0, 2, 128, 1, 0, 85, 160, 5, 0, 0, 0, 0, 0, 3, 224, 0, 0, 228, 128, 2, 0, 228, 144, 1, 0, 0, 0, 0, 0, 15, 208, 1, 0, 228, 144, 255, 255, 0, 0]);
};

Microsoft.Xna.Framework.Graphics.SpriteWindowsVertexShaderCode._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.SpriteWindowsVertexShaderCode);
Microsoft.Xna.Framework.Media.Album.Empty = null;
Microsoft.Xna.Framework.Media.Album.prototype.handle = 0;
Microsoft.Xna.Framework.Media.Album.prototype.hashcode = 0;
Microsoft.Xna.Framework.Media.Album.prototype.name = null;
Microsoft.Xna.Framework.Media.Album.prototype.artist = null;
Microsoft.Xna.Framework.Media.Album.prototype.genre = null;
Microsoft.Xna.Framework.Media.Album.prototype.songs = null;
Microsoft.Xna.Framework.Media.Album.prototype.hasArt = new System.Boolean();
Microsoft.Xna.Framework.Media.Album.prototype.art = null;
Microsoft.Xna.Framework.Media.Album.prototype.thumbnail = null;
Microsoft.Xna.Framework.Media.Album.prototype.__StructFields__ = {
	duration: System.TimeSpan
};
Microsoft.Xna.Framework.Media.Album.prototype._ctor$0 = function () {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.artist = Microsoft.Xna.Framework.Media.Artist.Empty;
	this.genre = Microsoft.Xna.Framework.Media.Genre.Empty;
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.duration = System.TimeSpan.Zero.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.Album.prototype._ctor$1 = function (handle) {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.artist = Microsoft.Xna.Framework.Media.Artist.Empty;
	this.genre = Microsoft.Xna.Framework.Media.Genre.Empty;
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.duration = System.TimeSpan.Zero.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
	this.handle = handle;

	if (this.IsValidHandle) {
		var stringBuilder = new System.Text.StringBuilder(260);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_GetName(handle, stringBuilder, 260))) {
			this.name = stringBuilder.toString();
		}
	}
};

Microsoft.Xna.Framework.Media.Album.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.Album.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.Album.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_Release(this.handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.Album.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.Album.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.Album.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Media.Album.prototype.get_Artist = function () {

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.Artist.op_Equality(this.artist, Microsoft.Xna.Framework.Media.Artist.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetArtist(this.Handle, /* ref */ num))) {
			this.artist = new Microsoft.Xna.Framework.Media.Artist(num.value);
		}
	}
	return this.artist;
};

Microsoft.Xna.Framework.Media.Album.prototype.get_Songs = function () {

	if (!(!this.IsValidHandle || (this.songs !== Microsoft.Xna.Framework.Media.SongCollection.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetSongs(this.Handle, /* ref */ num))) {
			this.songs = new Microsoft.Xna.Framework.Media.SongCollection(num.value);
		}
	}
	return this.songs;
};

Microsoft.Xna.Framework.Media.Album.prototype.get_Genre = function () {

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.Genre.op_Equality(this.genre, Microsoft.Xna.Framework.Media.Genre.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetGenre(this.Handle, /* ref */ num))) {
			this.genre = new Microsoft.Xna.Framework.Media.Genre(num.value);
		}
	}
	return this.genre;
};

Microsoft.Xna.Framework.Media.Album.prototype.get_Duration = function () {

	if (!(!this.IsValidHandle || !System.TimeSpan.op_Equality(this.duration.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone()))) {
		var milliseconds = new JSIL.Variable(0);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetDuration(this.Handle, /* ref */ milliseconds))) {
			this.duration = new System.TimeSpan(0, 0, 0, 0, milliseconds.value);
		}
	}
	return this.duration;
};

Microsoft.Xna.Framework.Media.Album.prototype.get_HasArt = function () {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_HasArt(this.Handle, /* ref */ new JSIL.MemberReference(this, "hasArt"));
	}
	return this.hasArt;
};

Microsoft.Xna.Framework.Media.Album.prototype.GetAlbumArt = function (serviceProvider) {

	if (!(this.art || !this.HasArt)) {
		this.art = this.GetTexture(serviceProvider, false);
	}
	return this.art;
};

Microsoft.Xna.Framework.Media.Album.prototype.GetThumbnail = function (serviceProvider) {

	if (!(this.thumbnail || !this.HasArt)) {
		this.thumbnail = this.GetTexture(serviceProvider, true);
	}
	return this.thumbnail;
};

Microsoft.Xna.Framework.Media.Album.prototype.GetTexture = function (serviceProvider, thumbnail) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Media.Album.op_Equality = function (first, second) {
	return System.Object.Equals(first, second);
};

Microsoft.Xna.Framework.Media.Album.op_Inequality = function (first, second) {
	return !Microsoft.Xna.Framework.Media.Album.op_Equality(first, second);
};

Microsoft.Xna.Framework.Media.Album.prototype.Equals$0 = function (obj) {
	var flag = new JSIL.Variable(System.Object.ReferenceEquals(this, obj));

	if (!flag.value) {
		var album = JSIL.TryCast(obj, Microsoft.Xna.Framework.Media.Album);

		if (!(!this.IsValidHandle || 
				!Microsoft.Xna.Framework.Media.Album.op_Inequality(album, null) || !album.IsValidHandle)) {
			Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, album.Handle, /* ref */ flag);
		}
	}
	return flag.value;
};

Microsoft.Xna.Framework.Media.Album.prototype.Equals$1 = function (other) {
	var flag = new JSIL.Variable(System.Object.ReferenceEquals(this, other));

	if (!(flag.value || 
			!this.IsValidHandle || 
			!Microsoft.Xna.Framework.Media.Album.op_Inequality(other, null) || !other.IsValidHandle)) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, other.Handle, /* ref */ flag);
	}
	return flag.value;
};

Microsoft.Xna.Framework.Media.Album.prototype.toString = function () {
	return this.Name;
};

Microsoft.Xna.Framework.Media.Album.prototype.GetHashCode = function () {

	if (this.hashcode === -1) {
		this.hashcode = this.Name.GetHashCode();
	}
	return this.hashcode;
};

Microsoft.Xna.Framework.Media.Album._cctor = function () {
	Microsoft.Xna.Framework.Media.Album.Empty = new Microsoft.Xna.Framework.Media.Album();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Album.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Album.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Album.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Media.Album]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.Album.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.Album.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Album.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.Album.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Album.prototype, "Name", {
		get: Microsoft.Xna.Framework.Media.Album.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Album.prototype, "Artist", {
		get: Microsoft.Xna.Framework.Media.Album.prototype.get_Artist
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Album.prototype, "Songs", {
		get: Microsoft.Xna.Framework.Media.Album.prototype.get_Songs
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Album.prototype, "Genre", {
		get: Microsoft.Xna.Framework.Media.Album.prototype.get_Genre
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Album.prototype, "Duration", {
		get: Microsoft.Xna.Framework.Media.Album.prototype.get_Duration
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Album.prototype, "HasArt", {
		get: Microsoft.Xna.Framework.Media.Album.prototype.get_HasArt
	});
Microsoft.Xna.Framework.Media.Album._cctor();
Microsoft.Xna.Framework.Media.Album.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Media.Album));
Microsoft.Xna.Framework.Media.Album.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.Album.prototype);
Object.seal(Microsoft.Xna.Framework.Media.Album);
Microsoft.Xna.Framework.Media.AlbumCollection.Empty = null;
Microsoft.Xna.Framework.Media.AlbumCollection.prototype.enumerator = null;
Microsoft.Xna.Framework.Media.AlbumCollection.prototype.handle = 0;
Microsoft.Xna.Framework.Media.AlbumCollection.prototype._ctor$0 = function () {
	this.enumerator = Microsoft.Xna.Framework.Media.AlbumEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype._ctor$1 = function (handle) {
	this.enumerator = Microsoft.Xna.Framework.Media.AlbumEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
	this.enumerator = new Microsoft.Xna.Framework.Media.AlbumEnumerator(handle);
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_Release(this.Handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.AlbumEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.AlbumEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.IEnumerable_GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.AlbumEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.AlbumEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.get_Item = function (index) {
	return this.enumerator.get_Item(index);
};

Microsoft.Xna.Framework.Media.AlbumCollection.prototype.get_Count = function () {
	return this.enumerator.Count;
};

Microsoft.Xna.Framework.Media.AlbumCollection._cctor = function () {
	Microsoft.Xna.Framework.Media.AlbumCollection.Empty = new Microsoft.Xna.Framework.Media.AlbumCollection();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.AlbumCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.AlbumCollection.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.AlbumCollection.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.AlbumCollection.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.AlbumCollection.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.AlbumCollection.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.AlbumCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.AlbumCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.AlbumCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.AlbumCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Media.AlbumCollection._cctor();
Microsoft.Xna.Framework.Media.AlbumCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Media.Album));
Microsoft.Xna.Framework.Media.AlbumCollection.prototype.__ImplementInterface__(System.Collections.IEnumerable);
Microsoft.Xna.Framework.Media.AlbumCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.AlbumCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.AlbumCollection);
Microsoft.Xna.Framework.Media.Artist.Empty = null;
Microsoft.Xna.Framework.Media.Artist.prototype.handle = 0;
Microsoft.Xna.Framework.Media.Artist.prototype.hashcode = 0;
Microsoft.Xna.Framework.Media.Artist.prototype.name = null;
Microsoft.Xna.Framework.Media.Artist.prototype.songs = null;
Microsoft.Xna.Framework.Media.Artist.prototype.albums = null;
Microsoft.Xna.Framework.Media.Artist.prototype._ctor$0 = function () {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.albums = Microsoft.Xna.Framework.Media.AlbumCollection.Empty;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.Artist.prototype._ctor$1 = function (handle) {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.albums = Microsoft.Xna.Framework.Media.AlbumCollection.Empty;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;

	if (this.IsValidHandle) {
		var stringBuilder = new System.Text.StringBuilder(260);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_GetName(handle, stringBuilder, 260))) {
			this.name = stringBuilder.toString();
		}
	}
};

Microsoft.Xna.Framework.Media.Artist.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.Artist.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.Artist.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_Release(this.handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.Artist.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.Artist.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.Artist.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Media.Artist.prototype.get_Songs = function () {

	if (!(!this.IsValidHandle || (this.songs !== Microsoft.Xna.Framework.Media.SongCollection.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaArtist_GetSongs(this.Handle, /* ref */ num))) {
			this.songs = new Microsoft.Xna.Framework.Media.SongCollection(num.value);
		}
	}
	return this.songs;
};

Microsoft.Xna.Framework.Media.Artist.prototype.get_Albums = function () {

	if (!(!this.IsValidHandle || (this.albums !== Microsoft.Xna.Framework.Media.AlbumCollection.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaArtist_GetAlbums(this.Handle, /* ref */ num))) {
			this.albums = new Microsoft.Xna.Framework.Media.AlbumCollection(num.value);
		}
	}
	return this.albums;
};

Microsoft.Xna.Framework.Media.Artist.op_Equality = function (first, second) {
	return System.Object.Equals(first, second);
};

Microsoft.Xna.Framework.Media.Artist.op_Inequality = function (first, second) {
	return !Microsoft.Xna.Framework.Media.Artist.op_Equality(first, second);
};

Microsoft.Xna.Framework.Media.Artist.prototype.Equals$0 = function (obj) {
	var flag = new JSIL.Variable(System.Object.ReferenceEquals(this, obj));

	if (!flag.value) {
		var artist = JSIL.TryCast(obj, Microsoft.Xna.Framework.Media.Artist);

		if (!(!this.IsValidHandle || 
				!Microsoft.Xna.Framework.Media.Artist.op_Inequality(artist, null) || !artist.IsValidHandle)) {
			Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, artist.Handle, /* ref */ flag);
		}
	}
	return flag.value;
};

Microsoft.Xna.Framework.Media.Artist.prototype.Equals$1 = function (other) {
	var flag = new JSIL.Variable(System.Object.ReferenceEquals(this, other));

	if (!(flag.value || 
			!this.IsValidHandle || 
			!Microsoft.Xna.Framework.Media.Artist.op_Inequality(other, null) || !other.IsValidHandle)) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, other.Handle, /* ref */ flag);
	}
	return flag.value;
};

Microsoft.Xna.Framework.Media.Artist.prototype.toString = function () {
	return this.Name;
};

Microsoft.Xna.Framework.Media.Artist.prototype.GetHashCode = function () {

	if (this.hashcode === -1) {
		this.hashcode = this.Name.GetHashCode();
	}
	return this.hashcode;
};

Microsoft.Xna.Framework.Media.Artist._cctor = function () {
	Microsoft.Xna.Framework.Media.Artist.Empty = new Microsoft.Xna.Framework.Media.Artist();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Artist.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Artist.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Artist.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Media.Artist]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.Artist.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.Artist.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Artist.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.Artist.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Artist.prototype, "Name", {
		get: Microsoft.Xna.Framework.Media.Artist.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Artist.prototype, "Songs", {
		get: Microsoft.Xna.Framework.Media.Artist.prototype.get_Songs
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Artist.prototype, "Albums", {
		get: Microsoft.Xna.Framework.Media.Artist.prototype.get_Albums
	});
Microsoft.Xna.Framework.Media.Artist._cctor();
Microsoft.Xna.Framework.Media.Artist.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Media.Artist));
Microsoft.Xna.Framework.Media.Artist.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.Artist.prototype);
Object.seal(Microsoft.Xna.Framework.Media.Artist);
Microsoft.Xna.Framework.Media.ArtistCollection.Empty = null;
Microsoft.Xna.Framework.Media.ArtistCollection.prototype.enumerator = null;
Microsoft.Xna.Framework.Media.ArtistCollection.prototype.handle = 0;
Microsoft.Xna.Framework.Media.ArtistCollection.prototype._ctor$0 = function () {
	this.enumerator = Microsoft.Xna.Framework.Media.ArtistEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype._ctor$1 = function (handle) {
	this.enumerator = Microsoft.Xna.Framework.Media.ArtistEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
	this.enumerator = new Microsoft.Xna.Framework.Media.ArtistEnumerator(handle);
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_Release(this.Handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.ArtistEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.ArtistEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.IEnumerable_GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.ArtistEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.ArtistEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.get_Item = function (index) {
	return this.enumerator.get_Item(index);
};

Microsoft.Xna.Framework.Media.ArtistCollection.prototype.get_Count = function () {
	return this.enumerator.Count;
};

Microsoft.Xna.Framework.Media.ArtistCollection._cctor = function () {
	Microsoft.Xna.Framework.Media.ArtistCollection.Empty = new Microsoft.Xna.Framework.Media.ArtistCollection();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.ArtistCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.ArtistCollection.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.ArtistCollection.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.ArtistCollection.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.ArtistCollection.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.ArtistCollection.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.ArtistCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.ArtistCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.ArtistCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.ArtistCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Media.ArtistCollection._cctor();
Microsoft.Xna.Framework.Media.ArtistCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Media.Artist));
Microsoft.Xna.Framework.Media.ArtistCollection.prototype.__ImplementInterface__(System.Collections.IEnumerable);
Microsoft.Xna.Framework.Media.ArtistCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.ArtistCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.ArtistCollection);
Microsoft.Xna.Framework.Media.Genre.Empty = null;
Microsoft.Xna.Framework.Media.Genre.prototype.handle = 0;
Microsoft.Xna.Framework.Media.Genre.prototype.hashcode = 0;
Microsoft.Xna.Framework.Media.Genre.prototype.name = null;
Microsoft.Xna.Framework.Media.Genre.prototype.songs = null;
Microsoft.Xna.Framework.Media.Genre.prototype.albums = null;
Microsoft.Xna.Framework.Media.Genre.prototype._ctor$0 = function () {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.albums = Microsoft.Xna.Framework.Media.AlbumCollection.Empty;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.Genre.prototype._ctor$1 = function (handle) {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.albums = Microsoft.Xna.Framework.Media.AlbumCollection.Empty;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;

	if (this.IsValidHandle) {
		var stringBuilder = new System.Text.StringBuilder(260);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_GetName(handle, stringBuilder, 260))) {
			this.name = stringBuilder.toString();
		}
	}
};

Microsoft.Xna.Framework.Media.Genre.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.Genre.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.Genre.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_Release(this.handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.Genre.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.Genre.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.Genre.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Media.Genre.prototype.get_Songs = function () {

	if (!(!this.IsValidHandle || (this.songs !== Microsoft.Xna.Framework.Media.SongCollection.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaGenre_GetSongs(this.Handle, /* ref */ num))) {
			this.songs = new Microsoft.Xna.Framework.Media.SongCollection(num.value);
		}
	}
	return this.songs;
};

Microsoft.Xna.Framework.Media.Genre.prototype.get_Albums = function () {

	if (!(!this.IsValidHandle || (this.albums !== Microsoft.Xna.Framework.Media.AlbumCollection.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaGenre_GetAlbums(this.Handle, /* ref */ num))) {
			this.albums = new Microsoft.Xna.Framework.Media.AlbumCollection(num.value);
		}
	}
	return this.albums;
};

Microsoft.Xna.Framework.Media.Genre.op_Equality = function (first, second) {
	return System.Object.Equals(first, second);
};

Microsoft.Xna.Framework.Media.Genre.op_Inequality = function (first, second) {
	return !Microsoft.Xna.Framework.Media.Genre.op_Equality(first, second);
};

Microsoft.Xna.Framework.Media.Genre.prototype.Equals$0 = function (obj) {
	var flag = new JSIL.Variable(System.Object.ReferenceEquals(this, obj));

	if (!flag.value) {
		var genre = JSIL.TryCast(obj, Microsoft.Xna.Framework.Media.Genre);

		if (!(!this.IsValidHandle || 
				!Microsoft.Xna.Framework.Media.Genre.op_Inequality(genre, null) || !genre.IsValidHandle)) {
			Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, genre.Handle, /* ref */ flag);
		}
	}
	return flag.value;
};

Microsoft.Xna.Framework.Media.Genre.prototype.Equals$1 = function (other) {
	var flag = new JSIL.Variable(System.Object.ReferenceEquals(this, other));

	if (!(flag.value || 
			!this.IsValidHandle || 
			!Microsoft.Xna.Framework.Media.Genre.op_Inequality(other, null) || !other.IsValidHandle)) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, other.Handle, /* ref */ flag);
	}
	return flag.value;
};

Microsoft.Xna.Framework.Media.Genre.prototype.toString = function () {
	return this.Name;
};

Microsoft.Xna.Framework.Media.Genre.prototype.GetHashCode = function () {

	if (this.hashcode === -1) {
		this.hashcode = this.Name.GetHashCode();
	}
	return this.hashcode;
};

Microsoft.Xna.Framework.Media.Genre._cctor = function () {
	Microsoft.Xna.Framework.Media.Genre.Empty = new Microsoft.Xna.Framework.Media.Genre();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Genre.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Genre.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Genre.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Media.Genre]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.Genre.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.Genre.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Genre.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.Genre.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Genre.prototype, "Name", {
		get: Microsoft.Xna.Framework.Media.Genre.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Genre.prototype, "Songs", {
		get: Microsoft.Xna.Framework.Media.Genre.prototype.get_Songs
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Genre.prototype, "Albums", {
		get: Microsoft.Xna.Framework.Media.Genre.prototype.get_Albums
	});
Microsoft.Xna.Framework.Media.Genre._cctor();
Microsoft.Xna.Framework.Media.Genre.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Media.Genre));
Microsoft.Xna.Framework.Media.Genre.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.Genre.prototype);
Object.seal(Microsoft.Xna.Framework.Media.Genre);
Microsoft.Xna.Framework.Media.GenreCollection.Empty = null;
Microsoft.Xna.Framework.Media.GenreCollection.prototype.enumerator = null;
Microsoft.Xna.Framework.Media.GenreCollection.prototype.handle = 0;
Microsoft.Xna.Framework.Media.GenreCollection.prototype._ctor$0 = function () {
	this.enumerator = Microsoft.Xna.Framework.Media.GenreEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype._ctor$1 = function (handle) {
	this.enumerator = Microsoft.Xna.Framework.Media.GenreEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
	this.enumerator = new Microsoft.Xna.Framework.Media.GenreEnumerator(handle);
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_Release(this.Handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.GenreEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.GenreEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.IEnumerable_GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.GenreEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.GenreEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.get_Item = function (index) {
	return this.enumerator.get_Item(index);
};

Microsoft.Xna.Framework.Media.GenreCollection.prototype.get_Count = function () {
	return this.enumerator.Count;
};

Microsoft.Xna.Framework.Media.GenreCollection._cctor = function () {
	Microsoft.Xna.Framework.Media.GenreCollection.Empty = new Microsoft.Xna.Framework.Media.GenreCollection();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.GenreCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.GenreCollection.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.GenreCollection.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.GenreCollection.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.GenreCollection.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.GenreCollection.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.GenreCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.GenreCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.GenreCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.GenreCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Media.GenreCollection._cctor();
Microsoft.Xna.Framework.Media.GenreCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Media.Genre));
Microsoft.Xna.Framework.Media.GenreCollection.prototype.__ImplementInterface__(System.Collections.IEnumerable);
Microsoft.Xna.Framework.Media.GenreCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.GenreCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.GenreCollection);
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.songs = null;
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.artists = null;
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.albums = null;
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.playlists = null;
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.genres = null;
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.pictures = null;
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.rootPictureAlbum = null;
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.mediaSource = null;
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_MediaSource = function () {
	return this.mediaSource;
};

Microsoft.Xna.Framework.Media.MediaLibrary._cctor = function () {
	Microsoft.Xna.Framework.UserAsyncDispatcher.Initialize();
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype._ctor$0 = function () {
	this._ctor(Microsoft.Xna.Framework.Media.MediaLibrary.PickBestMediaSource());
};

Microsoft.Xna.Framework.Media.MediaLibrary.PickBestMediaSource = function () {
	var availableMediaSources = Microsoft.Xna.Framework.Media.MediaSource.GetAvailableMediaSources();
	var mediaSource = null;
	var mediaSource2 = null;
	var num = 0;
	var enumerator = availableMediaSources.IEnumerable$b1_GetEnumerator();

	try {

	__while0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			var mediaSourceType = current.MediaSourceType;

			if (mediaSourceType !== Microsoft.Xna.Framework.Media.MediaSourceType.LocalDevice) {

				if (mediaSourceType !== Microsoft.Xna.Framework.Media.MediaSourceType.WindowsMediaConnect) {
					throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.UnexpectedError);
				}
				mediaSource = current;
				++num;
			} else {
				mediaSource2 = current;
			}
		}
	} finally {

		if (enumerator === null) {
			enumerator.IDisposable_Dispose();
		}
	}

	if (num === 1) {

		if (mediaSource !== null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.UnexpectedError);
		}
		return mediaSource;
	} else {

		if (mediaSource2 !== null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.UnexpectedError);
		}
		return mediaSource2;
	}
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.Dispose$0 = function () {
	this.isDisposed = true;
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Songs = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (this.songs === Microsoft.Xna.Framework.Media.SongCollection.Empty) {
		var handle = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetSongs(/* ref */ handle))) {
			this.songs = new Microsoft.Xna.Framework.Media.SongCollection(handle.value);
		}
	}
	return this.songs;
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Artists = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (this.artists === Microsoft.Xna.Framework.Media.ArtistCollection.Empty) {
		var handle = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetArtists(/* ref */ handle))) {
			this.artists = new Microsoft.Xna.Framework.Media.ArtistCollection(handle.value);
		}
	}
	return this.artists;
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Albums = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (this.albums === Microsoft.Xna.Framework.Media.AlbumCollection.Empty) {
		var handle = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetAlbums(/* ref */ handle))) {
			this.albums = new Microsoft.Xna.Framework.Media.AlbumCollection(handle.value);
		}
	}
	return this.albums;
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Playlists = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (this.playlists === Microsoft.Xna.Framework.Media.PlaylistCollection.Empty) {
		var handle = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetPlaylists(/* ref */ handle))) {
			this.playlists = new Microsoft.Xna.Framework.Media.PlaylistCollection(handle.value);
		}
	}
	return this.playlists;
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Genres = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (this.genres === Microsoft.Xna.Framework.Media.GenreCollection.Empty) {
		var handle = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetGenres(/* ref */ handle))) {
			this.genres = new Microsoft.Xna.Framework.Media.GenreCollection(handle.value);
		}
	}
	return this.genres;
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype._ctor$1 = function (mediaSource) {
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.artists = Microsoft.Xna.Framework.Media.ArtistCollection.Empty;
	this.albums = Microsoft.Xna.Framework.Media.AlbumCollection.Empty;
	this.playlists = Microsoft.Xna.Framework.Media.PlaylistCollection.Empty;
	this.genres = Microsoft.Xna.Framework.Media.GenreCollection.Empty;
	this.pictures = Microsoft.Xna.Framework.Media.PictureCollection.Empty;
	this.rootPictureAlbum = Microsoft.Xna.Framework.Media.PictureAlbum.Empty;
	System.Object.prototype._ctor.call(this);
	this.mediaSource = mediaSource;
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.Dispose$1 = function (disposing) {
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Pictures = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}
	return this.pictures;
};

Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_RootPictureAlbum = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}
	return this.rootPictureAlbum;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [Microsoft.Xna.Framework.Media.MediaSource]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "MediaSource", {
		get: Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_MediaSource
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "Songs", {
		get: Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Songs
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "Artists", {
		get: Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Artists
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "Albums", {
		get: Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Albums
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "Playlists", {
		get: Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Playlists
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "Genres", {
		get: Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Genres
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "Pictures", {
		get: Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_Pictures
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibrary.prototype, "RootPictureAlbum", {
		get: Microsoft.Xna.Framework.Media.MediaLibrary.prototype.get_RootPictureAlbum
	});
Microsoft.Xna.Framework.Media.MediaLibrary._cctor();
Microsoft.Xna.Framework.Media.MediaLibrary.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.MediaLibrary.prototype);
Object.seal(Microsoft.Xna.Framework.Media.MediaLibrary);
Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.disposed = new System.Boolean();
Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.handleList = 0;
Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.curIndex = 0;
Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.count = 0;
Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype._ctor$0 = function () {
	this.handleList = -1;
	this.curIndex = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype._ctor$1 = function (handle) {
	this.handleList = -1;
	this.curIndex = -1;
	System.Object.prototype._ctor.call(this);
	this.handleList = handle;
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_GetCount(this.handleList, /* ref */ new JSIL.MemberReference(this, "count")));
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.IEnumerator$b1_get_Current = function () {
	return JSIL.Cast(this.IEnumerator_Current, T);
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.IEnumerator_get_Current = function () {
	return this.get_Item(this.curIndex);
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.IEnumerator_MoveNext = function () {
	var result = false;
	this.curIndex = (this.curIndex < this.count) ? ++this.curIndex : this.count;

	if (this.curIndex < this.count) {
		result = true;
	}
	return result;
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.IEnumerator_Reset = function () {
	this.curIndex = -1;
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.get_Item = function (index) {

	if (!((index >= 0) && (index < this.count))) {
		throw new System.ArgumentOutOfRangeException("index", Microsoft.Xna.Framework.FrameworkResources.MustBeValidIndex);
	}
	var handleItem = new JSIL.Variable(-1);
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_GetItemAtIndex(this.handleList, index, /* ref */ handleItem));
	return this.CreateItemInstance(handleItem.value);
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.get_Count = function () {
	return this.count;
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.Dispose$1 = function (disposing) {

	if (!this.IsDisposed) {
		this.disposed = true;
	}
};

Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.get_IsDisposed = function () {
	return this.disposed;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype, "IEnumerator$b1_Current", {
		get: Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.IEnumerator$b1_get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype, "IEnumerator_Current", {
		get: Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.IEnumerator_get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.get_Count
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerator$b1.Of(T));
Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.__ImplementInterface__(System.Collections.IEnumerator);
Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.prototype);
Object.seal(Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1);
Microsoft.Xna.Framework.Media.SongLibraryEnumerator.Empty = null;
Microsoft.Xna.Framework.Media.SongLibraryEnumerator.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Song).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.SongLibraryEnumerator.prototype._ctor$1 = function (handle) {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Song).prototype._ctor.call(this, handle);
};

Microsoft.Xna.Framework.Media.SongLibraryEnumerator.prototype.CreateItemInstance = function (handleItem) {
	return new Microsoft.Xna.Framework.Media.Song(handleItem);
};

Microsoft.Xna.Framework.Media.SongLibraryEnumerator.prototype.get_Handle = function () {
	return this.handleList;
};

Microsoft.Xna.Framework.Media.SongLibraryEnumerator._cctor = function () {
	Microsoft.Xna.Framework.Media.SongLibraryEnumerator.Empty = new Microsoft.Xna.Framework.Media.SongLibraryEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.SongLibraryEnumerator.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.SongLibraryEnumerator.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.SongLibraryEnumerator.prototype.get_Handle
	});
Microsoft.Xna.Framework.Media.SongLibraryEnumerator._cctor();

Object.seal(Microsoft.Xna.Framework.Media.SongLibraryEnumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Media.SongLibraryEnumerator);
Microsoft.Xna.Framework.Media.ArtistEnumerator.Empty = null;
Microsoft.Xna.Framework.Media.ArtistEnumerator.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Artist).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.ArtistEnumerator.prototype._ctor$1 = function (handle) {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Artist).prototype._ctor.call(this, handle);
};

Microsoft.Xna.Framework.Media.ArtistEnumerator.prototype.CreateItemInstance = function (handleItem) {
	return new Microsoft.Xna.Framework.Media.Artist(handleItem);
};

Microsoft.Xna.Framework.Media.ArtistEnumerator._cctor = function () {
	Microsoft.Xna.Framework.Media.ArtistEnumerator.Empty = new Microsoft.Xna.Framework.Media.ArtistEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.ArtistEnumerator.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
Microsoft.Xna.Framework.Media.ArtistEnumerator._cctor();

Object.seal(Microsoft.Xna.Framework.Media.ArtistEnumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Media.ArtistEnumerator);
Microsoft.Xna.Framework.Media.AlbumEnumerator.Empty = null;
Microsoft.Xna.Framework.Media.AlbumEnumerator.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Album).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.AlbumEnumerator.prototype._ctor$1 = function (handle) {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Album).prototype._ctor.call(this, handle);
};

Microsoft.Xna.Framework.Media.AlbumEnumerator.prototype.CreateItemInstance = function (handleItem) {
	return new Microsoft.Xna.Framework.Media.Album(handleItem);
};

Microsoft.Xna.Framework.Media.AlbumEnumerator._cctor = function () {
	Microsoft.Xna.Framework.Media.AlbumEnumerator.Empty = new Microsoft.Xna.Framework.Media.AlbumEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.AlbumEnumerator.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
Microsoft.Xna.Framework.Media.AlbumEnumerator._cctor();

Object.seal(Microsoft.Xna.Framework.Media.AlbumEnumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Media.AlbumEnumerator);
Microsoft.Xna.Framework.Media.GenreEnumerator.Empty = null;
Microsoft.Xna.Framework.Media.GenreEnumerator.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Genre).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.GenreEnumerator.prototype._ctor$1 = function (handle) {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Genre).prototype._ctor.call(this, handle);
};

Microsoft.Xna.Framework.Media.GenreEnumerator.prototype.CreateItemInstance = function (handleItem) {
	return new Microsoft.Xna.Framework.Media.Genre(handleItem);
};

Microsoft.Xna.Framework.Media.GenreEnumerator._cctor = function () {
	Microsoft.Xna.Framework.Media.GenreEnumerator.Empty = new Microsoft.Xna.Framework.Media.GenreEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.GenreEnumerator.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
Microsoft.Xna.Framework.Media.GenreEnumerator._cctor();

Object.seal(Microsoft.Xna.Framework.Media.GenreEnumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Media.GenreEnumerator);
Microsoft.Xna.Framework.Media.PlaylistEnumerator.Empty = null;
Microsoft.Xna.Framework.Media.PlaylistEnumerator.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Playlist).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.PlaylistEnumerator.prototype._ctor$1 = function (handle) {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Playlist).prototype._ctor.call(this, handle);
};

Microsoft.Xna.Framework.Media.PlaylistEnumerator.prototype.CreateItemInstance = function (handleItem) {
	return new Microsoft.Xna.Framework.Media.Playlist(handleItem);
};

Microsoft.Xna.Framework.Media.PlaylistEnumerator._cctor = function () {
	Microsoft.Xna.Framework.Media.PlaylistEnumerator.Empty = new Microsoft.Xna.Framework.Media.PlaylistEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PlaylistEnumerator.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
Microsoft.Xna.Framework.Media.PlaylistEnumerator._cctor();

Object.seal(Microsoft.Xna.Framework.Media.PlaylistEnumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Media.PlaylistEnumerator);
Microsoft.Xna.Framework.Media.PictureEnumerator.Empty = null;
Microsoft.Xna.Framework.Media.PictureEnumerator.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Picture).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.PictureEnumerator.prototype._ctor$1 = function (handle) {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.Picture).prototype._ctor.call(this, handle);
};

Microsoft.Xna.Framework.Media.PictureEnumerator.prototype.CreateItemInstance = function (handleItem) {
	return new Microsoft.Xna.Framework.Media.Picture(handleItem);
};

Microsoft.Xna.Framework.Media.PictureEnumerator._cctor = function () {
	Microsoft.Xna.Framework.Media.PictureEnumerator.Empty = new Microsoft.Xna.Framework.Media.PictureEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureEnumerator.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
Microsoft.Xna.Framework.Media.PictureEnumerator._cctor();

Object.seal(Microsoft.Xna.Framework.Media.PictureEnumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Media.PictureEnumerator);
Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.Empty = null;
Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.PictureAlbum).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.prototype._ctor$1 = function (handle) {
	Microsoft.Xna.Framework.Media.MediaLibraryEnumerator$b1.Of(Microsoft.Xna.Framework.Media.PictureAlbum).prototype._ctor.call(this, handle);
};

Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.prototype.CreateItemInstance = function (handleItem) {
	return new Microsoft.Xna.Framework.Media.PictureAlbum(handleItem);
};

Microsoft.Xna.Framework.Media.PictureAlbumEnumerator._cctor = function () {
	Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.Empty = new Microsoft.Xna.Framework.Media.PictureAlbumEnumerator();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
Microsoft.Xna.Framework.Media.PictureAlbumEnumerator._cctor();

Object.seal(Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.prototype);
Object.seal(Microsoft.Xna.Framework.Media.PictureAlbumEnumerator);
Microsoft.Xna.Framework.Media.MediaPlayer.shuffle = new System.Boolean();
Microsoft.Xna.Framework.Media.MediaPlayer.repeat = new System.Boolean();
Microsoft.Xna.Framework.Media.MediaPlayer.queue = null;
Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged = null;
Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged = null;
Microsoft.Xna.Framework.Media.MediaPlayer._cctor = function () {
	Microsoft.Xna.Framework.Media.MediaPlayer.shuffle = false;
	Microsoft.Xna.Framework.Media.MediaPlayer.repeat = false;
	Microsoft.Xna.Framework.Media.MediaPlayer.queue = new Microsoft.Xna.Framework.Media.MediaQueue();
	Microsoft.Xna.Framework.UserAsyncDispatcher.Initialize();
	Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetShuffle(/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.Media.MediaPlayer, "shuffle"));
	Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetRepeat(/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.Media.MediaPlayer, "repeat"));
	Microsoft.Xna.Framework.Media.MediaPlayer.Volume = 1;
};

Microsoft.Xna.Framework.Media.MediaPlayer.Play$0 = function (song) {
	Microsoft.Xna.Framework.Media.MediaPlayer.queue.Play(song);
};

Microsoft.Xna.Framework.Media.MediaPlayer.Play$1 = function (songs) {
	Microsoft.Xna.Framework.Media.MediaPlayer.queue.Play(songs);
};

Microsoft.Xna.Framework.Media.MediaPlayer.Play$2 = function (songs, index) {
	Microsoft.Xna.Framework.Media.MediaPlayer.queue.Play(songs, index);
};

Microsoft.Xna.Framework.Media.MediaPlayer.Pause = function () {

	if (Microsoft.Xna.Framework.Media.MediaPlayer.State === Microsoft.Xna.Framework.Media.MediaState.Playing) {
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_Pause());
	}
};

Microsoft.Xna.Framework.Media.MediaPlayer.Resume = function () {

	if (Microsoft.Xna.Framework.Media.MediaPlayer.State !== Microsoft.Xna.Framework.Media.MediaState.Playing) {
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_Resume());
	}
};

Microsoft.Xna.Framework.Media.MediaPlayer.Stop = function () {

	if (Microsoft.Xna.Framework.Media.MediaPlayer.State === 0) {
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_Stop());
	}
};

Microsoft.Xna.Framework.Media.MediaPlayer.MoveNext = function () {
	Microsoft.Xna.Framework.Media.MediaPlayer.queue.MoveNext();
};

Microsoft.Xna.Framework.Media.MediaPlayer.MovePrevious = function () {
	Microsoft.Xna.Framework.Media.MediaPlayer.queue.MovePrevious();
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_IsShuffled = function () {
	return Microsoft.Xna.Framework.Media.MediaPlayer.shuffle;
};

Microsoft.Xna.Framework.Media.MediaPlayer.set_IsShuffled = function (value) {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_SetShuffle(value));
	Microsoft.Xna.Framework.Media.MediaPlayer.shuffle = value;
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_IsRepeating = function () {
	return Microsoft.Xna.Framework.Media.MediaPlayer.repeat;
};

Microsoft.Xna.Framework.Media.MediaPlayer.set_IsRepeating = function (value) {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_SetRepeat(value));
	Microsoft.Xna.Framework.Media.MediaPlayer.repeat = value;
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_Queue = function () {
	return Microsoft.Xna.Framework.Media.MediaPlayer.queue;
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_State = function () {
	var result = new JSIL.Variable(Microsoft.Xna.Framework.Media.MediaState.Stopped);
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetPlayState(/* ref */ result));
	return result.value;
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_PlayPosition = function () {
	return Microsoft.Xna.Framework.Media.MediaPlayer.queue.PlayPosition;
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_Volume = function () {
	var result = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetVolume(/* ref */ result));
	return result.value;
};

Microsoft.Xna.Framework.Media.MediaPlayer.set_Volume = function (value) {
	value = (value < 0) ? 0 : value;
	value = (value > 1) ? 1 : value;
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_SetVolume(value));
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_IsMuted = function () {
	var result = new JSIL.Variable(false);
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_IsMuted(/* ref */ result));
	return result.value;
};

Microsoft.Xna.Framework.Media.MediaPlayer.set_IsMuted = function (value) {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_SetMute(value));
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_IsVisualizationEnabled = function () {
	var result = new JSIL.Variable(false);
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_IsVisualizationEnabled(/* ref */ result));
	return result.value;
};

Microsoft.Xna.Framework.Media.MediaPlayer.set_IsVisualizationEnabled = function (value) {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_EnableVisualization(value));
};

Microsoft.Xna.Framework.Media.MediaPlayer.get_GameHasControl = function () {
	return true;
};

Microsoft.Xna.Framework.Media.MediaPlayer.GetVisualizationData = function (visualizationData) {

	if (visualizationData !== null) {
		throw new System.ArgumentNullException("visualizationData", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}

	if (Microsoft.Xna.Framework.Media.MediaPlayer.IsVisualizationEnabled) {
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetVisualizationData(visualizationData.frequencies, visualizationData.frequencies.length, visualizationData.samples, visualizationData.samples.length));
	}
};

Microsoft.Xna.Framework.Media.MediaPlayer.add_ActiveSongChanged = function (value) {
	Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged = System.Delegate.Combine(Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged, value);
};

Microsoft.Xna.Framework.Media.MediaPlayer.remove_ActiveSongChanged = function (value) {
	Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged = System.Delegate.Remove(Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged, value);
};

Microsoft.Xna.Framework.Media.MediaPlayer.OnActiveSongChanged = function (args) {
	var activeSongChanged = Microsoft.Xna.Framework.Media.MediaPlayer.ActiveSongChanged;

	if (activeSongChanged === null) {
		activeSongChanged(null, args);
	}
};

Microsoft.Xna.Framework.Media.MediaPlayer.add_MediaStateChanged = function (value) {
	Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged = System.Delegate.Combine(Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged, value);
};

Microsoft.Xna.Framework.Media.MediaPlayer.remove_MediaStateChanged = function (value) {
	Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged = System.Delegate.Remove(Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged, value);
};

Microsoft.Xna.Framework.Media.MediaPlayer.OnMediaStateChanged = function (args) {
	var mediaStateChanged = Microsoft.Xna.Framework.Media.MediaPlayer.MediaStateChanged;

	if (mediaStateChanged === null) {
		mediaStateChanged(null, args);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.MediaPlayer, "Play", [
		["Play$0", [Microsoft.Xna.Framework.Media.Song]], 
		["Play$1", [Microsoft.Xna.Framework.Media.SongCollection]], 
		["Play$2", [Microsoft.Xna.Framework.Media.SongCollection, System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "IsShuffled", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_IsShuffled, 
		set: Microsoft.Xna.Framework.Media.MediaPlayer.set_IsShuffled
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "IsRepeating", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_IsRepeating, 
		set: Microsoft.Xna.Framework.Media.MediaPlayer.set_IsRepeating
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "Queue", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_Queue
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "State", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_State
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "PlayPosition", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_PlayPosition
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "Volume", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_Volume, 
		set: Microsoft.Xna.Framework.Media.MediaPlayer.set_Volume
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "IsMuted", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_IsMuted, 
		set: Microsoft.Xna.Framework.Media.MediaPlayer.set_IsMuted
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "IsVisualizationEnabled", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_IsVisualizationEnabled, 
		set: Microsoft.Xna.Framework.Media.MediaPlayer.set_IsVisualizationEnabled
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaPlayer, "GameHasControl", {
		get: Microsoft.Xna.Framework.Media.MediaPlayer.get_GameHasControl
	});
Microsoft.Xna.Framework.Media.MediaPlayer._cctor();

Object.seal(Microsoft.Xna.Framework.Media.MediaPlayer);
Microsoft.Xna.Framework.Media.MediaQueue.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.Play$0 = function (song) {

	if (Microsoft.Xna.Framework.Media.Song.op_Equality(song, null)) {
		throw new System.ArgumentNullException("song", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var errorCodes = Microsoft.Xna.Framework.ErrorCodes.Success;

	if (song.IsValidHandle) {
		errorCodes = Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_PlaySong(song.Handle);
	} else {
		errorCodes = -2147467259;
	}

	if (Microsoft.Xna.Framework.Helpers.Failed(errorCodes)) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.SongPlaybackFailed, Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(errorCodes));
	}
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.Play$1 = function (songCollection) {

	if (songCollection !== null) {
		throw new System.ArgumentNullException("songCollection", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}

	if (songCollection.Count !== null) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.EmptySongCollectionsCannotBePlayed, "songCollection");
	}
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_PlaySongList(songCollection.Handle, 0));
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.Play$2 = function (songCollection, index) {

	if (songCollection !== null) {
		throw new System.ArgumentNullException("songCollection", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}

	if (songCollection.Count !== null) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.EmptySongCollectionsCannotBePlayed, "songCollection");
	}

	if (!((index >= 0) && (index < songCollection.Count))) {
		throw new System.ArgumentOutOfRangeException("index", Microsoft.Xna.Framework.FrameworkResources.MustBeValidIndex);
	}
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_PlaySongList(songCollection.Handle, index));
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.MoveNext = function () {

	if (this.Count > 0) {

		if (this.ActiveSongIndex < (this.Count - 1)) {
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_MoveNext());
			return ;
		}
		this.ActiveSongIndex = 0;
	}
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.MovePrevious = function () {

	if (this.Count > 0) {

		if (this.ActiveSongIndex > 0) {
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_MovePrev());
			return ;
		}
		this.ActiveSongIndex = (this.Count - 1);
	}
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_Count = function () {
	var result = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetSongCount(/* ref */ result));
	return result.value;
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_ActiveSongIndex = function () {
	var result = new JSIL.Variable(-1);

	if (this.Count === null) {
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetActiveSongIndex(/* ref */ result));
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.set_ActiveSongIndex = function (value) {
	value = (value < 0) ? 0 : value;
	value = (value > (this.Count - 1)) ? (this.Count - 1) : value;
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_MoveTo(value));
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_ActiveSong = function () {
	var result = null;

	if (this.ActiveSongIndex !== -1) {
		result = this.get_Item(this.ActiveSongIndex);
	}
	return result;
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_Item = function (index) {

	if (!((index >= 0) && (index < this.Count))) {
		throw new System.ArgumentOutOfRangeException("index", Microsoft.Xna.Framework.FrameworkResources.MustBeValidIndex);
	}
	var handle = new JSIL.Variable(-1);
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetSongAtIndex(index, /* ref */ handle));
	return new Microsoft.Xna.Framework.Media.Song(handle.value);
};

Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_PlayPosition = function () {
	var result = new System.TimeSpan();
	result._ctor(0);

	if (this.ActiveSongIndex !== -1) {
		var milliseconds = new JSIL.Variable(0);
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetPlayPosition(/* ref */ milliseconds));
		result._ctor(
			0, 
			0, 
			0, 
			0, 
			milliseconds.value
		);
	}
	return result;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.MediaQueue.prototype, "Play", [
		["Play$0", [Microsoft.Xna.Framework.Media.Song]], 
		["Play$1", [Microsoft.Xna.Framework.Media.SongCollection]], 
		["Play$2", [Microsoft.Xna.Framework.Media.SongCollection, System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaQueue.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_Count
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaQueue.prototype, "ActiveSongIndex", {
		get: Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_ActiveSongIndex, 
		set: Microsoft.Xna.Framework.Media.MediaQueue.prototype.set_ActiveSongIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaQueue.prototype, "ActiveSong", {
		get: Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_ActiveSong
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaQueue.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaQueue.prototype, "PlayPosition", {
		get: Microsoft.Xna.Framework.Media.MediaQueue.prototype.get_PlayPosition
	});

Object.seal(Microsoft.Xna.Framework.Media.MediaQueue.prototype);
Object.seal(Microsoft.Xna.Framework.Media.MediaQueue);
Microsoft.Xna.Framework.Media.MediaSource.prototype.mediaSourceType = 0;
Microsoft.Xna.Framework.Media.MediaSource.prototype.name = null;
Microsoft.Xna.Framework.Media.MediaSource.prototype.get_MediaSourceType = function () {
	return this.mediaSourceType;
};

Microsoft.Xna.Framework.Media.MediaSource.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Media.MediaSource.prototype.toString = function () {
	return this.Name;
};

Microsoft.Xna.Framework.Media.MediaSource.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.mediaSourceType = Microsoft.Xna.Framework.Media.MediaSourceType.LocalDevice;
	this.name = Microsoft.Xna.Framework.FrameworkResources.WmpMediaSource;
};

Microsoft.Xna.Framework.Media.MediaSource.GetAvailableMediaSources = function () {
	return JSIL.Array.New(Microsoft.Xna.Framework.Media.MediaSource, [new Microsoft.Xna.Framework.Media.MediaSource()]);
};

Object.defineProperty(Microsoft.Xna.Framework.Media.MediaSource.prototype, "MediaSourceType", {
		get: Microsoft.Xna.Framework.Media.MediaSource.prototype.get_MediaSourceType
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.MediaSource.prototype, "Name", {
		get: Microsoft.Xna.Framework.Media.MediaSource.prototype.get_Name
	});

Object.seal(Microsoft.Xna.Framework.Media.MediaSource.prototype);
Object.seal(Microsoft.Xna.Framework.Media.MediaSource);
Microsoft.Xna.Framework.Media.Picture.Empty = null;
Microsoft.Xna.Framework.Media.Picture.prototype.handle = 0;
Microsoft.Xna.Framework.Media.Picture.prototype.hashcode = 0;
Microsoft.Xna.Framework.Media.Picture.prototype.name = null;
Microsoft.Xna.Framework.Media.Picture.prototype.album = null;
Microsoft.Xna.Framework.Media.Picture.prototype.width = 0;
Microsoft.Xna.Framework.Media.Picture.prototype.height = 0;
Microsoft.Xna.Framework.Media.Picture.prototype.texture = null;
Microsoft.Xna.Framework.Media.Picture.prototype.thumbnail = null;
Microsoft.Xna.Framework.Media.Picture.prototype.__StructFields__ = {
	date: System.DateTime
};
Microsoft.Xna.Framework.Media.Picture.prototype._ctor$0 = function () {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.album = Microsoft.Xna.Framework.Media.PictureAlbum.Empty;
	this.date = System.DateTime.MinValue.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.Picture.prototype._ctor$1 = function (handle) {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.album = Microsoft.Xna.Framework.Media.PictureAlbum.Empty;
	this.date = System.DateTime.MinValue.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
};

Microsoft.Xna.Framework.Media.Picture.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.Picture.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.Picture.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_Release(this.handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.Picture.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.Picture.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.Picture.prototype.get_Name = function () {

	if (!(!this.IsValidHandle || !System.String.IsNullOrEmpty(this.name))) {
		var stringBuilder = new System.Text.StringBuilder(260);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_GetName(this.handle, stringBuilder, 260))) {
			this.name = stringBuilder.toString();
		}
	}
	return this.name;
};

Microsoft.Xna.Framework.Media.Picture.prototype.get_Album = function () {
	return this.album;
};

Microsoft.Xna.Framework.Media.Picture.prototype.get_Width = function () {
	return this.width;
};

Microsoft.Xna.Framework.Media.Picture.prototype.get_Height = function () {
	return this.height;
};

Microsoft.Xna.Framework.Media.Picture.prototype.get_Date = function () {
	return this.date;
};

Microsoft.Xna.Framework.Media.Picture.prototype.GetTexture$0 = function (serviceProvider) {

	if (this.texture !== null) {
		this.texture = this.GetTexture(serviceProvider, false);
	}
	return this.texture;
};

Microsoft.Xna.Framework.Media.Picture.prototype.GetThumbnail = function (serviceProvider) {

	if (this.thumbnail !== null) {
		this.thumbnail = this.GetTexture(serviceProvider, true);
	}
	return this.thumbnail;
};

Microsoft.Xna.Framework.Media.Picture.prototype.GetTexture$1 = function (serviceProvider, thumbnail) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Media.Picture.op_Equality = function (first, second) {
	return System.Object.Equals(first, second);
};

Microsoft.Xna.Framework.Media.Picture.op_Inequality = function (first, second) {
	return !Microsoft.Xna.Framework.Media.Picture.op_Equality(first, second);
};

Microsoft.Xna.Framework.Media.Picture.prototype.Equals$0 = function (obj) {
	var result = new JSIL.Variable(false);
	var picture = JSIL.TryCast(obj, Microsoft.Xna.Framework.Media.Picture);

	if (Microsoft.Xna.Framework.Media.Picture.op_Inequality(picture, null)) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, picture.Handle, /* ref */ result);
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.Picture.prototype.toString = function () {
	return this.Name;
};

Microsoft.Xna.Framework.Media.Picture.prototype.GetHashCode = function () {

	if (this.hashcode === -1) {
		this.hashcode = this.Name.GetHashCode();
	}
	return this.hashcode;
};

Microsoft.Xna.Framework.Media.Picture.prototype.Equals$1 = function (other) {
	var result = new JSIL.Variable(false);

	if (Microsoft.Xna.Framework.Media.Picture.op_Inequality(other, null)) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, other.Handle, /* ref */ result);
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.Picture._cctor = function () {
	Microsoft.Xna.Framework.Media.Picture.Empty = new Microsoft.Xna.Framework.Media.Picture();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Picture.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Picture.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Picture.prototype, "GetTexture", [
		["GetTexture$0", [System.IServiceProvider]], 
		["GetTexture$1", [System.IServiceProvider, System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Picture.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Media.Picture]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.Picture.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.Picture.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Picture.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.Picture.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Picture.prototype, "Name", {
		get: Microsoft.Xna.Framework.Media.Picture.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Picture.prototype, "Album", {
		get: Microsoft.Xna.Framework.Media.Picture.prototype.get_Album
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Picture.prototype, "Width", {
		get: Microsoft.Xna.Framework.Media.Picture.prototype.get_Width
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Picture.prototype, "Height", {
		get: Microsoft.Xna.Framework.Media.Picture.prototype.get_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Picture.prototype, "Date", {
		get: Microsoft.Xna.Framework.Media.Picture.prototype.get_Date
	});
Microsoft.Xna.Framework.Media.Picture._cctor();
Microsoft.Xna.Framework.Media.Picture.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Media.Picture));
Microsoft.Xna.Framework.Media.Picture.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.Picture.prototype);
Object.seal(Microsoft.Xna.Framework.Media.Picture);
Microsoft.Xna.Framework.Media.PictureAlbum.Empty = null;
Microsoft.Xna.Framework.Media.PictureAlbum.prototype.handle = 0;
Microsoft.Xna.Framework.Media.PictureAlbum.prototype.hashcode = 0;
Microsoft.Xna.Framework.Media.PictureAlbum.prototype.name = null;
Microsoft.Xna.Framework.Media.PictureAlbum.prototype.albums = null;
Microsoft.Xna.Framework.Media.PictureAlbum.prototype.parent = null;
Microsoft.Xna.Framework.Media.PictureAlbum.prototype.pictures = null;
Microsoft.Xna.Framework.Media.PictureAlbum.prototype._ctor$0 = function () {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.albums = Microsoft.Xna.Framework.Media.PictureAlbumCollection.Empty;
	this.parent = Microsoft.Xna.Framework.Media.PictureAlbum.Empty;
	this.pictures = Microsoft.Xna.Framework.Media.PictureCollection.Empty;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype._ctor$1 = function (handle) {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.albums = Microsoft.Xna.Framework.Media.PictureAlbumCollection.Empty;
	this.parent = Microsoft.Xna.Framework.Media.PictureAlbum.Empty;
	this.pictures = Microsoft.Xna.Framework.Media.PictureCollection.Empty;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_Release(this.handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Name = function () {

	if (!(!this.IsValidHandle || !System.String.IsNullOrEmpty(this.name))) {
		var stringBuilder = new System.Text.StringBuilder(260);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_GetName(this.handle, stringBuilder, 260))) {
			this.name = stringBuilder.toString();
		}
	}
	return this.name;
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Albums = function () {
	return this.albums;
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Pictures = function () {
	return this.pictures;
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Parent = function () {
	return this.parent;
};

Microsoft.Xna.Framework.Media.PictureAlbum.op_Equality = function (first, second) {
	return System.Object.Equals(first, second);
};

Microsoft.Xna.Framework.Media.PictureAlbum.op_Inequality = function (first, second) {
	return !Microsoft.Xna.Framework.Media.PictureAlbum.op_Equality(first, second);
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.Equals$0 = function (obj) {
	var result = new JSIL.Variable(false);
	var pictureAlbum = JSIL.TryCast(obj, Microsoft.Xna.Framework.Media.PictureAlbum);

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.PictureAlbum.op_Inequality(pictureAlbum, null))) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, pictureAlbum.Handle, /* ref */ result);
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.toString = function () {
	return this.Name;
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.GetHashCode = function () {

	if (this.hashcode === -1) {
		this.hashcode = this.Name.GetHashCode();
	}
	return this.hashcode;
};

Microsoft.Xna.Framework.Media.PictureAlbum.prototype.Equals$1 = function (other) {
	var result = new JSIL.Variable(false);

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.PictureAlbum.op_Inequality(other, null))) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, other.Handle, /* ref */ result);
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.PictureAlbum._cctor = function () {
	Microsoft.Xna.Framework.Media.PictureAlbum.Empty = new Microsoft.Xna.Framework.Media.PictureAlbum();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Media.PictureAlbum]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "Name", {
		get: Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "Albums", {
		get: Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Albums
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "Pictures", {
		get: Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Pictures
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbum.prototype, "Parent", {
		get: Microsoft.Xna.Framework.Media.PictureAlbum.prototype.get_Parent
	});
Microsoft.Xna.Framework.Media.PictureAlbum._cctor();
Microsoft.Xna.Framework.Media.PictureAlbum.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Media.PictureAlbum));
Microsoft.Xna.Framework.Media.PictureAlbum.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.PictureAlbum.prototype);
Object.seal(Microsoft.Xna.Framework.Media.PictureAlbum);
Microsoft.Xna.Framework.Media.PictureAlbumCollection.Empty = null;
Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.enumerator = null;
Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.handle = 0;
Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype._ctor$0 = function () {
	this.enumerator = Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype._ctor$1 = function (handle) {
	this.enumerator = Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
	this.enumerator = new Microsoft.Xna.Framework.Media.PictureAlbumEnumerator(handle);
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_Release(this.Handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.PictureAlbumEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.IEnumerable_GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.PictureAlbumEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.PictureAlbumEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.get_Item = function (index) {
	return this.enumerator.get_Item(index);
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.get_Count = function () {
	return this.enumerator.Count;
};

Microsoft.Xna.Framework.Media.PictureAlbumCollection._cctor = function () {
	Microsoft.Xna.Framework.Media.PictureAlbumCollection.Empty = new Microsoft.Xna.Framework.Media.PictureAlbumCollection();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Media.PictureAlbumCollection._cctor();
Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Media.PictureAlbum));
Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.__ImplementInterface__(System.Collections.IEnumerable);
Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.PictureAlbumCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.PictureAlbumCollection);
Microsoft.Xna.Framework.Media.PictureCollection.Empty = null;
Microsoft.Xna.Framework.Media.PictureCollection.prototype.enumerator = null;
Microsoft.Xna.Framework.Media.PictureCollection.prototype.handle = 0;
Microsoft.Xna.Framework.Media.PictureCollection.prototype._ctor$0 = function () {
	this.enumerator = Microsoft.Xna.Framework.Media.PictureEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype._ctor$1 = function (handle) {
	this.enumerator = Microsoft.Xna.Framework.Media.PictureEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
	this.enumerator = new Microsoft.Xna.Framework.Media.PictureEnumerator(handle);
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_Release(this.Handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.PictureEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.PictureEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.IEnumerable_GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.PictureEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.PictureEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.get_Item = function (index) {
	return this.enumerator.get_Item(index);
};

Microsoft.Xna.Framework.Media.PictureCollection.prototype.get_Count = function () {
	return this.enumerator.Count;
};

Microsoft.Xna.Framework.Media.PictureCollection._cctor = function () {
	Microsoft.Xna.Framework.Media.PictureCollection.Empty = new Microsoft.Xna.Framework.Media.PictureCollection();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PictureCollection.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureCollection.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.PictureCollection.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureCollection.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.PictureCollection.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.PictureCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PictureCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.PictureCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Media.PictureCollection._cctor();
Microsoft.Xna.Framework.Media.PictureCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Media.Picture));
Microsoft.Xna.Framework.Media.PictureCollection.prototype.__ImplementInterface__(System.Collections.IEnumerable);
Microsoft.Xna.Framework.Media.PictureCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.PictureCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.PictureCollection);
Microsoft.Xna.Framework.Media.Playlist.Empty = null;
Microsoft.Xna.Framework.Media.Playlist.prototype.handle = 0;
Microsoft.Xna.Framework.Media.Playlist.prototype.hashcode = 0;
Microsoft.Xna.Framework.Media.Playlist.prototype.name = null;
Microsoft.Xna.Framework.Media.Playlist.prototype.songs = null;
Microsoft.Xna.Framework.Media.Playlist.prototype.__StructFields__ = {
	duration: System.TimeSpan
};
Microsoft.Xna.Framework.Media.Playlist.prototype._ctor$0 = function () {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.duration = System.TimeSpan.Zero.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.Playlist.prototype._ctor$1 = function (handle) {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.songs = Microsoft.Xna.Framework.Media.SongCollection.Empty;
	this.duration = System.TimeSpan.Zero.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
	this.handle = handle;

	if (this.IsValidHandle) {
		var stringBuilder = new System.Text.StringBuilder(260);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_GetName(handle, stringBuilder, 260))) {
			this.name = stringBuilder.toString();
		}
	}
};

Microsoft.Xna.Framework.Media.Playlist.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.Playlist.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.Playlist.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_Release(this.handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.Playlist.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.Playlist.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.Playlist.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Media.Playlist.prototype.get_Songs = function () {

	if (!(!this.IsValidHandle || (this.songs !== Microsoft.Xna.Framework.Media.SongCollection.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaPlaylist_GetSongs(this.Handle, /* ref */ num))) {
			this.songs = new Microsoft.Xna.Framework.Media.SongCollection(num.value);
		}
	}
	return this.songs;
};

Microsoft.Xna.Framework.Media.Playlist.prototype.get_Duration = function () {

	if (!(!this.IsValidHandle || !System.TimeSpan.op_Equality(this.duration.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone()))) {
		var milliseconds = new JSIL.Variable(0);

		if (Microsoft.Xna.Framework.Helpers.Failed(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaPlaylist_GetDuration(this.Handle, /* ref */ milliseconds))) {
			throw new System.InvalidOperationException();
		}
		this.duration = new System.TimeSpan(0, 0, 0, 0, milliseconds.value);
	}
	return this.duration;
};

Microsoft.Xna.Framework.Media.Playlist.op_Equality = function (first, second) {
	return System.Object.Equals(first, second);
};

Microsoft.Xna.Framework.Media.Playlist.op_Inequality = function (first, second) {
	return !Microsoft.Xna.Framework.Media.Playlist.op_Equality(first, second);
};

Microsoft.Xna.Framework.Media.Playlist.prototype.Equals$0 = function (obj) {
	var result = new JSIL.Variable(false);
	var playlist = JSIL.TryCast(obj, Microsoft.Xna.Framework.Media.Playlist);

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.Playlist.op_Inequality(playlist, null))) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, playlist.Handle, /* ref */ result);
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.Playlist.prototype.toString = function () {
	return this.Name;
};

Microsoft.Xna.Framework.Media.Playlist.prototype.GetHashCode = function () {

	if (this.hashcode === -1) {
		this.hashcode = this.Name.GetHashCode();
	}
	return this.hashcode;
};

Microsoft.Xna.Framework.Media.Playlist.prototype.Equals$1 = function (other) {
	var result = new JSIL.Variable(false);

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.Playlist.op_Inequality(other, null))) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, other.Handle, /* ref */ result);
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.Playlist._cctor = function () {
	Microsoft.Xna.Framework.Media.Playlist.Empty = new Microsoft.Xna.Framework.Media.Playlist();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Playlist.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Playlist.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Playlist.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Media.Playlist]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.Playlist.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.Playlist.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Playlist.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.Playlist.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Playlist.prototype, "Name", {
		get: Microsoft.Xna.Framework.Media.Playlist.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Playlist.prototype, "Songs", {
		get: Microsoft.Xna.Framework.Media.Playlist.prototype.get_Songs
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Playlist.prototype, "Duration", {
		get: Microsoft.Xna.Framework.Media.Playlist.prototype.get_Duration
	});
Microsoft.Xna.Framework.Media.Playlist._cctor();
Microsoft.Xna.Framework.Media.Playlist.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Media.Playlist));
Microsoft.Xna.Framework.Media.Playlist.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.Playlist.prototype);
Object.seal(Microsoft.Xna.Framework.Media.Playlist);
Microsoft.Xna.Framework.Media.PlaylistCollection.Empty = null;
Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.enumerator = null;
Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.handle = 0;
Microsoft.Xna.Framework.Media.PlaylistCollection.prototype._ctor$0 = function () {
	this.enumerator = Microsoft.Xna.Framework.Media.PlaylistEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype._ctor$1 = function (handle) {
	this.enumerator = Microsoft.Xna.Framework.Media.PlaylistEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
	this.enumerator = new Microsoft.Xna.Framework.Media.PlaylistEnumerator(handle);
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_Release(this.Handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.PlaylistEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.PlaylistEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.IEnumerable_GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.PlaylistEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.PlaylistEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.get_Item = function (index) {
	return this.enumerator.get_Item(index);
};

Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.get_Count = function () {
	return this.enumerator.Count;
};

Microsoft.Xna.Framework.Media.PlaylistCollection._cctor = function () {
	Microsoft.Xna.Framework.Media.PlaylistCollection.Empty = new Microsoft.Xna.Framework.Media.PlaylistCollection();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PlaylistCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.PlaylistCollection.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.PlaylistCollection.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PlaylistCollection.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PlaylistCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.get_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.PlaylistCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.get_Count
	});
Microsoft.Xna.Framework.Media.PlaylistCollection._cctor();
Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Media.Playlist));
Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.__ImplementInterface__(System.Collections.IEnumerable);
Microsoft.Xna.Framework.Media.PlaylistCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.PlaylistCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.PlaylistCollection);
Microsoft.Xna.Framework.Media.Song.Empty = null;
Microsoft.Xna.Framework.Media.Song.prototype.handle = 0;
Microsoft.Xna.Framework.Media.Song.prototype.hashcode = 0;
Microsoft.Xna.Framework.Media.Song.prototype.name = null;
Microsoft.Xna.Framework.Media.Song.prototype.artist = null;
Microsoft.Xna.Framework.Media.Song.prototype.album = null;
Microsoft.Xna.Framework.Media.Song.prototype.genre = null;
Microsoft.Xna.Framework.Media.Song.prototype.rating = 0;
Microsoft.Xna.Framework.Media.Song.prototype.trackNumber = 0;
Microsoft.Xna.Framework.Media.Song.prototype.__StructFields__ = {
	duration: System.TimeSpan
};
Microsoft.Xna.Framework.Media.Song._cctor = function () {
	Microsoft.Xna.Framework.Media.Song.Empty = new Microsoft.Xna.Framework.Media.Song();
	Microsoft.Xna.Framework.UserAsyncDispatcher.Initialize();
};

Microsoft.Xna.Framework.Media.Song.prototype._ctor$0 = function () {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.artist = Microsoft.Xna.Framework.Media.Artist.Empty;
	this.album = Microsoft.Xna.Framework.Media.Album.Empty;
	this.genre = Microsoft.Xna.Framework.Media.Genre.Empty;
	this.duration = System.TimeSpan.Zero.MemberwiseClone();
	this.rating = -1;
	this.trackNumber = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.Song.prototype._ctor$1 = function (handle) {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.artist = Microsoft.Xna.Framework.Media.Artist.Empty;
	this.album = Microsoft.Xna.Framework.Media.Album.Empty;
	this.genre = Microsoft.Xna.Framework.Media.Genre.Empty;
	this.duration = System.TimeSpan.Zero.MemberwiseClone();
	this.rating = -1;
	this.trackNumber = -1;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;

	if (this.IsValidHandle) {
		var stringBuilder = new System.Text.StringBuilder(260);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_GetName(handle, stringBuilder, 260))) {
			this.name = stringBuilder.toString();
		}
		var milliseconds = new JSIL.Variable(0);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetDuration(this.Handle, /* ref */ milliseconds))) {
			this.duration = new System.TimeSpan(0, 0, 0, 0, milliseconds.value);
		}
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetRating(this.Handle, /* ref */ new JSIL.MemberReference(this, "rating"));
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetTrackNumber(this.Handle, /* ref */ new JSIL.MemberReference(this, "trackNumber"));
	}
};

Microsoft.Xna.Framework.Media.Song.prototype._ctor$2 = function (name, filename, duration) {
	this.handle = -1;
	this.hashcode = -1;
	this.name = System.String.Empty;
	this.artist = Microsoft.Xna.Framework.Media.Artist.Empty;
	this.album = Microsoft.Xna.Framework.Media.Album.Empty;
	this.genre = Microsoft.Xna.Framework.Media.Genre.Empty;
	this.duration = System.TimeSpan.Zero.MemberwiseClone();
	this.rating = -1;
	this.trackNumber = -1;
	System.Object.prototype._ctor.call(this);
	this.name = name;
	this.rating = 0;
	this.trackNumber = 0;
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_CreateHandle(name, filename, duration, /* ref */ new JSIL.MemberReference(this, "handle")));
	this.duration = new System.TimeSpan(0, 0, 0, 0, duration);
};

Microsoft.Xna.Framework.Media.Song.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.Song.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.Song.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_Release(this.handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.Song.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.Song.prototype.get_Name = function () {
	return this.name;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_Artist = function () {

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.Artist.op_Equality(this.artist, Microsoft.Xna.Framework.Media.Artist.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetArtist(this.Handle, /* ref */ num))) {
			this.artist = new Microsoft.Xna.Framework.Media.Artist(num.value);
		}
	}
	return this.artist;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_Album = function () {

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.Album.op_Equality(this.album, Microsoft.Xna.Framework.Media.Album.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetAlbum(this.Handle, /* ref */ num))) {
			this.album = new Microsoft.Xna.Framework.Media.Album(num.value);
		}
	}
	return this.album;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_Genre = function () {

	if (!(!this.IsValidHandle || !Microsoft.Xna.Framework.Media.Genre.op_Equality(this.genre, Microsoft.Xna.Framework.Media.Genre.Empty))) {
		var num = new JSIL.Variable(-1);

		if (Microsoft.Xna.Framework.Helpers.Succeeded(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetGenre(this.Handle, /* ref */ num))) {
			this.genre = new Microsoft.Xna.Framework.Media.Genre(num.value);
		}
	}
	return this.genre;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_Duration = function () {
	return this.duration;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_IsRated = function () {
	return (this.Rating > 0);
};

Microsoft.Xna.Framework.Media.Song.prototype.get_Rating = function () {
	return this.rating;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_PlayCount = function () {
	var result = new JSIL.Variable(0);

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetPlayCount(this.Handle, /* ref */ result));
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_TrackNumber = function () {
	return this.trackNumber;
};

Microsoft.Xna.Framework.Media.Song.prototype.get_IsProtected = function () {
	var result = new JSIL.Variable(false);

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_IsRestricted(this.Handle, /* ref */ result));
	}
	return result.value;
};

Microsoft.Xna.Framework.Media.Song.op_Equality = function (first, second) {
	return System.Object.Equals(first, second);
};

Microsoft.Xna.Framework.Media.Song.op_Inequality = function (first, second) {
	return !Microsoft.Xna.Framework.Media.Song.op_Equality(first, second);
};

Microsoft.Xna.Framework.Media.Song.prototype.Equals$0 = function (obj) {
	var flag = new JSIL.Variable(System.Object.ReferenceEquals(this, obj));

	if (!flag.value) {
		var song = JSIL.TryCast(obj, Microsoft.Xna.Framework.Media.Song);

		if (!(!this.IsValidHandle || 
				!Microsoft.Xna.Framework.Media.Song.op_Inequality(song, null) || !song.IsValidHandle)) {
			Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, song.Handle, /* ref */ flag);
		}
	}
	return flag.value;
};

Microsoft.Xna.Framework.Media.Song.prototype.Equals$1 = function (other) {
	var flag = new JSIL.Variable(System.Object.ReferenceEquals(this, other));

	if (!(flag.value || 
			!this.IsValidHandle || 
			!Microsoft.Xna.Framework.Media.Song.op_Inequality(other, null) || !other.IsValidHandle)) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual(this.Handle, other.Handle, /* ref */ flag);
	}
	return flag.value;
};

Microsoft.Xna.Framework.Media.Song.prototype.toString = function () {
	return this.Name;
};

Microsoft.Xna.Framework.Media.Song.prototype.GetHashCode = function () {

	if (this.hashcode === -1) {
		this.hashcode = this.Name.GetHashCode();
	}
	return this.hashcode;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Song.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]], 
		["_ctor$2", [System.String, System.String, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Song.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.Song.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Media.Song]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "Name", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "Artist", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_Artist
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "Album", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_Album
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "Genre", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_Genre
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "Duration", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_Duration
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "IsRated", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_IsRated
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "Rating", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_Rating
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "PlayCount", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_PlayCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "TrackNumber", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_TrackNumber
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Song.prototype, "IsProtected", {
		get: Microsoft.Xna.Framework.Media.Song.prototype.get_IsProtected
	});
Microsoft.Xna.Framework.Media.Song._cctor();
Microsoft.Xna.Framework.Media.Song.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Media.Song));
Microsoft.Xna.Framework.Media.Song.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.Song.prototype);
Object.seal(Microsoft.Xna.Framework.Media.Song);
Microsoft.Xna.Framework.Media.SongCollection.Empty = null;
Microsoft.Xna.Framework.Media.SongCollection.prototype.libraryCollection = null;
Microsoft.Xna.Framework.Media.SongCollection.prototype.handle = 0;
Microsoft.Xna.Framework.Media.SongCollection.prototype._ctor$0 = function () {
	this.libraryCollection = Microsoft.Xna.Framework.Media.SongLibraryEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Media.SongCollection.prototype._ctor$1 = function (handle) {
	this.libraryCollection = Microsoft.Xna.Framework.Media.SongLibraryEnumerator.Empty;
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.handle = handle;
	this.libraryCollection = new Microsoft.Xna.Framework.Media.SongLibraryEnumerator(handle);
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.Dispose$1 = function (disposing) {

	if (this.IsValidHandle) {
		Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_Release(this.Handle);
		this.handle = -1;
	}
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.get_IsValidHandle = function () {
	return (this.handle !== -1);
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.get_Count = function () {
	return this.libraryCollection.Count;
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.get_Item = function (index) {
	return this.libraryCollection.get_Item(index);
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.SongLibraryEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.SongLibraryEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.SongCollection.prototype.IEnumerable_GetEnumerator = function () {

	if (this.IsValidHandle) {
		return new Microsoft.Xna.Framework.Media.SongLibraryEnumerator(this.Handle);
	}
	return Microsoft.Xna.Framework.Media.SongLibraryEnumerator.Empty;
};

Microsoft.Xna.Framework.Media.SongCollection._cctor = function () {
	Microsoft.Xna.Framework.Media.SongCollection.Empty = new Microsoft.Xna.Framework.Media.SongCollection();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.SongCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.SongCollection.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.SongCollection.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Media.SongCollection.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.SongCollection.prototype, "IsValidHandle", {
		get: Microsoft.Xna.Framework.Media.SongCollection.prototype.get_IsValidHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.SongCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.Media.SongCollection.prototype.get_Count
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.SongCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.Media.SongCollection.prototype.get_Item
	});
Microsoft.Xna.Framework.Media.SongCollection._cctor();
Microsoft.Xna.Framework.Media.SongCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.Media.Song));
Microsoft.Xna.Framework.Media.SongCollection.prototype.__ImplementInterface__(System.Collections.IEnumerable);
Microsoft.Xna.Framework.Media.SongCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.SongCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Media.SongCollection);
Microsoft.Xna.Framework.Media.VisualizationData.prototype.frequencies = null;
Microsoft.Xna.Framework.Media.VisualizationData.prototype.samples = null;
Microsoft.Xna.Framework.Media.VisualizationData.prototype.frequenciesCollection = null;
Microsoft.Xna.Framework.Media.VisualizationData.prototype.samplesCollection = null;
Microsoft.Xna.Framework.Media.VisualizationData.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.frequencies = JSIL.Array.New(System.Single, 256);
	this.samples = JSIL.Array.New(System.Single, 256);
	this.frequenciesCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Single)) (this.frequencies);
	this.samplesCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Single)) (this.samples);
};

Microsoft.Xna.Framework.Media.VisualizationData.prototype.get_Frequencies = function () {
	return this.frequenciesCollection;
};

Microsoft.Xna.Framework.Media.VisualizationData.prototype.get_Samples = function () {
	return this.samplesCollection;
};

Object.defineProperty(Microsoft.Xna.Framework.Media.VisualizationData.prototype, "Frequencies", {
		get: Microsoft.Xna.Framework.Media.VisualizationData.prototype.get_Frequencies
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.VisualizationData.prototype, "Samples", {
		get: Microsoft.Xna.Framework.Media.VisualizationData.prototype.get_Samples
	});

Object.seal(Microsoft.Xna.Framework.Media.VisualizationData.prototype);
Object.seal(Microsoft.Xna.Framework.Media.VisualizationData);
Microsoft.Xna.Framework.Media.Video.prototype.filename = null;
Microsoft.Xna.Framework.Media.Video.prototype.width = 0;
Microsoft.Xna.Framework.Media.Video.prototype.height = 0;
Microsoft.Xna.Framework.Media.Video.prototype.framesPerSecond = 0;
Microsoft.Xna.Framework.Media.Video.prototype.graphicsDevice = null;
Microsoft.Xna.Framework.Media.Video.prototype.soundtrackType = 0;
Microsoft.Xna.Framework.Media.Video.prototype.__StructFields__ = {
	duration: System.TimeSpan
};
Microsoft.Xna.Framework.Media.Video.prototype._ctor = function (device, file, duration, width, height, framesPerSecond, soundtrackType) {
	System.Object.prototype._ctor.call(this);
	this.graphicsDevice = device;
	this.filename = file;
	this.duration = new System.TimeSpan(0, 0, 0, 0, duration);
	this.width = width;
	this.height = height;
	this.framesPerSecond = framesPerSecond;
	this.soundtrackType = soundtrackType;
};

Microsoft.Xna.Framework.Media.Video.prototype.get_GraphicsDevice = function () {
	return this.graphicsDevice;
};

Microsoft.Xna.Framework.Media.Video.prototype.get_Filename = function () {
	return this.filename;
};

Microsoft.Xna.Framework.Media.Video.prototype.get_Duration = function () {
	return this.duration;
};

Microsoft.Xna.Framework.Media.Video.prototype.get_Width = function () {
	return this.width;
};

Microsoft.Xna.Framework.Media.Video.prototype.get_Height = function () {
	return this.height;
};

Microsoft.Xna.Framework.Media.Video.prototype.get_FramesPerSecond = function () {
	return this.framesPerSecond;
};

Microsoft.Xna.Framework.Media.Video.prototype.get_VideoSoundtrackType = function () {
	return this.soundtrackType;
};

Object.defineProperty(Microsoft.Xna.Framework.Media.Video.prototype, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.Media.Video.prototype.get_GraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Video.prototype, "Filename", {
		get: Microsoft.Xna.Framework.Media.Video.prototype.get_Filename
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Video.prototype, "Duration", {
		get: Microsoft.Xna.Framework.Media.Video.prototype.get_Duration
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Video.prototype, "Width", {
		get: Microsoft.Xna.Framework.Media.Video.prototype.get_Width
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Video.prototype, "Height", {
		get: Microsoft.Xna.Framework.Media.Video.prototype.get_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Video.prototype, "FramesPerSecond", {
		get: Microsoft.Xna.Framework.Media.Video.prototype.get_FramesPerSecond
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.Video.prototype, "VideoSoundtrackType", {
		get: Microsoft.Xna.Framework.Media.Video.prototype.get_VideoSoundtrackType
	});

Object.seal(Microsoft.Xna.Framework.Media.Video.prototype);
Object.seal(Microsoft.Xna.Framework.Media.Video);
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.disposed = new System.Boolean();
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.activeVideo = null;
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.decoderHandle = 0;
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.decoderHandleLock = null;
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.looping = new System.Boolean();
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.muted = new System.Boolean();
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.volume = 0;
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.frameTextures = null;
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.currentTextureId = 0;
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.__StructFields__ = {
	position: System.TimeSpan
};
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_IsDisposed = function () {
	return this.disposed;
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.Dispose$1 = function (disposing) {
	System.Threading.Monitor.Enter();

	try {

		if (!this.IsDisposed) {
			this.disposed = true;
			this.DestroyDecoder();
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype._ctor = function () {
	this.decoderHandle = -1;
	this.decoderHandleLock = new System.Object();
	System.Object.prototype._ctor.call(this);
	this.activeVideo = null;
	this.looping = false;
	this.muted = false;
	this.volume = 1;
	this.position = System.TimeSpan.Zero.MemberwiseClone();
	this.frameTextures = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.Texture2D, 2);
	this.currentTextureId = 0;
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Create(/* ref */ new JSIL.MemberReference(this, "decoderHandle")));
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.DestroyDecoder = function () {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsValidDecoder) {
			Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Release(this.decoderHandle);
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_IsValidDecoder = function () {
	return (this.decoderHandle !== -1);
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.ThrowIfDisposed = function () {

	if (this.IsDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.AllocateTextures = function (video) {
	var i = 0;

__while0__: 
	while (i < 2) {

		if (!(this.frameTextures[i] && 
				(this.frameTextures[i].Width === video.Width) && (this.frameTextures[i].Height === video.Height))) {

			if (this.frameTextures[i]) {
				this.frameTextures[i].Dispose();
			}
			this.frameTextures[i] = new Microsoft.Xna.Framework.Graphics.Texture2D(video.GraphicsDevice, video.Width, video.Height, 1, Microsoft.Xna.Framework.Graphics.TextureUsage.None | Microsoft.Xna.Framework.Graphics.TextureUsage.Linear, Microsoft.Xna.Framework.Graphics.SurfaceFormat.Bgr32);
		}
		++i;
	}
	this.currentTextureId = 0;
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.Play = function (video) {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (video !== null) {
			throw new System.ArgumentNullException("video");
		}

		if (!((this.activeVideo !== null) || (this.activeVideo !== video))) {
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Start(this.decoderHandle));
		} else {
			this.activeVideo = null;
			this.AllocateTextures(video);
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Play(
					this.decoderHandle, 
					video.Filename, 
					video.Filename.length, 
					video.Width, 
					video.Height, 
					this.looping
				));
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_SetMute(this.decoderHandle, this.muted));
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_SetVolume(this.decoderHandle, this.volume));
			this.activeVideo = video;
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.Pause = function () {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (this.IsValidDecoder && this.activeVideo) {
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Pause(this.decoderHandle));
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.Resume = function () {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (this.IsValidDecoder && this.activeVideo) {
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Resume(this.decoderHandle));
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.Stop = function () {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (this.IsValidDecoder && this.activeVideo) {
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Stop(this.decoderHandle));
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.GetTexture = function () {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (!(this.IsValidDecoder && this.activeVideo)) {
			throw new System.InvalidOperationException();
		}
		var value = new JSIL.Variable(JSIL.IgnoredMember("op_Explicit()"));
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_GetTexture(this.decoderHandle, JSIL.IgnoredMember("op_Explicit()"), JSIL.IgnoredMember("op_Explicit()"), /* ref */ value));

		if (System.IntPtr.op_Equality(value.value, JSIL.IgnoredMember("op_Explicit()"))) {
			this.currentTextureId = 0;
		} else {
			this.currentTextureId = 1;
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
	return this.frameTextures[this.currentTextureId];
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_Video = function () {
	return this.activeVideo;
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_State = function () {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();
		var mediaState = new JSIL.Variable(Microsoft.Xna.Framework.Media.MediaState.Stopped);

		if (this.IsValidDecoder) {
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_GetState(this.decoderHandle, /* ref */ mediaState));
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
	return mediaState.value;
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_IsLooped = function () {
	return this.looping;
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.set_IsLooped = function (value) {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (value !== this.looping) {

			if (this.IsValidDecoder) {
				Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_SetLooping(this.decoderHandle, value));
			}
			this.looping = value;
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_IsMuted = function () {
	return this.muted;
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.set_IsMuted = function (value) {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (value !== this.muted) {

			if (this.IsValidDecoder) {
				Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_SetMute(this.decoderHandle, value));
			}
			this.muted = value;
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_Volume = function () {
	return this.volume;
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.set_Volume = function (value) {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (value !== this.volume) {

			if (!((value >= 0) && (value <= 1))) {
				throw new System.ArgumentOutOfRangeException("value");
			}

			if (this.IsValidDecoder) {
				Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_SetVolume(this.decoderHandle, value));
			}
			this.volume = value;
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
};

Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_PlayPosition = function () {
	System.Threading.Monitor.Enter();

	try {
		this.ThrowIfDisposed();

		if (!(this.IsValidDecoder && this.activeVideo)) {
			var result = System.TimeSpan.Zero.MemberwiseClone();
		} else {
			var num = new JSIL.Variable(0);
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_GetPlayPosition(this.decoderHandle, /* ref */ num));
			result = System.TimeSpan.FromMilliseconds(num.value);
		}
	} finally {
		System.Threading.Monitor.Exit(this.decoderHandleLock);
	}
	return result;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "IsValidDecoder", {
		get: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_IsValidDecoder
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "Video", {
		get: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_Video
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "State", {
		get: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_State
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "IsLooped", {
		get: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_IsLooped, 
		set: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.set_IsLooped
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "IsMuted", {
		get: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_IsMuted, 
		set: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.set_IsMuted
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "Volume", {
		get: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_Volume, 
		set: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.set_Volume
	});
Object.defineProperty(Microsoft.Xna.Framework.Media.VideoPlayer.prototype, "PlayPosition", {
		get: Microsoft.Xna.Framework.Media.VideoPlayer.prototype.get_PlayPosition
	});
Microsoft.Xna.Framework.Media.VideoPlayer.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Media.VideoPlayer.prototype);
Object.seal(Microsoft.Xna.Framework.Media.VideoPlayer);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.ErrorHandler, "XONLINE_E_SESSION_INSUFFICIENT_PRIVILEGES", { value: 2148880897 });
Microsoft.Xna.Framework.GamerServices.ErrorHandler.ThrowExceptionFromResult = function (result) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":

				if (result !== 0) {
					return ;
				}

				switch (result) {
					case -2147220991: 
						throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.TooManyPendingAsyncOperations);
					case -2147220990: 
						throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.IAsyncNotFromBegin);
					case -2147220989: 
					case -2147220988: 
					case -2147220976: 
						__label0__ = "IL_12D";
						continue __step0__;
					case -2147220987: 
						throw new System.NotSupportedException(Microsoft.Xna.Framework.FrameworkResources.ProFeatureNotSupported);
					case -2147220986: 
						throw new Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException(Microsoft.Xna.Framework.FrameworkResources.ProfileNotSignedIn);
					case -2147220985: 
						break;
					case -2147220984: 
						throw new Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException(Microsoft.Xna.Framework.FrameworkResources.GamerServicesGuideAlreadyVisible);
					case -2147220983: 
						throw new Microsoft.Xna.Framework.Net.NetworkException(Microsoft.Xna.Framework.FrameworkResources.NetworkError);
					case -2147220982: 
						throw new Microsoft.Xna.Framework.Net.NetworkException(Microsoft.Xna.Framework.FrameworkResources.PacketQueueFull);
					case -2147220981: 
						throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.SessionAlreadyExists);
					case -2147220980: 
						throw new Microsoft.Xna.Framework.Net.NetworkSessionJoinException(Microsoft.Xna.Framework.FrameworkResources.SessionNotFound, Microsoft.Xna.Framework.Net.NetworkSessionJoinError.SessionNotFound);
					case -2147220979: 
						throw new Microsoft.Xna.Framework.Net.NetworkSessionJoinException(Microsoft.Xna.Framework.FrameworkResources.SessionNotJoinable, Microsoft.Xna.Framework.Net.NetworkSessionJoinError.SessionNotJoinable);
					case -2147220978: 
						throw new Microsoft.Xna.Framework.Net.NetworkSessionJoinException(Microsoft.Xna.Framework.FrameworkResources.SessionFull, Microsoft.Xna.Framework.Net.NetworkSessionJoinError.SessionFull);
					case -2147220977: 
						throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.StaleSearchResult);
					case -2147220975: 
						throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.NotInvited);
					case -2147220974: 
						throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InviteeNotSignedIn);
					case -2147220973: 
						throw new Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException(Microsoft.Xna.Framework.FrameworkResources.TrialMode);
					case -2147220972: 
						throw new Microsoft.Xna.Framework.Net.NetworkNotAvailableException(Microsoft.Xna.Framework.FrameworkResources.NetworkNotAvailable);
					default: 

						if (result !== -2146086399) {
							__label0__ = "IL_12D";
							continue __step0__;
						}
						break;
				}
				throw new Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException(Microsoft.Xna.Framework.FrameworkResources.ProfileNotPrivileged);
				__label0__ = "IL_12D";
				continue __step0__;
				break;

			case "IL_12D":
				Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(result);
				break __step0__;
		}
	}
};


Object.seal(Microsoft.Xna.Framework.GamerServices.ErrorHandler);
Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.prototype.endReason = 0;
Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.prototype._ctor = function (endReason) {
	System.EventArgs.prototype._ctor.call(this);
	this.endReason = endReason;
};

Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.prototype.get_EndReason = function () {
	return this.endReason;
};

Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.prototype, "EndReason", {
		get: Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.prototype.get_EndReason
	});

Object.seal(Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs);
Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.prototype.gamer = null;
Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.prototype._ctor = function (gamer) {
	System.EventArgs.prototype._ctor.call(this);
	this.gamer = gamer;
};

Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.prototype.get_Gamer = function () {
	return this.gamer;
};

Object.defineProperty(Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.prototype, "Gamer", {
		get: Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.prototype.get_Gamer
	});

Object.seal(Microsoft.Xna.Framework.Net.GamerJoinedEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Net.GamerJoinedEventArgs);
Microsoft.Xna.Framework.Net.GamerLeftEventArgs.prototype.gamer = null;
Microsoft.Xna.Framework.Net.GamerLeftEventArgs.prototype._ctor = function (gamer) {
	System.EventArgs.prototype._ctor.call(this);
	this.gamer = gamer;
};

Microsoft.Xna.Framework.Net.GamerLeftEventArgs.prototype.get_Gamer = function () {
	return this.gamer;
};

Object.defineProperty(Microsoft.Xna.Framework.Net.GamerLeftEventArgs.prototype, "Gamer", {
		get: Microsoft.Xna.Framework.Net.GamerLeftEventArgs.prototype.get_Gamer
	});

Object.seal(Microsoft.Xna.Framework.Net.GamerLeftEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Net.GamerLeftEventArgs);
Microsoft.Xna.Framework.Net.GameStartedEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Net.GameStartedEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Net.GameStartedEventArgs);
Microsoft.Xna.Framework.Net.GameEndedEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Net.GameEndedEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Net.GameEndedEventArgs);
Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype.oldHost = null;
Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype.newHost = null;
Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype._ctor = function (oldHost, newHost) {
	System.EventArgs.prototype._ctor.call(this);
	this.oldHost = oldHost;
	this.newHost = newHost;
};

Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype.get_OldHost = function () {
	return this.oldHost;
};

Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype.get_NewHost = function () {
	return this.newHost;
};

Object.defineProperty(Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype, "OldHost", {
		get: Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype.get_OldHost
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype, "NewHost", {
		get: Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype.get_NewHost
	});

Object.seal(Microsoft.Xna.Framework.Net.HostChangedEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Net.HostChangedEventArgs);
Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype.isCurrentSession = new System.Boolean();
Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype.gamer = null;
Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype._ctor = function (gamer, isCurrentSession) {
	System.EventArgs.prototype._ctor.call(this);
	this.gamer = gamer;
	this.isCurrentSession = isCurrentSession;
};

Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype.get_IsCurrentSession = function () {
	return this.isCurrentSession;
};

Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype.get_Gamer = function () {
	return this.gamer;
};

Object.defineProperty(Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype, "IsCurrentSession", {
		get: Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype.get_IsCurrentSession
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype, "Gamer", {
		get: Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype.get_Gamer
	});

Object.seal(Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Net.InviteAcceptedEventArgs);
Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.prototype.gamer = null;
Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.prototype._ctor = function (gamer) {
	System.EventArgs.prototype._ctor.call(this);

	if (gamer !== null) {
		throw new System.ArgumentNullException("gamer");
	}
	this.gamer = gamer;
};

Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.prototype.get_Gamer = function () {
	return this.gamer;
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.prototype, "Gamer", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.prototype.get_Gamer
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.SignedInEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.SignedInEventArgs);
Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.prototype.gamer = null;
Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.prototype._ctor = function (gamer) {
	System.EventArgs.prototype._ctor.call(this);

	if (gamer !== null) {
		throw new System.ArgumentNullException("gamer");
	}
	this.gamer = gamer;
};

Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.prototype.get_Gamer = function () {
	return this.gamer;
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.prototype, "Gamer", {
		get: Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.prototype.get_Gamer
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs);
Microsoft.Xna.Framework.GamerServices.Gamer.prototype.gamertag = null;
Microsoft.Xna.Framework.GamerServices.Gamer.prototype.kernelHandle = 0;
Microsoft.Xna.Framework.GamerServices.Gamer.prototype.internalIndex = 0;
Microsoft.Xna.Framework.GamerServices.Gamer.prototype.tag = null;
Microsoft.Xna.Framework.GamerServices.Gamer.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.Gamer.signedInGamers = null;
Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_Gamertag = function () {
	return this.gamertag;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_KernelHandle = function () {
	return this.kernelHandle;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_InternalIndex = function () {
	return this.internalIndex;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.set_InternalIndex = function (value) {
	this.internalIndex = value;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_Tag = function () {
	return this.tag;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.set_Tag = function (value) {
	this.tag = value;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.GamerServices.Gamer.get_SignedInGamers = function () {
	return Microsoft.Xna.Framework.GamerServices.Gamer.signedInGamers;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype._ctor = function (kernelHandle, internalIndex, gamertag) {
	System.Object.prototype._ctor.call(this);

	if (internalIndex < 0) {
		throw new System.ArgumentOutOfRangeException("internalIndex");
	}

	if (gamertag !== null) {
		throw new System.ArgumentNullException("gamertag");
	}

	if (System.String.op_Equality(gamertag, System.String.Empty)) {
		throw new System.ArgumentException(null, "gamertag");
	}
	this.kernelHandle = kernelHandle;
	this.internalIndex = internalIndex;
	this.gamertag = gamertag;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.Dispose = function () {
	this.isDisposed = true;
	this.internalIndex = -1;
	this.kernelHandle = 0;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.toString = function () {
	return this.gamertag;
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.GetProfile = function () {
	return this.EndGetProfile(this.BeginGetProfile(null, null));
};

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.BeginGetProfile = JSIL.UntranslatableFunction("BeginGetProfile");

Microsoft.Xna.Framework.GamerServices.Gamer.prototype.EndGetProfile = JSIL.UntranslatableFunction("EndGetProfile");

Microsoft.Xna.Framework.GamerServices.Gamer.ValidateGamerList = function (gamers, minGamers, maxGamers, parameterName) {
	var num = 0;

	if (gamers === null) {
		var enumerator = gamers.IEnumerable$b1_GetEnumerator();

		try {

		__while0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;

				if (current !== null) {
					throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.GamerNull, [parameterName]), parameterName);
				}

				if (current.IsDisposed) {
					throw new System.ObjectDisposedException(parameterName, Microsoft.Xna.Framework.FrameworkResources.GamerInvalid);
				}
				++num;
			}
		} finally {

			if (enumerator === null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}

	if (!((num >= minGamers) && (num <= maxGamers))) {
		throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.WrongNumberOfGamers, [parameterName, minGamers, maxGamers]), parameterName);
	}
	return num;
};

Microsoft.Xna.Framework.GamerServices.Gamer._cctor = function () {
	Microsoft.Xna.Framework.GamerServices.Gamer.signedInGamers = new Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection();
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Gamer.prototype, "Gamertag", {
		get: Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_Gamertag
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Gamer.prototype, "KernelHandle", {
		get: Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_KernelHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Gamer.prototype, "InternalIndex", {
		get: Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_InternalIndex, 
		set: Microsoft.Xna.Framework.GamerServices.Gamer.prototype.set_InternalIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Gamer.prototype, "Tag", {
		get: Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_Tag, 
		set: Microsoft.Xna.Framework.GamerServices.Gamer.prototype.set_Tag
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Gamer.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.GamerServices.Gamer.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Gamer, "SignedInGamers", {
		get: Microsoft.Xna.Framework.GamerServices.Gamer.get_SignedInGamers
	});
Microsoft.Xna.Framework.GamerServices.Gamer._cctor();

Object.seal(Microsoft.Xna.Framework.GamerServices.Gamer.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.Gamer);
Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.parent = null;
Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.presence = null;
Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.friendState = 0;
Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype._ctor = function (parent, gamertag, presence, friendState) {
	Microsoft.Xna.Framework.GamerServices.Gamer.prototype._ctor.call(this, parent.kernelHandle, parent.Count, gamertag);
	this.parent = parent;
	this.presence = presence;
	this.friendState = friendState;
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_Presence = function () {
	return this.presence;
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsOnline = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.FriendIsOnline) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsPlaying = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.FriendIsPlaying) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsJoinable = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.FriendIsJoinable) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsAway = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.FriendIsAway) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsBusy = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.FriendIsBusy) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_HasVoice = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.FriendHasVoice) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_FriendRequestReceivedFrom = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.FriendRequestReceivedFrom) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_FriendRequestSentTo = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.FriendRequestSentTo) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_InviteReceivedFrom = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.InviteReceivedFrom) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_InviteSentTo = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.InviteSentTo) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_InviteAccepted = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.InviteAccepted) !== 0);
};

Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_InviteRejected = function () {
	return ((this.friendState & Microsoft.Xna.Framework.GamerServices.FriendState.InviteRejected) !== 0);
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "Presence", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_Presence
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "IsOnline", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsOnline
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "IsPlaying", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsPlaying
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "IsJoinable", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsJoinable
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "IsAway", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsAway
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "IsBusy", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_IsBusy
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "HasVoice", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_HasVoice
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "FriendRequestReceivedFrom", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_FriendRequestReceivedFrom
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "FriendRequestSentTo", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_FriendRequestSentTo
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "InviteReceivedFrom", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_InviteReceivedFrom
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "InviteSentTo", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_InviteSentTo
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "InviteAccepted", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_InviteAccepted
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype, "InviteRejected", {
		get: Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype.get_InviteRejected
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.FriendGamer.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.FriendGamer);
Microsoft.Xna.Framework.GamerServices.InternalIndexComparer$b1.prototype.Compare = function (x, y) {
	return x.InternalIndex.CompareTo(y.InternalIndex);
};

Microsoft.Xna.Framework.GamerServices.InternalIndexComparer$b1.prototype.__ImplementInterface__(System.Collections.Generic.IComparer$b1.Of(T));

Object.seal(Microsoft.Xna.Framework.GamerServices.InternalIndexComparer$b1.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.InternalIndexComparer$b1);
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype.wrappedList = null;
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.internalIndexComparer = new Microsoft.Xna.Framework.GamerServices.InternalIndexComparer$b1.Of(T)();
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype._ctor = function () {
	System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T).prototype._ctor.call(this, new (System.Collections.Generic.List$b1.Of(T)) ());
	this.wrappedList = JSIL.Cast(this.Items, System.Collections.Generic.List$b1.Of(T));
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	var getEnumerator$gd__ = new (Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.Of(T)) (0);
	getEnumerator$gd__.$l$g4__this = this;
	return getEnumerator$gd__;
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype.FindGamerWithInternalIndexAndRemove = function (index) {
	var i = 0;

__while0__: 
	while (i < this.wrappedList.Count) {
		var result = this.wrappedList.get_Item(i);

		if (result.InternalIndex === index) {
			this.wrappedList.RemoveAt(i);
			return result;
		}
		++i;
	}
	throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.UnexpectedError);
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype.Insert = function (newGamer) {
	var num = this.wrappedList.BinarySearch(newGamer, Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(T).internalIndexComparer);

	if (num > 0) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.UnexpectedError);
	}
	this.wrappedList.Insert(~num, newGamer);
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype.GetEnumerator = function () {
	return new (Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.Of(T)) (this.wrappedList.GetEnumerator());
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1._cctor = function () {
	Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(T).internalIndexComparer = new (Microsoft.Xna.Framework.GamerServices.InternalIndexComparer$b1.Of(T)) ();
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1._cctor();
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.GamerServices.Gamer));
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype.__ImplementInterface__(System.Collections.IEnumerable);

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.__StructFields__ = {
	internalEnumerator: System.Collections.Generic.List$b1.Enumerator.Of(T)
};
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype._ctor = function (internalEnumerator) {
	this.internalEnumerator = internalEnumerator;
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.get_Current = function () {
	return this.internalEnumerator.get_Current();
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.Dispose = function () {
	this.internalEnumerator.Dispose();
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.MoveNext = function () {
	return this.internalEnumerator.MoveNext();
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.IEnumerator_get_Current = function () {
	return this.internalEnumerator.get_Current();
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.IEnumerator_Reset = function () {
	var enumerator = this.internalEnumerator;
	enumerator.IEnumerator_Reset();
	this.internalEnumerator = JSIL.Cast(enumerator, System.Collections.Generic.List$b1.Enumerator.Of(T).MemberwiseClone());
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype, "Current", {
		get: Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype, "IEnumerator_Current", {
		get: Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.IEnumerator_get_Current
	});
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerator$b1.Of(T));
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.__ImplementInterface__(System.IDisposable);
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype.__ImplementInterface__(System.Collections.IEnumerator);

Object.seal(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator);
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.$l$g2__current = null;
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.$l$g1__state = 0;
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.$l$g4__this = null;
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.$lgamer$g5__1 = null;
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.__StructFields__ = {
	$l$g7__wrap2: Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GamerCollectionEnumerator.Of(T)
};
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":

				var __label1__ = "__entry1__";
			__step1__: 
				while (true) {

					switch (__label1__) {

						case "__entry1__":

							switch (this.$l$g1__state) {
								case 0: 
									this.$l$g1__state = -1;
									this.$l$g7__wrap2 = this.$l$g4__this.GetEnumerator();
									this.$l$g1__state = 1;
									break;
								case 1: 
									__label1__ = "IL_83";
									continue __step1__;
								case 2: 
									this.$l$g1__state = 1;
									break;
								default: 
									__label1__ = "IL_83";
									continue __step1__;
							}

							if (this.$l$g7__wrap2.MoveNext()) {
								this.$lgamer$g5__1 = this.$l$g7__wrap2.Current;
								this.$l$g2__current = this.$lgamer$g5__1;
								this.$l$g1__state = 2;
								var result = true;
								return result;
							}
							this.$l$gm__Finally3();
							__label1__ = "IL_83";
							continue __step1__;
							break;

						case "IL_83":
							result = false;
							continue __step1__;
							break;

						case null:
							JSIL.UntranslatableNode("Fault Block");
							break __step1__;
					}
				}
				return result;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$l$g2__current;
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.IDisposable_Dispose = function () {

	switch (this.$l$g1__state) {
		case 1: 
		case 2: 

			try {
			} finally {
				this.$l$gm__Finally3();
			}
			return ;
		default: 
			return ;
	}
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$l$g2__current;
};

Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$l$g1__state = $l$g1__state;
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype, "IEnumerator$b1_Current", {
		get: Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype, "IEnumerator_Current", {
		get: Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.IEnumerator_get_Current
	});
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerator$b1.Of(Microsoft.Xna.Framework.GamerServices.Gamer));
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.__ImplementInterface__(System.Collections.IEnumerator);
Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.GetEnumerator$gd__0);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerCollection$b1);
Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.prototype._ctor$0 = function () {
	System.Exception.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.prototype._ctor$1 = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.prototype._ctor$2 = function (message, innerException) {
	System.Exception.prototype._ctor.call(this, message, innerException);
};

Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.prototype._ctor$3 = function (info, context) {
	System.Exception.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerPrivilegeException);
Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.privileges = 0;
Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype._ctor = function (privileges) {
	System.Object.prototype._ctor.call(this);
	this.privileges = privileges;
};

Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowOnlineSessions = function () {
	return ((Microsoft.Xna.Framework.GamerServices.Guide.IsTrialMode !== null) && ((this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowOnlineSessions) !== Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone));
};

Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowCommunication = function () {

	if (this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowCommunication) {
		return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.Everyone;
	}

	if (this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowCommunicationFriendsOnly) {
		return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.FriendsOnly;
	}
	return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.Blocked;
};

Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowProfileViewing = function () {

	if (this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowProfileViewing) {
		return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.Everyone;
	}

	if (this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowProfileViewingFriendsOnly) {
		return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.FriendsOnly;
	}
	return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.Blocked;
};

Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowUserCreatedContent = function () {

	if (this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowUserCreatedContent) {
		return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.Everyone;
	}

	if (this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowUserCreatedContentFriendsOnly) {
		return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.FriendsOnly;
	}
	return Microsoft.Xna.Framework.GamerServices.GamerPrivilegeSetting.Blocked;
};

Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowTradeContent = function () {
	return ((this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowTradeContent) !== Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone);
};

Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowPurchaseContent = function () {
	return ((this.privileges & Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone | Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowPurchaseContent) !== Microsoft.Xna.Framework.GamerServices.GamerPrivilegeOptions.AllowNone);
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype, "AllowOnlineSessions", {
		get: Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowOnlineSessions
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype, "AllowCommunication", {
		get: Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowCommunication
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype, "AllowProfileViewing", {
		get: Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowProfileViewing
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype, "AllowUserCreatedContent", {
		get: Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowUserCreatedContent
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype, "AllowTradeContent", {
		get: Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowTradeContent
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype, "AllowPurchaseContent", {
		get: Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype.get_AllowPurchaseContent
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.GamerPrivileges.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerPrivileges);
Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.prototype._ctor$0 = function () {
	System.Exception.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.prototype._ctor$1 = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.prototype._ctor$2 = function (message, innerException) {
	System.Exception.prototype._ctor.call(this, message, innerException);
};

Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.prototype._ctor$3 = function (info, context) {
	System.Exception.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException);
Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.prototype._ctor$0 = function () {
	System.Exception.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.prototype._ctor$1 = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.prototype._ctor$2 = function (message, innerException) {
	System.Exception.prototype._ctor.call(this, message, innerException);
};

Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.prototype._ctor$3 = function (info, context) {
	System.Exception.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GuideAlreadyVisibleException);
Microsoft.Xna.Framework.GamerServices.GuideResourceManager.prototype.resources = null;
Microsoft.Xna.Framework.GamerServices.GuideResourceManager.prototype.Add = function (handle, resource) {

	if (resource !== null) {
		throw new System.ArgumentNullException("resource");
	}
	this.resources.Add(handle, resource);
};

Microsoft.Xna.Framework.GamerServices.GuideResourceManager.prototype.Remove = function (handle) {
	this.resources.get_Item(handle).IDisposable_Dispose();
	this.resources.Remove(handle);
};

Microsoft.Xna.Framework.GamerServices.GuideResourceManager.prototype.Get = function (handle) {

	if (handle !== 0) {
		return null;
	}
	return JSIL.Cast(JSIL.TryCast(this.resources.get_Item(handle), T), T);
};

Microsoft.Xna.Framework.GamerServices.GuideResourceManager.prototype.DestroyResources = function () {
	var enumerator = this.resources.Values.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.MoveNext()) {
			enumerator.Current.IDisposable_Dispose();
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	this.resources.Clear();
};

Microsoft.Xna.Framework.GamerServices.GuideResourceManager.prototype._ctor = function () {
	this.resources = new (System.Collections.Generic.Dictionary$b2.Of(System.Int32, System.IDisposable)) ();
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.GamerServices.GuideResourceManager.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GuideResourceManager);
Microsoft.Xna.Framework.GamerServices.Guide.forceGuideVisible = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.Guide.isVisible = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.Guide.notificationPosition = 0;
Microsoft.Xna.Framework.GamerServices.Guide.isTrialMode = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.Guide.simulateTrialMode = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector$0 = function (player, callback, state) {
	return Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(
		player, 
		0, 
		1, 
		callback, 
		state
	);
};

Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector$1 = function (player, sizeInBytes, directoryCount, callback, state) {
	var storageDeviceAsyncResult = new Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult(state, player);

	if (callback === null) {
		callback(storageDeviceAsyncResult);
	}
	return storageDeviceAsyncResult;
};

Microsoft.Xna.Framework.GamerServices.Guide.EndShowStorageDeviceSelector = function (result) {
	var storageDeviceAsyncResult = JSIL.TryCast(result, Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult);

	if (storageDeviceAsyncResult !== null) {
		throw new System.ArgumentNullException("result");
	}

	if (storageDeviceAsyncResult.playerIndex !== 255) {
		return new Microsoft.Xna.Framework.Storage.StorageDevice(0, storageDeviceAsyncResult.playerIndex);
	}
	return new Microsoft.Xna.Framework.Storage.StorageDevice(1);
};

Microsoft.Xna.Framework.GamerServices.Guide.get_IsScreenSaverEnabled = function () {
	return true;
};

Microsoft.Xna.Framework.GamerServices.Guide.set_IsScreenSaverEnabled = function (value) {
};

Microsoft.Xna.Framework.GamerServices.Guide.get_IsVisible = function () {

	if (Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.IsInitialized !== null) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.GamerServicesNotInitialized);
	}
	return (Microsoft.Xna.Framework.GamerServices.Guide.isVisible || Microsoft.Xna.Framework.GamerServices.Guide.forceGuideVisible);
};

Microsoft.Xna.Framework.GamerServices.Guide.set_IsVisible = function (value) {

	if (Microsoft.Xna.Framework.GamerServices.Guide.isVisible !== value) {
		Microsoft.Xna.Framework.GamerServices.Guide.forceGuideVisible = false;
	}
	Microsoft.Xna.Framework.GamerServices.Guide.isVisible = value;
};

Microsoft.Xna.Framework.GamerServices.Guide.get_IsVisibleNoThrow = function () {
	return Microsoft.Xna.Framework.GamerServices.Guide.isVisible;
};

Microsoft.Xna.Framework.GamerServices.Guide.BeginShowMessageBox$0 = JSIL.UntranslatableFunction("BeginShowMessageBox");

Microsoft.Xna.Framework.GamerServices.Guide.BeginShowMessageBox$1 = function (title, text, buttons, focusButton, icon, callback, state) {
	return Microsoft.Xna.Framework.GamerServices.Guide.BeginShowMessageBox(
		Microsoft.Xna.Framework.PlayerIndex.One, 
		title, 
		text, 
		buttons, 
		focusButton, 
		icon, 
		callback, 
		state
	);
};

Microsoft.Xna.Framework.GamerServices.Guide.ValidateShowMessageBoxArgs = function (player, title, text, buttons, focusButton) {

	if (player === 0) {
		throw new System.ArgumentOutOfRangeException("player");
	}

	if (!(!System.String.IsNullOrEmpty(title) && (title.length < 256))) {
		throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.StringNullEmptyOrTooLong, [256]), "title");
	}

	if (!(!System.String.IsNullOrEmpty(text) && (text.length < 256))) {
		throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.StringNullEmptyOrTooLong, [256]), "text");
	}

	if (buttons !== null) {
		throw new System.ArgumentNullException("buttons");
	}
	var num = 0;
	var enumerator = buttons.IEnumerable$b1_GetEnumerator();

	try {

	__while0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;

			if (!(!System.String.IsNullOrEmpty(current) && (current.length < 256))) {
				throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.StringCollectionInvalid, [3, 256]), "buttons");
			}
			++num;
		}
	} finally {

		if (enumerator === null) {
			enumerator.IDisposable_Dispose();
		}
	}

	if (!((num > 0) && (num <= 3))) {
		throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.StringCollectionInvalid, [3, 256]), "buttons");
	}

	if (!((focusButton >= 0) && (focusButton < num))) {
		throw new System.ArgumentOutOfRangeException("focusButton");
	}
	return num;
};

Microsoft.Xna.Framework.GamerServices.Guide.EndShowMessageBox = JSIL.UntranslatableFunction("EndShowMessageBox");

Microsoft.Xna.Framework.GamerServices.Guide.ShowSignIn = JSIL.UntranslatableFunction("ShowSignIn");

Microsoft.Xna.Framework.GamerServices.Guide.BeginShowKeyboardInput = JSIL.UntranslatableFunction("BeginShowKeyboardInput");

Microsoft.Xna.Framework.GamerServices.Guide.EndShowKeyboardInput = JSIL.UntranslatableFunction("EndShowKeyboardInput");

Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector$2 = function (callback, state) {
	return Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(
		255, 
		0, 
		1, 
		callback, 
		state
	);
};

Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector$3 = function (sizeInBytes, directoryCount, callback, state) {
	return Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(
		255, 
		sizeInBytes, 
		directoryCount, 
		callback, 
		state
	);
};

Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall$0 = JSIL.UntranslatableFunction("ExecuteKernelCall");

Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall$1 = JSIL.UntranslatableFunction("ExecuteKernelCall");

Microsoft.Xna.Framework.GamerServices.Guide.ShowMessages = function (player) {
	Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall(Microsoft.Xna.Framework.GamerServices.KernelCallType.Guide_ShowMessages, player);
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowFriends = function (player) {
	Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall(Microsoft.Xna.Framework.GamerServices.KernelCallType.Guide_ShowFriends, player);
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowPlayers = function (player) {
	Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall(Microsoft.Xna.Framework.GamerServices.KernelCallType.Guide_ShowPlayers, player);
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowFriendRequest = function (player, gamer) {
	Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall(Microsoft.Xna.Framework.GamerServices.KernelCallType.Guide_ShowFriendRequest, player, gamer);
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowPlayerReview = function (player, gamer) {
	Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall(Microsoft.Xna.Framework.GamerServices.KernelCallType.Guide_ShowPlayerReview, player, gamer);
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowGamerCard = function (player, gamer) {
	Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall(Microsoft.Xna.Framework.GamerServices.KernelCallType.Guide_ShowGamerCard, player, gamer);
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowParty = function (player) {
	Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall(Microsoft.Xna.Framework.GamerServices.KernelCallType.Guide_ShowParty, player);
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowPartySessions = function (player) {
	Microsoft.Xna.Framework.GamerServices.Guide.ExecuteKernelCall(Microsoft.Xna.Framework.GamerServices.KernelCallType.Guide_ShowPartySessions, player);
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowComposeMessage = JSIL.UntranslatableFunction("ShowComposeMessage");

Microsoft.Xna.Framework.GamerServices.Guide.get_NotificationPosition = function () {
	return Microsoft.Xna.Framework.GamerServices.Guide.notificationPosition;
};

Microsoft.Xna.Framework.GamerServices.Guide.set_NotificationPosition = JSIL.UntranslatableFunction("set_NotificationPosition");

Microsoft.Xna.Framework.GamerServices.Guide.DelayNotifications = JSIL.UntranslatableFunction("DelayNotifications");

Microsoft.Xna.Framework.GamerServices.Guide.get_IsTrialMode = function () {
	return Microsoft.Xna.Framework.GamerServices.Guide.isTrialMode;
};

Microsoft.Xna.Framework.GamerServices.Guide.set_IsTrialMode = function (value) {
	Microsoft.Xna.Framework.GamerServices.Guide.isTrialMode = value;
};

Microsoft.Xna.Framework.GamerServices.Guide.get_SimulateTrialMode = function () {
	return Microsoft.Xna.Framework.GamerServices.Guide.simulateTrialMode;
};

Microsoft.Xna.Framework.GamerServices.Guide.set_SimulateTrialMode = function (value) {
	Microsoft.Xna.Framework.GamerServices.Guide.simulateTrialMode = value;
};

Microsoft.Xna.Framework.GamerServices.Guide.ShowGameInvite = JSIL.UntranslatableFunction("ShowGameInvite");

Microsoft.Xna.Framework.GamerServices.Guide.ShowMarketplace = JSIL.UntranslatableFunction("ShowMarketplace");

Microsoft.Xna.Framework.GamerServices.Guide._cctor = function () {
	Microsoft.Xna.Framework.GamerServices.Guide.notificationPosition = Microsoft.Xna.Framework.GamerServices.NotificationPosition.BottomCenter;
	Microsoft.Xna.Framework.GamerServices.Guide.isTrialMode = true;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.Guide, "BeginShowStorageDeviceSelector", [
		["BeginShowStorageDeviceSelector$0", [Microsoft.Xna.Framework.PlayerIndex, System.AsyncCallback, System.Object]], 
		["BeginShowStorageDeviceSelector$1", [Microsoft.Xna.Framework.PlayerIndex, System.Int32, System.Int32, System.AsyncCallback, System.Object]], 
		["BeginShowStorageDeviceSelector$2", [System.AsyncCallback, System.Object]], 
		["BeginShowStorageDeviceSelector$3", [System.Int32, System.Int32, System.AsyncCallback, System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.Guide, "BeginShowMessageBox", [
		["BeginShowMessageBox$0", [Microsoft.Xna.Framework.PlayerIndex, System.String, System.String, System.Collections.Generic.IEnumerable$b1.Of(System.String), System.Int32, Microsoft.Xna.Framework.GamerServices.MessageBoxIcon, System.AsyncCallback, System.Object]], 
		["BeginShowMessageBox$1", [System.String, System.String, System.Collections.Generic.IEnumerable$b1.Of(System.String), System.Int32, Microsoft.Xna.Framework.GamerServices.MessageBoxIcon, System.AsyncCallback, System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.Guide, "ExecuteKernelCall", [
		["ExecuteKernelCall$0", [Microsoft.Xna.Framework.GamerServices.KernelCallType, Microsoft.Xna.Framework.PlayerIndex, Microsoft.Xna.Framework.GamerServices.Gamer]], 
		["ExecuteKernelCall$1", [Microsoft.Xna.Framework.GamerServices.KernelCallType, Microsoft.Xna.Framework.PlayerIndex]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Guide, "IsScreenSaverEnabled", {
		get: Microsoft.Xna.Framework.GamerServices.Guide.get_IsScreenSaverEnabled, 
		set: Microsoft.Xna.Framework.GamerServices.Guide.set_IsScreenSaverEnabled
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Guide, "IsVisible", {
		get: Microsoft.Xna.Framework.GamerServices.Guide.get_IsVisible, 
		set: Microsoft.Xna.Framework.GamerServices.Guide.set_IsVisible
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Guide, "IsVisibleNoThrow", {
		get: Microsoft.Xna.Framework.GamerServices.Guide.get_IsVisibleNoThrow
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Guide, "NotificationPosition", {
		get: Microsoft.Xna.Framework.GamerServices.Guide.get_NotificationPosition, 
		set: Microsoft.Xna.Framework.GamerServices.Guide.set_NotificationPosition
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Guide, "IsTrialMode", {
		get: Microsoft.Xna.Framework.GamerServices.Guide.get_IsTrialMode, 
		set: Microsoft.Xna.Framework.GamerServices.Guide.set_IsTrialMode
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.Guide, "SimulateTrialMode", {
		get: Microsoft.Xna.Framework.GamerServices.Guide.get_SimulateTrialMode, 
		set: Microsoft.Xna.Framework.GamerServices.Guide.set_SimulateTrialMode
	});
Microsoft.Xna.Framework.GamerServices.Guide._cctor();

Object.seal(Microsoft.Xna.Framework.GamerServices.Guide);
Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.syncObject = null;
Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.mre = null;
Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.playerIndex = 0;
Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype._ctor = function (stateObject, player) {
	this.mre = new System.Threading.ManualResetEvent(true);
	System.Object.prototype._ctor.call(this);
	this.syncObject = stateObject;
	this.playerIndex = player;
};

Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.get_AsyncState = function () {
	return this.syncObject;
};

Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.get_AsyncWaitHandle = function () {
	return this.mre;
};

Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.get_CompletedSynchronously = function () {
	return true;
};

Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.get_IsCompleted = function () {
	return this.mre.WaitOne(0, false);
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype, "AsyncState", {
		get: Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.get_AsyncState
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype, "AsyncWaitHandle", {
		get: Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.get_AsyncWaitHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype, "CompletedSynchronously", {
		get: Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.get_CompletedSynchronously
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype, "IsCompleted", {
		get: Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.get_IsCompleted
	});
Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype.__ImplementInterface__(System.IAsyncResult);

Object.seal(Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.StorageDeviceAsyncResult);
Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyExecutableName = null;
Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyExecutableDirectory = null;
Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess = null;
Microsoft.Xna.Framework.GamerServices.KernelMethods.unexpectedShutdownMessage = null;
Microsoft.Xna.Framework.GamerServices.KernelMethods.get_ProxyExecutablePath = function () {
	var text = JSIL.TryCast(Microsoft.Win32.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\XNA\\Game Studio\\v3.1", "InstallPath", null), System.String);

	if (System.String.IsNullOrEmpty(text)) {
		text = System.String.Empty;
	} else {
		text = System.IO.Path.Combine(text, Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyExecutableDirectory);
	}
	return System.IO.Path.Combine(text, Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyExecutableName);
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.get_CanMakeKernelCalls = function () {
	return (!((Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess !== null) || 
			Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess.isDisposed || 
			Microsoft.Xna.Framework.GamerServices.KernelMethods.unexpectedShutdownMessage) && Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.PacketBuffer.CanMakeKernelCalls);
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.Initialize = function (packetBuffer) {
	Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess = new Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess(packetBuffer);
	System.AppDomain.CurrentDomain.add_DomainUnload(function (obj, eventArgs) {

			if (Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess === null) {
				Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess.Dispose();
				Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess = null;
			}
		});
	return 0;
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.DispatchCommand = function (packetBuffer) {

	if (Microsoft.Xna.Framework.GamerServices.KernelMethods.unexpectedShutdownMessage === null) {
		throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(Microsoft.Xna.Framework.GamerServices.KernelMethods.unexpectedShutdownMessage);
	}
	JSIL.UntranslatableInstruction("call:void*[exp:int32*](IntPtr::op_Explicit, callvirtgetter:IntPtr(SharedMemoryRegion::get_MappedPointer, ldfld:SharedMemoryRegion(UserPacketBuffer::Data, ldloc:UserPacketBuffer(packetBuffer))))") = packetBuffer.CurrentSize;
	Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess.DispatchCommand();
	return JSIL.UntranslatableInstruction("call:void*[exp:uint32*](IntPtr::op_Explicit, callvirtgetter:IntPtr(SharedMemoryRegion::get_MappedPointer, ldfld:SharedMemoryRegion(UserPacketBuffer::Data, ldloc:UserPacketBuffer(packetBuffer))))");
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.HandleUnexpectedShutdown = function (errorMesage) {
	Microsoft.Xna.Framework.GamerServices.KernelMethods.unexpectedShutdownMessage = errorMesage;

	if (Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess === null) {
		Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyProcess.WaitForExit();
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods._cctor = function () {
	Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyExecutableName = "XnaLiveProxy.exe";
	Microsoft.Xna.Framework.GamerServices.KernelMethods.proxyExecutableDirectory = "Bin";
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.KernelMethods, "ProxyExecutablePath", {
		get: Microsoft.Xna.Framework.GamerServices.KernelMethods.get_ProxyExecutablePath
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.KernelMethods, "CanMakeKernelCalls", {
		get: Microsoft.Xna.Framework.GamerServices.KernelMethods.get_CanMakeKernelCalls
	});
Microsoft.Xna.Framework.GamerServices.KernelMethods._cctor();

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.triggerCallEvent = 0;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.callDoneEvent = 0;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.proxyProcessWantsToTalk = 0;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.sharedAsyncDataSafeToWrite = 0;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.aSyncHResultPtr = 0;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.asyncManagedCallArgument = 0;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.aSyncManagedCallTypePtr = 0;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.parentExitEvent = 0;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.serverProcess = null;
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.virtualTitleId = new System.Nullable$b1.Of(System.Guid)();
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_ProxyProcessWantsToTalk = function () {
	return this.proxyProcessWantsToTalk;
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_SharedAsyncDataSafeToWrite = function () {
	return this.sharedAsyncDataSafeToWrite;
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_AsyncHResult = function () {
	return JSIL.UntranslatableInstruction("call:void*[exp:uint32*](IntPtr::ToPointer, ldflda:IntPtr&(KernelMethods/ProxyProcess::aSyncHResultPtr, ldloc:KernelMethods/ProxyProcess(this)))");
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_AsyncManagedCallArgument = function () {
	return JSIL.UntranslatableInstruction("call:void*[exp:uint32*](IntPtr::ToPointer, ldflda:IntPtr&(KernelMethods/ProxyProcess::asyncManagedCallArgument, ldloc:KernelMethods/ProxyProcess(this)))");
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_AsyncManagedCallType = function () {
	return JSIL.UntranslatableInstruction("call:void*[exp:ManagedCallType*](IntPtr::ToPointer, ldflda:IntPtr&(KernelMethods/ProxyProcess::aSyncManagedCallTypePtr, ldloc:KernelMethods/ProxyProcess(this)))");
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype._ctor = function (packetBuffer) {
	System.Object.prototype._ctor.call(this);

	try {
		this.CreateEvents();
		Microsoft.Xna.Framework.GamerServices.ErrorHandler.ThrowExceptionFromResult(Microsoft.Xna.Framework.WindowsManagedCallbackHandler.Instance.SetProxyProcessHandler(this));
		var id = System.Diagnostics.Process.GetCurrentProcess().Id;
		var value = JSIL.Array.New(System.String, [packetBuffer.Data.FileHandle.toString(), packetBuffer.Data.Size.toString(System.Globalization.CultureInfo.InvariantCulture), this.triggerCallEvent.toString(), this.callDoneEvent.toString(), this.proxyProcessWantsToTalk.toString(), this.sharedAsyncDataSafeToWrite.toString(), this.parentExitEvent.toString(), id.toString(System.Globalization.CultureInfo.InvariantCulture), (System.Globalization.CultureInfo.CurrentCulture.LCID & 65535).toString(System.Globalization.CultureInfo.InvariantCulture), Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.VirtualTitleId.toString("N")]);
		this.serverProcess = new System.Diagnostics.Process();
		this.serverProcess.StartInfo.FileName = Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyExecutablePath;
		this.serverProcess.StartInfo.Arguments = System.String.Join(", ", value);
		this.serverProcess.StartInfo.UseShellExecute = false;

		try {
			this.serverProcess.Start();
		} catch ($exception) {

			if (JSIL.CheckType($exception, System.ComponentModel.Win32Exception)) {
				var arg_170_0 = $exception;
				throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.ProxyCreateFailed, [this.serverProcess.StartInfo.FileName]), arg_170_0);
			} else {
				throw $exception;
			}
		}
		this.WaitForRemoteProcessToInitialize();
		this.aSyncHResultPtr = packetBuffer.StealSpaceFromEndOfBuffer(4);
		this.asyncManagedCallArgument = packetBuffer.StealSpaceFromEndOfBuffer(4);
		this.aSyncManagedCallTypePtr = packetBuffer.StealSpaceFromEndOfBuffer(4);
	} catch ($exception) {
		this.Dispose();
		throw $exception;
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.Dispose$1 = function (disposing) {

	if (!this.isDisposed) {
		this.isDisposed = true;
		Microsoft.Xna.Framework.WindowsManagedCallbackHandler.Instance.SetProxyProcessHandler(null);

		if (System.IntPtr.op_Inequality(this.parentExitEvent, System.IntPtr.Zero)) {
			Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SetEvent(this.parentExitEvent);
		}
		Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.SafeCloseHandle(/* ref */ new JSIL.MemberReference(this, "triggerCallEvent"));
		Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.SafeCloseHandle(/* ref */ new JSIL.MemberReference(this, "callDoneEvent"));
		Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.SafeCloseHandle(/* ref */ new JSIL.MemberReference(this, "sharedAsyncDataSafeToWrite"));
		Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.SafeCloseHandle(/* ref */ new JSIL.MemberReference(this, "proxyProcessWantsToTalk"));
		Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.SafeCloseHandle(/* ref */ new JSIL.MemberReference(this, "parentExitEvent"));
	}

	if (this.serverProcess === null) {

		if (disposing) {
			this.serverProcess.Dispose();
		}
		this.serverProcess = null;
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.SafeCloseHandle = function (/* ref */ handle) {

	if (System.IntPtr.op_Inequality(handle.value, System.IntPtr.Zero)) {
		Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.CloseHandle(handle.value);
		handle.value = System.IntPtr.Zero;
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.CreateEvents = function () {
	var securityAttributes = new Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SecurityAttributes(true);
	this.triggerCallEvent = Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.CreateEvent(/* ref */ securityAttributes, false, false, System.IntPtr.Zero);
	this.callDoneEvent = Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.CreateEvent(/* ref */ securityAttributes, false, false, System.IntPtr.Zero);
	this.proxyProcessWantsToTalk = Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.CreateEvent(/* ref */ securityAttributes, false, false, System.IntPtr.Zero);
	this.sharedAsyncDataSafeToWrite = Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.CreateEvent(/* ref */ securityAttributes, false, true, System.IntPtr.Zero);
	this.parentExitEvent = Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.CreateEvent(/* ref */ securityAttributes, true, false, System.IntPtr.Zero);

	if (!(!System.IntPtr.op_Equality(this.triggerCallEvent, System.IntPtr.Zero) && 
			!System.IntPtr.op_Equality(this.callDoneEvent, System.IntPtr.Zero) && 
			!System.IntPtr.op_Equality(this.proxyProcessWantsToTalk, System.IntPtr.Zero) && 
			!System.IntPtr.op_Equality(this.sharedAsyncDataSafeToWrite, System.IntPtr.Zero) && !System.IntPtr.op_Equality(this.parentExitEvent, System.IntPtr.Zero))) {
		throw new System.Threading.WaitHandleCannotBeOpenedException();
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.WaitForRemoteProcessToInitialize = function () {

	if (!this.WaitForRemoteProcess()) {

		if (this.serverProcess.HasExited) {
			var exitCode = this.serverProcess.ExitCode;

			if (exitCode === 2) {
				throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(Microsoft.Xna.Framework.FrameworkResources.ProxyAlreadyRunning);
			}

			if (exitCode === -1073741515) {
				throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.ProxyMissingDependency, [this.serverProcess.StartInfo.FileName]));
			}
		}
		throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(Microsoft.Xna.Framework.FrameworkResources.ProxyInitializeFailed);
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.DispatchCommand = function () {
	Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SetEvent(this.triggerCallEvent);

	if (!this.WaitForRemoteProcess()) {

		if (!(!this.serverProcess.HasExited || (this.serverProcess.ExitCode !== 3))) {
			var text = Microsoft.Xna.Framework.FrameworkResources.NoCreatorsClub;
		} else {
			text = Microsoft.Xna.Framework.FrameworkResources.ProxyUpdateFailed;
		}
		Microsoft.Xna.Framework.GamerServices.KernelMethods.HandleUnexpectedShutdown(text);
		throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(text);
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.WaitForRemoteProcess = JSIL.UntranslatableFunction("WaitForRemoteProcess");

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.WaitForExit = function () {

	if (this.serverProcess === null) {
		this.serverProcess.WaitForExit();
	}
};

Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.get_VirtualTitleId = function () {

	if (!Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.virtualTitleId.get_HasValue()) {
		var assembly = System.Reflection.Assembly.GetEntryAssembly();

		if (assembly !== null) {
			assembly = System.Reflection.Assembly.GetCallingAssembly();

			if (assembly !== null) {
				throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(Microsoft.Xna.Framework.FrameworkResources.NoProjectGuid);
			}
		}
		var customAttributes = assembly.GetCustomAttributes(System.Runtime.InteropServices.GuidAttribute, false);

		if (!((customAttributes === null) && customAttributes.length)) {
			throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(Microsoft.Xna.Framework.FrameworkResources.NoProjectGuid);
		}
		var value = JSIL.Cast(customAttributes[0], System.Runtime.InteropServices.GuidAttribute).Value;

		try {
			Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.virtualTitleId = new (System.Nullable$b1.Of(System.Guid)) (new System.Guid(value));
		} catch ($exception) {

			if (JSIL.CheckType($exception, System.ArgumentException)) {
				var arg_73_0 = $exception;
				throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(Microsoft.Xna.Framework.FrameworkResources.NoProjectGuid, arg_73_0);
			} else if (JSIL.CheckType($exception, System.FormatException)) {
				var arg_84_0 = $exception;
				throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(Microsoft.Xna.Framework.FrameworkResources.NoProjectGuid, arg_84_0);
			} else if (JSIL.CheckType($exception, System.OverflowException)) {
				var arg_93_0 = $exception;
				throw new Microsoft.Xna.Framework.GamerServices.GamerServicesNotAvailableException(Microsoft.Xna.Framework.FrameworkResources.NoProjectGuid, arg_93_0);
			} else {
				throw $exception;
			}
		}
	}
	return Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.virtualTitleId.get_Value();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype, "ProxyProcessWantsToTalk", {
		get: Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_ProxyProcessWantsToTalk
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype, "SharedAsyncDataSafeToWrite", {
		get: Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_SharedAsyncDataSafeToWrite
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype, "AsyncHResult", {
		get: Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_AsyncHResult
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype, "AsyncManagedCallArgument", {
		get: Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_AsyncManagedCallArgument
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype, "AsyncManagedCallType", {
		get: Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.get_AsyncManagedCallType
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess, "VirtualTitleId", {
		get: Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.get_VirtualTitleId
	});
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.__ImplementInterface__(System.IDisposable);
Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype.__ImplementInterface__(Microsoft.Xna.Framework.IProxyProcessHandler);

Object.seal(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.KernelMethods.ProxyProcess);
Object.seal(Microsoft.Xna.Framework.GamerServices.KernelMethods);
Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor$0 = function () {
	System.Exception.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor$1 = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor$2 = function (message, innerException) {
	System.Exception.prototype._ctor.call(this, message, innerException);
};

Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor$3 = function (info, context) {
	System.Exception.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Net.NetworkException.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkException);
Microsoft.Xna.Framework.Net.NetworkNotAvailableException.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Net.NetworkNotAvailableException.prototype._ctor$1 = function (message) {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Net.NetworkNotAvailableException.prototype._ctor$2 = function (message, innerException) {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this, message, innerException);
};

Microsoft.Xna.Framework.Net.NetworkNotAvailableException.prototype._ctor$3 = function (info, context) {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkNotAvailableException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Net.NetworkNotAvailableException.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkNotAvailableException);
Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype.joinError = 0;
Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype._ctor$0 = function () {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype._ctor$1 = function (message) {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype._ctor$2 = function (message, joinError) {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this, message);
	this.joinError = joinError;
};

Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype._ctor$3 = function (message, innerException) {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this, message, innerException);
};

Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype.get_JoinError = function () {
	return this.joinError;
};

Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype.set_JoinError = function (value) {
	this.joinError = value;
};

Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype._ctor$4 = function (info, context) {
	Microsoft.Xna.Framework.Net.NetworkException.prototype._ctor.call(this, info, context);

	if (info !== null) {
		throw new System.ArgumentNullException("info");
	}
	this.joinError = info.GetInt32("joinError");
};

Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype.GetObjectData = function (info, context) {

	if (info !== null) {
		throw new System.ArgumentNullException("info");
	}
	System.Exception.prototype.GetObjectData.call(this, info, context);
	info.AddValue("joinError", this.joinError);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, Microsoft.Xna.Framework.Net.NetworkSessionJoinError]], 
		["_ctor$3", [System.String, System.Exception]], 
		["_ctor$4", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype, "JoinError", {
		get: Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype.get_JoinError, 
		set: Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype.set_JoinError
	});

Object.seal(Microsoft.Xna.Framework.Net.NetworkSessionJoinException.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSessionJoinException);
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.simulatedPacketLoss = 0;
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.simulatedLatencyTicks = 0;
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.random = null;
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.unorderedPackets = null;
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.encryptedOrderedPackets = null;
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.unencryptedOrderedPackets = null;
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.packetPool = null;
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.__StructFields__ = {
	simulatedLatency: System.TimeSpan
};
Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.get_SimulatedPacketLoss = function () {
	return this.simulatedPacketLoss;
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.set_SimulatedPacketLoss = function (value) {

	if (!((value >= 0) && (value <= 1))) {
		throw new System.ArgumentOutOfRangeException("value");
	}
	this.simulatedPacketLoss = value;
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.get_SimulatedLatency = function () {
	return this.simulatedLatency;
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.set_SimulatedLatency = function (value) {

	if (System.TimeSpan.op_LessThan(value.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone())) {
		throw new System.ArgumentOutOfRangeException("value");
	}
	this.simulatedLatency = value.MemberwiseClone();
	this.simulatedLatencyTicks = Math.floor((value.get_Ticks() * System.Diagnostics.Stopwatch.Frequency) / 10000000);
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.SendData = function (data, offset, count, options, sender, recipient) {

	if (!((this.simulatedPacketLoss <= 0) || 
			(options & Microsoft.Xna.Framework.Net.SendDataOptions.None | Microsoft.Xna.Framework.Net.SendDataOptions.Reliable) || (this.random.NextDouble() > this.simulatedPacketLoss))) {
		return true;
	}

	if (this.simulatedLatencyTicks > 0) {
		this.StoreLatentPacket(
			data, 
			offset, 
			count, 
			options, 
			sender, 
			recipient
		);
		return true;
	}
	return false;
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.StoreLatentPacket = function (data, offset, count, options, sender, recipient) {
	System.Threading.Monitor.Enter(this);

	try {

		if (this.packetPool.Count > 0) {
			var latentPacket = this.packetPool.Pop();
		} else {
			latentPacket = new Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket();
		}
		latentPacket.SendTime = (System.Diagnostics.Stopwatch.GetTimestamp() + this.NormallyDistributedRandomLatency());
		latentPacket.Size = count;
		latentPacket.Options = options;
		latentPacket.Sender = sender;
		latentPacket.Recipient = recipient;

		if (!((latentPacket.Data === null) && (latentPacket.Data.length >= count))) {
			latentPacket.Data = JSIL.Array.New(System.Byte, count);
		}
		System.Array.Copy(
			data, 
			offset, 
			latentPacket.Data, 
			0, 
			count
		);

		if (options & Microsoft.Xna.Framework.Net.SendDataOptions.None | Microsoft.Xna.Framework.Net.SendDataOptions.InOrder) {

			if (options & Microsoft.Xna.Framework.Net.SendDataOptions.None | Microsoft.Xna.Framework.Net.SendDataOptions.Chat) {
				this.unencryptedOrderedPackets.Enqueue(latentPacket);
			} else {
				this.encryptedOrderedPackets.Enqueue(latentPacket);
			}
		} else {
			var num = this.unorderedPackets.BinarySearch(latentPacket);

			if (num < 0) {
				num = ~num;
			}
			this.unorderedPackets.Insert(num, latentPacket);
		}
	} finally {
		System.Threading.Monitor.Exit(this);
	}
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.NormallyDistributedRandomLatency = function () {
	var num2 = (this.simulatedLatencyTicks * 2);
	var d = this.random.NextDouble();
	var num4 = (System.Math.Sqrt((-2 * System.Math.Log(d))) * System.Math.Cos((6.2831853071795862 * this.random.NextDouble())));
	num4 *= Math.floor(this.simulatedLatencyTicks / 4);
	num4 += this.simulatedLatencyTicks;
	var num5 = Math.floor(num4);

	if (num5 < 0) {
		return 0;
	}

	if (num5 > num2) {
		return num2;
	}
	return num5;
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.Update = function () {

	if (!(this.unorderedPackets.Count || 
			this.encryptedOrderedPackets.Count || this.unencryptedOrderedPackets.Count)) {
		return ;
	}
	var timestamp = System.Diagnostics.Stopwatch.GetTimestamp();
	System.Threading.Monitor.Enter(this);

	try {

	__while0__: 
		while (!((this.unorderedPackets.Count <= 0) || !this.TrySendLatentPacket(this.unorderedPackets.get_Item(0), timestamp))) {
			this.unorderedPackets.RemoveAt(0);
		}
		this.TrySendLatentPackets(this.encryptedOrderedPackets, timestamp);
		this.TrySendLatentPackets(this.unencryptedOrderedPackets, timestamp);
	} finally {
		System.Threading.Monitor.Exit(this);
	}
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.TrySendLatentPackets = function (packetQueue, currentTime) {

__while0__: 
	while (packetQueue.Count > 0) {

		if (!this.TrySendLatentPacket(packetQueue.Peek(), currentTime)) {
			return ;
		}
		packetQueue.Dequeue();
	}
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.TrySendLatentPacket = function (packet, currentTime) {
	var num = (currentTime - packet.SendTime);

	if (num < 0) {
		return false;
	}

	if (packet.IsStillValid) {
		packet.Sender.SendDataNow(
			packet.Data, 
			0, 
			packet.Size, 
			packet.Options, 
			packet.Recipient
		);
	}
	this.packetPool.Push(packet);
	return true;
};

Microsoft.Xna.Framework.Net.NetworkSimulator.prototype._ctor = function () {
	this.random = new System.Random();
	this.unorderedPackets = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket)) ();
	this.encryptedOrderedPackets = new (System.Collections.Generic.Queue$b1.Of(Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket)) ();
	this.unencryptedOrderedPackets = new (System.Collections.Generic.Queue$b1.Of(Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket)) ();
	this.packetPool = new (System.Collections.Generic.Stack$b1.Of(Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket)) ();
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSimulator.prototype, "SimulatedPacketLoss", {
		get: Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.get_SimulatedPacketLoss, 
		set: Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.set_SimulatedPacketLoss
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSimulator.prototype, "SimulatedLatency", {
		get: Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.get_SimulatedLatency, 
		set: Microsoft.Xna.Framework.Net.NetworkSimulator.prototype.set_SimulatedLatency
	});

Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.SendTime = 0;
Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.Data = null;
Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.Size = 0;
Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.Options = 0;
Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.Sender = null;
Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.Recipient = null;
Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.CompareTo = function (other) {
	var num = (this.SendTime - other.SendTime);

	if (num < 0) {
		return -1;
	}

	if (num > 0) {
		return 1;
	}
	return 0;
};

Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.get_IsStillValid = function () {
	return (!this.Sender.HasLeftSession && ((this.Recipient !== null) || 
			!this.Recipient.HasLeftSession));
};

Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype, "IsStillValid", {
		get: Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.get_IsStillValid
	});
Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype.__ImplementInterface__(System.IComparable$b1.Of(Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket));

Object.seal(Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSimulator.LatentPacket);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSimulator.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSimulator);
Microsoft.Xna.Framework.Net.PacketReader.prototype._ctor$0 = function () {
	this._ctor(0);
};

Microsoft.Xna.Framework.Net.PacketReader.prototype._ctor$1 = function (capacity) {
	System.IO.BinaryReader.prototype._ctor.call(this, new System.IO.MemoryStream(capacity));
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.get_Length = function () {
	return JSIL.Cast(this.BaseStream.length, System.Int32);
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.get_Position = function () {
	return JSIL.Cast(this.BaseStream.Position, System.Int32);
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.set_Position = function (value) {
	this.BaseStream.Position = value;
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.Resize = function (size) {
	var memoryStream = JSIL.Cast(this.BaseStream, System.IO.MemoryStream);
	memoryStream.SetLength(size);
	memoryStream.Position = 0;
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.get_ByteArray = function () {
	return JSIL.Cast(this.BaseStream, System.IO.MemoryStream).GetBuffer();
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.ReadVector2 = function () {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = this.ReadSingle();
	result.Y = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.ReadVector3 = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = this.ReadSingle();
	result.Y = this.ReadSingle();
	result.Z = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.ReadVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = this.ReadSingle();
	result.Y = this.ReadSingle();
	result.Z = this.ReadSingle();
	result.W = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.ReadMatrix = function () {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = this.ReadSingle();
	result.M12 = this.ReadSingle();
	result.M13 = this.ReadSingle();
	result.M14 = this.ReadSingle();
	result.M21 = this.ReadSingle();
	result.M22 = this.ReadSingle();
	result.M23 = this.ReadSingle();
	result.M24 = this.ReadSingle();
	result.M31 = this.ReadSingle();
	result.M32 = this.ReadSingle();
	result.M33 = this.ReadSingle();
	result.M34 = this.ReadSingle();
	result.M41 = this.ReadSingle();
	result.M42 = this.ReadSingle();
	result.M43 = this.ReadSingle();
	result.M44 = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.ReadQuaternion = function () {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = this.ReadSingle();
	result.Y = this.ReadSingle();
	result.Z = this.ReadSingle();
	result.W = this.ReadSingle();
	return result;
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.ReadColor = function () {
	var result = new Microsoft.Xna.Framework.Graphics.Color();
	result.set_PackedValue(this.ReadUInt32());
	return result;
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.ReadSingle = function () {
	var num = this.ReadUInt32();
	return JSIL.UntranslatableInstruction("conv.u:float32*(ldloca:uint32&[exp:float32*](num))");
};

Microsoft.Xna.Framework.Net.PacketReader.prototype.ReadDouble = function () {
	var num = this.ReadUInt64();
	return JSIL.UntranslatableInstruction("conv.u:float64*(ldloca:uint64&[exp:float64*](num))");
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.PacketReader.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Net.PacketReader.prototype, "Length", {
		get: Microsoft.Xna.Framework.Net.PacketReader.prototype.get_Length
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.PacketReader.prototype, "Position", {
		get: Microsoft.Xna.Framework.Net.PacketReader.prototype.get_Position, 
		set: Microsoft.Xna.Framework.Net.PacketReader.prototype.set_Position
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.PacketReader.prototype, "ByteArray", {
		get: Microsoft.Xna.Framework.Net.PacketReader.prototype.get_ByteArray
	});

Object.seal(Microsoft.Xna.Framework.Net.PacketReader.prototype);
Object.seal(Microsoft.Xna.Framework.Net.PacketReader);
Microsoft.Xna.Framework.Net.PacketWriter.prototype._ctor$0 = function () {
	this._ctor(0);
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype._ctor$1 = function (capacity) {
	System.IO.BinaryWriter.prototype._ctor.call(this, new System.IO.MemoryStream(capacity));
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.get_Length = function () {
	return JSIL.Cast(this.BaseStream.length, System.Int32);
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.get_Position = function () {
	return JSIL.Cast(this.BaseStream.Position, System.Int32);
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.set_Position = function (value) {
	this.BaseStream.Position = value;
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Clear = function () {
	var memoryStream = JSIL.Cast(this.BaseStream, System.IO.MemoryStream);
	memoryStream.SetLength(0);
	memoryStream.Position = 0;
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.get_ByteArray = function () {
	return JSIL.Cast(this.BaseStream, System.IO.MemoryStream).GetBuffer();
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Write$0 = function (value) {
	this.Write(value.X);
	this.Write(value.Y);
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Write$1 = function (value) {
	this.Write(value.X);
	this.Write(value.Y);
	this.Write(value.Z);
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Write$2 = function (value) {
	this.Write(value.X);
	this.Write(value.Y);
	this.Write(value.Z);
	this.Write(value.W);
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Write$3 = function (value) {
	this.Write(value.M11);
	this.Write(value.M12);
	this.Write(value.M13);
	this.Write(value.M14);
	this.Write(value.M21);
	this.Write(value.M22);
	this.Write(value.M23);
	this.Write(value.M24);
	this.Write(value.M31);
	this.Write(value.M32);
	this.Write(value.M33);
	this.Write(value.M34);
	this.Write(value.M41);
	this.Write(value.M42);
	this.Write(value.M43);
	this.Write(value.M44);
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Write$4 = function (value) {
	this.Write(value.X);
	this.Write(value.Y);
	this.Write(value.Z);
	this.Write(value.W);
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Write$5 = function (value) {
	this.Write(value.get_PackedValue());
};

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Write$6 = JSIL.UntranslatableFunction("Write");

Microsoft.Xna.Framework.Net.PacketWriter.prototype.Write$7 = JSIL.UntranslatableFunction("Write");

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.PacketWriter.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.PacketWriter.prototype, "Write", [
		["Write$0", [Microsoft.Xna.Framework.Vector2]], 
		["Write$1", [Microsoft.Xna.Framework.Vector3]], 
		["Write$2", [Microsoft.Xna.Framework.Vector4]], 
		["Write$3", [Microsoft.Xna.Framework.Matrix]], 
		["Write$4", [Microsoft.Xna.Framework.Quaternion]], 
		["Write$5", [Microsoft.Xna.Framework.Graphics.Color]], 
		["Write$6", [System.Single]], 
		["Write$7", [System.Double]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Net.PacketWriter.prototype, "Length", {
		get: Microsoft.Xna.Framework.Net.PacketWriter.prototype.get_Length
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.PacketWriter.prototype, "Position", {
		get: Microsoft.Xna.Framework.Net.PacketWriter.prototype.get_Position, 
		set: Microsoft.Xna.Framework.Net.PacketWriter.prototype.set_Position
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.PacketWriter.prototype, "ByteArray", {
		get: Microsoft.Xna.Framework.Net.PacketWriter.prototype.get_ByteArray
	});

Object.seal(Microsoft.Xna.Framework.Net.PacketWriter.prototype);
Object.seal(Microsoft.Xna.Framework.Net.PacketWriter);
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.Index = 0;
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.SignInState = 0;
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.Gamertag = null;
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.IsLive = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.IsGuest = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.Privileges = 0;
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.GameDefaults = null;
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.PartySize = 0;
Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.get_IsSignedIn = function () {
	return (this.SignInState !== Microsoft.Xna.Framework.GamerServices.PlayerSignInState.NotSignedIn);
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.PlayerState.prototype, "IsSignedIn", {
		get: Microsoft.Xna.Framework.GamerServices.PlayerState.prototype.get_IsSignedIn
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.PlayerState.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.PlayerState);
Microsoft.Xna.Framework.Net.QualityOfService.prototype.isAvailable = new System.Boolean();
Microsoft.Xna.Framework.Net.QualityOfService.prototype.bytesPerSecondUpstream = 0;
Microsoft.Xna.Framework.Net.QualityOfService.prototype.bytesPerSecondDownstream = 0;
Microsoft.Xna.Framework.Net.QualityOfService.prototype.__StructFields__ = {
	averageRoundtripTime: System.TimeSpan, 
	minimumRoundtripTime: System.TimeSpan
};
Microsoft.Xna.Framework.Net.QualityOfService.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Net.QualityOfService.prototype._ctor$1 = function (bytesPerSecondUpstream, bytesPerSecondDownstream, averageRoundtripTime, minimumRoundtripTime) {
	System.Object.prototype._ctor.call(this);
	this.bytesPerSecondUpstream = bytesPerSecondUpstream;
	this.bytesPerSecondDownstream = bytesPerSecondDownstream;
	this.averageRoundtripTime = averageRoundtripTime;
	this.minimumRoundtripTime = minimumRoundtripTime;
	this.isAvailable = true;
};

Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_IsAvailable = function () {
	return this.isAvailable;
};

Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_BytesPerSecondUpstream = function () {
	return this.bytesPerSecondUpstream;
};

Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_BytesPerSecondDownstream = function () {
	return this.bytesPerSecondDownstream;
};

Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_AverageRoundtripTime = function () {
	return this.averageRoundtripTime;
};

Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_MinimumRoundtripTime = function () {
	return this.minimumRoundtripTime;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.QualityOfService.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int32, System.Int32, System.TimeSpan, System.TimeSpan]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Net.QualityOfService.prototype, "IsAvailable", {
		get: Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_IsAvailable
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.QualityOfService.prototype, "BytesPerSecondUpstream", {
		get: Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_BytesPerSecondUpstream
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.QualityOfService.prototype, "BytesPerSecondDownstream", {
		get: Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_BytesPerSecondDownstream
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.QualityOfService.prototype, "AverageRoundtripTime", {
		get: Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_AverageRoundtripTime
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.QualityOfService.prototype, "MinimumRoundtripTime", {
		get: Microsoft.Xna.Framework.Net.QualityOfService.prototype.get_MinimumRoundtripTime
	});

Object.seal(Microsoft.Xna.Framework.Net.QualityOfService.prototype);
Object.seal(Microsoft.Xna.Framework.Net.QualityOfService);
Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.size = 0;
Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.fileHandle = 0;
Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.mappedPointer = 0;
Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.get_Size = function () {
	return this.size;
};

Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.get_FileHandle = function () {
	return this.fileHandle;
};

Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.get_MappedPointer = function () {
	return this.mappedPointer;
};

Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype._ctor = function (size) {
	System.Object.prototype._ctor.call(this);
	this.size = size;
	this.fileHandle = JSIL.IgnoredMember("CreateFileMapping(hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName)");

	if (System.IntPtr.op_Equality(this.fileHandle, System.IntPtr.Zero)) {
		throw new System.OutOfMemoryException();
	}
	this.mappedPointer = Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.MapViewOfFile(
		this.fileHandle, 
		2, 
		0, 
		0, 
		size
	);

	if (System.IntPtr.op_Equality(this.mappedPointer, System.IntPtr.Zero)) {
		throw new System.OutOfMemoryException();
	}
};

Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.Dispose$1 = function (disposing) {

	if (System.IntPtr.op_Inequality(this.mappedPointer, System.IntPtr.Zero)) {
		Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.UnmapViewOfFile(this.mappedPointer);
		this.mappedPointer = System.IntPtr.Zero;
	}

	if (System.IntPtr.op_Inequality(this.fileHandle, System.IntPtr.Zero)) {
		Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.CloseHandle(this.fileHandle);
		this.fileHandle = System.IntPtr.Zero;
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype, "Size", {
		get: Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.get_Size
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype, "FileHandle", {
		get: Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.get_FileHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype, "MappedPointer", {
		get: Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.get_MappedPointer
	});
Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion);
Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection.prototype._ctor = function () {
	Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer).prototype._ctor.call(this);
};

Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection.prototype.get_Item = function (index) {
	var count = this.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		var signedInGamer = System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer).prototype.get_Item.call(this, i);

		if (signedInGamer.PlayerIndex === index) {
			return signedInGamer;
		}
		++i;
	}
	return null;
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection.prototype.get_Item
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.SignedInGamerCollection);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods, "INFINITE", { value: -1 });
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods, "STATUS_DLL_NOT_FOUND", { value: 3221225781 });
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods, "PAGE_READONLY", { value: 2 });
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods, "PAGE_READWRITE", { value: 4 });
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods, "PAGE_WRITECOPY", { value: 8 });
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods, "FILE_MAP_WRITE", { value: 2 });
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods, "FILE_MAP_READ", { value: 4 });
Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.INVALID_HANDLE_VALUE = 0;
Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods._cctor = function () {
	Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.INVALID_HANDLE_VALUE = new System.IntPtr(-1);
};

Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods._cctor();

Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SecurityAttributes.prototype.length = 0;
Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SecurityAttributes.prototype.SecurityDescriptor = 0;
Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SecurityAttributes.prototype.InheritHandle = 0;
Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SecurityAttributes.prototype._ctor = function (inheritHandle) {
	this.length = JSIL.UntranslatableInstruction("sizeof:int32(valuetype Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods/SecurityAttributes)");
	this.SecurityDescriptor = System.IntPtr.Zero;
	this.InheritHandle = inheritHandle ? 1 : 0;
};


Object.seal(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SecurityAttributes.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods.SecurityAttributes);
Object.seal(Microsoft.Xna.Framework.GamerServices.UnsafeNativeMethods);
Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.TotalSize = 0;
Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.CurrentSize = 0;
Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.canGrow = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.Data = null;
Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype._ctor = function (initialSize, canGrow) {
	System.Object.prototype._ctor.call(this);
	this.TotalSize = initialSize;
	this.canGrow = canGrow;
	this.AllocateBuffer(initialSize);
	this.Reset();
};

Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.Reset = function () {
	this.CurrentSize = 4;
};

Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.Grow = function (minimumSize) {

	if (minimumSize <= this.TotalSize) {
		throw new System.ArgumentOutOfRangeException("minimumSize");
	}

	if (!this.canGrow) {
		throw new System.InvalidOperationException();
	}
	var num = System.Math.Max(minimumSize, Math.floor((this.TotalSize * 3) / 2));
	this.AllocateBuffer(num);
	this.TotalSize = num;
};

Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.get_CanMakeKernelCalls = function () {
	return (System.IntPtr.op_Inequality(this.Data.FileHandle, System.IntPtr.Zero) && System.IntPtr.op_Inequality(this.Data.MappedPointer, System.IntPtr.Zero));
};

Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.Dispose = function () {
	this.Data.Dispose();
};

Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.AllocateBuffer = function (size) {
	var array = null;

	if (this.CurrentSize > 0) {
		array = JSIL.Array.New(System.Byte, this.CurrentSize);
		System.Runtime.InteropServices.Marshal.Copy(this.Data.MappedPointer, array, 0, this.CurrentSize);
	}

	if (this.Data === null) {
		this.Data.Dispose();
	}
	this.Data = new Microsoft.Xna.Framework.GamerServices.SharedMemoryRegion(size);

	if (this.CurrentSize > 0) {
		System.Runtime.InteropServices.Marshal.Copy(array, 0, this.Data.MappedPointer, this.CurrentSize);
	}
};

Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.StealSpaceFromEndOfBuffer = function (size) {

	if (this.canGrow) {
		throw new System.InvalidOperationException();
	}

	if (size >= this.TotalSize) {
		throw new System.ArgumentOutOfRangeException("size");
	}
	this.TotalSize -= size;
	return JSIL.IgnoredMember(".ctor()");
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype, "CanMakeKernelCalls", {
		get: Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.get_CanMakeKernelCalls
	});
Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.GamerServices.UserPacketBuffer.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.UserPacketBuffer);
Microsoft.Xna.Framework.PowerStatus.PowerStateChanged = null;
Microsoft.Xna.Framework.PowerStatus.status = new Microsoft.Xna.Framework.PowerStatus.Status();
Microsoft.Xna.Framework.PowerStatus.get_BatteryChargeStatus = function () {
	Microsoft.Xna.Framework.PowerStatus.GetStatus();
	return Microsoft.Xna.Framework.PowerStatus.status.BatteryChargeStatus;
};

Microsoft.Xna.Framework.PowerStatus.get_BatteryFullLifetime = function () {
	Microsoft.Xna.Framework.PowerStatus.GetStatus();
	return Microsoft.Xna.Framework.PowerStatus.status.BatteryFullLifetime;
};

Microsoft.Xna.Framework.PowerStatus.get_BatteryLifePercent = function () {
	Microsoft.Xna.Framework.PowerStatus.GetStatus();
	return Microsoft.Xna.Framework.PowerStatus.status.BatteryLifePercent;
};

Microsoft.Xna.Framework.PowerStatus.get_BatteryLifeRemaining = function () {
	Microsoft.Xna.Framework.PowerStatus.GetStatus();
	return Microsoft.Xna.Framework.PowerStatus.status.BatteryLifeRemaining;
};

Microsoft.Xna.Framework.PowerStatus.get_PowerLineStatus = function () {
	Microsoft.Xna.Framework.PowerStatus.GetStatus();
	return Microsoft.Xna.Framework.PowerStatus.status.PowerLineStatus;
};

Microsoft.Xna.Framework.PowerStatus.add_PowerStateChanged = function (value) {
	Microsoft.Xna.Framework.PowerStatus.PowerStateChanged = System.Delegate.Combine(Microsoft.Xna.Framework.PowerStatus.PowerStateChanged, value);
};

Microsoft.Xna.Framework.PowerStatus.remove_PowerStateChanged = function (value) {
	Microsoft.Xna.Framework.PowerStatus.PowerStateChanged = System.Delegate.Remove(Microsoft.Xna.Framework.PowerStatus.PowerStateChanged, value);
};

Microsoft.Xna.Framework.PowerStatus.GetStatus = function () {
	Microsoft.Xna.Framework.SystemNativeMethods.GetSystemPowerStatus(/* ref */ new JSIL.MemberReference(Microsoft.Xna.Framework.PowerStatus, "status"));
};

Microsoft.Xna.Framework.PowerStatus._cctor = function () {
	Microsoft.Xna.Framework.PowerStatus.status.BatteryChargeStatus = Microsoft.Xna.Framework.BatteryChargeStatus.High | Microsoft.Xna.Framework.BatteryChargeStatus.Low | Microsoft.Xna.Framework.BatteryChargeStatus.Critical | Microsoft.Xna.Framework.BatteryChargeStatus.Charging | Microsoft.Xna.Framework.BatteryChargeStatus.NoSystemBattery | Microsoft.Xna.Framework.BatteryChargeStatus.Unknown;
	Microsoft.Xna.Framework.PowerStatus.status.BatteryFullLifetime = new (System.Nullable$b1.Of(System.TimeSpan)) ();
	Microsoft.Xna.Framework.PowerStatus.status.BatteryLifePercent = new (System.Nullable$b1.Of(System.Single)) ();
	Microsoft.Xna.Framework.PowerStatus.status.BatteryLifeRemaining = new (System.Nullable$b1.Of(System.TimeSpan)) ();
	Microsoft.Xna.Framework.PowerStatus.status.PowerLineStatus = Microsoft.Xna.Framework.PowerLineStatus.Unknown;
	Microsoft.Xna.Framework.SystemNativeMethods.SetupPowerEvents();
};

Microsoft.Xna.Framework.PowerStatus.OnPowerStateChanged = function (args) {
	var powerStateChanged = Microsoft.Xna.Framework.PowerStatus.PowerStateChanged;

	if (powerStateChanged === null) {
		powerStateChanged(null, args);
	}
};

Object.defineProperty(Microsoft.Xna.Framework.PowerStatus, "BatteryChargeStatus", {
		get: Microsoft.Xna.Framework.PowerStatus.get_BatteryChargeStatus
	});
Object.defineProperty(Microsoft.Xna.Framework.PowerStatus, "BatteryFullLifetime", {
		get: Microsoft.Xna.Framework.PowerStatus.get_BatteryFullLifetime
	});
Object.defineProperty(Microsoft.Xna.Framework.PowerStatus, "BatteryLifePercent", {
		get: Microsoft.Xna.Framework.PowerStatus.get_BatteryLifePercent
	});
Object.defineProperty(Microsoft.Xna.Framework.PowerStatus, "BatteryLifeRemaining", {
		get: Microsoft.Xna.Framework.PowerStatus.get_BatteryLifeRemaining
	});
Object.defineProperty(Microsoft.Xna.Framework.PowerStatus, "PowerLineStatus", {
		get: Microsoft.Xna.Framework.PowerStatus.get_PowerLineStatus
	});
Microsoft.Xna.Framework.PowerStatus._cctor();

Microsoft.Xna.Framework.PowerStatus.Status.prototype.BatteryChargeStatus = 0;
Microsoft.Xna.Framework.PowerStatus.Status.prototype.PowerLineStatus = 0;
Microsoft.Xna.Framework.PowerStatus.Status.prototype.__StructFields__ = {
	BatteryFullLifetime: System.Nullable$b1.Of(System.TimeSpan), 
	BatteryLifePercent: System.Nullable$b1.Of(System.Single), 
	BatteryLifeRemaining: System.Nullable$b1.Of(System.TimeSpan)
};

Object.seal(Microsoft.Xna.Framework.PowerStatus.Status.prototype);
Object.seal(Microsoft.Xna.Framework.PowerStatus.Status);
Object.seal(Microsoft.Xna.Framework.PowerStatus);
Microsoft.Xna.Framework.SystemNativeMethods.GetSystemPowerStatus = function (/* ref */ status) {
	var windowsSystemPowerStatus = new Microsoft.Xna.Framework.SystemNativeMethods.WindowsSystemPowerStatus();

	if (Microsoft.Xna.Framework.SystemNativeMethods.GetSystemPowerStatusWinAPI(/* ref */ windowsSystemPowerStatus)) {
		status.BatteryChargeStatus = windowsSystemPowerStatus.BatteryFlag;

		if (windowsSystemPowerStatus.BatteryFullLifeTime !== -1) {
			status.BatteryFullLifetime = new (System.Nullable$b1.Of(System.TimeSpan)) (System.TimeSpan.FromSeconds(windowsSystemPowerStatus.BatteryFullLifeTime));
		} else {
			status.BatteryFullLifetime = new (System.Nullable$b1.Of(System.TimeSpan)) ();
		}

		if (windowsSystemPowerStatus.BatteryLifeTime !== -1) {
			status.BatteryLifeRemaining = new (System.Nullable$b1.Of(System.TimeSpan)) (System.TimeSpan.FromSeconds(windowsSystemPowerStatus.BatteryLifeTime));
		} else {
			status.BatteryLifeRemaining = new (System.Nullable$b1.Of(System.TimeSpan)) ();
		}

		if (windowsSystemPowerStatus.BatteryLifePercent <= 100) {
			status.BatteryLifePercent = new (System.Nullable$b1.Of(System.Single)) (windowsSystemPowerStatus.BatteryLifePercent);
		} else {
			status.BatteryLifePercent = new (System.Nullable$b1.Of(System.Single)) ();
		}
		status.PowerLineStatus = windowsSystemPowerStatus.ACLineStatus;
	}
};

Microsoft.Xna.Framework.SystemNativeMethods.SetupPowerEvents = function () {
	Microsoft.Win32.SystemEvents.add_PowerModeChanged(function (sender, e) {
			Microsoft.Xna.Framework.FrameworkDispatcher.AddNewPendingCall(Microsoft.Xna.Framework.GamerServices.ManagedCallType.Power_Changed, 0);
		});
};

Microsoft.Xna.Framework.SystemNativeMethods.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Microsoft.Xna.Framework.SystemNativeMethods.WindowsSystemPowerStatus.prototype.ACLineStatus = 0;
Microsoft.Xna.Framework.SystemNativeMethods.WindowsSystemPowerStatus.prototype.BatteryFlag = 0;
Microsoft.Xna.Framework.SystemNativeMethods.WindowsSystemPowerStatus.prototype.BatteryLifePercent = 0;
Microsoft.Xna.Framework.SystemNativeMethods.WindowsSystemPowerStatus.prototype.BatteryLifeTime = 0;
Microsoft.Xna.Framework.SystemNativeMethods.WindowsSystemPowerStatus.prototype.BatteryFullLifeTime = 0;

Object.seal(Microsoft.Xna.Framework.SystemNativeMethods.WindowsSystemPowerStatus.prototype);
Object.seal(Microsoft.Xna.Framework.SystemNativeMethods.WindowsSystemPowerStatus);
Object.seal(Microsoft.Xna.Framework.SystemNativeMethods.prototype);
Object.seal(Microsoft.Xna.Framework.SystemNativeMethods);
Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.asyncState = null;
Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.asyncWaitHandle = null;
Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.isCompleted = new System.Boolean();
Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.kernelHandle = 0;
Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.endHasBeenCalled = new System.Boolean();
Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.isReusable = new System.Boolean();
Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.IAsyncResult_get_AsyncState = function () {
	return this.asyncState;
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.IAsyncResult_get_AsyncWaitHandle = function () {
	return this.asyncWaitHandle;
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.IAsyncResult_get_CompletedSynchronously = function () {
	return false;
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.IAsyncResult_get_IsCompleted = function () {
	return this.isCompleted;
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.get_AsyncWaitHandle = function () {
	return this.asyncWaitHandle;
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.set_IsCompleted = function (value) {
	this.isCompleted = value;
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.get_KernelHandle = function () {
	return this.kernelHandle;
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.get_IsReusable = function () {
	return this.isReusable;
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype._ctor = function (asyncState, kernelHandle, isReusable) {
	System.Object.prototype._ctor.call(this);
	this.asyncState = asyncState;
	this.kernelHandle = kernelHandle;
	this.isReusable = isReusable;

	if (isReusable) {
		this.asyncWaitHandle = new System.Threading.AutoResetEvent(false);
		return ;
	}
	this.asyncWaitHandle = new System.Threading.ManualResetEvent(false);
};

Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.Finalize = JSIL.UntranslatableFunction("Finalize");

Microsoft.Xna.Framework.XOverlappedAsyncResult.PrepareForEndFunction = function (result) {

	if (result !== null) {
		throw new System.ArgumentNullException("result");
	}
	var xOverlappedAsyncResult = JSIL.TryCast(result, Microsoft.Xna.Framework.XOverlappedAsyncResult);

	if (xOverlappedAsyncResult !== null) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.IAsyncNotFromBegin);
	}

	if (xOverlappedAsyncResult.endHasBeenCalled) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CannotEndTwice);
	}
	xOverlappedAsyncResult.endHasBeenCalled = true;
	xOverlappedAsyncResult.AsyncWaitHandle.WaitOne();
	System.GC.SuppressFinalize(xOverlappedAsyncResult);
	return xOverlappedAsyncResult;
};

Object.defineProperty(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype, "IAsyncResult_AsyncState", {
		get: Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.IAsyncResult_get_AsyncState
	});
Object.defineProperty(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype, "IAsyncResult_AsyncWaitHandle", {
		get: Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.IAsyncResult_get_AsyncWaitHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype, "IAsyncResult_CompletedSynchronously", {
		get: Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.IAsyncResult_get_CompletedSynchronously
	});
Object.defineProperty(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype, "IAsyncResult_IsCompleted", {
		get: Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.IAsyncResult_get_IsCompleted
	});
Object.defineProperty(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype, "AsyncWaitHandle", {
		get: Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.get_AsyncWaitHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype, "IsCompleted", {
		set: Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.set_IsCompleted
	});
Object.defineProperty(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype, "KernelHandle", {
		get: Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.get_KernelHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype, "IsReusable", {
		get: Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.get_IsReusable
	});
Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype.__ImplementInterface__(System.IAsyncResult);

Object.seal(Microsoft.Xna.Framework.XOverlappedAsyncResult.prototype);
Object.seal(Microsoft.Xna.Framework.XOverlappedAsyncResult);
Object.defineProperty(Microsoft.Xna.Framework.Media.UnsafeNativeMethods, "visualizationBufferSize", { value: 256 });
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetSongs = function (/* ref */ handle) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1();
	$l$gc__DisplayClass.local = handle.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetSongs(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	handle.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetArtists = function (/* ref */ handle) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4();
	$l$gc__DisplayClass.local = handle.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetArtists(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	handle.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetAlbums = function (/* ref */ handle) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7();
	$l$gc__DisplayClass.local = handle.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetAlbums(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	handle.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetPlaylists = function (/* ref */ handle) {
	var $l$gc__DisplayClassa = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa();
	$l$gc__DisplayClassa.local = handle.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetPlaylists(/* ref */ new JSIL.MemberReference($l$gc__DisplayClassa, "local"));
		});
	handle.value = $l$gc__DisplayClassa.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaLibrary_GetGenres = function (/* ref */ handle) {
	var $l$gc__DisplayClassd = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassd();
	$l$gc__DisplayClassd.local = handle.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaLibrary_GetGenres(/* ref */ new JSIL.MemberReference($l$gc__DisplayClassd, "local"));
		});
	handle.value = $l$gc__DisplayClassd.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_GetCount = function (handleSongList, /* ref */ count) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass10();
	$l$gc__DisplayClass.handleSongList = handleSongList;
	$l$gc__DisplayClass.local = count.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaList_GetCount($l$gc__DisplayClass.handleSongList, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	count.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_GetItemAtIndex = function (handleSongList, index, /* ref */ itemId) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass13();
	$l$gc__DisplayClass.handleSongList = handleSongList;
	$l$gc__DisplayClass.index = index;
	$l$gc__DisplayClass.localItemId = itemId.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaList_GetItemAtIndex($l$gc__DisplayClass.handleSongList, $l$gc__DisplayClass.index, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "localItemId"));
		});
	itemId.value = $l$gc__DisplayClass.localItemId;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaList_Release = function (handleSongList) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass16().handleSongList = handleSongList;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaList_Release(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass16().handleSongList);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_Release = function (handleItem) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass19().handleItem = handleItem;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaItem_Release(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass19().handleItem);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_GetName = function (itemId, sbName, charCount) {
	var $l$gc__DisplayClass1c = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1c();
	$l$gc__DisplayClass1c.itemId = itemId;
	$l$gc__DisplayClass1c.sbName = sbName;
	$l$gc__DisplayClass1c.charCount = charCount;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaItem_GetName($l$gc__DisplayClass1c.itemId, $l$gc__DisplayClass1c.sbName, $l$gc__DisplayClass1c.charCount);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaItem_IsEqual = function (first, second, /* ref */ equal) {
	var $l$gc__DisplayClass1f = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1f();
	$l$gc__DisplayClass1f.first = first;
	$l$gc__DisplayClass1f.second = second;
	$l$gc__DisplayClass1f.localEqual = equal.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaItem_IsEqual($l$gc__DisplayClass1f.first, $l$gc__DisplayClass1f.second, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass1f, "localEqual"));
		});
	equal.value = $l$gc__DisplayClass1f.localEqual;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetArtist = function (song, /* ref */ artist) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass22();
	$l$gc__DisplayClass.song = song;
	$l$gc__DisplayClass.local = artist.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetArtist($l$gc__DisplayClass.song, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	artist.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetAlbum = function (song, /* ref */ album) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass25();
	$l$gc__DisplayClass.song = song;
	$l$gc__DisplayClass.local = album.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetAlbum($l$gc__DisplayClass.song, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	album.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetGenre = function (song, /* ref */ genre) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass28();
	$l$gc__DisplayClass.song = song;
	$l$gc__DisplayClass.local = genre.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetGenre($l$gc__DisplayClass.song, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	genre.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetDuration = function (song, /* ref */ duration) {
	var $l$gc__DisplayClass2b = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2b();
	$l$gc__DisplayClass2b.song = song;
	$l$gc__DisplayClass2b.local = duration.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetDuration($l$gc__DisplayClass2b.song, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass2b, "local"));
		});
	duration.value = $l$gc__DisplayClass2b.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetTrackNumber = function (song, /* ref */ trackNumber) {
	var $l$gc__DisplayClass2e = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2e();
	$l$gc__DisplayClass2e.song = song;
	$l$gc__DisplayClass2e.local = trackNumber.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetTrackNumber($l$gc__DisplayClass2e.song, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass2e, "local"));
		});
	trackNumber.value = $l$gc__DisplayClass2e.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetRating = function (song, /* ref */ rating) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass31();
	$l$gc__DisplayClass.song = song;
	$l$gc__DisplayClass.local = rating.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetRating($l$gc__DisplayClass.song, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	rating.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_GetPlayCount = function (song, /* ref */ playCount) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass34();
	$l$gc__DisplayClass.song = song;
	$l$gc__DisplayClass.local = playCount.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_GetPlayCount($l$gc__DisplayClass.song, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	playCount.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_IsRestricted = function (song, /* ref */ restricted) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass37();
	$l$gc__DisplayClass.song = song;
	$l$gc__DisplayClass.local = restricted.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_IsRestricted($l$gc__DisplayClass.song, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	restricted.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaSong_CreateHandle = function (name, filename, duration, /* ref */ handle) {
	var $l$gc__DisplayClass3a = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3a();
	$l$gc__DisplayClass3a.name = name;
	$l$gc__DisplayClass3a.filename = filename;
	$l$gc__DisplayClass3a.localHandle = handle.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaSong_CreateHandle($l$gc__DisplayClass3a.name, $l$gc__DisplayClass3a.filename, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass3a, "localHandle"));
		});
	handle.value = $l$gc__DisplayClass3a.localHandle;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetArtist = function (album, /* ref */ artist) {
	var $l$gc__DisplayClass3d = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3d();
	$l$gc__DisplayClass3d.album = album;
	$l$gc__DisplayClass3d.local = artist.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaAlbum_GetArtist($l$gc__DisplayClass3d.album, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass3d, "local"));
		});
	artist.value = $l$gc__DisplayClass3d.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetSongs = function (album, /* ref */ songs) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass40();
	$l$gc__DisplayClass.album = album;
	$l$gc__DisplayClass.local = songs.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaAlbum_GetSongs($l$gc__DisplayClass.album, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	songs.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetGenre = function (album, /* ref */ genre) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass43();
	$l$gc__DisplayClass.album = album;
	$l$gc__DisplayClass.local = genre.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaAlbum_GetGenre($l$gc__DisplayClass.album, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	genre.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetDuration = function (album, /* ref */ duration) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass46();
	$l$gc__DisplayClass.album = album;
	$l$gc__DisplayClass.local = duration.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaAlbum_GetDuration($l$gc__DisplayClass.album, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	duration.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_HasArt = function (album, /* ref */ hasArt) {
	hasArt.value = false;
	return Microsoft.Xna.Framework.ErrorCodes.Success;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaAlbum_GetArt = function (album, /* ref */ texture, thumbnail) {
	return -2147467263;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaArtist_GetSongs = function (handle, /* ref */ songs) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass49();
	$l$gc__DisplayClass.handle = handle;
	$l$gc__DisplayClass.local = songs.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaArtist_GetSongs($l$gc__DisplayClass.handle, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	songs.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaArtist_GetAlbums = function (handle, /* ref */ albums) {
	var $l$gc__DisplayClass4c = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4c();
	$l$gc__DisplayClass4c.handle = handle;
	$l$gc__DisplayClass4c.local = albums.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaArtist_GetAlbums($l$gc__DisplayClass4c.handle, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass4c, "local"));
		});
	albums.value = $l$gc__DisplayClass4c.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaGenre_GetSongs = function (handle, /* ref */ songs) {
	var $l$gc__DisplayClass4f = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4f();
	$l$gc__DisplayClass4f.handle = handle;
	$l$gc__DisplayClass4f.local = songs.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaGenre_GetSongs($l$gc__DisplayClass4f.handle, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass4f, "local"));
		});
	songs.value = $l$gc__DisplayClass4f.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaGenre_GetAlbums = function (handle, /* ref */ albums) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass52();
	$l$gc__DisplayClass.handle = handle;
	$l$gc__DisplayClass.local = albums.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaGenre_GetAlbums($l$gc__DisplayClass.handle, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	albums.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaPlaylist_GetSongs = function (handle, /* ref */ songs) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass55();
	$l$gc__DisplayClass.handle = handle;
	$l$gc__DisplayClass.local = songs.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaPlaylist_GetSongs($l$gc__DisplayClass.handle, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	songs.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaPlaylist_GetDuration = function (handle, /* ref */ duration) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass58();
	$l$gc__DisplayClass.handle = handle;
	$l$gc__DisplayClass.local = duration.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaPlaylist_GetDuration($l$gc__DisplayClass.handle, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	duration.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_PlaySong = function (handle) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5b().handle = handle;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_PlaySong(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5b().handle);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_PlaySongList = function (songList, index) {
	var $l$gc__DisplayClass5e = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5e();
	$l$gc__DisplayClass5e.songList = songList;
	$l$gc__DisplayClass5e.index = index;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_PlaySongList($l$gc__DisplayClass5e.songList, $l$gc__DisplayClass5e.index);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_MoveTo = function (index) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass61().index = index;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_MoveTo(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass61().index);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_MoveNext = function () {
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_MoveNext();
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_MovePrev = function () {
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_MovePrev();
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetSongCount = function (/* ref */ songCount) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass68();
	$l$gc__DisplayClass.local = songCount.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetSongCount(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	songCount.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetSongAtIndex = function (index, /* ref */ song) {
	var $l$gc__DisplayClass6b = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6b();
	$l$gc__DisplayClass6b.index = index;
	$l$gc__DisplayClass6b.local = song.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetSongAtIndex($l$gc__DisplayClass6b.index, /* ref */ new JSIL.MemberReference($l$gc__DisplayClass6b, "local"));
		});
	song.value = $l$gc__DisplayClass6b.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetPlayPosition = function (/* ref */ position) {
	var $l$gc__DisplayClass6e = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6e();
	$l$gc__DisplayClass6e.local = position.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetPlayPosition(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass6e, "local"));
		});
	position.value = $l$gc__DisplayClass6e.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetShuffle = function (/* ref */ shuffle) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass71();
	$l$gc__DisplayClass.local = shuffle.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetShuffle(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	shuffle.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_SetShuffle = function (shuffle) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass74().shuffle = shuffle;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_SetShuffle(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass74().shuffle);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetRepeat = function (/* ref */ repeat) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass77();
	$l$gc__DisplayClass.local = repeat.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetRepeat(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	repeat.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_SetRepeat = function (repeat) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7a().repeat = repeat;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_SetRepeat(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7a().repeat);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_Pause = function () {
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_Pause();
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_Resume = function () {
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_Resume();
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_Stop = function () {
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_Stop();
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetPlayState = function (/* ref */ state) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass83();
	$l$gc__DisplayClass.localState = state.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetPlayState(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "localState"));
		});
	state.value = $l$gc__DisplayClass.localState;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetActiveSongIndex = function (/* ref */ songIndex) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass86();
	$l$gc__DisplayClass.local = songIndex.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetActiveSongIndex(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "local"));
		});
	songIndex.value = $l$gc__DisplayClass.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetVolume = function (/* ref */ volume) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass89();
	$l$gc__DisplayClass.localVolume = volume.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetVolume(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "localVolume"));
		});
	volume.value = $l$gc__DisplayClass.localVolume;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_SetVolume = function (volume) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8c().volume = volume;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_SetVolume(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8c().volume);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_IsMuted = function (/* ref */ muted) {
	var $l$gc__DisplayClass8f = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8f();
	$l$gc__DisplayClass8f.local = muted.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_IsMuted(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass8f, "local"));
		});
	muted.value = $l$gc__DisplayClass8f.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_SetMute = function (mute) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass92().mute = mute;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_SetMute(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass92().mute);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_EnableVisualization = function (enable) {
	return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_EnableVisualization(enable);
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_IsVisualizationEnabled = function (/* ref */ enabled) {
	return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_IsVisualizationEnabled(/* ref */ enabled);
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.MediaQueue_GetVisualizationData = function (frequencies, freqLen, samples, sampleLen) {
	return Microsoft.Xna.Framework.Media.WmpInterface.MediaQueue_GetVisualizationData(frequencies, freqLen, samples, sampleLen);
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Create = function (/* ref */ decoderHandle) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass95();
	$l$gc__DisplayClass.localHandle = -1;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Create(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "localHandle"));
		});
	decoderHandle.value = $l$gc__DisplayClass.localHandle;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Release = function (decoderHandle) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass98().decoderHandle = decoderHandle;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Release(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass98().decoderHandle);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Play = function (decoderHandle, filename, filenameLength, width, height, loop) {
	var $l$gc__DisplayClass9b = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b();
	$l$gc__DisplayClass9b.decoderHandle = decoderHandle;
	$l$gc__DisplayClass9b.filename = filename;
	$l$gc__DisplayClass9b.filenameLength = filenameLength;
	$l$gc__DisplayClass9b.width = width;
	$l$gc__DisplayClass9b.height = height;
	$l$gc__DisplayClass9b.loop = loop;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Play(
				$l$gc__DisplayClass9b.decoderHandle, 
				$l$gc__DisplayClass9b.filename, 
				$l$gc__DisplayClass9b.filenameLength, 
				$l$gc__DisplayClass9b.width, 
				$l$gc__DisplayClass9b.height, 
				$l$gc__DisplayClass9b.loop
			);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Start = function (handle) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9e().handle = handle;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Start(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9e().handle);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Resume = function (handle) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa1().handle = handle;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Resume(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa1().handle);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Pause = function (handle) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa4().handle = handle;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Pause(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa4().handle);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_Stop = function (handle) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa7().handle = handle;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_Stop(new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa7().handle);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_GetState = function (decoderHandle, /* ref */ state) {
	var $l$gc__DisplayClassaa = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassaa();
	$l$gc__DisplayClassaa.decoderHandle = decoderHandle;
	$l$gc__DisplayClassaa.localState = state.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_GetState($l$gc__DisplayClassaa.decoderHandle, /* ref */ new JSIL.MemberReference($l$gc__DisplayClassaa, "localState"));
		});
	state.value = $l$gc__DisplayClassaa.localState;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_SetMute = function (handle, mute) {
	var $l$gc__DisplayClassad = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassad();
	$l$gc__DisplayClassad.handle = handle;
	$l$gc__DisplayClassad.mute = mute;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_SetMute($l$gc__DisplayClassad.handle, $l$gc__DisplayClassad.mute);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_SetVolume = function (handle, volume) {
	var $l$gc__DisplayClassb = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb0();
	$l$gc__DisplayClassb.handle = handle;
	$l$gc__DisplayClassb.volume = volume;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_SetVolume($l$gc__DisplayClassb.handle, $l$gc__DisplayClassb.volume);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_GetTexture = function (handle, texture1, texture2, /* ref */ currentTexture) {
	new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb3().handle = handle;
	JSIL.UntranslatableInstruction("stfld:IDirect3DTexture9*(UnsafeNativeMethods/<>c__DisplayClassb3::pTexture1, ldloc:UnsafeNativeMethods/<>c__DisplayClassb3(<>c__DisplayClassb), call:void*[exp:IDirect3DTexture9*](IntPtr::op_Explicit, ldloc:IntPtr(texture1)))");
	JSIL.UntranslatableInstruction("stfld:IDirect3DTexture9*(UnsafeNativeMethods/<>c__DisplayClassb3::pTexture2, ldloc:UnsafeNativeMethods/<>c__DisplayClassb3(<>c__DisplayClassb), call:void*[exp:IDirect3DTexture9*](IntPtr::op_Explicit, ldloc:IntPtr(texture2)))");
	JSIL.UntranslatableInstruction("stfld:IDirect3DTexture9**(UnsafeNativeMethods/<>c__DisplayClassb3::ppCurrentTexture, ldloc:UnsafeNativeMethods/<>c__DisplayClassb3(<>c__DisplayClassb), call:void*[exp:IDirect3DTexture9**](IntPtr::op_Explicit, ldobj:IntPtr(valuetype [mscorlib]System.IntPtr, ldloc:IntPtr&(currentTexture))))");
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return JSIL.IgnoredMember("VideoDecoder_GetTexture(hDecoder, pTexture1, pTexture2, ppCurrentTexture)");
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_GetPlayPosition = function (handle, /* ref */ position) {
	var $l$gc__DisplayClassb = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb6();
	$l$gc__DisplayClassb.handle = handle;
	$l$gc__DisplayClassb.local = position.value;
	var result = Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_GetPlayPosition($l$gc__DisplayClassb.handle, /* ref */ new JSIL.MemberReference($l$gc__DisplayClassb, "local"));
		});
	position.value = $l$gc__DisplayClassb.local;
	return result;
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.VideoDecoder_SetLooping = function (handle, loop) {
	var $l$gc__DisplayClassb = new Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb9();
	$l$gc__DisplayClassb.handle = handle;
	$l$gc__DisplayClassb.loop = loop;
	return Microsoft.Xna.Framework.Media.WmpProxyThread.RunInRightApartment(function () {
			return Microsoft.Xna.Framework.Media.WmpInterface.VideoDecoder_SetLooping($l$gc__DisplayClassb.handle, $l$gc__DisplayClassb.loop);
		});
};

Microsoft.Xna.Framework.Media.UnsafeNativeMethods.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassd.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassd.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassd.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassd);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass10.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass10.prototype.handleSongList = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass10.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass10.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass10);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass13.prototype.localItemId = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass13.prototype.handleSongList = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass13.prototype.index = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass13.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass13.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass13);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass16.prototype.handleSongList = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass16.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass16.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass16);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass19.prototype.handleItem = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass19.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass19.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass19);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1c.prototype.itemId = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1c.prototype.sbName = null;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1c.prototype.charCount = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1c.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1c.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1c);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1f.prototype.localEqual = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1f.prototype.first = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1f.prototype.second = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1f.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1f.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass1f);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass22.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass22.prototype.song = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass22.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass22.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass22);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass25.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass25.prototype.song = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass25.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass25.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass25);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass28.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass28.prototype.song = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass28.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass28.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass28);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2b.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2b.prototype.song = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2b.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2b.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2b);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2e.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2e.prototype.song = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2e.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2e.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass2e);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass31.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass31.prototype.song = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass31.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass31.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass31);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass34.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass34.prototype.song = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass34.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass34.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass34);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass37.prototype.local = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass37.prototype.song = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass37.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass37.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass37);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3a.prototype.localHandle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3a.prototype.name = null;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3a.prototype.filename = null;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3a.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3a.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3a);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3d.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3d.prototype.album = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3d.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3d.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass3d);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass40.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass40.prototype.album = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass40.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass40.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass40);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass43.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass43.prototype.album = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass43.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass43.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass43);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass46.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass46.prototype.album = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass46.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass46.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass46);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass49.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass49.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass49.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass49.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass49);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4c.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4c.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4c.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4c.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4c);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4f.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4f.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4f.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4f.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass4f);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass52.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass52.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass52.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass52.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass52);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass55.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass55.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass55.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass55.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass55);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass58.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass58.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass58.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass58.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass58);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5b.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5b.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5b.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5b);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5e.prototype.songList = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5e.prototype.index = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5e.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5e.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass5e);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass61.prototype.index = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass61.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass61.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass61);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass68.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass68.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass68.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass68);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6b.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6b.prototype.index = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6b.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6b.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6b);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6e.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6e.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6e.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass6e);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass71.prototype.local = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass71.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass71.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass71);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass74.prototype.shuffle = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass74.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass74.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass74);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass77.prototype.local = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass77.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass77.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass77);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7a.prototype.repeat = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7a.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7a.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass7a);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass83.prototype.localState = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass83.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass83.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass83);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass86.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass86.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass86.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass86);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass89.prototype.localVolume = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass89.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass89.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass89);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8c.prototype.volume = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8c.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8c.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8c);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8f.prototype.local = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8f.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8f.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass8f);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass92.prototype.mute = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass92.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass92.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass92);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass95.prototype.localHandle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass95.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass95.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass95);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass98.prototype.decoderHandle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass98.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass98.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass98);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b.prototype.decoderHandle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b.prototype.filename = null;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b.prototype.filenameLength = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b.prototype.width = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b.prototype.height = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b.prototype.loop = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9b);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9e.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9e.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9e.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClass9e);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa1.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa1.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa1);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa4.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa4.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa4.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa4);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa7.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa7.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa7.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassa7);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassaa.prototype.localState = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassaa.prototype.decoderHandle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassaa.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassaa.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassaa);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassad.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassad.prototype.mute = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassad.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassad.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassad);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb0.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb0.prototype.volume = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb0.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb0.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb0);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb3.prototype.pTexture1 = null;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb3.prototype.pTexture2 = null;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb3.prototype.ppCurrentTexture = null;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb3.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb3.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb3.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb3);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb6.prototype.local = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb6.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb6.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb6.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb6);
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb9.prototype.handle = 0;
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb9.prototype.loop = new System.Boolean();
Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb9.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb9.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.$l$gc__DisplayClassb9);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods.prototype);
Object.seal(Microsoft.Xna.Framework.Media.UnsafeNativeMethods);
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.parent = null;
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.index = 0;
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.hostGamertag = null;
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.currentGamerCount = 0;
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.openPublicGamerSlots = 0;
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.openPrivateGamerSlots = 0;
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.sessionProperties = null;
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.qualityOfService = null;
Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype._ctor = function (index) {
	this.sessionProperties = Microsoft.Xna.Framework.Net.NetworkSessionProperties.CreateReadOnly();
	this.qualityOfService = new Microsoft.Xna.Framework.Net.QualityOfService();
	System.Object.prototype._ctor.call(this);
	this.index = index;
};

Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_HostGamertag = function () {
	return this.hostGamertag;
};

Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_CurrentGamerCount = function () {
	return this.currentGamerCount;
};

Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_OpenPublicGamerSlots = function () {
	return this.openPublicGamerSlots;
};

Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_OpenPrivateGamerSlots = function () {
	return this.openPrivateGamerSlots;
};

Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_SessionProperties = function () {
	return this.sessionProperties;
};

Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_QualityOfService = function () {

	if (!(this.qualityOfService.IsAvailable || 
			(this.parent !== null) || (this.parent.kernelHandle !== 0))) {
		this.GetQualityOfService();
	}
	return this.qualityOfService;
};

Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.GetQualityOfService = JSIL.UntranslatableFunction("GetQualityOfService");

Object.defineProperty(Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype, "HostGamertag", {
		get: Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_HostGamertag
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype, "CurrentGamerCount", {
		get: Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_CurrentGamerCount
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype, "OpenPublicGamerSlots", {
		get: Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_OpenPublicGamerSlots
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype, "OpenPrivateGamerSlots", {
		get: Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_OpenPrivateGamerSlots
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype, "SessionProperties", {
		get: Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_SessionProperties
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype, "QualityOfService", {
		get: Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype.get_QualityOfService
	});

Object.seal(Microsoft.Xna.Framework.Net.AvailableNetworkSession.prototype);
Object.seal(Microsoft.Xna.Framework.Net.AvailableNetworkSession);
Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype.kernelHandle = 0;
Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype._ctor = function (kernelHandle, sessions) {
	System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Net.AvailableNetworkSession).prototype._ctor.call(this, sessions);
	this.kernelHandle = kernelHandle;
	var enumerator = sessions.IEnumerable$b1_GetEnumerator();

	try {

	__while0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			enumerator.IEnumerator$b1_Current.parent = this;
		}
	} finally {

		if (enumerator === null) {
			enumerator.IDisposable_Dispose();
		}
	}
};

Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype.Finalize = function () {

	try {
		this.DisposeWorker();
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype.Dispose = function () {
	this.DisposeWorker();
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype.DisposeWorker = JSIL.UntranslatableFunction("DisposeWorker");

Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype.get_IsDisposed = function () {
	return (this.kernelHandle === 0);
};

Object.defineProperty(Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection.prototype);
Object.seal(Microsoft.Xna.Framework.Net.AvailableNetworkSessionCollection);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarDescription, "DescriptionSize", { value: 1021 });
Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.description = null;
Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.__StructFields__ = {
	height: System.Nullable$b1.Of(System.Single), 
	bodyType: System.Nullable$b1.Of(Microsoft.Xna.Framework.GamerServices.AvatarBodyType)
};
Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.get_IsValid = function () {
	return (!((this.description !== null) || 
			(this.description.length !== 1021)) && (this.description[0] !== 0));
};

Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.get_Description = function () {
	var array = JSIL.Array.New(System.Byte, this.description.length);
	System.Array.Copy(this.description, array, this.description.length);
	return array;
};

Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.get_Height = function () {

	if (!this.height.get_HasValue()) {
		this.height = new (System.Nullable$b1.Of(System.Single)) (0);
	}
	return this.height.get_Value();
};

Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.get_BodyType = function () {

	if (!this.bodyType.get_HasValue()) {
		this.bodyType = new (System.Nullable$b1.Of(Microsoft.Xna.Framework.GamerServices.AvatarBodyType)) (Microsoft.Xna.Framework.GamerServices.AvatarBodyType.Female);
	}
	return this.bodyType.get_Value();
};

Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype._ctor$0 = function (data) {
	this._ctor(data, true);
};

Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype._ctor$1 = function (data, makeCopy) {
	System.Object.prototype._ctor.call(this);

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}

	if (data.length !== 1021) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.ResourceDataMustBeCorrectSize, "data");
	}

	if (makeCopy) {
		this.description = JSIL.Array.New(System.Byte, 1021);
		System.Array.Copy(data, this.description, 1021);
		return ;
	}
	this.description = data;
};

Microsoft.Xna.Framework.GamerServices.AvatarDescription.CreateRandom$0 = function () {
	return Microsoft.Xna.Framework.GamerServices.AvatarDescription.CreateRandom(-1);
};

Microsoft.Xna.Framework.GamerServices.AvatarDescription.CreateRandom$1 = function (bodyType) {

	if (!((bodyType >= Microsoft.Xna.Framework.GamerServices.AvatarBodyType.Female) && (bodyType <= Microsoft.Xna.Framework.GamerServices.AvatarBodyType.Male))) {
		throw new System.ArgumentOutOfRangeException("bodyType");
	}
	return Microsoft.Xna.Framework.GamerServices.AvatarDescription.CreateRandom(bodyType);
};

Microsoft.Xna.Framework.GamerServices.AvatarDescription.CreateRandom$2 = function (bodyType) {
	return new Microsoft.Xna.Framework.GamerServices.AvatarDescription(JSIL.Array.New(System.Byte, 1021), false);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype, "_ctor", [
		["_ctor$0", [System.Array.Of(System.Byte)]], 
		["_ctor$1", [System.Array.Of(System.Byte), System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.AvatarDescription, "CreateRandom", [
		["CreateRandom$0", []], 
		["CreateRandom$1", [Microsoft.Xna.Framework.GamerServices.AvatarBodyType]], 
		["CreateRandom$2", [System.Int32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype, "IsValid", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.get_IsValid
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype, "Description", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.get_Description
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype, "Height", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.get_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype, "BodyType", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype.get_BodyType
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.AvatarDescription.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.AvatarDescription);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer, "BoneCount", { value: 71 });
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.parentBoneIDs = null;
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.parentBones = null;
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.bindPose = null;
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.bindPoseArray = null;
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.isLoaded = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.handle = 0;
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.__StructFields__ = {
	world: Microsoft.Xna.Framework.Matrix, 
	view: Microsoft.Xna.Framework.Matrix, 
	projection: Microsoft.Xna.Framework.Matrix, 
	$lLightColor$gk__BackingField: Microsoft.Xna.Framework.Vector3, 
	$lLightDirection$gk__BackingField: Microsoft.Xna.Framework.Vector3, 
	$lAmbientLightColor$gk__BackingField: Microsoft.Xna.Framework.Vector3
};
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_World = function () {
	return this.world;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_World = function (value) {
	this.world = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_View = function () {
	return this.view;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_View = function (value) {
	this.view = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_Projection = function () {
	return this.projection;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_Projection = function (value) {
	this.projection = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_ParentBones = function () {
	return this.parentBones;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_BindPose = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (!this.IsLoaded) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.BindPoseNotAvailable);
	}

	if (this.bindPose !== null) {
		this.bindPose = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Matrix)) (this.bindPoseArray);
	}
	return this.bindPose;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_IsLoaded = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (!this.isLoaded) {
		var num = 0;

		if (num === 0) {
			this.isLoaded = true;
		}
	}
	return this.isLoaded;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_LightColor = function () {
	return this.$lLightColor$gk__BackingField;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_LightColor = function (value) {
	this.$lLightColor$gk__BackingField = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_LightDirection = function () {
	return this.$lLightDirection$gk__BackingField;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_LightDirection = function (value) {
	this.$lLightDirection$gk__BackingField = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_AmbientLightColor = function () {
	return this.$lAmbientLightColor$gk__BackingField;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_AmbientLightColor = function (value) {
	this.$lAmbientLightColor$gk__BackingField = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype._ctor$0 = function (avatarDescription) {
	this._ctor(avatarDescription, true);
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype._ctor$1 = function (avatarDescription, useLoadingEffect) {
	this.world = Microsoft.Xna.Framework.Matrix.Identity;
	this.view = Microsoft.Xna.Framework.Matrix.Identity;
	this.projection = Microsoft.Xna.Framework.Matrix.Identity;
	this.parentBoneIDs = JSIL.Array.New(System.Int32, [-1, 0, 0, 0, 0, 1, 2, 2, 3, 3, 1, 6, 5, 6, 5, 8, 5, 8, 5, 14, 12, 11, 16, 15, 14, 20, 20, 20, 22, 22, 22, 25, 25, 25, 28, 28, 28, 33, 33, 33, 33, 33, 33, 33, 36, 36, 36, 36, 36, 36, 36, 37, 38, 39, 40, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60]);
	this.bindPoseArray = JSIL.Array.New(Microsoft.Xna.Framework.Matrix.MemberwiseClone(), 71);
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.parentBones = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Int32)) (this.parentBoneIDs);
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.Draw = function (bones, expression) {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (bones !== null) {
		throw new System.ArgumentNullException("bones");
	}

	if (bones.ICollection$b1_Count !== 71) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.ResourceDataMustBeCorrectSize, "bones");
	}
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.Dispose$1 = function (disposing) {

	if (!this.isDisposed) {
		this.isDisposed = true;

		if (this.handle !== -1) {
			this.handle = -1;
		}
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.GamerServices.AvatarDescription]], 
		["_ctor$1", [Microsoft.Xna.Framework.GamerServices.AvatarDescription, System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "World", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_World, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_World
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "View", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_View, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_View
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "Projection", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_Projection, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_Projection
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "ParentBones", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_ParentBones
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "BindPose", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_BindPose
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "IsLoaded", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_IsLoaded
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "LightColor", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_LightColor, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_LightColor
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "LightDirection", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_LightDirection, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_LightDirection
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "AmbientLightColor", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_AmbientLightColor, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.set_AmbientLightColor
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.GamerServices.AvatarRenderer.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.AvatarRenderer);
Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.avatarBones = null;
Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.boneTransforms = null;
Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.handle = 0;
Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.__StructFields__ = {
	length: System.TimeSpan, 
	currentPosition: System.TimeSpan, 
	currentExpression: Microsoft.Xna.Framework.GamerServices.AvatarExpression
};
Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_Length = function () {
	return this.length;
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_CurrentPosition = function () {
	return this.currentPosition;
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.set_CurrentPosition = function (value) {
	this.currentPosition = value;
	this.Update(System.TimeSpan.Zero.MemberwiseClone(), false);
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_BoneTransforms = function () {
	return this.boneTransforms;
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_Expression = function () {
	return this.currentExpression;
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype._ctor = function (animationPreset) {
	this.avatarBones = JSIL.Array.New(Microsoft.Xna.Framework.Matrix.MemberwiseClone(), 71);
	this.currentExpression = new Microsoft.Xna.Framework.GamerServices.AvatarExpression();
	this.handle = -1;
	System.Object.prototype._ctor.call(this);
	this.boneTransforms = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Matrix)) (this.avatarBones);
	this.length = System.TimeSpan.FromTicks((0 * 10000000));
	this.currentPosition = System.TimeSpan.Zero.MemberwiseClone();
	this.Update(System.TimeSpan.Zero.MemberwiseClone(), false);
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.Update = function (elapsedAnimationTime, loop) {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}
	this.currentPosition = System.TimeSpan.op_Addition(this.currentPosition.MemberwiseClone(), elapsedAnimationTime);

	if (!System.TimeSpan.op_GreaterThan(this.currentPosition.MemberwiseClone(), this.length.MemberwiseClone())) {

		if (System.TimeSpan.op_LessThan(this.currentPosition.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone())) {

			if (!(!loop || !System.TimeSpan.op_Inequality(this.length.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone()))) {

			__while0__: 
				while (System.TimeSpan.op_LessThan(this.currentPosition.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone())) {
					this.currentPosition = System.TimeSpan.op_Addition(this.currentPosition.MemberwiseClone(), this.length.MemberwiseClone());
				}
				return ;
			}
			this.currentPosition = System.TimeSpan.Zero.MemberwiseClone();
		}
		return ;
	}

	if (!(!loop || !System.TimeSpan.op_Inequality(this.length.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone()))) {

	__while1__: 
		while (System.TimeSpan.op_GreaterThan(this.currentPosition.MemberwiseClone(), this.length.MemberwiseClone())) {
			this.currentPosition = System.TimeSpan.op_Subtraction(this.currentPosition.MemberwiseClone(), this.length.MemberwiseClone());
		}
		return ;
	}
	this.currentPosition = this.length.MemberwiseClone();
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.Dispose$1 = function (disposing) {

	if (!this.isDisposed) {
		this.isDisposed = true;

		if (this.handle !== -1) {
			this.handle = -1;
		}
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype, "Length", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_Length
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype, "CurrentPosition", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_CurrentPosition, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.set_CurrentPosition
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype, "BoneTransforms", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_BoneTransforms
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype, "Expression", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_Expression
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.GamerServices.AvatarAnimation.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.AvatarAnimation);
Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.$lMouth$gk__BackingField = 0;
Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.$lLeftEye$gk__BackingField = 0;
Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.$lRightEye$gk__BackingField = 0;
Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.$lLeftEyebrow$gk__BackingField = 0;
Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.$lRightEyebrow$gk__BackingField = 0;
Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_Mouth = function () {
	return this.$lMouth$gk__BackingField;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_Mouth = function (value) {
	this.$lMouth$gk__BackingField = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_LeftEye = function () {
	return this.$lLeftEye$gk__BackingField;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_LeftEye = function (value) {
	this.$lLeftEye$gk__BackingField = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_RightEye = function () {
	return this.$lRightEye$gk__BackingField;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_RightEye = function (value) {
	this.$lRightEye$gk__BackingField = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_LeftEyebrow = function () {
	return this.$lLeftEyebrow$gk__BackingField;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_LeftEyebrow = function (value) {
	this.$lLeftEyebrow$gk__BackingField = value;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_RightEyebrow = function () {
	return this.$lRightEyebrow$gk__BackingField;
};

Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_RightEyebrow = function (value) {
	this.$lRightEyebrow$gk__BackingField = value;
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype, "Mouth", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_Mouth, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_Mouth
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype, "LeftEye", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_LeftEye, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_LeftEye
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype, "RightEye", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_RightEye, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_RightEye
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype, "LeftEyebrow", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_LeftEyebrow, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_LeftEyebrow
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype, "RightEyebrow", {
		get: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.get_RightEyebrow, 
		set: Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype.set_RightEyebrow
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.AvatarExpression.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.AvatarExpression);
Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype.kernelHandle = 0;
Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype._ctor = function (kernelHandle) {
	Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.GamerServices.FriendGamer).prototype._ctor.call(this);
	this.kernelHandle = kernelHandle;
};

Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype.Dispose$1 = JSIL.UntranslatableFunction("Dispose");

Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype.get_IsDisposed = function () {
	return (this.kernelHandle === 0);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.GamerServices.FriendCollection.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.FriendCollection);
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.gameDifficulty = 0;
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.controllerSensitivity = 0;
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.autoAim = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.autoCenter = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.moveWithRightThumbStick = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.invertYAxis = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.manualTransmission = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.racingCameraAngle = 0;
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.accelerateWithButtons = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.brakeWithButtons = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.__StructFields__ = {
	primaryColor: System.Nullable$b1.Of(Microsoft.Xna.Framework.Graphics.Color), 
	secondaryColor: System.Nullable$b1.Of(Microsoft.Xna.Framework.Graphics.Color)
};
Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype._ctor = JSIL.UntranslatableFunction(".ctor");

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_GameDifficulty = function () {
	return this.gameDifficulty;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_ControllerSensitivity = function () {
	return this.controllerSensitivity;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_PrimaryColor = function () {
	return this.primaryColor;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_SecondaryColor = function () {
	return this.secondaryColor;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_AutoAim = function () {
	return this.autoAim;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_AutoCenter = function () {
	return this.autoCenter;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_MoveWithRightThumbStick = function () {
	return this.moveWithRightThumbStick;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_InvertYAxis = function () {
	return this.invertYAxis;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_ManualTransmission = function () {
	return this.manualTransmission;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_RacingCameraAngle = function () {
	return this.racingCameraAngle;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_AccelerateWithButtons = function () {
	return this.accelerateWithButtons;
};

Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_BrakeWithButtons = function () {
	return this.brakeWithButtons;
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "GameDifficulty", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_GameDifficulty
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "ControllerSensitivity", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_ControllerSensitivity
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "PrimaryColor", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_PrimaryColor
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "SecondaryColor", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_SecondaryColor
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "AutoAim", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_AutoAim
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "AutoCenter", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_AutoCenter
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "MoveWithRightThumbStick", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_MoveWithRightThumbStick
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "InvertYAxis", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_InvertYAxis
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "ManualTransmission", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_ManualTransmission
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "RacingCameraAngle", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_RacingCameraAngle
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "AccelerateWithButtons", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_AccelerateWithButtons
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype, "BrakeWithButtons", {
		get: Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype.get_BrakeWithButtons
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.GameDefaults.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GameDefaults);
Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.presenceMode = 0;
Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.presenceValue = 0;
Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.presenceChanged = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.get_PresenceMode = function () {
	return this.presenceMode;
};

Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.set_PresenceMode = function (value) {

	if (value !== this.presenceMode) {
		this.presenceMode = value;
		this.presenceChanged = true;
	}
};

Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.get_PresenceValue = function () {
	return this.presenceValue;
};

Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.set_PresenceValue = function (value) {

	if (value !== this.presenceValue) {
		this.presenceValue = value;
		this.presenceChanged = true;
	}
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype, "PresenceMode", {
		get: Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.get_PresenceMode, 
		set: Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.set_PresenceMode
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype, "PresenceValue", {
		get: Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.get_PresenceValue, 
		set: Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype.set_PresenceValue
	});

Object.seal(Microsoft.Xna.Framework.GamerServices.GamerPresence.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerPresence);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile, "pictureSize", { value: 64 });
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.isDisposed = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.motto = null;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.reputation = 0;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.gamerZone = 0;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.region = null;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.gamerScore = 0;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.titlesPlayed = 0;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.totalAchievements = 0;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.pictureData = null;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.pictureTexture = null;
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype._ctor = JSIL.UntranslatableFunction(".ctor");

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.Dispose = function () {
	this.isDisposed = true;

	if (this.pictureTexture === null) {
		this.pictureTexture.Dispose();
		this.pictureTexture = null;
	}
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_IsDisposed = function () {
	return this.isDisposed;
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_Motto = function () {
	return this.motto;
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_Reputation = function () {
	return this.reputation;
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_GamerZone = function () {
	return this.gamerZone;
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_Region = function () {
	return this.region;
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_GamerScore = function () {
	return this.gamerScore;
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_TitlesPlayed = function () {
	return this.titlesPlayed;
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_TotalAchievements = function () {
	return this.totalAchievements;
};

Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_GamerPicture = function () {

	if (this.isDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (!((this.pictureTexture === null) && !this.pictureTexture.IsDisposed)) {
		this.pictureTexture = new Microsoft.Xna.Framework.Graphics.Texture2D(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.GraphicsDevice, 64, 64, 1, Microsoft.Xna.Framework.Graphics.TextureUsage.None, Microsoft.Xna.Framework.Graphics.SurfaceFormat.Color);
		this.pictureTexture.SetData(this.pictureData);
	}
	return this.pictureTexture;
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "Motto", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_Motto
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "Reputation", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_Reputation
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "GamerZone", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_GamerZone
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "Region", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_Region
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "GamerScore", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_GamerScore
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "TitlesPlayed", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_TitlesPlayed
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "TotalAchievements", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_TotalAchievements
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype, "GamerPicture", {
		get: Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.get_GamerPicture
	});
Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.GamerServices.GamerProfile.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GamerProfile);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher, "PacketBufferSize", { value: 17420 });
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.serviceProvider = null;
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.packetBuffer = null;
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates = null;
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.changedPlayerIndices = null;
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.InstallingTitleUpdate = null;
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideRenderer = null;
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker = null;
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.pendingWindowHandle = 0;
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_PacketBuffer = function () {

	if (Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.packetBuffer !== null) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.GamerServicesNotInitialized);
	}
	return Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.packetBuffer;
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_IsInitialized = function () {
	return (Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.packetBuffer !== null);
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.Initialize = function (serviceProvider) {

	if (Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.IsInitialized === null) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.GamerServicesAlreadyInitialized);
	}

	if (serviceProvider !== null) {
		throw new System.ArgumentNullException("serviceProvider");
	}
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.serviceProvider = serviceProvider;
	Microsoft.Xna.Framework.UserAsyncDispatcher.Initialize();
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.packetBuffer = new Microsoft.Xna.Framework.GamerServices.UserPacketBuffer(17420, false);
	Microsoft.Xna.Framework.GamerServices.ErrorHandler.ThrowExceptionFromResult(Microsoft.Xna.Framework.GamerServices.KernelMethods.Initialize(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.packetBuffer));
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.PlatformInitialize();
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.Update = JSIL.UntranslatableFunction("Update");

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.ReadPlayerSigninStatusChanged = function (/* ref */ readData, /* ref */ numberOfPlayersChanged) {
	var num = readData.value;
	readData.value += 4;
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].Index = num;
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].SignInState = readData.value;
	readData.value += 4;
	var num2 = readData.value;
	readData.value += 4;
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].IsLive = (num2 === 0);
	num2 = readData.value;
	readData.value += 4;
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].IsGuest = (num2 === 0);
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].Gamertag = System.Runtime.InteropServices.Marshal.PtrToStringUni(JSIL.IgnoredMember(".ctor()"));
	readData.value += ((((Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].Gamertag.length + 1) * 2) + 3) & -4);
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].Privileges = readData.value;
	readData.value += 4;

	if (Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].IsSignedIn) {
		Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[num].GameDefaults = new Microsoft.Xna.Framework.GamerServices.GameDefaults(JSIL.IgnoredMember(".ctor()"));
		readData.value = JSIL.IgnoredMember("ToPointer()");
	}
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.changedPlayerIndices[numberOfPlayersChanged++] = num;
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.ReadPartyMembersChanged = function (/* ref */ readData) {
	var num = readData.value;
	readData.value += 4;
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[0].PartySize = (num & 255);
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[1].PartySize = ((num >> 8) & 255);
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[2].PartySize = ((num >> 16) & 255);
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates[3].PartySize = ((num >> 24) & 255);
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.ReadAvatarChanged = function (/* ref */ readData) {
	var num = readData.value;
	readData.value += 4;

	if ((num & 1) === 1) {
		var signedInGamer = Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers.get_Item(Microsoft.Xna.Framework.PlayerIndex.One);

		if (signedInGamer === null) {
			signedInGamer.HandleAvatarChanged();
		}
	}

	if ((num & 2) === 2) {
		signedInGamer = Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers.get_Item(Microsoft.Xna.Framework.PlayerIndex.Two);

		if (signedInGamer === null) {
			signedInGamer.HandleAvatarChanged();
		}
	}

	if ((num & 4) === 4) {
		signedInGamer = Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers.get_Item(Microsoft.Xna.Framework.PlayerIndex.Three);

		if (signedInGamer === null) {
			signedInGamer.HandleAvatarChanged();
		}
	}

	if ((num & 8) === 8) {
		signedInGamer = Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers.get_Item(Microsoft.Xna.Framework.PlayerIndex.Four);

		if (signedInGamer === null) {
			signedInGamer.HandleAvatarChanged();
		}
	}
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_GraphicsDeviceService = function () {

	if (Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.IsInitialized !== null) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.GamerServicesNotInitialized);
	}
	var graphicsDeviceService = JSIL.Cast(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.serviceProvider.IServiceProvider_GetService(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService), Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService);

	if (graphicsDeviceService !== null) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.NoGraphicsDevice);
	}
	return graphicsDeviceService;
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_GraphicsDevice = function () {
	var graphicsDevice = Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.GraphicsDeviceService.IGraphicsDeviceService_GraphicsDevice;

	if (graphicsDevice !== null) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.NoGraphicsDevice);
	}
	return graphicsDevice;
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.add_InstallingTitleUpdate = function (value) {
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.InstallingTitleUpdate = System.Delegate.Combine(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.InstallingTitleUpdate, value);
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.remove_InstallingTitleUpdate = function (value) {
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.InstallingTitleUpdate = System.Delegate.Remove(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.InstallingTitleUpdate, value);
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.PlatformInitialize = function () {
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideRenderer = new Microsoft.Xna.Framework.GamerServices.GuideRenderer(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.GraphicsDeviceService);
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker = new Microsoft.Xna.Framework.GamerServices.GuideMessageHooker();
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker.WindowHandle = Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.pendingWindowHandle;
	Microsoft.Xna.Framework.Input.Keyboard.DisableHomeKey = true;
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.SetTitleName();
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.PlatformUpdate = function () {
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker.Update();
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_WindowHandle = function () {

	if (Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker === null) {
		return Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker.WindowHandle;
	}
	return Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.pendingWindowHandle;
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.set_WindowHandle = function (value) {

	if (Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker === null) {
		Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker.WindowHandle = value;
		return ;
	}
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.pendingWindowHandle = value;
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.HandleTitleUpdate = function (titleUpdateInstaller) {
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideMessageHooker.Dispose();
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.guideRenderer.Dispose();
	Microsoft.Xna.Framework.GamerServices.KernelMethods.HandleUnexpectedShutdown(Microsoft.Xna.Framework.FrameworkResources.InstallingTitleUpdate);

	if (!System.String.IsNullOrEmpty(titleUpdateInstaller)) {
		System.Diagnostics.Process.Start(titleUpdateInstaller);
	}
	var installingTitleUpdate = Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.InstallingTitleUpdate;

	if (installingTitleUpdate === null) {
		installingTitleUpdate(null, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.SetTitleName = JSIL.UntranslatableFunction("SetTitleName");

Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher._cctor = function () {
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.playerStates = JSIL.Array.New(Microsoft.Xna.Framework.GamerServices.PlayerState.MemberwiseClone(), 4);
	Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.changedPlayerIndices = JSIL.Array.New(System.Int32, 4);
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher, "PacketBuffer", {
		get: Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_PacketBuffer
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher, "IsInitialized", {
		get: Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_IsInitialized
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher, "GraphicsDeviceService", {
		get: Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_GraphicsDeviceService
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher, "GraphicsDevice", {
		get: Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_GraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher, "WindowHandle", {
		get: Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.get_WindowHandle, 
		set: Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher.set_WindowHandle
	});
Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher._cctor();

Object.seal(Microsoft.Xna.Framework.GamerServices.GamerServicesDispatcher);
Microsoft.Xna.Framework.GamerServices.GuideMessageHooker.prototype.WndProc = function (hWnd, msg, wParam, lParam) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":

				if (msg <= 134) {

					if (msg <= 32) {

						if (msg !== 6) {

							if (msg !== 32) {
								__label0__ = "IL_121";
								continue __step0__;
							}
						} else {

							if (System.IntPtr.op_Equality(lParam, this.WindowHandle)) {
								lParam = System.IntPtr.Zero;
								__label0__ = "IL_12B";
								continue __step0__;
							}
							__label0__ = "IL_12B";
							continue __step0__;
						}
					} else {

						if (!((msg === 81) || (msg === 134))) {
							__label0__ = "IL_121";
							continue __step0__;
						}
						__label0__ = "IL_12B";
						continue __step0__;
					}
				} else if (msg <= 271) {

					switch (msg) {
						case 256: 
						case 257: 
						case 258: 

							if (!((wParam.ToInt32() === 36) || Microsoft.Xna.Framework.GamerServices.Guide.IsVisibleNoThrow)) {
								return new (System.Nullable$b1.Of(System.IntPtr)) ();
							}
							__label0__ = "IL_12B";
							continue __step0__;
						default: 

							switch (msg) {
								case 269: 
								case 270: 
								case 271: 
									break;
								default: 
									__label0__ = "IL_121";
									continue __step0__;
							}
							break;
					}
				} else {

					switch (msg) {
						case 512: 
						case 513: 
						case 514: 
						case 515: 
						case 516: 
						case 517: 
						case 518: 
						case 519: 
						case 520: 
						case 521: 
						case 522: 
						case 523: 
						case 524: 
						case 525: 
							break;
						default: 

							switch (msg) {
								case 641: 
								case 642: 
									break;
								default: 

									if (msg !== 646) {
										__label0__ = "IL_121";
										continue __step0__;
									}
									break;
							}
							break;
					}
				}

				if (Microsoft.Xna.Framework.GamerServices.Guide.IsVisibleNoThrow !== null) {
					return new (System.Nullable$b1.Of(System.IntPtr)) ();
				}
				__label0__ = "IL_12B";
				continue __step0__;
				break;

			case "IL_12B":
				var result = Microsoft.Xna.Framework.GamerServices.GuideMessageHooker.SendMessageToProxy(msg, wParam, lParam);

				if (msg === 32) {
					return new (System.Nullable$b1.Of(System.IntPtr)) ();
				}
				return result;
				__label0__ = "IL_121";
				continue __step0__;
				break;

			case "IL_121":
				return new (System.Nullable$b1.Of(System.IntPtr)) ();
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.GamerServices.GuideMessageHooker.SendMessageToProxy = JSIL.UntranslatableFunction("SendMessageToProxy");

Microsoft.Xna.Framework.GamerServices.GuideMessageHooker.prototype._ctor = function () {
	Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.GamerServices.GuideMessageHooker.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GuideMessageHooker);
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.GuideRenderer, "initialDrawBufferSize", { value: 1024 });
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.drawCommandBuffer = null;
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.graphicsDeviceService = null;
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.graphicsDevice = null;
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.deviceResetCount = 0;
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.deviceRecreateCount = 0;
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.resourceManager = null;
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.stateBlock = null;
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.pixelShader1x = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GuideRenderer.simulateShader1xForTesting = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype._ctor = function (graphicsDeviceService) {
	this.deviceResetCount = -1;
	this.deviceRecreateCount = -1;
	this.resourceManager = new Microsoft.Xna.Framework.GamerServices.GuideResourceManager();
	System.Object.prototype._ctor.call(this);
	this.drawCommandBuffer = new Microsoft.Xna.Framework.GamerServices.UserPacketBuffer(1024, true);
	this.graphicsDeviceService = graphicsDeviceService;
	graphicsDeviceService.IGraphicsDeviceService_add_DeviceCreated(JSIL.Delegate.New("System.EventHandler", this, Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.GraphicsDeviceCreated));
	graphicsDeviceService.IGraphicsDeviceService_add_DeviceReset(JSIL.Delegate.New("System.EventHandler", this, Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.GraphicsDeviceReset));

	if (graphicsDeviceService.IGraphicsDeviceService_GraphicsDevice === null) {
		this.GraphicsDeviceCreated(graphicsDeviceService, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.Dispose = function () {
	this.graphicsDeviceService.IGraphicsDeviceService_remove_DeviceCreated(JSIL.Delegate.New("System.EventHandler", this, Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.GraphicsDeviceCreated));
	this.graphicsDeviceService.IGraphicsDeviceService_remove_DeviceReset(JSIL.Delegate.New("System.EventHandler", this, Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.GraphicsDeviceReset));

	if (this.graphicsDevice === null) {
		this.graphicsDevice.remove_DrawGuide(JSIL.Delegate.New("System.EventHandler", this, Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.DrawGuide));
		this.graphicsDevice = null;
	}
};

Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.GraphicsDeviceCreated = function (sender, e) {
	++this.deviceRecreateCount;
	this.resourceManager.DestroyResources();
	this.graphicsDevice = this.graphicsDeviceService.IGraphicsDeviceService_GraphicsDevice;

	if (this.graphicsDevice !== null) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.NoGraphicsDevice);
	}
	this.GraphicsDeviceReset(sender, e);
	this.graphicsDevice.add_DrawGuide(JSIL.Delegate.New("System.EventHandler", this, Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.DrawGuide));
};

Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.GraphicsDeviceReset = function (sender, e) {
	++this.deviceResetCount;
	this.stateBlock = new Microsoft.Xna.Framework.Graphics.StateBlock(this.graphicsDevice);
	var flag = ((this.graphicsDevice.GraphicsDeviceCapabilities.PixelShaderVersion.Major < 2) || 
		Microsoft.Xna.Framework.GamerServices.GuideRenderer.simulateShader1xForTesting);

	if (flag !== this.pixelShader1x) {
		this.pixelShader1x = flag;
		++this.deviceRecreateCount;
		this.resourceManager.DestroyResources();
	}
};

Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.DrawGuide = function (sender, e) {

	if (!System.Object.ReferenceEquals(sender, this.graphicsDevice)) {
		return ;
	}

	if (!Microsoft.Xna.Framework.GamerServices.KernelMethods.CanMakeKernelCalls) {
		return ;
	}
	var drawingCommandsFromProxy = this.GetDrawingCommandsFromProxy();

	if (drawingCommandsFromProxy > 0) {
		this.stateBlock.Capture();

		try {
			this.SetStandardRenderStates();
			this.ReplayDrawingCommands(this.drawCommandBuffer.Data.MappedPointer, drawingCommandsFromProxy);
		} finally {
			this.stateBlock.Apply();
		}
	}
};

Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.GetDrawingCommandsFromProxy = JSIL.UntranslatableFunction("GetDrawingCommandsFromProxy");

Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.SetStandardRenderStates = function () {
	var presentationParameters = this.graphicsDevice.PresentationParameters;
	var viewport = new Microsoft.Xna.Framework.Graphics.Viewport();
	viewport.set_X(0);
	viewport.set_Y(0);
	viewport.set_Width(presentationParameters.BackBufferWidth);
	viewport.set_Height(presentationParameters.BackBufferHeight);
	viewport.set_MinDepth(0);
	viewport.set_MaxDepth(1);
	this.graphicsDevice.Viewport = viewport.MemberwiseClone();
};

Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.ReplayDrawingCommands = JSIL.UntranslatableFunction("ReplayDrawingCommands");

Microsoft.Xna.Framework.GamerServices.GuideRenderer.GetVertexCount = function (primitiveType, primitiveCount) {

	if (primitiveCount !== 0) {
		return 0;
	}

	switch (primitiveType) {
		case 1: 
			return primitiveCount;
		case 2: 
			return (primitiveCount * 2);
		case 3: 
			return (primitiveCount + 1);
		case 4: 
			return (primitiveCount * 3);
		case 5: 
			return (primitiveCount + 2);
		case 6: 
			return (primitiveCount + 2);
		default: 
			return 0;
	}
};

Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.GamerServices.GuideRenderer.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.GuideRenderer);
Microsoft.Xna.Framework.Net.NetworkGamer.prototype.gamerState = 0;
Microsoft.Xna.Framework.Net.NetworkGamer.prototype.session = null;
Microsoft.Xna.Framework.Net.NetworkGamer.prototype.machine = null;
Microsoft.Xna.Framework.Net.NetworkGamer.prototype.id = 0;
Microsoft.Xna.Framework.Net.NetworkGamer.prototype.__StructFields__ = {
	roundtripTime: System.TimeSpan
};
Microsoft.Xna.Framework.Net.NetworkGamer.prototype._ctor = function (session, kernelHandle, gamerState, id, sessionIndex, gamertag) {
	Microsoft.Xna.Framework.GamerServices.Gamer.prototype._ctor.call(this, kernelHandle, sessionIndex, gamertag);
	this.session = session;
	this.gamerState = gamerState;
	this.id = id;
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_Session = function () {
	return this.session;
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_Machine = function () {
	return this.machine;
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.set_Machine = function (value) {
	this.machine = value;
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsHost = function () {
	return ((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.IsHost) !== 0);
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsLocal = function () {
	return ((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.IsLocal) !== 0);
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsPrivateSlot = function () {
	return ((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.IsPrivateSlot) !== 0);
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsReady = function () {
	return ((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.IsReady) !== 0);
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.set_IsReady = JSIL.UntranslatableFunction("set_IsReady");

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_HasVoice = function () {
	return ((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.HasVoice) !== 0);
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsTalking = function () {
	return ((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.IsTalking) !== 0);
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsMutedByLocalUser = function () {
	return ((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.IsMutedByLocalUser) !== 0);
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsGuest = function () {
	return ((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.IsGuest) !== 0);
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_RoundtripTime = function () {
	return this.roundtripTime;
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_Id = function () {
	return this.id;
};

Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_HasLeftSession = function () {
	return (((this.gamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.HasLeftSession) !== 0) | this.IsDisposed);
};

Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "Session", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_Session
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "Machine", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_Machine, 
		set: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.set_Machine
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "IsHost", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsHost
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "IsLocal", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsLocal
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "IsPrivateSlot", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsPrivateSlot
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "IsReady", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsReady, 
		set: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.set_IsReady
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "HasVoice", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_HasVoice
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "IsTalking", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsTalking
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "IsMutedByLocalUser", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsMutedByLocalUser
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "IsGuest", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_IsGuest
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "RoundtripTime", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_RoundtripTime
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "Id", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_Id
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkGamer.prototype, "HasLeftSession", {
		get: Microsoft.Xna.Framework.Net.NetworkGamer.prototype.get_HasLeftSession
	});

Object.seal(Microsoft.Xna.Framework.Net.NetworkGamer.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkGamer);
Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.signedInGamer = null;
Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.signedInGamerIndex = 0;
Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.incomingPackets = null;
Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.incomingPacketData = null;
Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.packetDataOffset = 0;
Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype._ctor = function (session, kernelHandle, gamerState, id, sessionIndex, gamertag, localIndex) {
	this.incomingPackets = new (System.Collections.Generic.Queue$b1.Of(Microsoft.Xna.Framework.Net.LocalNetworkGamer.IncomingPacket)) ();
	Microsoft.Xna.Framework.Net.NetworkGamer.prototype._ctor.call(
		this, 
		session, 
		kernelHandle, 
		gamerState, 
		id, 
		sessionIndex, 
		gamertag
	);
	this.signedInGamerIndex = localIndex;
	this.LookUpSignedInGamer();
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.get_SignedInGamer = function () {

	if (this.signedInGamer !== null) {
		this.LookUpSignedInGamer();
	}
	return this.signedInGamer;
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.LookUpSignedInGamer = function () {
	var signedInGamer = Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers.get_Item(this.signedInGamerIndex);

	if (!((signedInGamer !== null) || !System.String.Equals(this.Gamertag, signedInGamer.Gamertag, System.StringComparison.Ordinal))) {
		this.signedInGamer = signedInGamer;
	}
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.EnableSendVoice = JSIL.UntranslatableFunction("EnableSendVoice");

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendData$0 = function (data, options) {

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}
	this.SendDataWorker(
		data, 
		0, 
		data.length, 
		options, 
		null
	);
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendData$1 = function (data, options, recipient) {

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}

	if (recipient !== null) {
		throw new System.ArgumentNullException("recipient");
	}
	this.SendDataWorker(
		data, 
		0, 
		data.length, 
		options, 
		recipient
	);
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendData$2 = function (data, offset, count, options) {

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}
	this.SendDataWorker(
		data, 
		offset, 
		count, 
		options, 
		null
	);
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendData$3 = function (data, offset, count, options, recipient) {

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}

	if (recipient !== null) {
		throw new System.ArgumentNullException("recipient");
	}
	this.SendDataWorker(
		data, 
		offset, 
		count, 
		options, 
		recipient
	);
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendData$4 = function (data, options) {

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}
	this.SendDataWorker(
		data.ByteArray, 
		0, 
		data.length, 
		options, 
		null
	);
	data.Clear();
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendData$5 = function (data, options, recipient) {

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}

	if (recipient !== null) {
		throw new System.ArgumentNullException("recipient");
	}
	this.SendDataWorker(
		data.ByteArray, 
		0, 
		data.length, 
		options, 
		recipient
	);
	data.Clear();
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendDataWorker = function (data, offset, count, options, recipient) {

	if (this.HasLeftSession) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.NetworkGamerDisposed);
	}

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}

	if (!((offset >= 0) && (offset < data.length))) {
		throw new System.ArgumentOutOfRangeException("offset");
	}

	if (!((count > 0) && ((offset + count) <= data.length))) {
		throw new System.ArgumentOutOfRangeException("count");
	}

	if (recipient === null) {

		if (recipient.HasLeftSession) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.NetworkGamerDisposed);
		}

		if (recipient.Session !== this.Session) {
			throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NetworkGamerWrongSession, "recipient");
		}
	}

	if (this.Session.NetworkSimulator.SendData(
			data, 
			offset, 
			count, 
			options, 
			this, 
			recipient
		)) {
		return ;
	}
	this.SendDataNow(
		data, 
		offset, 
		count, 
		options, 
		recipient
	);
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendDataNow = JSIL.UntranslatableFunction("SendDataNow");

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.QueueIncomingPacket = function (sender, data, size) {
	var item = new Microsoft.Xna.Framework.Net.LocalNetworkGamer.IncomingPacket();
	System.Threading.Monitor.Enter();

	try {

		if (!((this.incomingPacketData === null) && ((this.packetDataOffset + size) <= this.incomingPacketData.length))) {
			System.Array.Resize(/* ref */ new JSIL.MemberReference(this, "incomingPacketData"), (this.packetDataOffset + size));
		}
		System.Runtime.InteropServices.Marshal.Copy(data, this.incomingPacketData, this.packetDataOffset, size);
		item.Sender = sender;
		item.Offset = this.packetDataOffset;
		item.Size = size;
		this.incomingPackets.Enqueue(item.MemberwiseClone());
		this.packetDataOffset += size;
	} finally {
		System.Threading.Monitor.Exit(this.incomingPackets);
	}
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.ReceiveData$0 = function (data, /* ref */ sender) {
	return this.ReceiveData(data, 0, /* ref */ sender);
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.ReceiveData$1 = function (data, offset, /* ref */ sender) {

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}

	if (offset >= data.length) {
		throw new System.ArgumentOutOfRangeException("offset");
	}
	System.Threading.Monitor.Enter();

	try {

		if (this.incomingPackets.Count <= 0) {
			JSIL.UntranslatableInstruction("stind.ref(ldloc:NetworkGamer&(sender), ldnull:object[exp:NetworkGamer]())");
			var result = 0;
		} else {
			var incomingPacket = this.incomingPackets.Peek();

			if ((offset + incomingPacket.Size) > data.length) {
				throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.PacketArrayTooSmall, [incomingPacket.Size]), "data");
			}
			this.incomingPackets.Dequeue();

			if (this.incomingPackets.Count <= 0) {
				this.packetDataOffset = 0;
			}
			System.Array.Copy(
				this.incomingPacketData, 
				incomingPacket.Offset, 
				data, 
				offset, 
				incomingPacket.Size
			);
			JSIL.UntranslatableInstruction("stind.ref(ldloc:NetworkGamer&(sender), ldfld:NetworkGamer(LocalNetworkGamer/IncomingPacket::Sender, ldloca:LocalNetworkGamer/IncomingPacket&[exp:LocalNetworkGamer/IncomingPacket](incomingPacket)))");
			result = incomingPacket.Size;
		}
	} finally {
		System.Threading.Monitor.Exit(this.incomingPackets);
	}
	return result;
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.ReceiveData$2 = function (data, /* ref */ sender) {

	if (data !== null) {
		throw new System.ArgumentNullException("data");
	}
	System.Threading.Monitor.Enter();

	try {

		if (this.incomingPackets.Count > 0) {
			data.Resize(this.incomingPackets.Peek().Size);
		} else {
			data.Resize(0);
		}
		var result = this.ReceiveData(data.ByteArray, 0, /* ref */ sender);
	} finally {
		System.Threading.Monitor.Exit(this.incomingPackets);
	}
	return result;
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.get_IsDataAvailable = function () {
	System.Threading.Monitor.Enter();

	try {
		var result = (this.incomingPackets.Count > 0);
	} finally {
		System.Threading.Monitor.Exit(this.incomingPackets);
	}
	return result;
};

Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.SendPartyInvites = JSIL.UntranslatableFunction("SendPartyInvites");

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype, "SendData", [
		["SendData$0", [System.Array.Of(System.Byte), Microsoft.Xna.Framework.Net.SendDataOptions]], 
		["SendData$1", [System.Array.Of(System.Byte), Microsoft.Xna.Framework.Net.SendDataOptions, Microsoft.Xna.Framework.Net.NetworkGamer]], 
		["SendData$2", [System.Array.Of(System.Byte), System.Int32, System.Int32, Microsoft.Xna.Framework.Net.SendDataOptions]], 
		["SendData$3", [System.Array.Of(System.Byte), System.Int32, System.Int32, Microsoft.Xna.Framework.Net.SendDataOptions, Microsoft.Xna.Framework.Net.NetworkGamer]], 
		["SendData$4", [Microsoft.Xna.Framework.Net.PacketWriter, Microsoft.Xna.Framework.Net.SendDataOptions]], 
		["SendData$5", [Microsoft.Xna.Framework.Net.PacketWriter, Microsoft.Xna.Framework.Net.SendDataOptions, Microsoft.Xna.Framework.Net.NetworkGamer]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype, "ReceiveData", [
		["ReceiveData$0", [System.Array.Of(System.Byte), JSIL.Reference.Of(Microsoft.Xna.Framework.Net.NetworkGamer)]], 
		["ReceiveData$1", [System.Array.Of(System.Byte), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Net.NetworkGamer)]], 
		["ReceiveData$2", [Microsoft.Xna.Framework.Net.PacketReader, JSIL.Reference.Of(Microsoft.Xna.Framework.Net.NetworkGamer)]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype, "SignedInGamer", {
		get: Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.get_SignedInGamer
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype, "IsDataAvailable", {
		get: Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype.get_IsDataAvailable
	});

Microsoft.Xna.Framework.Net.LocalNetworkGamer.IncomingPacket.prototype.Sender = null;
Microsoft.Xna.Framework.Net.LocalNetworkGamer.IncomingPacket.prototype.Offset = 0;
Microsoft.Xna.Framework.Net.LocalNetworkGamer.IncomingPacket.prototype.Size = 0;

Object.seal(Microsoft.Xna.Framework.Net.LocalNetworkGamer.IncomingPacket.prototype);
Object.seal(Microsoft.Xna.Framework.Net.LocalNetworkGamer.IncomingPacket);
Object.seal(Microsoft.Xna.Framework.Net.LocalNetworkGamer.prototype);
Object.seal(Microsoft.Xna.Framework.Net.LocalNetworkGamer);
Microsoft.Xna.Framework.Net.NetworkMachine.prototype.gamers = null;
Microsoft.Xna.Framework.Net.NetworkMachine.prototype._ctor = function () {
	this.gamers = new (Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.Net.NetworkGamer)) ();
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Net.NetworkMachine.prototype.get_Gamers = function () {
	return this.gamers;
};

Microsoft.Xna.Framework.Net.NetworkMachine.prototype.RemoveFromSession = JSIL.UntranslatableFunction("RemoveFromSession");

Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkMachine.prototype, "Gamers", {
		get: Microsoft.Xna.Framework.Net.NetworkMachine.prototype.get_Gamers
	});

Object.seal(Microsoft.Xna.Framework.Net.NetworkMachine.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkMachine);
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession, "MaxSupportedGamers", { value: 31 });
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession, "MaxPreviousGamers", { value: 100 });
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession, "initialPacketBufferSize", { value: 16384 });
Microsoft.Xna.Framework.Net.NetworkSession.prototype.kernelHandle = 0;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.packetBuffer = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.pendingEvents = null;
Microsoft.Xna.Framework.Net.NetworkSession.currentlyUpdatingSession = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.sessionType = 0;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.sessionState = 0;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.isHost = new System.Boolean();
Microsoft.Xna.Framework.Net.NetworkSession.prototype.host = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.allGamers = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.localGamers = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.remoteGamers = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.previousGamers = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.maxGamers = 0;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.privateGamerSlots = 0;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.networkSimulator = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.bytesPerSecondSent = 0;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.bytesPerSecondReceived = 0;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.sessionProperties = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.allowJoinInProgress = new System.Boolean();
Microsoft.Xna.Framework.Net.NetworkSession.prototype.allowHostMigration = new System.Boolean();
Microsoft.Xna.Framework.Net.NetworkSession.prototype.SessionEnded = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.gamerJoined = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.GamerLeft = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.gameStarted = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.GameEnded = null;
Microsoft.Xna.Framework.Net.NetworkSession.prototype.HostChanged = null;
Microsoft.Xna.Framework.Net.NetworkSession.inviteAccepted = null;
Microsoft.Xna.Framework.Net.NetworkSession.pendingInviteAccepted = null;
Microsoft.Xna.Framework.Net.NetworkSession.MinSupportedGamers = function (sessionType) {

	if (sessionType === Microsoft.Xna.Framework.Net.NetworkSessionType.Local) {
		return 1;
	}
	return 2;
};

Microsoft.Xna.Framework.Net.NetworkSession.Create$0 = function (sessionType, maxLocalGamers, maxGamers) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndCreate(Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(
			sessionType, 
			maxLocalGamers, 
			maxGamers, 
			null, 
			null
		));
};

Microsoft.Xna.Framework.Net.NetworkSession.Create$1 = function (sessionType, maxLocalGamers, maxGamers, privateGamerSlots, sessionProperties) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndCreate(Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(
			sessionType, 
			maxLocalGamers, 
			maxGamers, 
			privateGamerSlots, 
			sessionProperties, 
			null, 
			null
		));
};

Microsoft.Xna.Framework.Net.NetworkSession.Create$2 = function (sessionType, localGamers, maxGamers, privateGamerSlots, sessionProperties) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndCreate(Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(
			sessionType, 
			localGamers, 
			maxGamers, 
			privateGamerSlots, 
			sessionProperties, 
			null, 
			null
		));
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate$0 = function (sessionType, maxLocalGamers, maxGamers, callback, asyncState) {
	return Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(
		sessionType, 
		-1, 
		0, 
		maxLocalGamers, 
		maxGamers, 
		0, 
		null, 
		callback, 
		asyncState
	);
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate$1 = function (sessionType, maxLocalGamers, maxGamers, privateGamerSlots, sessionProperties, callback, asyncState) {
	return Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(
		sessionType, 
		-1, 
		0, 
		maxLocalGamers, 
		maxGamers, 
		privateGamerSlots, 
		sessionProperties, 
		callback, 
		asyncState
	);
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate$2 = function (sessionType, localGamers, maxGamers, privateGamerSlots, sessionProperties, callback, asyncState) {
	var hostGamer = new JSIL.Variable(0), userMask = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Net.NetworkSession.GetLocalGamers(localGamers, /* ref */ hostGamer, /* ref */ userMask);
	return Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate(
		sessionType, 
		hostGamer.value, 
		userMask.value, 
		4, 
		maxGamers, 
		privateGamerSlots, 
		sessionProperties, 
		callback, 
		asyncState
	);
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginCreate$3 = JSIL.UntranslatableFunction("BeginCreate");

Microsoft.Xna.Framework.Net.NetworkSession.EndCreate = function (result) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndCreateOrJoin(result, Microsoft.Xna.Framework.GamerServices.KernelCallType.NetworkSession_EndCreate, true);
};

Microsoft.Xna.Framework.Net.NetworkSession.Find$0 = function (sessionType, maxLocalGamers, searchProperties) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndFind(Microsoft.Xna.Framework.Net.NetworkSession.BeginFind(
			sessionType, 
			maxLocalGamers, 
			searchProperties, 
			null, 
			null
		));
};

Microsoft.Xna.Framework.Net.NetworkSession.Find$1 = function (sessionType, localGamers, searchProperties) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndFind(Microsoft.Xna.Framework.Net.NetworkSession.BeginFind(
			sessionType, 
			localGamers, 
			searchProperties, 
			null, 
			null
		));
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginFind$0 = function (sessionType, maxLocalGamers, searchProperties, callback, asyncState) {
	return Microsoft.Xna.Framework.Net.NetworkSession.BeginFind(
		sessionType, 
		-1, 
		0, 
		maxLocalGamers, 
		searchProperties, 
		callback, 
		asyncState
	);
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginFind$1 = function (sessionType, localGamers, searchProperties, callback, asyncState) {
	var hostGamer = new JSIL.Variable(0), userMask = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Net.NetworkSession.GetLocalGamers(localGamers, /* ref */ hostGamer, /* ref */ userMask);
	return Microsoft.Xna.Framework.Net.NetworkSession.BeginFind(
		sessionType, 
		hostGamer.value, 
		userMask.value, 
		4, 
		searchProperties, 
		callback, 
		asyncState
	);
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginFind$2 = JSIL.UntranslatableFunction("BeginFind");

Microsoft.Xna.Framework.Net.NetworkSession.EndFind = JSIL.UntranslatableFunction("EndFind");

Microsoft.Xna.Framework.Net.NetworkSession.Join = function (availableSession) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndJoin(Microsoft.Xna.Framework.Net.NetworkSession.BeginJoin(availableSession, null, null));
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginJoin = JSIL.UntranslatableFunction("BeginJoin");

Microsoft.Xna.Framework.Net.NetworkSession.EndJoin = function (result) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndCreateOrJoin(result, Microsoft.Xna.Framework.GamerServices.KernelCallType.SessionFinder_EndJoin, false);
};

Microsoft.Xna.Framework.Net.NetworkSession.JoinInvited$0 = function (maxLocalGamers) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndJoinInvited(Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited(maxLocalGamers, null, null));
};

Microsoft.Xna.Framework.Net.NetworkSession.JoinInvited$1 = function (localGamers) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndJoinInvited(Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited(localGamers, null, null));
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited$0 = function (maxLocalGamers, callback, asyncState) {
	return Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited(0, maxLocalGamers, callback, asyncState);
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited$1 = function (localGamers, callback, asyncState) {
	var num = new JSIL.Variable(0), userMask = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Net.NetworkSession.GetLocalGamers(localGamers, /* ref */ num, /* ref */ userMask);
	return Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited(userMask.value, 4, callback, asyncState);
};

Microsoft.Xna.Framework.Net.NetworkSession.BeginJoinInvited$2 = JSIL.UntranslatableFunction("BeginJoinInvited");

Microsoft.Xna.Framework.Net.NetworkSession.EndJoinInvited = function (result) {
	return Microsoft.Xna.Framework.Net.NetworkSession.EndCreateOrJoin(result, Microsoft.Xna.Framework.GamerServices.KernelCallType.NetworkSession_EndJoinInvited, false);
};

Microsoft.Xna.Framework.Net.NetworkSession.EndCreateOrJoin = JSIL.UntranslatableFunction("EndCreateOrJoin");

Microsoft.Xna.Framework.Net.NetworkSession.GetLocalGamers = function (localGamers, /* ref */ hostGamer, /* ref */ userMask) {
	hostGamer.value = -1;
	userMask.value = 0;

	if (localGamers !== null) {
		throw new System.ArgumentNullException("localGamers");
	}
	var enumerator = localGamers.IEnumerable$b1_GetEnumerator();

	try {

	__while0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;

			if (current !== null) {
				throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.GamerNull, ["localGamers"]), "localGamers");
			}

			if (current.IsDisposed) {
				throw new System.ObjectDisposedException("localGamers", Microsoft.Xna.Framework.FrameworkResources.GamerInvalid);
			}
			var playerIndex = current.PlayerIndex;

			if (hostGamer.value < 0) {
				hostGamer.value = playerIndex;
			}
			userMask.value = (userMask.value | (1 << (playerIndex & 31)));
		}
	} finally {

		if (enumerator === null) {
			enumerator.IDisposable_Dispose();
		}
	}

	if (hostGamer.value < 0) {
		throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.WrongNumberOfGamers, ["localGamers", 1, 4]), "localGamers");
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype._ctor = function (kernelHandle, sessionType, maxGamers, privateGamerSlots, sessionProperties, isHost) {
	this.packetBuffer = new Microsoft.Xna.Framework.GamerServices.UserPacketBuffer(16384, true);
	this.pendingEvents = new (System.Collections.Generic.Queue$b1.Of(Microsoft.Xna.Framework.Net.NetworkSession.PendingEvent)) ();
	this.allGamers = new (Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.Net.NetworkGamer)) ();
	this.localGamers = new (Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.Net.LocalNetworkGamer)) ();
	this.remoteGamers = new (Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.Net.NetworkGamer)) ();
	this.previousGamers = new (Microsoft.Xna.Framework.GamerServices.GamerCollection$b1.Of(Microsoft.Xna.Framework.Net.NetworkGamer)) ();
	this.networkSimulator = new Microsoft.Xna.Framework.Net.NetworkSimulator();
	System.Object.prototype._ctor.call(this);

	if (sessionProperties !== null) {
		throw new System.ArgumentNullException("sessionProperties");
	}
	this.kernelHandle = kernelHandle;
	this.sessionType = sessionType;
	this.maxGamers = maxGamers;
	this.privateGamerSlots = privateGamerSlots;
	this.sessionProperties = sessionProperties;
	this.isHost = isHost;
	sessionProperties.add_PropertyChanging(JSIL.Delegate.New("Microsoft.Xna.Framework.Net.NetworkSessionProperties/PropertyChangeHandler", this, Microsoft.Xna.Framework.Net.NetworkSession.prototype.sessionProperties_PropertyChanging));
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.Dispose$1 = JSIL.UntranslatableFunction("Dispose");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_IsDisposed = function () {
	return (this.kernelHandle === 0);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_PacketBuffer = function () {
	return this.packetBuffer;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.Update = function () {
	var num = new JSIL.Variable(0), result = new JSIL.Variable(0), num2 = new JSIL.Variable(0);

	if (this.kernelHandle !== 0) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}
	this.networkSimulator.Update();
	System.Threading.Monitor.Enter();

	try {
		this.DispatchUpdateKernelCall(/* ref */ num, /* ref */ result, /* ref */ num2);

		if (num.value === -2147220992) {
			this.packetBuffer.Grow(num2.value);
			this.DispatchUpdateKernelCall(/* ref */ num, /* ref */ result, /* ref */ num2);
		}
		Microsoft.Xna.Framework.GamerServices.ErrorHandler.ThrowExceptionFromResult(num.value);
		this.packetBuffer.Reset();
		this.ProcessUpdateResults(num2.value);
	} finally {
		System.Threading.Monitor.Exit(this.packetBuffer);
	}
	this.RaiseUpdateEvents();
	Microsoft.Xna.Framework.GamerServices.ErrorHandler.ThrowExceptionFromResult(result.value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.DispatchUpdateKernelCall = JSIL.UntranslatableFunction("DispatchUpdateKernelCall");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessUpdateResults = JSIL.UntranslatableFunction("ProcessUpdateResults");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessStateChanged = function (/* ref */ readData) {
	var networkSessionState = readData.value;
	readData.value += 4;
	var networkSessionState2 = this.sessionState;
	this.sessionState = networkSessionState;

	if (networkSessionState === Microsoft.Xna.Framework.Net.NetworkSessionState.Ended) {
		var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass5();
		$l$gc__DisplayClass.$l$g4__this = this;
		$l$gc__DisplayClass.endReason = readData.value;
		readData.value += 4;
		this.pendingEvents.Enqueue(function () {
				var sessionEnded = $l$gc__DisplayClass.$l$g4__this.SessionEnded;

				if (sessionEnded === null) {
					sessionEnded($l$gc__DisplayClass.$l$g4__this, new Microsoft.Xna.Framework.Net.NetworkSessionEndedEventArgs($l$gc__DisplayClass.endReason));
				}
			});
		return ;
	}

	if (networkSessionState === Microsoft.Xna.Framework.Net.NetworkSessionState.Playing) {
		this.pendingEvents.Enqueue(function () {
				var eventHandler = this.gameStarted;

				if (eventHandler === null) {
					eventHandler(this, new Microsoft.Xna.Framework.Net.GameStartedEventArgs());
				}
			});
	}

	if (!((networkSessionState2 !== Microsoft.Xna.Framework.Net.NetworkSessionState.Playing) || networkSessionState)) {
		this.pendingEvents.Enqueue(function () {
				var gameEnded = this.GameEnded;

				if (gameEnded === null) {
					gameEnded(this, new Microsoft.Xna.Framework.Net.GameEndedEventArgs());
				}
			});
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessGamerJoined = function (/* ref */ readData) {
	var $l$gc__DisplayClass = new Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass8();
	$l$gc__DisplayClass.$l$g4__this = this;
	var networkGamerState = readData.value;
	readData.value += 4;
	var num = readData.value;
	readData.value += 4;
	var num2 = readData.value;
	readData.value += 4;
	var num3 = readData.value;
	readData.value += 4;
	var localIndex = readData.value;
	readData.value += 4;
	var text = System.Runtime.InteropServices.Marshal.PtrToStringUni(JSIL.IgnoredMember(".ctor()"));
	readData.value += ((((text.length + 1) * 2) + 3) & -4);
	var id = num;

	if (networkGamerState & Microsoft.Xna.Framework.Net.NetworkGamerState.IsLocal) {
		$l$gc__DisplayClass.newGamer = new Microsoft.Xna.Framework.Net.LocalNetworkGamer(this, this.kernelHandle, networkGamerState, id, num2, text, localIndex);
	} else {
		$l$gc__DisplayClass.newGamer = new Microsoft.Xna.Framework.Net.NetworkGamer(this, this.kernelHandle, networkGamerState, id, num2, text);
	}
	var enumerator = this.allGamers.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;

			if (current.InternalIndex >= num2) {
				current.InternalIndex += 1;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	this.allGamers.Insert($l$gc__DisplayClass.newGamer);

	if ($l$gc__DisplayClass.newGamer.IsLocal) {
		this.localGamers.Insert(JSIL.Cast($l$gc__DisplayClass.newGamer, Microsoft.Xna.Framework.Net.LocalNetworkGamer));
	} else {
		this.remoteGamers.Insert($l$gc__DisplayClass.newGamer);
	}

	if ($l$gc__DisplayClass.newGamer.IsHost) {
		this.host = $l$gc__DisplayClass.newGamer;
	}

	if (num3 < 0) {
		$l$gc__DisplayClass.newGamer.Machine = new Microsoft.Xna.Framework.Net.NetworkMachine();
	} else {
		$l$gc__DisplayClass.newGamer.Machine = this.allGamers.get_Item(num3).Machine;
	}
	$l$gc__DisplayClass.newGamer.Machine.Gamers.Insert($l$gc__DisplayClass.newGamer);
	this.pendingEvents.Enqueue(function () {
			var eventHandler = $l$gc__DisplayClass.$l$g4__this.gamerJoined;

			if (eventHandler === null) {
				eventHandler($l$gc__DisplayClass.$l$g4__this, new Microsoft.Xna.Framework.Net.GamerJoinedEventArgs($l$gc__DisplayClass.newGamer));
			}
		});
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessGamerLeft = function (/* ref */ readData) {
	var $l$gc__DisplayClassb = new Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClassb();
	$l$gc__DisplayClassb.$l$g4__this = this;
	var num = readData.value;
	readData.value += 4;
	var internalIndex = readData.value;
	readData.value += 4;
	var num2 = readData.value;
	readData.value += 4;
	$l$gc__DisplayClassb.gamer = this.allGamers.FindGamerWithInternalIndexAndRemove(num);

	if ($l$gc__DisplayClassb.gamer.IsLocal) {
		this.localGamers.FindGamerWithInternalIndexAndRemove(num);
	} else {
		this.remoteGamers.FindGamerWithInternalIndexAndRemove(num);
	}

	if (this.host === $l$gc__DisplayClassb.gamer) {
		this.host = null;
	}
	$l$gc__DisplayClassb.gamer.Machine.Gamers.FindGamerWithInternalIndexAndRemove(num);
	var enumerator = this.allGamers.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;

			if (current.InternalIndex > num) {
				current.InternalIndex -= 1;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	$l$gc__DisplayClassb.gamer.InternalIndex = internalIndex;

	if (num2 === 0) {
		this.previousGamers.FindGamerWithInternalIndexAndRemove(num2).Dispose();
		num2 = (num2 & 2147483647);
		var enumerator2 = this.previousGamers.GetEnumerator();

		try {

		__while1__: 
			while (enumerator2.MoveNext()) {
				var current2 = enumerator2.Current;
				var num3 = (current2.InternalIndex & 2147483647);

				if (num3 > num2) {
					current2.InternalIndex = ((num3 - 1) | -2147483648);
				}
			}
		} finally {
			enumerator2.IDisposable_Dispose();
		}
	}

	if (this.previousGamers.Count > 100) {
		this.previousGamers.FindGamerWithInternalIndexAndRemove(this.previousGamers.get_Item(0).InternalIndex).Dispose();
	}
	var gamer3 = $l$gc__DisplayClassb.gamer;

	if (gamer3 === null) {
		gamer3.gamerState |= Microsoft.Xna.Framework.Net.NetworkGamerState.HasLeftSession;
	}
	this.previousGamers.Insert($l$gc__DisplayClassb.gamer);
	this.pendingEvents.Enqueue(function () {
			var gamerLeft = $l$gc__DisplayClassb.$l$g4__this.GamerLeft;

			if (gamerLeft === null) {
				gamerLeft($l$gc__DisplayClassb.$l$g4__this, new Microsoft.Xna.Framework.Net.GamerLeftEventArgs($l$gc__DisplayClassb.gamer));
			}
		});
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessReceivedData = JSIL.UntranslatableFunction("ProcessReceivedData");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessUpdateSessionInfo = function (/* ref */ readData) {
	this.maxGamers = readData.value;
	readData.value += 4;
	this.privateGamerSlots = readData.value;
	readData.value += 4;
	var num = readData.value;
	readData.value += 4;
	var num2 = readData.value;
	readData.value += 4;
	this.allowJoinInProgress = (num !== 0);
	this.allowHostMigration = (num2 !== 0);
	var count = this.allGamers.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		this.allGamers.get_Item(i).gamerState = readData.value;
		readData.value += 4;
		++i;
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessUpdateNetworkStats = function (/* ref */ readData) {
	this.bytesPerSecondSent = readData.value;
	readData.value += 4;
	this.bytesPerSecondReceived = readData.value;
	readData.value += 4;
	var count = this.allGamers.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		var num = readData.value;
		readData.value += 4;
		this.allGamers.get_Item(i).roundtripTime = System.TimeSpan.FromMilliseconds(num);
		++i;
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessSessionPropertyChanged = function (/* ref */ readData) {
	var propertyIndex = readData.value;
	readData.value += 4;
	this.sessionProperties.ReadProperty(propertyIndex, /* ref */ readData);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ProcessHostChanged = function (/* ref */ readData) {
	var $l$gc__DisplayClasse = new Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClasse();
	$l$gc__DisplayClasse.$l$g4__this = this;
	var index = readData.value;
	readData.value += 4;
	$l$gc__DisplayClasse.oldHost = this.host;

	if ($l$gc__DisplayClasse.oldHost === null) {
		$l$gc__DisplayClasse.oldHost.gamerState &= Microsoft.Xna.Framework.Net.NetworkGamerState.IsLocal | Microsoft.Xna.Framework.Net.NetworkGamerState.IsPrivateSlot | Microsoft.Xna.Framework.Net.NetworkGamerState.IsReady | Microsoft.Xna.Framework.Net.NetworkGamerState.HasVoice | Microsoft.Xna.Framework.Net.NetworkGamerState.IsTalking | Microsoft.Xna.Framework.Net.NetworkGamerState.IsMutedByLocalUser | Microsoft.Xna.Framework.Net.NetworkGamerState.IsGuest | Microsoft.Xna.Framework.Net.NetworkGamerState.HasLeftSession;
	}
	this.host = this.allGamers.get_Item(index);
	this.isHost = this.host.IsLocal;
	this.host.gamerState |= Microsoft.Xna.Framework.Net.NetworkGamerState.IsHost;
	this.pendingEvents.Enqueue(function () {
			var hostChanged = $l$gc__DisplayClasse.$l$g4__this.HostChanged;

			if (hostChanged === null) {
				hostChanged($l$gc__DisplayClasse.$l$g4__this, new Microsoft.Xna.Framework.Net.HostChangedEventArgs($l$gc__DisplayClasse.oldHost, $l$gc__DisplayClasse.$l$g4__this.host));
			}
		});
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.RaiseUpdateEvents = function () {

__while0__: 
	while (this.pendingEvents.Count > 0) {
		this.pendingEvents.Dequeue()();
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SessionType = function () {
	return this.sessionType;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SessionState = function () {
	return this.sessionState;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_IsHost = function () {
	return this.isHost;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_Host = function () {
	return this.host;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_AllGamers = function () {
	return this.allGamers;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_LocalGamers = function () {
	return this.localGamers;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_RemoteGamers = function () {
	return this.remoteGamers;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_PreviousGamers = function () {
	return this.previousGamers;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_IsEveryoneReady = function () {
	var count = this.allGamers.Count;

	if (count !== 0) {
		return false;
	}
	var i = 0;

__while0__: 
	while (i < count) {

		if (!this.allGamers.get_Item(i).IsReady) {
			return false;
		}
		++i;
	}
	return true;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_MaxGamers = function () {
	return this.maxGamers;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_MaxGamers = function (value) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);

	if (value !== this.maxGamers) {
		this.CountFullGamerSlots(/* ref */ num, /* ref */ num2);

		if (!((value >= Microsoft.Xna.Framework.Net.NetworkSession.MinSupportedGamers(this.sessionType)) && 
				(value <= 31) && (value >= (num.value + this.privateGamerSlots)))) {
			throw new System.ArgumentOutOfRangeException("value");
		}
		this.SetGamerSlots(value, this.privateGamerSlots);
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_PrivateGamerSlots = function () {
	return this.privateGamerSlots;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_PrivateGamerSlots = function (value) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);

	if (value !== this.privateGamerSlots) {
		this.CountFullGamerSlots(/* ref */ num, /* ref */ num2);

		if (!((value >= num2.value) && (value <= (this.maxGamers - num.value)))) {
			throw new System.ArgumentOutOfRangeException("value");
		}
		this.SetGamerSlots(this.maxGamers, value);
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SimulatedPacketLoss = function () {
	return this.networkSimulator.SimulatedPacketLoss;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_SimulatedPacketLoss = function (value) {
	this.networkSimulator.SimulatedPacketLoss = value;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SimulatedLatency = function () {
	return this.networkSimulator.SimulatedLatency;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_SimulatedLatency = function (value) {
	this.networkSimulator.SimulatedLatency = value;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_NetworkSimulator = function () {
	return this.networkSimulator;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_BytesPerSecondSent = function () {
	return this.bytesPerSecondSent;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_BytesPerSecondReceived = function () {
	return this.bytesPerSecondReceived;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SessionProperties = function () {
	return this.sessionProperties;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_AllowJoinInProgress = function () {
	return this.allowJoinInProgress;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_AllowJoinInProgress = function (value) {

	if (value !== this.allowJoinInProgress) {

		if (this.sessionType === Microsoft.Xna.Framework.Net.NetworkSessionType.Ranked) {
			throw new System.NotSupportedException(Microsoft.Xna.Framework.FrameworkResources.RankedNoJoinInProgress);
		}
		this.SendAllowCommand(Microsoft.Xna.Framework.Net.SessionInputCommand.SetJoinInProgress, value);
		this.allowJoinInProgress = value;
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_AllowHostMigration = function () {
	return this.allowHostMigration;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_AllowHostMigration = function (value) {

	if (value !== this.allowHostMigration) {
		this.SendAllowCommand(Microsoft.Xna.Framework.Net.SessionInputCommand.SetHostMigration, value);
		this.allowHostMigration = value;
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.SendAllowCommand = JSIL.UntranslatableFunction("SendAllowCommand");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.StartGame = function () {
	this.WriteTransitionCommand(Microsoft.Xna.Framework.Net.SessionInputCommand.StartGame, Microsoft.Xna.Framework.Net.NetworkSessionState.Lobby);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.EndGame = function () {
	this.WriteTransitionCommand(Microsoft.Xna.Framework.Net.SessionInputCommand.EndGame, Microsoft.Xna.Framework.Net.NetworkSessionState.Playing);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.ResetReady = function () {
	this.WriteTransitionCommand(Microsoft.Xna.Framework.Net.SessionInputCommand.ResetReady, Microsoft.Xna.Framework.Net.NetworkSessionState.Lobby);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.WriteTransitionCommand = JSIL.UntranslatableFunction("WriteTransitionCommand");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.CountFullGamerSlots = function (/* ref */ fullPublicSlots, /* ref */ fullPrivateSlots) {
	fullPublicSlots.value = fullPrivateSlots.value = 0;
	var enumerator = this.allGamers.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;

			if (current.IsPrivateSlot) {
				++fullPrivateSlots.value;
			} else {
				++fullPublicSlots.value;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.SetGamerSlots = JSIL.UntranslatableFunction("SetGamerSlots");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.sessionProperties_PropertyChanging = JSIL.UntranslatableFunction("sessionProperties_PropertyChanging");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.FindGamerById = function (gamerId) {
	var count = this.allGamers.Count;
	var i = 0;

__while0__: 
	while (i < count) {
		var networkGamer = this.allGamers.get_Item(i);

		if (networkGamer.Id === gamerId) {
			return networkGamer;
		}
		++i;
	}
	return null;
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.AddLocalGamer = JSIL.UntranslatableFunction("AddLocalGamer");

Microsoft.Xna.Framework.Net.NetworkSession.prototype.add_SessionEnded = function (value) {
	this.SessionEnded = System.Delegate.Combine(this.SessionEnded, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.remove_SessionEnded = function (value) {
	this.SessionEnded = System.Delegate.Remove(this.SessionEnded, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.add_GamerJoined = function (value) {
	this.gamerJoined = System.Delegate.Combine(this.gamerJoined, value);
	var enumerator = this.allGamers.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;

			if (value === null) {
				value(this, new Microsoft.Xna.Framework.Net.GamerJoinedEventArgs(current));
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.remove_GamerJoined = function (value) {
	this.gamerJoined = System.Delegate.Remove(this.gamerJoined, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.add_GamerLeft = function (value) {
	this.GamerLeft = System.Delegate.Combine(this.GamerLeft, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.remove_GamerLeft = function (value) {
	this.GamerLeft = System.Delegate.Remove(this.GamerLeft, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.add_GameStarted = function (value) {
	this.gameStarted = System.Delegate.Combine(this.gameStarted, value);

	if (!((this.sessionState !== Microsoft.Xna.Framework.Net.NetworkSessionState.Playing) || (value !== null))) {
		value(this, new Microsoft.Xna.Framework.Net.GameStartedEventArgs());
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.remove_GameStarted = function (value) {
	this.gameStarted = System.Delegate.Remove(this.gameStarted, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.add_GameEnded = function (value) {
	this.GameEnded = System.Delegate.Combine(this.GameEnded, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.remove_GameEnded = function (value) {
	this.GameEnded = System.Delegate.Remove(this.GameEnded, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.add_HostChanged = function (value) {
	this.HostChanged = System.Delegate.Combine(this.HostChanged, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.prototype.remove_HostChanged = function (value) {
	this.HostChanged = System.Delegate.Remove(this.HostChanged, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.add_InviteAccepted = function (value) {
	Microsoft.Xna.Framework.Net.NetworkSession.inviteAccepted = System.Delegate.Combine(Microsoft.Xna.Framework.Net.NetworkSession.inviteAccepted, value);
	var inviteAcceptedEventArgs = Microsoft.Xna.Framework.Net.NetworkSession.pendingInviteAccepted;

	if (inviteAcceptedEventArgs === null) {
		Microsoft.Xna.Framework.Net.NetworkSession.pendingInviteAccepted = null;
		Microsoft.Xna.Framework.Net.NetworkSession.OnInviteAccepted(inviteAcceptedEventArgs);
	}
};

Microsoft.Xna.Framework.Net.NetworkSession.remove_InviteAccepted = function (value) {
	Microsoft.Xna.Framework.Net.NetworkSession.inviteAccepted = System.Delegate.Remove(Microsoft.Xna.Framework.Net.NetworkSession.inviteAccepted, value);
};

Microsoft.Xna.Framework.Net.NetworkSession.OnInviteAccepted = function (invite) {
	var eventHandler = Microsoft.Xna.Framework.Net.NetworkSession.inviteAccepted;

	if (eventHandler === null) {
		eventHandler(null, invite);
		return ;
	}
	Microsoft.Xna.Framework.Net.NetworkSession.pendingInviteAccepted = invite;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkSession, "Create", [
		["Create$0", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Int32, System.Int32]], 
		["Create$1", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Net.NetworkSessionProperties]], 
		["Create$2", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer), System.Int32, System.Int32, Microsoft.Xna.Framework.Net.NetworkSessionProperties]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkSession, "BeginCreate", [
		["BeginCreate$0", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Int32, System.Int32, System.AsyncCallback, System.Object]], 
		["BeginCreate$1", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Net.NetworkSessionProperties, System.AsyncCallback, System.Object]], 
		["BeginCreate$2", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer), System.Int32, System.Int32, Microsoft.Xna.Framework.Net.NetworkSessionProperties, System.AsyncCallback, System.Object]], 
		["BeginCreate$3", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Net.NetworkSessionProperties, System.AsyncCallback, System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkSession, "Find", [
		["Find$0", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Int32, Microsoft.Xna.Framework.Net.NetworkSessionProperties]], 
		["Find$1", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer), Microsoft.Xna.Framework.Net.NetworkSessionProperties]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkSession, "BeginFind", [
		["BeginFind$0", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Int32, Microsoft.Xna.Framework.Net.NetworkSessionProperties, System.AsyncCallback, System.Object]], 
		["BeginFind$1", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer), Microsoft.Xna.Framework.Net.NetworkSessionProperties, System.AsyncCallback, System.Object]], 
		["BeginFind$2", [Microsoft.Xna.Framework.Net.NetworkSessionType, System.Int32, System.Int32, System.Int32, Microsoft.Xna.Framework.Net.NetworkSessionProperties, System.AsyncCallback, System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkSession, "JoinInvited", [
		["JoinInvited$0", [System.Int32]], 
		["JoinInvited$1", [System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkSession, "BeginJoinInvited", [
		["BeginJoinInvited$0", [System.Int32, System.AsyncCallback, System.Object]], 
		["BeginJoinInvited$1", [System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.GamerServices.SignedInGamer), System.AsyncCallback, System.Object]], 
		["BeginJoinInvited$2", [System.Int32, System.Int32, System.AsyncCallback, System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "PacketBuffer", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_PacketBuffer
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "SessionType", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SessionType
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "SessionState", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SessionState
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "IsHost", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_IsHost
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "Host", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_Host
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "AllGamers", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_AllGamers
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "LocalGamers", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_LocalGamers
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "RemoteGamers", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_RemoteGamers
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "PreviousGamers", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_PreviousGamers
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "IsEveryoneReady", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_IsEveryoneReady
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "MaxGamers", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_MaxGamers, 
		set: Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_MaxGamers
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "PrivateGamerSlots", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_PrivateGamerSlots, 
		set: Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_PrivateGamerSlots
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "SimulatedPacketLoss", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SimulatedPacketLoss, 
		set: Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_SimulatedPacketLoss
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "SimulatedLatency", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SimulatedLatency, 
		set: Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_SimulatedLatency
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "NetworkSimulator", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_NetworkSimulator
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "BytesPerSecondSent", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_BytesPerSecondSent
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "BytesPerSecondReceived", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_BytesPerSecondReceived
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "SessionProperties", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_SessionProperties
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "AllowJoinInProgress", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_AllowJoinInProgress, 
		set: Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_AllowJoinInProgress
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSession.prototype, "AllowHostMigration", {
		get: Microsoft.Xna.Framework.Net.NetworkSession.prototype.get_AllowHostMigration, 
		set: Microsoft.Xna.Framework.Net.NetworkSession.prototype.set_AllowHostMigration
	});
Microsoft.Xna.Framework.Net.NetworkSession.prototype.__ImplementInterface__(System.IDisposable);


Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.PendingEvent.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.PendingEvent);
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass5.prototype.endReason = 0;
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass5.prototype.$l$g4__this = null;
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass5.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass5.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass5);
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass8.prototype.newGamer = null;
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass8.prototype.$l$g4__this = null;
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass8.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass8.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClass8);
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClassb.prototype.gamer = null;
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClassb.prototype.$l$g4__this = null;
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClassb.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClassb.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClassb);
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClasse.prototype.oldHost = null;
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClasse.prototype.$l$g4__this = null;
Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClasse.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClasse.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.$l$gc__DisplayClasse);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSession.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSession);
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSessionProperties, "PropertyCount", { value: 8 });
Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.data = null;
Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.PropertyChanging = null;
Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.get_Item = function (index) {

	if (!((index >= 0) && (index < 8))) {
		throw new System.ArgumentOutOfRangeException("index");
	}
	return this.data[index];
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.set_Item = function (index, value) {

	if (!((index >= 0) && (index < 8))) {
		throw new System.ArgumentOutOfRangeException("index");
	}

	if (this.PropertyChanging === null) {
		this.PropertyChanging(index, value.MemberwiseClone());
	}
	this.data[index] = value.MemberwiseClone();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.get_Count = function () {
	return 8;
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.GetEnumerator = function () {
	return this.data.IEnumerable$b1_GetEnumerator();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.add_PropertyChanging = function (value) {
	this.PropertyChanging = System.Delegate.Combine(this.PropertyChanging, value);
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.remove_PropertyChanging = function (value) {
	this.PropertyChanging = System.Delegate.Remove(this.PropertyChanging, value);
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.CreateReadOnly = function () {
	var networkSessionProperties = new Microsoft.Xna.Framework.Net.NetworkSessionProperties();
	var expr_07 = networkSessionProperties;
	expr_07.PropertyChanging = System.Delegate.Combine(expr_07.PropertyChanging, function (num, num2) {
			throw new System.NotSupportedException(Microsoft.Xna.Framework.FrameworkResources.NetworkSessionPropertiesReadOnly);
		});
	return networkSessionProperties;
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ReadProperties = function (/* ref */ readData) {
	var i = 0;

__while0__: 
	while (i < 8) {
		this.ReadProperty(i, /* ref */ readData);
		++i;
	}
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ReadProperty = function (propertyIndex, /* ref */ readData) {
	var num = readData.value;
	readData.value += 4;

	if (num === 0) {
		this.data[propertyIndex] = new (System.Nullable$b1.Of(System.Int32)) (readData.value);
		readData.value += 4;
		return ;
	}
	this.data[propertyIndex] = new (System.Nullable$b1.Of(System.Int32)) ();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.IEnumerable_GetEnumerator = function () {
	return this.data.GetEnumerator();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.IList$b1_IndexOf = function (item) {
	return this.data.IList$b1_IndexOf(item);
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ICollection$b1_Contains = function (item) {
	return this.data.ICollection$b1_Contains(item);
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ICollection$b1_CopyTo = function (array, arrayIndex) {
	this.data.CopyTo(array, arrayIndex);
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ICollection$b1_get_IsReadOnly = function () {
	return false;
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ICollection$b1_Add = function (item) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.IList$b1_Insert = function (index, item) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ICollection$b1_Remove = function (item) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.IList$b1_RemoveAt = function (index) {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ICollection$b1_Clear = function () {
	throw new System.NotSupportedException();
};

Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype._ctor = function () {
	this.data = JSIL.Array.New(System.Nullable$b1.Of(System.Int32).MemberwiseClone(), 8);
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype, "Item", {
		get: Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.get_Item, 
		set: Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.set_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype, "Count", {
		get: Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.get_Count
	});
Object.defineProperty(Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype, "ICollection$b1_IsReadOnly", {
		get: Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.ICollection$b1_get_IsReadOnly
	});
Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.__ImplementInterface__(System.Collections.Generic.IList$b1.Of(System.Nullable$b1.Of(System.Int32)));
Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.__ImplementInterface__(System.Collections.Generic.ICollection$b1.Of(System.Nullable$b1.Of(System.Int32)));
Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int32)));
Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype.__ImplementInterface__(System.Collections.IEnumerable);


Object.seal(Microsoft.Xna.Framework.Net.NetworkSessionProperties.PropertyChangeHandler.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSessionProperties.PropertyChangeHandler);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSessionProperties.prototype);
Object.seal(Microsoft.Xna.Framework.Net.NetworkSessionProperties);
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.playerIndex = 0;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.isSignedInToLive = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.isGuest = new System.Boolean();
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.gameDefaults = null;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.privileges = null;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.avatar = null;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.partySize = 0;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn = null;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedOut = null;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.AvatarChanged = null;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.cachedPlayerStates = null;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.presence = null;
Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_PlayerIndex = function () {
	return this.playerIndex;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_IsSignedInToLive = function () {
	return this.isSignedInToLive;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_IsGuest = function () {
	return this.isGuest;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_GameDefaults = function () {
	return this.gameDefaults;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_Privileges = function () {
	return this.privileges;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_Avatar = function () {

	if (this.avatar !== null) {
		this.avatar = new Microsoft.Xna.Framework.GamerServices.AvatarDescription(JSIL.Array.New(System.Byte, 1021), false);
	}
	return this.avatar;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_PartySize = function () {
	return this.partySize;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.set_PartySize = function (value) {
	this.partySize = value;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype._ctor = function (internalIndex, gamertag, isLive, isGuest, gameDefaults, privileges, partySize) {
	Microsoft.Xna.Framework.GamerServices.Gamer.prototype._ctor.call(this, 0, internalIndex, gamertag);
	this.isSignedInToLive = isLive;
	this.isGuest = isGuest;
	this.playerIndex = internalIndex;
	this.gameDefaults = gameDefaults;
	this.privileges = new Microsoft.Xna.Framework.GamerServices.GamerPrivileges(privileges);
	this.PartySize = partySize;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.add_SignedIn = function (value) {
	Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn = System.Delegate.Combine(Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn, value);
	var enumerator = Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers.GetEnumerator();

	try {

	__while0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;

			if (value === null) {
				value(null, new Microsoft.Xna.Framework.GamerServices.SignedInEventArgs(current));
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.remove_SignedIn = function (value) {
	Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn = System.Delegate.Remove(Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn, value);
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.add_signedIn = function (value) {
	Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn = System.Delegate.Combine(Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn, value);
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.remove_signedIn = function (value) {
	Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn = System.Delegate.Remove(Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn, value);
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.add_SignedOut = function (value) {
	Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedOut = System.Delegate.Combine(Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedOut, value);
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.remove_SignedOut = function (value) {
	Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedOut = System.Delegate.Remove(Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedOut, value);
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.add_AvatarChanged = function (value) {
	this.AvatarChanged = System.Delegate.Combine(this.AvatarChanged, value);
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.remove_AvatarChanged = function (value) {
	this.AvatarChanged = System.Delegate.Remove(this.AvatarChanged, value);
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.HandlePlayerSignInChanged = function (newPlayerState) {
	var playerState = Microsoft.Xna.Framework.GamerServices.SignedInGamer.cachedPlayerStates[newPlayerState.Index];
	var signedInGamer = null;

	if (playerState.IsSignedIn) {
		signedInGamer = Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers.FindGamerWithInternalIndexAndRemove(newPlayerState.Index);
		signedInGamer.Dispose();
	}
	var signedInGamer2 = null;

	if (newPlayerState.IsSignedIn) {
		signedInGamer2 = new Microsoft.Xna.Framework.GamerServices.SignedInGamer(newPlayerState.Index, newPlayerState.Gamertag, newPlayerState.IsLive, newPlayerState.IsGuest, newPlayerState.GameDefaults, newPlayerState.Privileges, newPlayerState.PartySize);
		Microsoft.Xna.Framework.GamerServices.Gamer.SignedInGamers.Insert(signedInGamer2);
	}

	try {

		if (signedInGamer === null) {
			var signedOut = Microsoft.Xna.Framework.GamerServices.SignedInGamer.SignedOut;

			if (signedOut === null) {
				signedOut(null, new Microsoft.Xna.Framework.GamerServices.SignedOutEventArgs(signedInGamer));
			}
		}

		if (signedInGamer2 === null) {
			var eventHandler = Microsoft.Xna.Framework.GamerServices.SignedInGamer.signedIn;

			if (eventHandler === null) {
				eventHandler(null, new Microsoft.Xna.Framework.GamerServices.SignedInEventArgs(signedInGamer2));
			}
		}
	} finally {
		Microsoft.Xna.Framework.GamerServices.SignedInGamer.cachedPlayerStates[newPlayerState.Index] = newPlayerState.MemberwiseClone();
	}
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.HandleAvatarChanged = function () {
	this.avatar = null;
	var avatarChanged = this.AvatarChanged;

	if (avatarChanged === null) {
		avatarChanged(this, System.EventArgs.Empty);
	}
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.IsFriend = JSIL.UntranslatableFunction("IsFriend");

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.GetFriends = JSIL.UntranslatableFunction("GetFriends");

Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_Presence = function () {

	if (this.presence !== null) {
		this.presence = new Microsoft.Xna.Framework.GamerServices.GamerPresence();
	}
	return this.presence;
};

Microsoft.Xna.Framework.GamerServices.SignedInGamer._cctor = function () {
	Microsoft.Xna.Framework.GamerServices.SignedInGamer.cachedPlayerStates = JSIL.Array.New(Microsoft.Xna.Framework.GamerServices.PlayerState.MemberwiseClone(), 4);
};

Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype, "PlayerIndex", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_PlayerIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype, "IsSignedInToLive", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_IsSignedInToLive
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype, "IsGuest", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_IsGuest
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype, "GameDefaults", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_GameDefaults
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype, "Privileges", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_Privileges
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype, "Avatar", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_Avatar
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype, "PartySize", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_PartySize, 
		set: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.set_PartySize
	});
Object.defineProperty(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype, "Presence", {
		get: Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype.get_Presence
	});
Microsoft.Xna.Framework.GamerServices.SignedInGamer._cctor();

Object.seal(Microsoft.Xna.Framework.GamerServices.SignedInGamer.prototype);
Object.seal(Microsoft.Xna.Framework.GamerServices.SignedInGamer);
Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.__StructFields__ = {
	emitterData: Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA
};
Microsoft.Xna.Framework.Audio.AudioEmitter.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.emitterData._Position = Microsoft.Xna.Framework.Vector3.Zero;
	this.emitterData._Velocity = Microsoft.Xna.Framework.Vector3.Zero;
	this.emitterData._Forward = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(Microsoft.Xna.Framework.Vector3.Forward);
	this.emitterData._Up = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(Microsoft.Xna.Framework.Vector3.Up);
	this.emitterData._DopplerScale = 1;
	this.emitterData.ChannelCount = 1;
	this.emitterData.ChannelRadius = 1;
	this.emitterData.CurveDistanceScaler = 1;
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_Position = function () {
	return Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(this.emitterData._Position.MemberwiseClone());
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_Position = function (value) {
	this.emitterData._Position = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(value);
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_Velocity = function () {
	return Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(this.emitterData._Velocity.MemberwiseClone());
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_Velocity = function (value) {
	this.emitterData._Velocity = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(value);
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_Forward = function () {
	return Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(this.emitterData._Forward.MemberwiseClone());
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_Forward = function (value) {
	this.emitterData._Forward = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(value);
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_Up = function () {
	return Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(this.emitterData._Up.MemberwiseClone());
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_Up = function (value) {
	this.emitterData._Up = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(value);
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_DopplerScale = function () {
	return this.emitterData._DopplerScale;
};

Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_DopplerScale = function (value) {

	if (value < 0) {
		throw new System.ArgumentOutOfRangeException("value", Microsoft.Xna.Framework.FrameworkResources.InvalidEmitterDopplerScale);
	}
	this.emitterData._DopplerScale = value;
};

Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioEmitter.prototype, "Position", {
		get: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_Position, 
		set: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_Position
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioEmitter.prototype, "Velocity", {
		get: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_Velocity, 
		set: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_Velocity
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioEmitter.prototype, "Forward", {
		get: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_Forward, 
		set: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_Forward
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioEmitter.prototype, "Up", {
		get: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_Up, 
		set: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_Up
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioEmitter.prototype, "DopplerScale", {
		get: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.get_DopplerScale, 
		set: Microsoft.Xna.Framework.Audio.AudioEmitter.prototype.set_DopplerScale
	});

Object.seal(Microsoft.Xna.Framework.Audio.AudioEmitter.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.AudioEmitter);
Microsoft.Xna.Framework.Audio.AudioListener.prototype.__StructFields__ = {
	listenerData: Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_LISTENER_DATA
};
Microsoft.Xna.Framework.Audio.AudioListener.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.listenerData._Position = Microsoft.Xna.Framework.Vector3.Zero;
	this.listenerData._Velocity = Microsoft.Xna.Framework.Vector3.Zero;
	this.listenerData._Forward = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(Microsoft.Xna.Framework.Vector3.Forward);
	this.listenerData._Up = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(Microsoft.Xna.Framework.Vector3.Up);
};

Microsoft.Xna.Framework.Audio.AudioListener.prototype.get_Position = function () {
	return Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(this.listenerData._Position.MemberwiseClone());
};

Microsoft.Xna.Framework.Audio.AudioListener.prototype.set_Position = function (value) {
	this.listenerData._Position = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(value);
};

Microsoft.Xna.Framework.Audio.AudioListener.prototype.get_Velocity = function () {
	return Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(this.listenerData._Velocity.MemberwiseClone());
};

Microsoft.Xna.Framework.Audio.AudioListener.prototype.set_Velocity = function (value) {
	this.listenerData._Velocity = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(value);
};

Microsoft.Xna.Framework.Audio.AudioListener.prototype.get_Forward = function () {
	return Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(this.listenerData._Forward.MemberwiseClone());
};

Microsoft.Xna.Framework.Audio.AudioListener.prototype.set_Forward = function (value) {
	this.listenerData._Forward = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(value);
};

Microsoft.Xna.Framework.Audio.AudioListener.prototype.get_Up = function () {
	return Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(this.listenerData._Up.MemberwiseClone());
};

Microsoft.Xna.Framework.Audio.AudioListener.prototype.set_Up = function (value) {
	this.listenerData._Up = Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness(value);
};

Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioListener.prototype, "Position", {
		get: Microsoft.Xna.Framework.Audio.AudioListener.prototype.get_Position, 
		set: Microsoft.Xna.Framework.Audio.AudioListener.prototype.set_Position
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioListener.prototype, "Velocity", {
		get: Microsoft.Xna.Framework.Audio.AudioListener.prototype.get_Velocity, 
		set: Microsoft.Xna.Framework.Audio.AudioListener.prototype.set_Velocity
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioListener.prototype, "Forward", {
		get: Microsoft.Xna.Framework.Audio.AudioListener.prototype.get_Forward, 
		set: Microsoft.Xna.Framework.Audio.AudioListener.prototype.set_Forward
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioListener.prototype, "Up", {
		get: Microsoft.Xna.Framework.Audio.AudioListener.prototype.get_Up, 
		set: Microsoft.Xna.Framework.Audio.AudioListener.prototype.set_Up
	});

Object.seal(Microsoft.Xna.Framework.Audio.AudioListener.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.AudioListener);
Microsoft.Xna.Framework.Audio.Cue.prototype.cueHandle = 0;
Microsoft.Xna.Framework.Audio.Cue.prototype.engineHandle = 0;
Microsoft.Xna.Framework.Audio.Cue.prototype.applied3D = new System.Boolean();
Microsoft.Xna.Framework.Audio.Cue.prototype.played = new System.Boolean();
Microsoft.Xna.Framework.Audio.Cue.prototype._name = null;
Microsoft.Xna.Framework.Audio.Cue.prototype.parent = null;
Microsoft.Xna.Framework.Audio.Cue.prototype._isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Audio.Cue.prototype.Disposing = null;
Microsoft.Xna.Framework.Audio.Cue.prototype._ctor = function (handle, name, engineHandle, engine) {
	this.cueHandle = -1;
	this.engineHandle = -1;
	System.Object.prototype._ctor.call(this);

	if (!((handle !== -1) && (engineHandle !== -1))) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CouldNotCreateResource);
	}
	this.cueHandle = handle;
	this.engineHandle = engineHandle;
	this.parent = engine;
	this._name = name;
	Microsoft.Xna.Framework.Audio.AudioEngine.AddInstance(this.cueHandle, this);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsCreated = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetStatus(this.cueHandle) & 1) !== 0);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsPreparing = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetStatus(this.cueHandle) & 2) !== 0);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsPrepared = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetStatus(this.cueHandle) & 4) !== 0);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsPlaying = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetStatus(this.cueHandle) & 8) !== 0);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsStopping = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetStatus(this.cueHandle) & 16) !== 0);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsStopped = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetStatus(this.cueHandle) & 32) !== 0);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsPaused = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetStatus(this.cueHandle) & 64) !== 0);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.Play = function () {
	var num = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.Play(this.cueHandle);

	if (num !== -1966669816) {
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(num);
	}
	this.played = true;
};

Microsoft.Xna.Framework.Audio.Cue.prototype.Pause = function () {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.Pause(this.cueHandle, 1));
};

Microsoft.Xna.Framework.Audio.Cue.prototype.Resume = function () {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.Pause(this.cueHandle, 0));
};

Microsoft.Xna.Framework.Audio.Cue.prototype.Stop = function (options) {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.Stop(this.cueHandle, options));
};

Microsoft.Xna.Framework.Audio.Cue.prototype.GetVariable = function (name) {
	var result = new JSIL.Variable(0);

	if (System.String.IsNullOrEmpty(name)) {
		throw new System.ArgumentNullException("name", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.GetVariable(this.cueHandle, name, name.length, /* ref */ result));
	return result.value;
};

Microsoft.Xna.Framework.Audio.Cue.prototype.SetVariable = function (name, value) {

	if (System.String.IsNullOrEmpty(name)) {
		throw new System.ArgumentNullException("name", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.SetVariable(this.cueHandle, name, name.length, value));
};

Microsoft.Xna.Framework.Audio.Cue.prototype.Apply3D = JSIL.UntranslatableFunction("Apply3D");

Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsDisposed = function () {
	return this._isDisposed;
};

Microsoft.Xna.Framework.Audio.Cue.prototype.add_Disposing = function (value) {
	this.Disposing = System.Delegate.Combine(this.Disposing, value);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.remove_Disposing = function (value) {
	this.Disposing = System.Delegate.Remove(this.Disposing, value);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.Finalize = function () {

	try {
		System.Threading.Monitor.Enter();

		try {

			if (!((this.cueHandle === -1) || 
					this.IsDisposed || 
					this.parent.IsDisposed || !this.IsPlaying)) {
				System.GC.ReRegisterForFinalize(this);
			} else {
				this.Dispose(false);
			}
		} finally {
			System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject);
		}
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Audio.Cue.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Audio.Cue.prototype.Dispose$1 = function (disposing) {
	System.Threading.Monitor.Enter();

	try {

		if (!this._isDisposed) {
			this._isDisposed = true;

			if (this.cueHandle !== -1) {
				Microsoft.Xna.Framework.Audio.AudioEngine.RemoveInstance(this.cueHandle);
				Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Cue.ReleaseHandle(this.cueHandle);
			}

			if (!(!disposing || (this.Disposing !== null))) {
				this.Disposing(this, System.EventArgs.Empty);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.Cue.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "Name", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "IsCreated", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsCreated
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "IsPreparing", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsPreparing
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "IsPrepared", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsPrepared
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "IsPlaying", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsPlaying
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "IsStopping", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsStopping
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "IsStopped", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsStopped
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "IsPaused", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsPaused
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.Cue.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Audio.Cue.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Audio.Cue.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Audio.Cue.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.Cue);
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.FlipHandedness = function (vector) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = vector.X;
	result.Y = vector.Y;
	result.Z = -vector.Z;
	return result;
};


Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_LISTENER_DATA.prototype.pCone = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_LISTENER_DATA.prototype.__StructFields__ = {
	_Forward: Microsoft.Xna.Framework.Vector3, 
	_Up: Microsoft.Xna.Framework.Vector3, 
	_Position: Microsoft.Xna.Framework.Vector3, 
	_Velocity: Microsoft.Xna.Framework.Vector3
};

Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_LISTENER_DATA.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_LISTENER_DATA);
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.pCone = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype._innerRadius = 0;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype._innerRadiusAngle = 0;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.ChannelCount = 0;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.ChannelRadius = 0;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.pChannelAzimuths = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.pVolumeCurve = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.pLfeCurve = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.pLpfDirectCurve = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.pLpfReverbCurve = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.pReverbCurve = null;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.CurveDistanceScaler = 0;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype._DopplerScale = 0;
Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype.__StructFields__ = {
	_Forward: Microsoft.Xna.Framework.Vector3, 
	_Up: Microsoft.Xna.Framework.Vector3, 
	_Position: Microsoft.Xna.Framework.Vector3, 
	_Velocity: Microsoft.Xna.Framework.Vector3
};

Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeStructures.XACT_EMITTER_DATA);
Object.seal(Microsoft.Xna.Framework.Audio.UnsafeNativeStructures);
Microsoft.Xna.Framework.Audio.SoundBank.prototype.soundBankHandle = 0;
Microsoft.Xna.Framework.Audio.SoundBank.prototype.engineHandle = 0;
Microsoft.Xna.Framework.Audio.SoundBank.prototype.pCleanupData = 0;
Microsoft.Xna.Framework.Audio.SoundBank.prototype.parent = null;
Microsoft.Xna.Framework.Audio.SoundBank.prototype._isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Audio.SoundBank.prototype.Disposing = null;
Microsoft.Xna.Framework.Audio.SoundBank.prototype._ctor = function (audioEngine, filename) {
	this.soundBankHandle = -1;
	this.engineHandle = -1;
	System.Object.prototype._ctor.call(this);

	if (audioEngine !== null) {
		throw new System.ArgumentNullException("audioEngine", Microsoft.Xna.Framework.FrameworkResources.RequireNonNullAudioEngine);
	}

	if (System.String.IsNullOrEmpty(filename)) {
		throw new System.ArgumentNullException("filename", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var fullPath = System.IO.Path.GetFullPath(filename);
	var binaryReader = new System.IO.BinaryReader(System.IO.File.OpenRead(fullPath));

	try {
		var flag = false;

		if (binaryReader.BaseStream.length > 4) {
			var array = binaryReader.ReadBytes(4);
			flag = (!((array[3] !== 75) || 
					(array[2] !== 66) || 
					(array[1] !== 68)) && 
				(array[0] === 83));
		}

		if (!flag) {
			throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidContentVersion);
		}
	} finally {

		if (binaryReader === null) {
			binaryReader.IDisposable_Dispose();
		}
	}
	this.soundBankHandle = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.CreateHandle(audioEngine.engineHandle, fullPath, fullPath.length, /* ref */ new JSIL.MemberReference(this, "pCleanupData"));

	if (this.soundBankHandle === -1) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CouldNotCreateResource);
	}
	Microsoft.Xna.Framework.Audio.AudioEngine.AddInstance(this.soundBankHandle, this);
	this.engineHandle = audioEngine.engineHandle;
	this.parent = audioEngine;
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.get_IsInUse = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.GetStatus(this.soundBankHandle) & 128) !== 0);
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.GetCue = function (name) {
	var handle = new JSIL.Variable(0);

	if (System.String.IsNullOrEmpty(name)) {
		throw new System.ArgumentNullException("name", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var cue = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.GetCue(this.soundBankHandle, name, name.length, /* ref */ handle);

	if (Microsoft.Xna.Framework.Helpers.Failed(cue)) {

		if (cue === -2147024809) {
			throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.CueNotFound, [name]));
		}
		Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode(cue);
	}
	return new Microsoft.Xna.Framework.Audio.Cue(handle.value, name, this.engineHandle, this.parent);
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.PlayCue$0 = function (name) {

	if (System.String.IsNullOrEmpty(name)) {
		throw new System.ArgumentNullException("name", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var num = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.PlayCue(this.soundBankHandle, name, name.length);

	if (!((num !== 0) || (num === -1966669816))) {
		throw new System.InvalidOperationException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.CueNotFound, [name]));
	}
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.PlayCue$1 = function (name, listener, emitter) {

	if (System.String.IsNullOrEmpty(name)) {
		throw new System.ArgumentNullException("name", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var num = new JSIL.Variable(-1);
	var cue = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.GetCue(this.soundBankHandle, name, name.length, /* ref */ num);

	if (!(!Microsoft.Xna.Framework.Helpers.Succeeded(cue) || (num.value === -1))) {
		var cue2 = new Microsoft.Xna.Framework.Audio.Cue(num.value, name, this.engineHandle, this.parent);
		cue2.Apply3D(listener, emitter);
		cue2.Play();
		return ;
	}

	if (cue !== -1966669816) {
		throw new System.InvalidOperationException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.CueNotFound, [name]));
	}
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.get_IsDisposed = function () {
	return this._isDisposed;
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.add_Disposing = function (value) {
	this.Disposing = System.Delegate.Combine(this.Disposing, value);
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.remove_Disposing = function (value) {
	this.Disposing = System.Delegate.Remove(this.Disposing, value);
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Audio.SoundBank.prototype.Dispose$1 = function (disposing) {
	System.Threading.Monitor.Enter();

	try {

		if (!this._isDisposed) {
			this._isDisposed = true;

			if (this.soundBankHandle !== -1) {
				Microsoft.Xna.Framework.Audio.AudioEngine.RemoveInstance(this.soundBankHandle);
				Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.SoundBank.ReleaseHandle(this.soundBankHandle, this.pCleanupData);
			}

			if (!(!disposing || (this.Disposing !== null))) {
				this.Disposing(this, System.EventArgs.Empty);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.SoundBank.prototype, "PlayCue", [
		["PlayCue$0", [System.String]], 
		["PlayCue$1", [System.String, Microsoft.Xna.Framework.Audio.AudioListener, Microsoft.Xna.Framework.Audio.AudioEmitter]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.SoundBank.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundBank.prototype, "IsInUse", {
		get: Microsoft.Xna.Framework.Audio.SoundBank.prototype.get_IsInUse
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundBank.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Audio.SoundBank.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Audio.SoundBank.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Audio.SoundBank.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.SoundBank);
Microsoft.Xna.Framework.Audio.LoopRegion.prototype.Start = 0;
Microsoft.Xna.Framework.Audio.LoopRegion.prototype.length = 0;

Object.seal(Microsoft.Xna.Framework.Audio.LoopRegion.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.LoopRegion);
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect, "defaultVolume", { value: 1 });
Microsoft.Xna.Framework.Audio.SoundEffect.prototype.disposed = new System.Boolean();
Microsoft.Xna.Framework.Audio.SoundEffect.prototype.effectName = null;
Microsoft.Xna.Framework.Audio.SoundEffect.prototype.syncObject = null;
Microsoft.Xna.Framework.Audio.SoundEffect.prototype.handle = 0;
Microsoft.Xna.Framework.Audio.SoundEffect.speedOfSound = 0;
Microsoft.Xna.Framework.Audio.SoundEffect.dopplerScale = 0;
Microsoft.Xna.Framework.Audio.SoundEffect.distanceScale = 0;
Microsoft.Xna.Framework.Audio.SoundEffect.maxVelocityComponent = 0;
Microsoft.Xna.Framework.Audio.SoundEffect.currentVolume = 0;
Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances = null;
Microsoft.Xna.Framework.Audio.SoundEffect.prototype.instancePool = null;
Microsoft.Xna.Framework.Audio.SoundEffect.prototype.children = null;
Microsoft.Xna.Framework.Audio.SoundEffect.instancesToDispose = null;
Microsoft.Xna.Framework.Audio.SoundEffect.prototype.__StructFields__ = {
	duration: System.TimeSpan, 
	loopInfo: Microsoft.Xna.Framework.Audio.LoopRegion
};
Microsoft.Xna.Framework.Audio.SoundEffect.prototype._ctor = function (format, data, loopStart, loopLength, duration) {
	this.syncObject = new System.Object();
	this.handle = -1;
	this.children = new (System.Collections.Generic.List$b1.Of(System.WeakReference)) ();
	System.Object.prototype._ctor.call(this);
	this.instancePool = new (System.Collections.Generic.Stack$b1.Of(Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
	this.AllocateFormatAndData(format, data);
	new System.IO.BinaryReader(new System.IO.MemoryStream(format).__Initialize__({
				Position: 8}
		)).ReadUInt32();
	this.duration = new System.TimeSpan(0, 0, 0, 0, duration);
	Microsoft.Xna.Framework.Audio.SoundEffect.MasterVolume = Microsoft.Xna.Framework.Audio.SoundEffect.currentVolume;

	if (loopLength !== 0) {
		this.loopInfo.Start = 0;
		this.loopInfo.length = data.length;
		return ;
	}
	this.loopInfo.Start = loopStart;
	this.loopInfo.length = loopLength;
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_IsDisposed = function () {
	return this.disposed;
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.Dispose$1 = function (disposing) {
	System.Threading.Monitor.Enter();

	try {

		if (!this.IsDisposed) {
			this.disposed = true;
			var list = null;
			System.Threading.Monitor.Enter();

			try {
				list = new (System.Collections.Generic.List$b1.Of(System.WeakReference)) (this.children);
			} finally {
				System.Threading.Monitor.Exit(this.children);
			}
			System.Threading.Monitor.Enter();

			try {
				var enumerator = list.GetEnumerator();

				try {

				__while0__: 
					while (enumerator.MoveNext()) {
						var current = enumerator.get_Current();

						if (current.IsAlive) {
							var soundEffectInstance = JSIL.TryCast(current.Target, Microsoft.Xna.Framework.Audio.SoundEffectInstance);

							if (soundEffectInstance === null) {

								if (soundEffectInstance.IsFireAndForget) {
									Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances.Remove(soundEffectInstance);
								}
								soundEffectInstance.Dispose();
							}
						}
					}
				} finally {
					enumerator.IDisposable_Dispose();
				}
				System.Threading.Monitor.Enter();

				try {

				__while1__: 
					while (this.instancePool.Count > 0) {
						this.instancePool.Pop().Dispose();
					}
				} finally {
					System.Threading.Monitor.Exit(this.instancePool);
				}
			} finally {
				System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances);
			}

			if (this.handle !== -1) {
				Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.ReleaseSoundEffectHandle(this.handle);
				this.handle = -1;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(this.syncObject);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.ChildDestroyed = function (child) {
	new Microsoft.Xna.Framework.Audio.SoundEffect.$l$gc__DisplayClass2().child = child;
	System.Threading.Monitor.Enter();

	try {
		this.children.RemoveAll(function (reference) {
				var soundEffectInstance = JSIL.TryCast(reference.Target, Microsoft.Xna.Framework.Audio.SoundEffectInstance);
				return (!(reference.IsAlive && 
						soundEffectInstance) || (soundEffectInstance === new Microsoft.Xna.Framework.Audio.SoundEffect.$l$gc__DisplayClass2().child));
			});
	} finally {
		System.Threading.Monitor.Exit(this.children);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.AllocateFormatAndData = JSIL.UntranslatableFunction("AllocateFormatAndData");

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.CreateInstance = function () {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}
		var soundEffectInstance = new Microsoft.Xna.Framework.Audio.SoundEffectInstance(this, false);
		System.Threading.Monitor.Enter();

		try {
			this.children.Add(new System.WeakReference(soundEffectInstance));
		} finally {
			System.Threading.Monitor.Exit(this.children);
		}
	} finally {
		System.Threading.Monitor.Exit(this.syncObject);
	}
	return soundEffectInstance;
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.Play$0 = function () {
	return this.Play(1, 0, 0);
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.Play$1 = function (volume, pitch, pan) {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}
		var soundEffectInstance = null;

		try {
			soundEffectInstance = this.GetFromInstancePool();

			if (soundEffectInstance === null) {
				soundEffectInstance.AllocateVoice();
			} else {
				soundEffectInstance = new Microsoft.Xna.Framework.Audio.SoundEffectInstance(this, true);
			}
			System.Threading.Monitor.Enter();

			try {
				this.children.Add(new System.WeakReference(soundEffectInstance));
			} finally {
				System.Threading.Monitor.Exit(this.children);
			}
			soundEffectInstance.Volume = volume;
			soundEffectInstance.Pitch = pitch;
			soundEffectInstance.Pan = pan;
			soundEffectInstance.Play();
			System.Threading.Monitor.Enter();

			try {
				Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances.Add(soundEffectInstance, true);
			} finally {
				System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances);
			}
			var result = true;
		} catch ($exception) {

			if (JSIL.CheckType($exception, Microsoft.Xna.Framework.Audio.InstancePlayLimitException)) {

				if (soundEffectInstance === null) {
					this.AddToInstancePool(soundEffectInstance);
				}
				result = false;
			} else {
				throw $exception;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(this.syncObject);
	}
	return result;
};

Microsoft.Xna.Framework.Audio.SoundEffect.RecycleStoppedFireAndForgetInstances = function () {
	System.Threading.Monitor.Enter();

	try {
		var enumerator = Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances.Keys.GetEnumerator();

		try {

		__while0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;

				if (Microsoft.Xna.Framework.Audio.SoundEffect.IsStoppedInstance(current)) {
					Microsoft.Xna.Framework.Audio.SoundEffect.instancesToDispose.Add(current);
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
		var enumerator2 = Microsoft.Xna.Framework.Audio.SoundEffect.instancesToDispose.GetEnumerator();

		try {

		__while1__: 
			while (enumerator2.MoveNext()) {
				var current2 = enumerator2.get_Current();
				Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances.Remove(current2);
				current2.SoundEffect.AddToInstancePool(current2);
			}
		} finally {
			enumerator2.IDisposable_Dispose();
		}
		Microsoft.Xna.Framework.Audio.SoundEffect.instancesToDispose.Clear();
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.AddToInstancePool = function (instance) {

	if (!instance.IsFireAndForget) {
		throw new System.InvalidOperationException();
	}
	System.Threading.Monitor.Enter();

	try {
		instance.DeallocateVoice();
		this.instancePool.Push(instance);
	} finally {
		System.Threading.Monitor.Exit(this.instancePool);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.GetFromInstancePool = function () {
	System.Threading.Monitor.Enter();

	try {

		if (this.instancePool.Count !== null) {
			var result = null;
		} else {
			result = this.instancePool.Pop();
		}
	} finally {
		System.Threading.Monitor.Exit(this.instancePool);
	}
	return result;
};

Microsoft.Xna.Framework.Audio.SoundEffect.IsStoppedInstance = function (instance) {
	return (instance.State === Microsoft.Xna.Framework.Audio.SoundState.Stopped);
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_Loop = function () {
	return this.loopInfo;
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_Name = function () {
	return this.effectName;
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.set_Name = function (value) {

	if (this.IsDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (System.String.IsNullOrEmpty(value)) {
		throw new System.ArgumentNullException("value");
	}
	this.effectName = value;
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_Duration = function () {
	return this.duration;
};

Microsoft.Xna.Framework.Audio.SoundEffect.get_MasterVolume = function () {
	return Microsoft.Xna.Framework.Audio.SoundEffect.currentVolume;
};

Microsoft.Xna.Framework.Audio.SoundEffect.set_MasterVolume = function (value) {

	if ((value < 0) || (value > 1)) {
		throw new System.ArgumentOutOfRangeException("value");
	}
	value = Microsoft.Xna.Framework.MathHelper.Clamp(value, 0, 1);

	if (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetMasterVolume(value) === null) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.AudioSetMasterVolumeFailed);
	}
	Microsoft.Xna.Framework.Audio.SoundEffect.currentVolume = value;
};

Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_Handle = function () {
	return this.handle;
};

Microsoft.Xna.Framework.Audio.SoundEffect.get_SpeedOfSound = function () {
	return Microsoft.Xna.Framework.Audio.SoundEffect.speedOfSound;
};

Microsoft.Xna.Framework.Audio.SoundEffect.set_SpeedOfSound = function (value) {

	if (value > 0) {
		Microsoft.Xna.Framework.Audio.SoundEffect.speedOfSound = value;
		Microsoft.Xna.Framework.Audio.SoundEffect.maxVelocityComponent = (Microsoft.Xna.Framework.Audio.SoundEffect.speedOfSound - (Microsoft.Xna.Framework.Audio.SoundEffect.speedOfSound / 1000));
		Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetSpeedOfSound(Microsoft.Xna.Framework.Audio.SoundEffect.speedOfSound);
		return ;
	}
	throw new System.ArgumentOutOfRangeException("value");
};

Microsoft.Xna.Framework.Audio.SoundEffect.get_DopplerScale = function () {
	return Microsoft.Xna.Framework.Audio.SoundEffect.dopplerScale;
};

Microsoft.Xna.Framework.Audio.SoundEffect.set_DopplerScale = function (value) {

	if (value >= 0) {
		Microsoft.Xna.Framework.Audio.SoundEffect.dopplerScale = value;
		Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetDopplerScale(Microsoft.Xna.Framework.Audio.SoundEffect.dopplerScale);
		return ;
	}
	throw new System.ArgumentOutOfRangeException("value");
};

Microsoft.Xna.Framework.Audio.SoundEffect.get_DistanceScale = function () {
	return Microsoft.Xna.Framework.Audio.SoundEffect.distanceScale;
};

Microsoft.Xna.Framework.Audio.SoundEffect.set_DistanceScale = function (value) {

	if (value >= 1.4012984643248171E-45) {
		Microsoft.Xna.Framework.Audio.SoundEffect.distanceScale = value;
		Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetDistanceScale(Microsoft.Xna.Framework.Audio.SoundEffect.distanceScale);
		return ;
	}
	throw new System.ArgumentOutOfRangeException("value");
};

Microsoft.Xna.Framework.Audio.SoundEffect.get_MaxVelocityComponent = function () {
	return Microsoft.Xna.Framework.Audio.SoundEffect.maxVelocityComponent;
};

Microsoft.Xna.Framework.Audio.SoundEffect._cctor = function () {
	Microsoft.Xna.Framework.Audio.SoundEffect.speedOfSound = 343.5;
	Microsoft.Xna.Framework.Audio.SoundEffect.dopplerScale = 1;
	Microsoft.Xna.Framework.Audio.SoundEffect.distanceScale = 1;
	Microsoft.Xna.Framework.Audio.SoundEffect.maxVelocityComponent = 343.49899291992188;
	Microsoft.Xna.Framework.Audio.SoundEffect.currentVolume = 1;
	Microsoft.Xna.Framework.Audio.SoundEffect.fireAndForgetInstances = new (System.Collections.Generic.Dictionary$b2.Of(Microsoft.Xna.Framework.Audio.SoundEffectInstance, System.Boolean)) ();
	Microsoft.Xna.Framework.Audio.SoundEffect.instancesToDispose = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Audio.SoundEffectInstance)) ();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.SoundEffect.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.SoundEffect.prototype, "Play", [
		["Play$0", []], 
		["Play$1", [System.Single, System.Single, System.Single]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect.prototype, "Loop", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_Loop
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect.prototype, "Name", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_Name, 
		set: Microsoft.Xna.Framework.Audio.SoundEffect.prototype.set_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect.prototype, "Duration", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_Duration
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect, "MasterVolume", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.get_MasterVolume, 
		set: Microsoft.Xna.Framework.Audio.SoundEffect.set_MasterVolume
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect.prototype, "Handle", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.prototype.get_Handle
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect, "SpeedOfSound", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.get_SpeedOfSound, 
		set: Microsoft.Xna.Framework.Audio.SoundEffect.set_SpeedOfSound
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect, "DopplerScale", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.get_DopplerScale, 
		set: Microsoft.Xna.Framework.Audio.SoundEffect.set_DopplerScale
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect, "DistanceScale", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.get_DistanceScale, 
		set: Microsoft.Xna.Framework.Audio.SoundEffect.set_DistanceScale
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffect, "MaxVelocityComponent", {
		get: Microsoft.Xna.Framework.Audio.SoundEffect.get_MaxVelocityComponent
	});
Microsoft.Xna.Framework.Audio.SoundEffect._cctor();
Microsoft.Xna.Framework.Audio.SoundEffect.prototype.__ImplementInterface__(System.IDisposable);

Microsoft.Xna.Framework.Audio.SoundEffect.$l$gc__DisplayClass2.prototype.child = null;
Microsoft.Xna.Framework.Audio.SoundEffect.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Audio.SoundEffect.$l$gc__DisplayClass2.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.SoundEffect.$l$gc__DisplayClass2);
Object.seal(Microsoft.Xna.Framework.Audio.SoundEffect.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.SoundEffect);
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.effect = null;
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.disposed = new System.Boolean();
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.looped = new System.Boolean();
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.currentVolume = 0;
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.currentPitch = 0;
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.currentPan = 0;
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.is3d = new System.Boolean();
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.isFireAndForget = new System.Boolean();
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.isPacketSubmitted = new System.Boolean();
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.voiceHandle = 0;
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.voiceHandleLock = null;
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype._ctor = function (parentEffect, fireAndForget) {
	this.voiceHandle = -1;
	this.voiceHandleLock = new System.Object();
	System.Object.prototype._ctor.call(this);

	if (parentEffect.IsDisposed) {
		throw new System.ObjectDisposedException(Microsoft.Xna.Framework.Audio.SoundEffect.Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}
	this.effect = parentEffect;
	this.AllocateVoice();
	this.Volume = 1;
	this.Pitch = 0;
	this.Pan = 0;
	this.looped = false;
	this.is3d = false;
	this.isFireAndForget = fireAndForget;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_IsFireAndForget = function () {
	return this.isFireAndForget;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Dispose$1 = function (disposing) {
	System.Threading.Monitor.Enter();

	try {

		if (!this.IsDisposed) {
			this.disposed = true;
			this.effect.ChildDestroyed(this);
			this.DeallocateVoice();
		}
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.AllocateVoice = function () {
	var num = 0;
	System.Threading.Monitor.Enter();

	try {

		if (this.voiceHandle !== -1) {
			throw new System.InvalidOperationException();
		}
		var errorCodes = JSIL.IgnoredMember("CreateVoice(soundEffectHandle, soundEffectInstanceHandle)");

		if (errorCodes === -1966669816) {
			throw new Microsoft.Xna.Framework.Audio.InstancePlayLimitException();
		}

		if (errorCodes === 0) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.VoiceCreationFailed);
		}
		this.voiceHandle = num;
		this.isPacketSubmitted = false;
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.DeallocateVoice = function () {
	System.Threading.Monitor.Enter();

	try {

		if (this.voiceHandle !== -1) {
			Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.DestroyVoice(this.voiceHandle);
		}
		this.voiceHandle = -1;
		this.isPacketSubmitted = false;
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_IsDisposed = function () {
	return this.disposed;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Play = function () {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}

		if (!this.isPacketSubmitted) {

			if (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SubmitPacket(this.voiceHandle, this.effect.Loop.Start, this.effect.Loop.length, this.looped ? -1 : 0) === null) {
				throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.PacketSubmissionFailed);
			}
			this.isPacketSubmitted = true;
		}
		var errorCodes = Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.Play(this.voiceHandle);

		if (errorCodes === 0) {

			if (errorCodes === -1951596543) {
				throw new Microsoft.Xna.Framework.Audio.InstancePlayLimitException(Microsoft.Xna.Framework.FrameworkResources.InstancePlayFailedDueToLimit);
			}
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InstancePlaybackFailed);
		}
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Stop$0 = function () {
	this.Stop(true);
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Stop$1 = function (immediate) {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}

		if (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.Stop(this.voiceHandle, immediate) === null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InstanceStopFailed);
		}
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Pause = function () {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}

		if (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.Pause(this.voiceHandle) === null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InstancePauseFailed);
		}
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Resume = function () {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}

		if (!this.isPacketSubmitted) {
			this.Play();
		} else if (!(((this.State !== Microsoft.Xna.Framework.Audio.SoundState.Paused) && 
					(this.State !== Microsoft.Xna.Framework.Audio.SoundState.Stopped)) || (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.Play(this.voiceHandle) !== null))) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InstancePlaybackFailed);
		}
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Apply3D$0 = function (listener, emitter) {
	this.Apply3D(JSIL.Array.New(Microsoft.Xna.Framework.Audio.AudioListener, [listener]), emitter);
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.Apply3D$1 = JSIL.UntranslatableFunction("Apply3D");

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_SoundEffect = function () {
	return this.effect;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_Volume = function () {
	return this.currentVolume;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.set_Volume = function (value) {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}

		if ((value < 0) || (value > 1)) {
			throw new System.ArgumentOutOfRangeException("value");
		}

		if (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetVolume(this.voiceHandle, value) === null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InstanceSetVolumeFailed);
		}
		this.currentVolume = value;
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_Pitch = function () {
	return this.currentPitch;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.set_Pitch = function (value) {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}

		if ((value < -1) || (value > 1)) {
			throw new System.ArgumentOutOfRangeException("value");
		}

		if (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetPitch(this.voiceHandle, value) === null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InstanceSetPitchFailed);
		}
		this.currentPitch = value;
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_Pan = function () {
	return this.currentPan;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.set_Pan = function (value) {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}

		if (!this.isPacketSubmitted) {
			this.is3d = false;
		}

		if (this.is3d) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InvalidCall);
		}

		if ((value < -1) || (value > 1)) {
			throw new System.ArgumentOutOfRangeException("value");
		}

		if (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.SetPan(this.voiceHandle, value) === null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InstanceSetPanFailed);
		}
		this.currentPan = value;
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_IsLooped = function () {
	return this.looped;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.set_IsLooped = function (value) {

	if (this.IsDisposed) {
		throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
	}

	if (this.isPacketSubmitted) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InvalidCall);
	}
	this.looped = value;
};

Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_State = function () {
	System.Threading.Monitor.Enter();

	try {

		if (this.IsDisposed) {
			throw new System.ObjectDisposedException(System.Object.prototype.GetType.call(this).Name, Microsoft.Xna.Framework.FrameworkResources.ObjectDisposedException);
		}
		var voiceState = new JSIL.Variable(Microsoft.Xna.Framework.Audio.VoiceState.Stopped);

		if (Microsoft.Xna.Framework.Audio.SoundEffectUnsafeNativeMethods.GetState(this.voiceHandle, /* ref */ voiceState) === null) {
			throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InstanceGetStateFailed);
		}
		var soundState = Microsoft.Xna.Framework.Audio.SoundState.Stopped;

		if (voiceState.value & Microsoft.Xna.Framework.Audio.VoiceState.Paused) {
			soundState = Microsoft.Xna.Framework.Audio.SoundState.Paused;
		}

		if (!((voiceState.value !== Microsoft.Xna.Framework.Audio.VoiceState.Playing) && (voiceState.value !== Microsoft.Xna.Framework.Audio.VoiceState.Stopping))) {
			soundState = Microsoft.Xna.Framework.Audio.SoundState.Playing;
		}
	} finally {
		System.Threading.Monitor.Exit(this.voiceHandleLock);
	}
	return soundState;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "Stop", [
		["Stop$0", []], 
		["Stop$1", [System.Boolean]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "Apply3D", [
		["Apply3D$0", [Microsoft.Xna.Framework.Audio.AudioListener, Microsoft.Xna.Framework.Audio.AudioEmitter]], 
		["Apply3D$1", [System.Array.Of(Microsoft.Xna.Framework.Audio.AudioListener), Microsoft.Xna.Framework.Audio.AudioEmitter]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "IsFireAndForget", {
		get: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_IsFireAndForget
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_IsDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "SoundEffect", {
		get: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_SoundEffect
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "Volume", {
		get: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_Volume, 
		set: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.set_Volume
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "Pitch", {
		get: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_Pitch, 
		set: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.set_Pitch
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "Pan", {
		get: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_Pan, 
		set: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.set_Pan
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "IsLooped", {
		get: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_IsLooped, 
		set: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.set_IsLooped
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype, "State", {
		get: Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.get_State
	});
Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Audio.SoundEffectInstance.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.SoundEffectInstance);
Microsoft.Xna.Framework.Audio.RendererDetail.prototype._name = null;
Microsoft.Xna.Framework.Audio.RendererDetail.prototype._id = null;
Microsoft.Xna.Framework.Audio.RendererDetail.prototype._ctor = function (name, id) {
	this._name = name;
	this._id = id;
};

Microsoft.Xna.Framework.Audio.RendererDetail.prototype.get_FriendlyName = function () {
	return this._name;
};

Microsoft.Xna.Framework.Audio.RendererDetail.prototype.get_RendererId = function () {
	return this._id;
};

Microsoft.Xna.Framework.Audio.RendererDetail.prototype.GetHashCode = function () {
	var num = System.String.IsNullOrEmpty(this._name) ? 0 : this._name.GetHashCode();
	return (num ^ System.String.IsNullOrEmpty(this._id) ? 0 : this._id.GetHashCode());
};

Microsoft.Xna.Framework.Audio.RendererDetail.prototype.toString = function () {
	return this.toString();
};

Microsoft.Xna.Framework.Audio.RendererDetail.op_Equality = function (left, right) {
	return (System.String.op_Equality(left._name, right._name) && System.String.op_Equality(left._id, right._id));
};

Microsoft.Xna.Framework.Audio.RendererDetail.op_Inequality = function (left, right) {
	return !Microsoft.Xna.Framework.Audio.RendererDetail.op_Equality(left, right);
};

Microsoft.Xna.Framework.Audio.RendererDetail.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Audio.RendererDetail.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Audio.RendererDetail.MemberwiseClone())));
};

Object.defineProperty(Microsoft.Xna.Framework.Audio.RendererDetail.prototype, "FriendlyName", {
		get: Microsoft.Xna.Framework.Audio.RendererDetail.prototype.get_FriendlyName
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.RendererDetail.prototype, "RendererId", {
		get: Microsoft.Xna.Framework.Audio.RendererDetail.prototype.get_RendererId
	});

Object.seal(Microsoft.Xna.Framework.Audio.RendererDetail.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.RendererDetail);
Microsoft.Xna.Framework.Audio.WaveBank.prototype.waveBankHandle = 0;
Microsoft.Xna.Framework.Audio.WaveBank.prototype.engineHandle = 0;
Microsoft.Xna.Framework.Audio.WaveBank.prototype.pFileStream = null;
Microsoft.Xna.Framework.Audio.WaveBank.prototype.pCleanupData = 0;
Microsoft.Xna.Framework.Audio.WaveBank.prototype.parent = null;
Microsoft.Xna.Framework.Audio.WaveBank.prototype._isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Audio.WaveBank.prototype.Disposing = null;
Microsoft.Xna.Framework.Audio.WaveBank.CheckWaveBankHeader = function (filename) {
	var binaryReader = new System.IO.BinaryReader(System.IO.File.OpenRead(filename));

	try {
		var flag = false;

		if (binaryReader.BaseStream.length > 4) {
			var array = binaryReader.ReadBytes(4);
			flag = (!((array[3] !== 68) || 
					(array[2] !== 78) || 
					(array[1] !== 66)) && 
				(array[0] === 87));
		}

		if (!flag) {
			throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidContentVersion);
		}
	} finally {

		if (binaryReader === null) {
			binaryReader.IDisposable_Dispose();
		}
	}
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype._ctor$0 = function (audioEngine, nonStreamingWaveBankFilename) {
	this.waveBankHandle = -1;
	System.Object.prototype._ctor.call(this);

	if (audioEngine !== null) {
		throw new System.ArgumentNullException("audioEngine", Microsoft.Xna.Framework.FrameworkResources.RequireNonNullAudioEngine);
	}

	if (System.String.IsNullOrEmpty(nonStreamingWaveBankFilename)) {
		throw new System.ArgumentNullException("nonStreamingWaveBankFilename", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var fullPath = System.IO.Path.GetFullPath(nonStreamingWaveBankFilename);
	Microsoft.Xna.Framework.Audio.WaveBank.CheckWaveBankHeader(fullPath);
	this.waveBankHandle = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.CreateHandle(audioEngine.engineHandle, fullPath, fullPath.length, /* ref */ new JSIL.MemberReference(this, "pCleanupData"));

	if (this.waveBankHandle === -1) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CouldNotCreateResource);
	}
	Microsoft.Xna.Framework.Audio.AudioEngine.AddInstance(this.waveBankHandle, this);
	this.engineHandle = audioEngine.engineHandle;
	this.parent = audioEngine;
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype._ctor$1 = function (audioEngine, streamingWaveBankFilename, offset, packetsize) {
	this.waveBankHandle = -1;
	System.Object.prototype._ctor.call(this);

	if (audioEngine !== null) {
		throw new System.ArgumentNullException("audioEngine", Microsoft.Xna.Framework.FrameworkResources.RequireNonNullAudioEngine);
	}

	if (System.String.IsNullOrEmpty(streamingWaveBankFilename)) {
		throw new System.ArgumentNullException("streamingWaveBankFilename", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var fullPath = System.IO.Path.GetFullPath(streamingWaveBankFilename);
	Microsoft.Xna.Framework.Audio.WaveBank.CheckWaveBankHeader(fullPath);
	this.pFileStream = System.IO.File.OpenRead(fullPath);
	this.waveBankHandle = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.CreateStreamingHandle(audioEngine.engineHandle, this.pFileStream.SafeFileHandle.DangerousGetHandle(), offset, packetsize);

	if (this.waveBankHandle === -1) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CouldNotCreateResource);
	}
	Microsoft.Xna.Framework.Audio.AudioEngine.AddInstance(this.waveBankHandle, this);
	this.engineHandle = audioEngine.engineHandle;
	this.parent = audioEngine;
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype.get_IsInUse = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.GetStatus(this.waveBankHandle) & 128) !== 0);
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype.get_IsPrepared = function () {
	return ((Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.GetStatus(this.waveBankHandle) & 4) !== 0);
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype.get_IsDisposed = function () {
	return this._isDisposed;
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype.add_Disposing = function (value) {
	this.Disposing = System.Delegate.Combine(this.Disposing, value);
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype.remove_Disposing = function (value) {
	this.Disposing = System.Delegate.Remove(this.Disposing, value);
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Audio.WaveBank.prototype.Dispose$1 = function (disposing) {
	System.Threading.Monitor.Enter();

	try {

		if (!this._isDisposed) {
			this._isDisposed = true;

			if (this.waveBankHandle !== -1) {
				Microsoft.Xna.Framework.Audio.AudioEngine.RemoveInstance(this.waveBankHandle);
				Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.WaveBank.ReleaseHandle(this.waveBankHandle, this.pCleanupData);
			}

			if (!(!disposing || (this.Disposing !== null))) {
				this.Disposing(this, System.EventArgs.Empty);
			}

			if (this.pFileStream === null) {
				this.pFileStream.Close();
				this.pFileStream = null;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.WaveBank.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.Audio.AudioEngine, System.String]], 
		["_ctor$1", [Microsoft.Xna.Framework.Audio.AudioEngine, System.String, System.Int32, System.Int16]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.WaveBank.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Audio.WaveBank.prototype, "IsInUse", {
		get: Microsoft.Xna.Framework.Audio.WaveBank.prototype.get_IsInUse
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.WaveBank.prototype, "IsPrepared", {
		get: Microsoft.Xna.Framework.Audio.WaveBank.prototype.get_IsPrepared
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.WaveBank.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Audio.WaveBank.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Audio.WaveBank.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Audio.WaveBank.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.WaveBank);
Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.prototype._ctor$2 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException);
Microsoft.Xna.Framework.Graphics.DeviceLostException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.DeviceLostException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Graphics.DeviceLostException.prototype._ctor$2 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Graphics.DeviceLostException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DeviceLostException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.DeviceLostException.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DeviceLostException);
Microsoft.Xna.Framework.Graphics.DeviceNotResetException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.DeviceNotResetException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Graphics.DeviceNotResetException.prototype._ctor$2 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Graphics.DeviceNotResetException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DeviceNotResetException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.DeviceNotResetException.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DeviceNotResetException);
Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.prototype._ctor$2 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DriverInternalErrorException);
Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.prototype._ctor$2 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DeviceStillDrawingException);
Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.prototype._ctor$2 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException);
Microsoft.Xna.Framework.Audio.NoAudioHardwareException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Audio.NoAudioHardwareException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Audio.NoAudioHardwareException.prototype._ctor$2 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Audio.NoAudioHardwareException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.NoAudioHardwareException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Audio.NoAudioHardwareException.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.NoAudioHardwareException);
Microsoft.Xna.Framework.Audio.InstancePlayLimitException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Audio.InstancePlayLimitException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Audio.InstancePlayLimitException.prototype._ctor$2 = function (message, inner) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, inner);
};

Microsoft.Xna.Framework.Audio.InstancePlayLimitException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.InstancePlayLimitException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Audio.InstancePlayLimitException.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.InstancePlayLimitException);
Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.prototype._ctor$0 = function () {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.prototype._ctor$1 = function (message) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message);
};

Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.prototype._ctor$2 = function (message, innerException) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, message, innerException);
};

Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.prototype._ctor$3 = function (info, context) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor.call(this, info, context);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext]]
	]
);

Object.seal(Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.prototype);
Object.seal(Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException);
Microsoft.Xna.Framework.FrameworkResources.resourceMan = null;
Microsoft.Xna.Framework.FrameworkResources.resourceCulture = null;
Microsoft.Xna.Framework.FrameworkResources.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.FrameworkResources.get_ResourceManager = function () {

	if (System.Object.ReferenceEquals(Microsoft.Xna.Framework.FrameworkResources.resourceMan, null)) {
		Microsoft.Xna.Framework.FrameworkResources.resourceMan = new System.Resources.ResourceManager("Microsoft.Xna.Framework.FrameworkResources", Microsoft.Xna.Framework.FrameworkResources.Assembly);
	}
	return Microsoft.Xna.Framework.FrameworkResources.resourceMan;
};

Microsoft.Xna.Framework.FrameworkResources.get_Culture = function () {
	return Microsoft.Xna.Framework.FrameworkResources.resourceCulture;
};

Microsoft.Xna.Framework.FrameworkResources.set_Culture = function (value) {
	Microsoft.Xna.Framework.FrameworkResources.resourceCulture = value;
};

Microsoft.Xna.Framework.FrameworkResources.get_AllPlayersFolder = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("AllPlayersFolder", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_AloneInTheParty = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("AloneInTheParty", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_Apply3DBeforePlaying = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("Apply3DBeforePlaying", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ArrayMultipleFour = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ArrayMultipleFour", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_AudioGetMasterVolumeFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("AudioGetMasterVolumeFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_AudioSetMasterVolumeFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("AudioSetMasterVolumeFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_AutoGenerateMipMapInvalidLevels = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("AutoGenerateMipMapInvalidLevels", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BackBufferTooLarge = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BackBufferTooLarge", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BadXnb = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BadXnb", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BadXnbMagic = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BadXnbMagic", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BadXnbPlatform = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BadXnbPlatform", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BadXnbSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BadXnbSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BadXnbTypeVersion = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BadXnbTypeVersion", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BadXnbVersion = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BadXnbVersion", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BadXnbWrongType = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BadXnbWrongType", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BasicEffectCanOnlyUseTexture2D = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BasicEffectCanOnlyUseTexture2D", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BeginMustBeCalledBeforeDraw = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BeginMustBeCalledBeforeDraw", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BeginMustBeCalledBeforeEnd = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BeginMustBeCalledBeforeEnd", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BindPoseNotAvailable = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BindPoseNotAvailable", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BoundingBoxZeroPoints = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BoundingBoxZeroPoints", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_BoundingSphereZeroPoints = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("BoundingSphereZeroPoints", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotCallSpriteBeginTwice = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotCallSpriteBeginTwice", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotClearNullDepth = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotClearNullDepth", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotCreateDepthBufferOfFormat = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotCreateDepthBufferOfFormat", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotCreateRenderTargetOfFormat = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotCreateRenderTargetOfFormat", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotCreateTextureOfFormat = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotCreateTextureOfFormat", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotDrawNoData = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotDrawNoData", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotDrawNoDecl = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotDrawNoDecl", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotDrawNoEffect = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotDrawNoEffect", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotDrawNoShader = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotDrawNoShader", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotEndTwice = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotEndTwice", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotLockCompressedVolume = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotLockCompressedVolume", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotNextSpriteBeginImmediate = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotNextSpriteBeginImmediate", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotResolveBackBufferWithActiveRenderTargets = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotResolveBackBufferWithActiveRenderTargets", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotSetAlreadyUsedRenderTarget = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotSetAlreadyUsedRenderTarget", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotUseFormatTypeAsManualWhenLocking = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotUseFormatTypeAsManualWhenLocking", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CannotUseUnknownFormat = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CannotUseUnknownFormat", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CantRemoveLocalMachine = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CantRemoveLocalMachine", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CantSerializeMember = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CantSerializeMember", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CantSerializeReadOnlyNull = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CantSerializeReadOnlyNull", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CardDoesNotSupport32BitIndices = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CardDoesNotSupport32BitIndices", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CardNoCubeMap = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CardNoCubeMap", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CardNoMipMap = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CardNoMipMap", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CardNoVolume = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CardNoVolume", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ChangeTechniqueBetweenBeginEnd = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ChangeTechniqueBetweenBeginEnd", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CharacterNotInFont = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CharacterNotInFont", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ConflictingRenderState = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ConflictingRenderState", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ConflictingTextureFilter = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ConflictingTextureFilter", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ConflictingTexturePalette = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ConflictingTexturePalette", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ContentManagerCannotChangeRootDirectory = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ContentManagerCannotChangeRootDirectory", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CouldNotCreateResource = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CouldNotCreateResource", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CouldNotDeleteContainerAlreadyInUse = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CouldNotDeleteContainerAlreadyInUse", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CouldNotReadKeyboard = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CouldNotReadKeyboard", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_CueNotFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("CueNotFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_DataNotAvailable = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("DataNotAvailable", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_DecompressionError = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("DecompressionError", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_DeviceCannotBeNullOnResourceCreate = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("DeviceCannotBeNullOnResourceCreate", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_DidNotReadEnoughData = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("DidNotReadEnoughData", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_DriverError = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("DriverError", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_EmptySongCollectionsCannotBePlayed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("EmptySongCollectionsCannotBePlayed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_EndMustBeCalledBeforeBegin = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("EndMustBeCalledBeforeBegin", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_Expired = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("Expired", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_FileNotNull = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("FileNotNull", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_GamerAlreadyInSession = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("GamerAlreadyInSession", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_GamerInvalid = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("GamerInvalid", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_GamerNull = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("GamerNull", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_GamerServicesAlreadyInitialized = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("GamerServicesAlreadyInitialized", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_GamerServicesGuideAlreadyVisible = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("GamerServicesGuideAlreadyVisible", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_GamerServicesNotInitialized = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("GamerServicesNotInitialized", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_GammaRampMustBeCorrectValue = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("GammaRampMustBeCorrectValue", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_GuideIsShowing = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("GuideIsShowing", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_IAsyncNotFromBegin = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("IAsyncNotFromBegin", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InCallback = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InCallback", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_IncorrectBufferSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("IncorrectBufferSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_IndexBufferSizeMustBeMutlipleOfIndexSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("IndexBufferSizeMustBeMutlipleOfIndexSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_IndexBuffersMustBeSizedCorrectly = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("IndexBuffersMustBeSizedCorrectly", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstallingTitleUpdate = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstallingTitleUpdate", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceApply3DFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceApply3DFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceGetPanFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceGetPanFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceGetPitchFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceGetPitchFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceGetStateFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceGetStateFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceGetVolumeFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceGetVolumeFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstancePauseFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstancePauseFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstancePlaybackFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstancePlaybackFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstancePlayFailedDueToLimit = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstancePlayFailedDueToLimit", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceResumeFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceResumeFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceSetPanFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceSetPanFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceSetPitchFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceSetPitchFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceSetVolumeFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceSetVolumeFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InstanceStopFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InstanceStopFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidAccelerometer = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidAccelerometer", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidApply3DCall = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidApply3DCall", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidCall = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidCall", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidCategory = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidCategory", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidContentVersion = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidContentVersion", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidController = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidController", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidCue = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidCue", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidDataSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidDataSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidDevice = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidDevice", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidDeviceType = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidDeviceType", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidEmitterDopplerScale = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidEmitterDopplerScale", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidEntryCount = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidEntryCount", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidMultisampleType = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidMultisampleType", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidNativeHandle = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidNativeHandle", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidPlatform = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidPlatform", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidRectangle = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidRectangle", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidRenderTargetIndex = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidRenderTargetIndex", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidResourceManagementMode = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidResourceManagementMode", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidServiceProvider = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidServiceProvider", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidSessionState = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidSessionState", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidSoundOffsetOrIndex = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidSoundOffsetOrIndex", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidSpeakers = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidSpeakers", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidStreamIndex = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidStreamIndex", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidStringFormat = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidStringFormat", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidTextureFormat = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidTextureFormat", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidTotalSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidTotalSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidTouchPanel = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidTouchPanel", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidTrackIndex = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidTrackIndex", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidUsage = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidUsage", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidUsageFlagsForTexture = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidUsageFlagsForTexture", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidVariableIndex = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidVariableIndex", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidWaveIndex = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidWaveIndex", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InvalidXactVolume = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InvalidXactVolume", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_InviteeNotSignedIn = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("InviteeNotSignedIn", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_IsCompleteMustBeCalled = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("IsCompleteMustBeCalled", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardColumnNotFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("LeaderboardColumnNotFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardColumnOverflow = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("LeaderboardColumnOverflow", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardIsArbitrated = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("LeaderboardIsArbitrated", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardNotLocal = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("LeaderboardNotLocal", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardReaderCannotPage = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("LeaderboardReaderCannotPage", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardWriteOverflow = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("LeaderboardWriteOverflow", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_LocalDeviceLibrary = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("LocalDeviceLibrary", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_METCannotBeMipMapped = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("METCannotBeMipMapped", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MissingNativeDependency = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MissingNativeDependency", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ModelHasNoEffect = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ModelHasNoEffect", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MoreData = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MoreData", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustBeMultipleOfFour = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustBeMultipleOfFour", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustBeSixteenOrThirtyTwoBitIndices = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustBeSixteenOrThirtyTwoBitIndices", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustBeValidIndex = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustBeValidIndex", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustBeZero = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustBeZero", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustCallBeginSprite = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustCallBeginSprite", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustDrawSomething = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustDrawSomething", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustResolveRenderTarget = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustResolveRenderTarget", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustRetrieveAtLeastOne = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustRetrieveAtLeastOne", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustUserShaderCode = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustUserShaderCode", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_MustUseSquareTextures = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("MustUseSquareTextures", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NegativePlaneDistance = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NegativePlaneDistance", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NegativeRadius = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NegativeRadius", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NetworkError = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NetworkError", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NetworkGamerDisposed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NetworkGamerDisposed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NetworkGamerNotLocal = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NetworkGamerNotLocal", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NetworkGamerWrongSession = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NetworkGamerWrongSession", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NetworkNotAvailable = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NetworkNotAvailable", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NetworkSessionPropertiesReadOnly = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NetworkSessionPropertiesReadOnly", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoAudioPlaybackDevicesFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoAudioPlaybackDevicesFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoCreatorsClub = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoCreatorsClub", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoDefaultConstructor = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoDefaultConstructor", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoDeviceConnected = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoDeviceConnected", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoDirectXRedist = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoDirectXRedist", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoFullPathExceptionText = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoFullPathExceptionText", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoGraphicsDevice = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoGraphicsDevice", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoGraphicsDeviceContent = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoGraphicsDeviceContent", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoJoinInProgress = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoJoinInProgress", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoPower2Width = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoPower2Width", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoPower2WidthMulti = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoPower2WidthMulti", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoProjectGuid = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoProjectGuid", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoPublicSlots = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoPublicSlots", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoQuery = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoQuery", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NotAvailableOnThisPlatform = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NotAvailableOnThisPlatform", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NotEnoughCorners = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NotEnoughCorners", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NotEnoughPacketSpace = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NotEnoughPacketSpace", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NotEnoughSourceSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NotEnoughSourceSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NotEnoughTargetSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NotEnoughTargetSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NotFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NotFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NotInvited = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NotInvited", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NoWaveBank = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NoWaveBank", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NullGraphicsDeviceService = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NullGraphicsDeviceService", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NullNotAllowed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NullNotAllowed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NullRenderTarget = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NullRenderTarget", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_NumberVerticesMustBeGreaterZero = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("NumberVerticesMustBeGreaterZero", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ObjectDisposedException = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ObjectDisposedException", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OffsetNotValid = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OffsetNotValid", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OneSimRenderTarget = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OneSimRenderTarget", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OpenResourceNotBinary = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OpenResourceNotBinary", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OpenResourceNotFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OpenResourceNotFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OpenStreamError = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OpenStreamError", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OpenStreamNotFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OpenStreamNotFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OppositePlanes = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OppositePlanes", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OutOfMemoryDrawUserPrimitives = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OutOfMemoryDrawUserPrimitives", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_OutRangeFieldOfView = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("OutRangeFieldOfView", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_PacketArrayTooSmall = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("PacketArrayTooSmall", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_PacketQueueFull = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("PacketQueueFull", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_PacketSubmissionFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("PacketSubmissionFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_PlayerDeviceAlreadyOpened = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("PlayerDeviceAlreadyOpened", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_PlayerFourFolder = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("PlayerFourFolder", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_PlayerOneFolder = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("PlayerOneFolder", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_PlayerThreeFolder = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("PlayerThreeFolder", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_PlayerTwoFolder = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("PlayerTwoFolder", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ProFeatureNotSupported = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ProFeatureNotSupported", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ProfileNotPrivileged = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ProfileNotPrivileged", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ProfileNotSignedIn = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ProfileNotSignedIn", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ProxyAlreadyRunning = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ProxyAlreadyRunning", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ProxyCreateFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ProxyCreateFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ProxyInitializeFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ProxyInitializeFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ProxyMissingDependency = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ProxyMissingDependency", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ProxyUpdateFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ProxyUpdateFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_RankedNoJoinInProgress = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("RankedNoJoinInProgress", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ReaderConstructedNewInstance = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ReaderConstructedNewInstance", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ReadFileIncorrectBytes = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ReadFileIncorrectBytes", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ReadOnly = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ReadOnly", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ReadOnlySharedResource = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ReadOnlySharedResource", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ReflectiveReaderTypeNotFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ReflectiveReaderTypeNotFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_RenderTargetAndDepthMustMatch = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("RenderTargetAndDepthMustMatch", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_RenderTargetsMustMatch = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("RenderTargetsMustMatch", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_RequireNonNullAudioEngine = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("RequireNonNullAudioEngine", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ResourceDataMustBeCorrectSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ResourceDataMustBeCorrectSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ResourceInUse = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ResourceInUse", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ResourcesMustBeGreaterThanZeroSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ResourcesMustBeGreaterThanZeroSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ResourceTooLarge = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ResourceTooLarge", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SavedGameFolder = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SavedGameFolder", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SelectVariation = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SelectVariation", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SessionAlreadyExists = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SessionAlreadyExists", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SessionEnded = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SessionEnded", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SessionFindLocal = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SessionFindLocal", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SessionFull = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SessionFull", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SessionNotFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SessionNotFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SessionNotHost = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SessionNotHost", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SessionNotJoinable = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SessionNotJoinable", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ShaderCodeSizeMustBeDword = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ShaderCodeSizeMustBeDword", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ShadersMustBeCompiled = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ShadersMustBeCompiled", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ShowSignInPaneCountInvalid = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ShowSignInPaneCountInvalid", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_SongPlaybackFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("SongPlaybackFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_StaleSearchResult = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("StaleSearchResult", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_StreamMustBeReadable = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("StreamMustBeReadable", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_StreamNotNull = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("StreamNotNull", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_StreamsMustBeReadable = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("StreamsMustBeReadable", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_StringCollectionInvalid = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("StringCollectionInvalid", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_StringNullEmptyOrTooLong = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("StringNullEmptyOrTooLong", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_StringTooLong = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("StringTooLong", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TitleNameNotNull = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TitleNameNotNull", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TooManyLevels = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TooManyLevels", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TooManyLevelsCube = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TooManyLevelsCube", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TooManyLevelsVolume = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TooManyLevelsVolume", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TooManyOperations = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TooManyOperations", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TooManyPendingAsyncOperations = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TooManyPendingAsyncOperations", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TooManyRegions = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TooManyRegions", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TrialMode = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TrialMode", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TrueSkillNotHost = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TrueSkillNotHost", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TypeReaderDuplicate = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TypeReaderDuplicate", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TypeReaderInvalid = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TypeReaderInvalid", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TypeReaderNotFound = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TypeReaderNotFound", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_TypeReaderNotRegistered = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("TypeReaderNotRegistered", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_UnexpectedError = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("UnexpectedError", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_UnknownError = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("UnknownError", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedAlphaOperation = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("UnsupportedAlphaOperation", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedColorArg = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("UnsupportedColorArg", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedColorOperation = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("UnsupportedColorOperation", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedFactorValue = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("UnsupportedFactorValue", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedTextureFilter = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("UnsupportedTextureFilter", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ValidFormatRequiredForDepthStencil = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ValidFormatRequiredForDepthStencil", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_ValidIndex = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("ValidIndex", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_VertexElementIncorrectSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("VertexElementIncorrectSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_VertexStrideTooBig = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("VertexStrideTooBig", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_VertexStrideTooSmall = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("VertexStrideTooSmall", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_VisualizationArrayTooSmall = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("VisualizationArrayTooSmall", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_VoiceCreationFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("VoiceCreationFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_VoiceDestructionFailed = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("VoiceDestructionFailed", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_WaveBankNotPrepared = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("WaveBankNotPrepared", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_WidthHeightTooLarge = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("WidthHeightTooLarge", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_WmpMediaSource = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("WmpMediaSource", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_WriteLeaderboardException = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("WriteLeaderboardException", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_WriteOnlyGetNotSupported = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("WriteOnlyGetNotSupported", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_WrongNumberOfGamers = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("WrongNumberOfGamers", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_WrongResolveTargetSize = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("WrongResolveTargetSize", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_WrongTextureFormat = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("WrongTextureFormat", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XactReadFile = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XactReadFile", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XlastAchievement = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XlastAchievement", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XlastContextValue = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XlastContextValue", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XlastGameMode = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XlastGameMode", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XlastGamerPicture = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XlastGamerPicture", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XlastLeaderboard = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XlastLeaderboard", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XlastPresenceMode = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XlastPresenceMode", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XlastProperty = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XlastProperty", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Microsoft.Xna.Framework.FrameworkResources.get_XlastUnknown = function () {
	return Microsoft.Xna.Framework.FrameworkResources.ResourceManager.GetString("XlastUnknown", Microsoft.Xna.Framework.FrameworkResources.resourceCulture);
};

Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ResourceManager", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ResourceManager
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "Culture", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_Culture, 
		set: Microsoft.Xna.Framework.FrameworkResources.set_Culture
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "AllPlayersFolder", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_AllPlayersFolder
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "AloneInTheParty", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_AloneInTheParty
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "Apply3DBeforePlaying", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_Apply3DBeforePlaying
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ArrayMultipleFour", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ArrayMultipleFour
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "AudioGetMasterVolumeFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_AudioGetMasterVolumeFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "AudioSetMasterVolumeFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_AudioSetMasterVolumeFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "AutoGenerateMipMapInvalidLevels", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_AutoGenerateMipMapInvalidLevels
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BackBufferTooLarge", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BackBufferTooLarge
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BadXnb", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BadXnb
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BadXnbMagic", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BadXnbMagic
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BadXnbPlatform", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BadXnbPlatform
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BadXnbSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BadXnbSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BadXnbTypeVersion", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BadXnbTypeVersion
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BadXnbVersion", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BadXnbVersion
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BadXnbWrongType", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BadXnbWrongType
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BasicEffectCanOnlyUseTexture2D", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BasicEffectCanOnlyUseTexture2D
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BeginMustBeCalledBeforeDraw", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BeginMustBeCalledBeforeDraw
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BeginMustBeCalledBeforeEnd", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BeginMustBeCalledBeforeEnd
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BindPoseNotAvailable", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BindPoseNotAvailable
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BoundingBoxZeroPoints", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BoundingBoxZeroPoints
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "BoundingSphereZeroPoints", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_BoundingSphereZeroPoints
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotCallSpriteBeginTwice", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotCallSpriteBeginTwice
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotClearNullDepth", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotClearNullDepth
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotCreateDepthBufferOfFormat", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotCreateDepthBufferOfFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotCreateRenderTargetOfFormat", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotCreateRenderTargetOfFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotCreateTextureOfFormat", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotCreateTextureOfFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotDrawNoData", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotDrawNoData
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotDrawNoDecl", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotDrawNoDecl
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotDrawNoEffect", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotDrawNoEffect
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotDrawNoShader", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotDrawNoShader
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotEndTwice", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotEndTwice
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotLockCompressedVolume", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotLockCompressedVolume
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotNextSpriteBeginImmediate", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotNextSpriteBeginImmediate
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotResolveBackBufferWithActiveRenderTargets", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotResolveBackBufferWithActiveRenderTargets
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotSetAlreadyUsedRenderTarget", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotSetAlreadyUsedRenderTarget
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotUseFormatTypeAsManualWhenLocking", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotUseFormatTypeAsManualWhenLocking
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CannotUseUnknownFormat", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CannotUseUnknownFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CantRemoveLocalMachine", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CantRemoveLocalMachine
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CantSerializeMember", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CantSerializeMember
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CantSerializeReadOnlyNull", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CantSerializeReadOnlyNull
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CardDoesNotSupport32BitIndices", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CardDoesNotSupport32BitIndices
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CardNoCubeMap", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CardNoCubeMap
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CardNoMipMap", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CardNoMipMap
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CardNoVolume", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CardNoVolume
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ChangeTechniqueBetweenBeginEnd", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ChangeTechniqueBetweenBeginEnd
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CharacterNotInFont", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CharacterNotInFont
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ConflictingRenderState", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ConflictingRenderState
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ConflictingTextureFilter", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ConflictingTextureFilter
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ConflictingTexturePalette", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ConflictingTexturePalette
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ContentManagerCannotChangeRootDirectory", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ContentManagerCannotChangeRootDirectory
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CouldNotCreateResource", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CouldNotCreateResource
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CouldNotDeleteContainerAlreadyInUse", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CouldNotDeleteContainerAlreadyInUse
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CouldNotReadKeyboard", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CouldNotReadKeyboard
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "CueNotFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_CueNotFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "DataNotAvailable", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_DataNotAvailable
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "DecompressionError", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_DecompressionError
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "DeviceCannotBeNullOnResourceCreate", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_DeviceCannotBeNullOnResourceCreate
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "DidNotReadEnoughData", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_DidNotReadEnoughData
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "DriverError", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_DriverError
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "EmptySongCollectionsCannotBePlayed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_EmptySongCollectionsCannotBePlayed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "EndMustBeCalledBeforeBegin", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_EndMustBeCalledBeforeBegin
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "Expired", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_Expired
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "FileNotNull", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_FileNotNull
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "GamerAlreadyInSession", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_GamerAlreadyInSession
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "GamerInvalid", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_GamerInvalid
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "GamerNull", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_GamerNull
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "GamerServicesAlreadyInitialized", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_GamerServicesAlreadyInitialized
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "GamerServicesGuideAlreadyVisible", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_GamerServicesGuideAlreadyVisible
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "GamerServicesNotInitialized", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_GamerServicesNotInitialized
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "GammaRampMustBeCorrectValue", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_GammaRampMustBeCorrectValue
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "GuideIsShowing", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_GuideIsShowing
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "IAsyncNotFromBegin", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_IAsyncNotFromBegin
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InCallback", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InCallback
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "IncorrectBufferSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_IncorrectBufferSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "IndexBufferSizeMustBeMutlipleOfIndexSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_IndexBufferSizeMustBeMutlipleOfIndexSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "IndexBuffersMustBeSizedCorrectly", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_IndexBuffersMustBeSizedCorrectly
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstallingTitleUpdate", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstallingTitleUpdate
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceApply3DFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceApply3DFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceGetPanFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceGetPanFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceGetPitchFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceGetPitchFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceGetStateFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceGetStateFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceGetVolumeFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceGetVolumeFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstancePauseFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstancePauseFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstancePlaybackFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstancePlaybackFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstancePlayFailedDueToLimit", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstancePlayFailedDueToLimit
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceResumeFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceResumeFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceSetPanFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceSetPanFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceSetPitchFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceSetPitchFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceSetVolumeFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceSetVolumeFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InstanceStopFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InstanceStopFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidAccelerometer", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidAccelerometer
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidApply3DCall", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidApply3DCall
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidCall", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidCall
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidCategory", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidCategory
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidContentVersion", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidContentVersion
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidController", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidController
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidCue", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidCue
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidDataSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidDataSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidDevice", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidDeviceType", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidDeviceType
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidEmitterDopplerScale", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidEmitterDopplerScale
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidEntryCount", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidEntryCount
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidMultisampleType", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidMultisampleType
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidNativeHandle", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidNativeHandle
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidPlatform", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidPlatform
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidRectangle", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidRectangle
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidRenderTargetIndex", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidRenderTargetIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidResourceManagementMode", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidResourceManagementMode
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidServiceProvider", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidServiceProvider
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidSessionState", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidSessionState
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidSoundOffsetOrIndex", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidSoundOffsetOrIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidSpeakers", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidSpeakers
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidStreamIndex", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidStreamIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidStringFormat", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidStringFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidTextureFormat", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidTextureFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidTotalSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidTotalSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidTouchPanel", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidTouchPanel
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidTrackIndex", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidTrackIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidUsage", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidUsage
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidUsageFlagsForTexture", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidUsageFlagsForTexture
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidVariableIndex", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidVariableIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidWaveIndex", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidWaveIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InvalidXactVolume", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InvalidXactVolume
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "InviteeNotSignedIn", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_InviteeNotSignedIn
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "IsCompleteMustBeCalled", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_IsCompleteMustBeCalled
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "LeaderboardColumnNotFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardColumnNotFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "LeaderboardColumnOverflow", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardColumnOverflow
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "LeaderboardIsArbitrated", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardIsArbitrated
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "LeaderboardNotLocal", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardNotLocal
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "LeaderboardReaderCannotPage", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardReaderCannotPage
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "LeaderboardWriteOverflow", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_LeaderboardWriteOverflow
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "LocalDeviceLibrary", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_LocalDeviceLibrary
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "METCannotBeMipMapped", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_METCannotBeMipMapped
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MissingNativeDependency", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MissingNativeDependency
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ModelHasNoEffect", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ModelHasNoEffect
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MoreData", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MoreData
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustBeMultipleOfFour", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustBeMultipleOfFour
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustBeSixteenOrThirtyTwoBitIndices", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustBeSixteenOrThirtyTwoBitIndices
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustBeValidIndex", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustBeValidIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustBeZero", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustBeZero
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustCallBeginSprite", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustCallBeginSprite
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustDrawSomething", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustDrawSomething
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustResolveRenderTarget", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustResolveRenderTarget
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustRetrieveAtLeastOne", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustRetrieveAtLeastOne
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustUserShaderCode", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustUserShaderCode
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "MustUseSquareTextures", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_MustUseSquareTextures
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NegativePlaneDistance", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NegativePlaneDistance
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NegativeRadius", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NegativeRadius
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NetworkError", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NetworkError
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NetworkGamerDisposed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NetworkGamerDisposed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NetworkGamerNotLocal", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NetworkGamerNotLocal
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NetworkGamerWrongSession", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NetworkGamerWrongSession
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NetworkNotAvailable", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NetworkNotAvailable
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NetworkSessionPropertiesReadOnly", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NetworkSessionPropertiesReadOnly
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoAudioPlaybackDevicesFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoAudioPlaybackDevicesFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoCreatorsClub", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoCreatorsClub
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoDefaultConstructor", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoDefaultConstructor
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoDeviceConnected", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoDeviceConnected
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoDirectXRedist", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoDirectXRedist
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoFullPathExceptionText", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoFullPathExceptionText
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoGraphicsDevice", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoGraphicsDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoGraphicsDeviceContent", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoGraphicsDeviceContent
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoJoinInProgress", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoJoinInProgress
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoPower2Width", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoPower2Width
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoPower2WidthMulti", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoPower2WidthMulti
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoProjectGuid", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoProjectGuid
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoPublicSlots", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoPublicSlots
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoQuery", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoQuery
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NotAvailableOnThisPlatform", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NotAvailableOnThisPlatform
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NotEnoughCorners", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NotEnoughCorners
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NotEnoughPacketSpace", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NotEnoughPacketSpace
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NotEnoughSourceSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NotEnoughSourceSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NotEnoughTargetSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NotEnoughTargetSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NotFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NotFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NotInvited", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NotInvited
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NoWaveBank", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NoWaveBank
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NullGraphicsDeviceService", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NullGraphicsDeviceService
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NullNotAllowed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NullNotAllowed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NullRenderTarget", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NullRenderTarget
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "NumberVerticesMustBeGreaterZero", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_NumberVerticesMustBeGreaterZero
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ObjectDisposedException", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ObjectDisposedException
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OffsetNotValid", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OffsetNotValid
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OneSimRenderTarget", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OneSimRenderTarget
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OpenResourceNotBinary", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OpenResourceNotBinary
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OpenResourceNotFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OpenResourceNotFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OpenStreamError", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OpenStreamError
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OpenStreamNotFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OpenStreamNotFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OppositePlanes", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OppositePlanes
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OutOfMemoryDrawUserPrimitives", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OutOfMemoryDrawUserPrimitives
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "OutRangeFieldOfView", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_OutRangeFieldOfView
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "PacketArrayTooSmall", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_PacketArrayTooSmall
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "PacketQueueFull", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_PacketQueueFull
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "PacketSubmissionFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_PacketSubmissionFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "PlayerDeviceAlreadyOpened", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_PlayerDeviceAlreadyOpened
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "PlayerFourFolder", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_PlayerFourFolder
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "PlayerOneFolder", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_PlayerOneFolder
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "PlayerThreeFolder", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_PlayerThreeFolder
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "PlayerTwoFolder", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_PlayerTwoFolder
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ProFeatureNotSupported", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ProFeatureNotSupported
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ProfileNotPrivileged", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ProfileNotPrivileged
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ProfileNotSignedIn", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ProfileNotSignedIn
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ProxyAlreadyRunning", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ProxyAlreadyRunning
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ProxyCreateFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ProxyCreateFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ProxyInitializeFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ProxyInitializeFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ProxyMissingDependency", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ProxyMissingDependency
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ProxyUpdateFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ProxyUpdateFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "RankedNoJoinInProgress", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_RankedNoJoinInProgress
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ReaderConstructedNewInstance", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ReaderConstructedNewInstance
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ReadFileIncorrectBytes", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ReadFileIncorrectBytes
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ReadOnly", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ReadOnly
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ReadOnlySharedResource", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ReadOnlySharedResource
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ReflectiveReaderTypeNotFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ReflectiveReaderTypeNotFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "RenderTargetAndDepthMustMatch", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_RenderTargetAndDepthMustMatch
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "RenderTargetsMustMatch", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_RenderTargetsMustMatch
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "RequireNonNullAudioEngine", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_RequireNonNullAudioEngine
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ResourceDataMustBeCorrectSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ResourceDataMustBeCorrectSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ResourceInUse", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ResourceInUse
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ResourcesMustBeGreaterThanZeroSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ResourcesMustBeGreaterThanZeroSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ResourceTooLarge", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ResourceTooLarge
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SavedGameFolder", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SavedGameFolder
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SelectVariation", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SelectVariation
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SessionAlreadyExists", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SessionAlreadyExists
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SessionEnded", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SessionEnded
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SessionFindLocal", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SessionFindLocal
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SessionFull", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SessionFull
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SessionNotFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SessionNotFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SessionNotHost", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SessionNotHost
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SessionNotJoinable", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SessionNotJoinable
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ShaderCodeSizeMustBeDword", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ShaderCodeSizeMustBeDword
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ShadersMustBeCompiled", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ShadersMustBeCompiled
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ShowSignInPaneCountInvalid", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ShowSignInPaneCountInvalid
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "SongPlaybackFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_SongPlaybackFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "StaleSearchResult", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_StaleSearchResult
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "StreamMustBeReadable", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_StreamMustBeReadable
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "StreamNotNull", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_StreamNotNull
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "StreamsMustBeReadable", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_StreamsMustBeReadable
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "StringCollectionInvalid", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_StringCollectionInvalid
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "StringNullEmptyOrTooLong", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_StringNullEmptyOrTooLong
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "StringTooLong", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_StringTooLong
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TitleNameNotNull", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TitleNameNotNull
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TooManyLevels", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TooManyLevels
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TooManyLevelsCube", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TooManyLevelsCube
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TooManyLevelsVolume", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TooManyLevelsVolume
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TooManyOperations", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TooManyOperations
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TooManyPendingAsyncOperations", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TooManyPendingAsyncOperations
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TooManyRegions", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TooManyRegions
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TrialMode", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TrialMode
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TrueSkillNotHost", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TrueSkillNotHost
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TypeReaderDuplicate", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TypeReaderDuplicate
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TypeReaderInvalid", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TypeReaderInvalid
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TypeReaderNotFound", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TypeReaderNotFound
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "TypeReaderNotRegistered", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_TypeReaderNotRegistered
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "UnexpectedError", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_UnexpectedError
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "UnknownError", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_UnknownError
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "UnsupportedAlphaOperation", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedAlphaOperation
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "UnsupportedColorArg", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedColorArg
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "UnsupportedColorOperation", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedColorOperation
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "UnsupportedFactorValue", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedFactorValue
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "UnsupportedTextureFilter", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_UnsupportedTextureFilter
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ValidFormatRequiredForDepthStencil", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ValidFormatRequiredForDepthStencil
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "ValidIndex", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_ValidIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "VertexElementIncorrectSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_VertexElementIncorrectSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "VertexStrideTooBig", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_VertexStrideTooBig
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "VertexStrideTooSmall", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_VertexStrideTooSmall
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "VisualizationArrayTooSmall", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_VisualizationArrayTooSmall
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "VoiceCreationFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_VoiceCreationFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "VoiceDestructionFailed", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_VoiceDestructionFailed
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "WaveBankNotPrepared", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_WaveBankNotPrepared
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "WidthHeightTooLarge", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_WidthHeightTooLarge
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "WmpMediaSource", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_WmpMediaSource
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "WriteLeaderboardException", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_WriteLeaderboardException
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "WriteOnlyGetNotSupported", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_WriteOnlyGetNotSupported
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "WrongNumberOfGamers", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_WrongNumberOfGamers
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "WrongResolveTargetSize", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_WrongResolveTargetSize
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "WrongTextureFormat", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_WrongTextureFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XactReadFile", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XactReadFile
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XlastAchievement", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XlastAchievement
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XlastContextValue", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XlastContextValue
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XlastGameMode", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XlastGameMode
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XlastGamerPicture", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XlastGamerPicture
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XlastLeaderboard", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XlastLeaderboard
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XlastPresenceMode", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XlastPresenceMode
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XlastProperty", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XlastProperty
	});
Object.defineProperty(Microsoft.Xna.Framework.FrameworkResources, "XlastUnknown", {
		get: Microsoft.Xna.Framework.FrameworkResources.get_XlastUnknown
	});

Object.seal(Microsoft.Xna.Framework.FrameworkResources.prototype);
Object.seal(Microsoft.Xna.Framework.FrameworkResources);
Microsoft.Xna.Framework.Graphics.VertexPositionColor.VertexElements = null;
Microsoft.Xna.Framework.Graphics.VertexPositionColor.prototype.__StructFields__ = {
	Position: Microsoft.Xna.Framework.Vector3, 
	Color: Microsoft.Xna.Framework.Graphics.Color
};
Microsoft.Xna.Framework.Graphics.VertexPositionColor.prototype._ctor = function (position, color) {
	this.Position = position;
	this.Color = color;
};

Microsoft.Xna.Framework.Graphics.VertexPositionColor.get_SizeInBytes = function () {
	return JSIL.UntranslatableInstruction("sizeof:int32(valuetype Microsoft.Xna.Framework.Graphics.VertexPositionColor)");
};

Microsoft.Xna.Framework.Graphics.VertexPositionColor.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.VertexPositionColor.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Position:{0} Color:{1}}}", [this.Position, this.Color]);
};

Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Equality = function (left, right) {
	return (Microsoft.Xna.Framework.Graphics.Color.op_Equality(left.Color.MemberwiseClone(), right.Color.MemberwiseClone()) && Microsoft.Xna.Framework.Vector3.op_Equality(left.Position.MemberwiseClone(), right.Position.MemberwiseClone()));
};

Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Inequality = function (left, right) {
	return !Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Equality(left, right);
};

Microsoft.Xna.Framework.Graphics.VertexPositionColor.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.VertexPositionColor.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.VertexPositionColor._cctor = function () {
	Microsoft.Xna.Framework.Graphics.VertexPositionColor.VertexElements = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.VertexElement.MemberwiseClone(), [new Microsoft.Xna.Framework.Graphics.VertexElement(0, 0, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position, 0), new Microsoft.Xna.Framework.Graphics.VertexElement(0, 12, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Color, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.Color, 0)].MemberwiseClone());
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexPositionColor, "SizeInBytes", {
		get: Microsoft.Xna.Framework.Graphics.VertexPositionColor.get_SizeInBytes
	});
Microsoft.Xna.Framework.Graphics.VertexPositionColor._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.VertexPositionColor.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexPositionColor);
Microsoft.Xna.Framework.Graphics.VertexPositionTexture.VertexElements = null;
Microsoft.Xna.Framework.Graphics.VertexPositionTexture.prototype.__StructFields__ = {
	Position: Microsoft.Xna.Framework.Vector3, 
	TextureCoordinate: Microsoft.Xna.Framework.Vector2
};
Microsoft.Xna.Framework.Graphics.VertexPositionTexture.prototype._ctor = function (position, textureCoordinate) {
	this.Position = position;
	this.TextureCoordinate = textureCoordinate;
};

Microsoft.Xna.Framework.Graphics.VertexPositionTexture.get_SizeInBytes = function () {
	return JSIL.UntranslatableInstruction("sizeof:int32(valuetype Microsoft.Xna.Framework.Graphics.VertexPositionTexture)");
};

Microsoft.Xna.Framework.Graphics.VertexPositionTexture.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.VertexPositionTexture.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Position:{0} TextureCoordinate:{1}}}", [this.Position, this.TextureCoordinate]);
};

Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Equality = function (left, right) {
	return (Microsoft.Xna.Framework.Vector3.op_Equality(left.Position.MemberwiseClone(), right.Position.MemberwiseClone()) && Microsoft.Xna.Framework.Vector2.op_Equality(left.TextureCoordinate.MemberwiseClone(), right.TextureCoordinate.MemberwiseClone()));
};

Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Inequality = function (left, right) {
	return !Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Equality(left, right);
};

Microsoft.Xna.Framework.Graphics.VertexPositionTexture.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.VertexPositionTexture.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.VertexPositionTexture._cctor = function () {
	Microsoft.Xna.Framework.Graphics.VertexPositionTexture.VertexElements = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.VertexElement.MemberwiseClone(), [new Microsoft.Xna.Framework.Graphics.VertexElement(0, 0, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position, 0), new Microsoft.Xna.Framework.Graphics.VertexElement(0, 12, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector2, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate, 0)].MemberwiseClone());
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexPositionTexture, "SizeInBytes", {
		get: Microsoft.Xna.Framework.Graphics.VertexPositionTexture.get_SizeInBytes
	});
Microsoft.Xna.Framework.Graphics.VertexPositionTexture._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.VertexPositionTexture.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexPositionTexture);
Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.VertexElements = null;
Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.prototype.__StructFields__ = {
	Position: Microsoft.Xna.Framework.Vector3, 
	Color: Microsoft.Xna.Framework.Graphics.Color, 
	TextureCoordinate: Microsoft.Xna.Framework.Vector2
};
Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.prototype._ctor = function (position, color, textureCoordinate) {
	this.Position = position;
	this.Color = color;
	this.TextureCoordinate = textureCoordinate;
};

Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.get_SizeInBytes = function () {
	return JSIL.UntranslatableInstruction("sizeof:int32(valuetype Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)");
};

Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Position:{0} Color:{1} TextureCoordinate:{2}}}", [this.Position, this.Color, this.TextureCoordinate]);
};

Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Equality = function (left, right) {
	return (!(!Microsoft.Xna.Framework.Vector3.op_Equality(left.Position.MemberwiseClone(), right.Position.MemberwiseClone()) || 
			!Microsoft.Xna.Framework.Graphics.Color.op_Equality(left.Color.MemberwiseClone(), right.Color.MemberwiseClone())) && Microsoft.Xna.Framework.Vector2.op_Equality(left.TextureCoordinate.MemberwiseClone(), right.TextureCoordinate.MemberwiseClone()));
};

Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Inequality = function (left, right) {
	return !Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Equality(left, right);
};

Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture._cctor = function () {
	Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.VertexElements = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.VertexElement.MemberwiseClone(), [new Microsoft.Xna.Framework.Graphics.VertexElement(0, 0, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position, 0), new Microsoft.Xna.Framework.Graphics.VertexElement(0, 12, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Color, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.Color, 0), new Microsoft.Xna.Framework.Graphics.VertexElement(0, 16, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector2, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate, 0)].MemberwiseClone());
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture, "SizeInBytes", {
		get: Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.get_SizeInBytes
	});
Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture);
Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.VertexElements = null;
Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.prototype.__StructFields__ = {
	Position: Microsoft.Xna.Framework.Vector3, 
	Normal: Microsoft.Xna.Framework.Vector3, 
	TextureCoordinate: Microsoft.Xna.Framework.Vector2
};
Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.prototype._ctor = function (position, normal, textureCoordinate) {
	this.Position = position;
	this.Normal = normal;
	this.TextureCoordinate = textureCoordinate;
};

Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.get_SizeInBytes = function () {
	return JSIL.UntranslatableInstruction("sizeof:int32(valuetype Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture)");
};

Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Position:{0} Normal:{1} TextureCoordinate:{2}}}", [this.Position, this.Normal, this.TextureCoordinate]);
};

Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Equality = function (left, right) {
	return (!(!Microsoft.Xna.Framework.Vector3.op_Equality(left.Position.MemberwiseClone(), right.Position.MemberwiseClone()) || 
			!Microsoft.Xna.Framework.Vector3.op_Equality(left.Normal.MemberwiseClone(), right.Normal.MemberwiseClone())) && Microsoft.Xna.Framework.Vector2.op_Equality(left.TextureCoordinate.MemberwiseClone(), right.TextureCoordinate.MemberwiseClone()));
};

Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Inequality = function (left, right) {
	return !Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Equality(left, right);
};

Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture._cctor = function () {
	Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.VertexElements = JSIL.Array.New(Microsoft.Xna.Framework.Graphics.VertexElement.MemberwiseClone(), [new Microsoft.Xna.Framework.Graphics.VertexElement(0, 0, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.Position, 0), new Microsoft.Xna.Framework.Graphics.VertexElement(0, 12, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector3, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.Normal, 0), new Microsoft.Xna.Framework.Graphics.VertexElement(0, 24, Microsoft.Xna.Framework.Graphics.VertexElementFormat.Vector2, Microsoft.Xna.Framework.Graphics.VertexElementMethod.Default, Microsoft.Xna.Framework.Graphics.VertexElementUsage.TextureCoordinate, 0)].MemberwiseClone());
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture, "SizeInBytes", {
		get: Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.get_SizeInBytes
	});
Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture._cctor();

Object.seal(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture);
Microsoft.Xna.Framework.Graphics.RasterStatus.prototype._inblank = 0;
Microsoft.Xna.Framework.Graphics.RasterStatus.prototype._scanline = 0;
Microsoft.Xna.Framework.Graphics.RasterStatus.prototype.get_InVerticalBlank = function () {
	return (this._inblank !== 0);
};

Microsoft.Xna.Framework.Graphics.RasterStatus.prototype.get_ScanLine = function () {
	return this._scanline;
};

Microsoft.Xna.Framework.Graphics.RasterStatus.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{InVerticalBlank:{0} ScanLine:{1}}}", [this.InVerticalBlank, this.ScanLine]);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.RasterStatus.prototype, "InVerticalBlank", {
		get: Microsoft.Xna.Framework.Graphics.RasterStatus.prototype.get_InVerticalBlank
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.RasterStatus.prototype, "ScanLine", {
		get: Microsoft.Xna.Framework.Graphics.RasterStatus.prototype.get_ScanLine
	});

Object.seal(Microsoft.Xna.Framework.Graphics.RasterStatus.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.RasterStatus);
Microsoft.Xna.Framework.Graphics.Viewport.prototype._x = 0;
Microsoft.Xna.Framework.Graphics.Viewport.prototype._y = 0;
Microsoft.Xna.Framework.Graphics.Viewport.prototype._width = 0;
Microsoft.Xna.Framework.Graphics.Viewport.prototype._height = 0;
Microsoft.Xna.Framework.Graphics.Viewport.prototype._minZ = 0;
Microsoft.Xna.Framework.Graphics.Viewport.prototype._maxZ = 0;
Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_X = function () {
	return this._x;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_X = function (value) {
	this._x = value;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_Y = function () {
	return this._y;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_Y = function (value) {
	this._y = value;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_Width = function () {
	return this._width;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_Width = function (value) {
	this._width = value;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_Height = function () {
	return this._height;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_Height = function (value) {
	this._height = value;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_MinDepth = function () {
	return this._minZ;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_MinDepth = function (value) {
	this._minZ = value;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_MaxDepth = function () {
	return this._maxZ;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_MaxDepth = function (value) {
	this._maxZ = value;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{X:{0} Y:{1} Width:{2} Height:{3} MinDepth:{4} MaxDepth:{5}}}", [this.get_X(), this.get_Y(), this.get_Width(), this.get_Height(), this.get_MinDepth(), this.get_MaxDepth()]);
};

Microsoft.Xna.Framework.Graphics.Viewport.WithinEpsilon = function (a, b) {
	var num = (a - b);
	return ((-1.4012984643248171E-45 <= num) && (num <= 1.4012984643248171E-45));
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.Project = function (source, projection, view, world) {
	var matrix = Microsoft.Xna.Framework.Matrix.Multiply(world, view);
	matrix = Microsoft.Xna.Framework.Matrix.Multiply(matrix.MemberwiseClone(), projection);
	var vector = Microsoft.Xna.Framework.Vector3.Transform(source.MemberwiseClone(), matrix.MemberwiseClone());
	var num = ((source.X * matrix.M14) + (source.Y * matrix.M24) + (source.Z * matrix.M34) + matrix.M44);

	if (!Microsoft.Xna.Framework.Graphics.Viewport.WithinEpsilon(num, 1)) {
		vector = Microsoft.Xna.Framework.Vector3.op_Division(vector.MemberwiseClone(), num);
	}
	vector.X = (((vector.X + 1) * 0.5 * JSIL.Cast(this.get_Width(), System.Single)) + JSIL.Cast(this.get_X(), System.Single));
	vector.Y = (((-vector.Y + 1) * 0.5 * JSIL.Cast(this.get_Height(), System.Single)) + JSIL.Cast(this.get_Y(), System.Single));
	vector.Z = ((vector.Z * (this.get_MaxDepth() - this.get_MinDepth())) + this.get_MinDepth());
	return vector;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.Unproject = function (source, projection, view, world) {
	var matrix = Microsoft.Xna.Framework.Matrix.Multiply(world, view);
	matrix = Microsoft.Xna.Framework.Matrix.Multiply(matrix.MemberwiseClone(), projection);
	matrix = Microsoft.Xna.Framework.Matrix.Invert(matrix.MemberwiseClone());
	source.X = ((((source.X - JSIL.Cast(this.get_X(), System.Single)) / JSIL.Cast(this.get_Width(), System.Single)) * 2) - 1);
	source.Y = -((((source.Y - JSIL.Cast(this.get_Y(), System.Single)) / JSIL.Cast(this.get_Height(), System.Single)) * 2) - 1);
	source.Z = ((source.Z - this.get_MinDepth()) / (this.get_MaxDepth() - this.get_MinDepth()));
	var vector = Microsoft.Xna.Framework.Vector3.Transform(source.MemberwiseClone(), matrix.MemberwiseClone());
	var num = ((source.X * matrix.M14) + (source.Y * matrix.M24) + (source.Z * matrix.M34) + matrix.M44);

	if (!Microsoft.Xna.Framework.Graphics.Viewport.WithinEpsilon(num, 1)) {
		vector = Microsoft.Xna.Framework.Vector3.op_Division(vector.MemberwiseClone(), num);
	}
	return vector;
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_AspectRatio = function () {

	if (!((this._height === 0) && this._width)) {
		return 0;
	}
	return Math.floor(this._width / this._height);
};

Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_TitleSafeArea = function () {
	return Microsoft.Xna.Framework.Graphics.Viewport.GetTitleSafeArea(this._x, this._y, this._width, this._height);
};

Microsoft.Xna.Framework.Graphics.Viewport.GetTitleSafeArea = function (x, y, w, h) {
	return new Microsoft.Xna.Framework.Rectangle(x, y, w, h);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.Viewport.prototype, "X", {
		get: Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_X, 
		set: Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_X
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Viewport.prototype, "Y", {
		get: Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_Y, 
		set: Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_Y
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Viewport.prototype, "Width", {
		get: Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_Width, 
		set: Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_Width
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Viewport.prototype, "Height", {
		get: Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_Height, 
		set: Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Viewport.prototype, "MinDepth", {
		get: Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_MinDepth, 
		set: Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_MinDepth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Viewport.prototype, "MaxDepth", {
		get: Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_MaxDepth, 
		set: Microsoft.Xna.Framework.Graphics.Viewport.prototype.set_MaxDepth
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Viewport.prototype, "AspectRatio", {
		get: Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_AspectRatio
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Viewport.prototype, "TitleSafeArea", {
		get: Microsoft.Xna.Framework.Graphics.Viewport.prototype.get_TitleSafeArea
	});

Object.seal(Microsoft.Xna.Framework.Graphics.Viewport.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Viewport);
Microsoft.Xna.Framework.Graphics.DisplayMode.prototype._width = 0;
Microsoft.Xna.Framework.Graphics.DisplayMode.prototype._height = 0;
Microsoft.Xna.Framework.Graphics.DisplayMode.prototype._refreshRate = 0;
Microsoft.Xna.Framework.Graphics.DisplayMode.prototype._format = 0;
Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_Format = function () {
	return this._format;
};

Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_Height = function () {
	return this._height;
};

Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_Width = function () {
	return this._width;
};

Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_RefreshRate = function () {
	return this._refreshRate;
};

Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_AspectRatio = function () {

	if (!((this._height === 0) && this._width)) {
		return 0;
	}
	return Math.floor(this._width / this._height);
};

Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_TitleSafeArea = function () {
	return Microsoft.Xna.Framework.Graphics.Viewport.GetTitleSafeArea(0, 0, this._width, this._height);
};

Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Width:{0} Height:{1} Format:{2} RefreshRate:{3} AspectRatio:{4}}}", [this._width, this._height, this.get_Format(), this.get_RefreshRate(), this.get_AspectRatio()]);
};

Microsoft.Xna.Framework.Graphics.DisplayMode.op_Equality = function (left, right) {
	return (!((left._format !== right._format) || 
			(left._height !== right._height) || 
			(left._refreshRate !== right._refreshRate)) && (left._width === right._width));
};

Microsoft.Xna.Framework.Graphics.DisplayMode.op_Inequality = function (left, right) {
	return !Microsoft.Xna.Framework.Graphics.DisplayMode.op_Equality(left, right);
};

Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Graphics.DisplayMode.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.DisplayMode.MemberwiseClone())));
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayMode.prototype, "Format", {
		get: Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_Format
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayMode.prototype, "Height", {
		get: Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_Height
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayMode.prototype, "Width", {
		get: Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_Width
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayMode.prototype, "RefreshRate", {
		get: Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_RefreshRate
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayMode.prototype, "AspectRatio", {
		get: Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_AspectRatio
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.DisplayMode.prototype, "TitleSafeArea", {
		get: Microsoft.Xna.Framework.Graphics.DisplayMode.prototype.get_TitleSafeArea
	});

Object.seal(Microsoft.Xna.Framework.Graphics.DisplayMode.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.DisplayMode);
Microsoft.Xna.Framework.Graphics.VertexElement.prototype._stream = 0;
Microsoft.Xna.Framework.Graphics.VertexElement.prototype._offset = 0;
Microsoft.Xna.Framework.Graphics.VertexElement.prototype._format = 0;
Microsoft.Xna.Framework.Graphics.VertexElement.prototype._method = 0;
Microsoft.Xna.Framework.Graphics.VertexElement.prototype._usage = 0;
Microsoft.Xna.Framework.Graphics.VertexElement.prototype._usageIndex = 0;
Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_UsageIndex = function () {
	return this._usageIndex;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_UsageIndex = function (value) {
	this._usageIndex = value;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_VertexElementUsage = function () {
	return this._usage;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_VertexElementUsage = function (value) {
	this._usage = value;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_VertexElementMethod = function () {
	return this._method;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_VertexElementMethod = function (value) {
	this._method = value;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_VertexElementFormat = function () {
	return this._format;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_VertexElementFormat = function (value) {
	this._format = value;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_Offset = function () {
	return this._offset;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_Offset = function (value) {
	this._offset = value;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_Stream = function () {
	return this._stream;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_Stream = function (value) {
	this._stream = value;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype._ctor = function (stream, offset, elementFormat, elementMethod, elementUsage, usageIndex) {
	this._stream = stream;
	this._offset = offset;
	this._usageIndex = usageIndex;
	this._format = elementFormat;
	this._method = elementMethod;
	this._usage = elementUsage;
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Stream:{0} Offset:{1} Format:{2} Method:{3} Usage:{4} UsageIndex:{5}}}", [this.Stream, this.Offset, this.VertexElementFormat, this.VertexElementMethod, this.VertexElementUsage, this.UsageIndex]);
};

Microsoft.Xna.Framework.Graphics.VertexElement.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.VertexElement.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality = function (left, right) {
	return (!((left._stream !== right._stream) || 
			(left._offset !== right._offset) || 
			(left._usageIndex !== right._usageIndex) || 
			(left._usage !== right._usage) || 
			(left._format !== right._format)) && (left._method === right._method));
};

Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality = function (left, right) {
	return !Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(left, right);
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexElement.prototype, "UsageIndex", {
		get: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_UsageIndex, 
		set: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_UsageIndex
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexElement.prototype, "VertexElementUsage", {
		get: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_VertexElementUsage, 
		set: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_VertexElementUsage
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexElement.prototype, "VertexElementMethod", {
		get: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_VertexElementMethod, 
		set: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_VertexElementMethod
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexElement.prototype, "VertexElementFormat", {
		get: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_VertexElementFormat, 
		set: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_VertexElementFormat
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexElement.prototype, "Offset", {
		get: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_Offset, 
		set: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_Offset
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.VertexElement.prototype, "Stream", {
		get: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.get_Stream, 
		set: Microsoft.Xna.Framework.Graphics.VertexElement.prototype.set_Stream
	});

Object.seal(Microsoft.Xna.Framework.Graphics.VertexElement.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.VertexElement);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.GammaRamp, "MaximumLength", { value: 256 });
Microsoft.Xna.Framework.Graphics.GammaRamp.prototype._red = null;
Microsoft.Xna.Framework.Graphics.GammaRamp.prototype._blue = null;
Microsoft.Xna.Framework.Graphics.GammaRamp.prototype._green = null;
Microsoft.Xna.Framework.Graphics.GammaRamp.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._red = JSIL.Array.New(System.Int16, 256);
	this._blue = JSIL.Array.New(System.Int16, 256);
	this._green = JSIL.Array.New(System.Int16, 256);
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.SetRed = function (value) {

	if (!((value === null) && (value.length === 256))) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.GammaRampMustBeCorrectValue, "value");
	}
	this._red = value;
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.GetRed = function () {
	return this._red;
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.SetBlue = function (value) {

	if (!((value === null) && (value.length === 256))) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.GammaRampMustBeCorrectValue, "value");
	}
	this._blue = value;
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.GetBlue = function () {
	return this._blue;
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.SetGreen = function (value) {

	if (!((value === null) && (value.length === 256))) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.GammaRampMustBeCorrectValue, "value");
	}
	this._green = value;
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.GetGreen = function () {
	return this._green;
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.Dispose$1 = function (disposing) {
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.GammaRamp.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Microsoft.Xna.Framework.Graphics.GammaRamp.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Graphics.GammaRamp.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.GammaRamp);
Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.prototype._resource = null;
Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.prototype._ctor = function (resource) {
	System.EventArgs.prototype._ctor.call(this);
	this._resource = resource;
};

Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.prototype.get_Resource = function () {
	return this._resource;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.prototype, "Resource", {
		get: Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.prototype.get_Resource
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs);
Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype._tag = null;
Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype._name = null;
Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype._ctor = function (name, tag) {
	System.EventArgs.prototype._ctor.call(this);
	this._tag = tag;
	this._name = name;
};

Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype.get_Tag = function () {
	return this._tag;
};

Object.defineProperty(Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype, "Name", {
		get: Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype.get_Name
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype, "Tag", {
		get: Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype.get_Tag
	});

Object.seal(Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs);
Object.defineProperty(Microsoft.Xna.Framework.Helpers, "InvalidHandle", { value: 4294967295 });
Object.defineProperty(Microsoft.Xna.Framework.Helpers, "DiscardedRenderTargetClearColor", { value: 4282655368 });
Object.defineProperty(Microsoft.Xna.Framework.Helpers, "MaximumStringLength", { value: 260 });
Object.defineProperty(Microsoft.Xna.Framework.Helpers, "Guide_MessageBox_MaxButtons", { value: 3 });
Object.defineProperty(Microsoft.Xna.Framework.Helpers, "MaxNumberOfSignedInPlayers", { value: 1 });
Microsoft.Xna.Framework.Helpers.Succeeded$0 = function (error) {
	return (error >= 0);
};

Microsoft.Xna.Framework.Helpers.Succeeded$1 = function (error) {
	return (error >= Microsoft.Xna.Framework.ErrorCodes.Success);
};

Microsoft.Xna.Framework.Helpers.Failed$0 = function (error) {
	return (error < 0);
};

Microsoft.Xna.Framework.Helpers.Failed$1 = function (error) {
	return (error < Microsoft.Xna.Framework.ErrorCodes.Success);
};

Microsoft.Xna.Framework.Helpers.SmartGetHashCode = JSIL.UntranslatableFunction("SmartGetHashCode");

Microsoft.Xna.Framework.Helpers.ValidateCopyParameters = function (data, dataIndex, elementCount) {

	if (dataIndex >= 0) {
	}
};

Microsoft.Xna.Framework.Helpers.GetSizeOf = function () {
	return System.Runtime.InteropServices.Marshal.SizeOf(T);
};

Microsoft.Xna.Framework.Helpers.CheckAndReadStream = function (stream, numberBytes, /* ref */ bytesRead) {
	var arg_08_0 = stream.CanRead;
	var i = 0;

	if (numberBytes === -1) {
		i = (stream.length - stream.Position);
	} else {
		i = numberBytes;
	}
	bytesRead.value = i;
	var array = JSIL.Array.New(System.Byte, i);
	var num = 0;

__while0__: 
	while (i > 0) {
		var num2 = stream.Read(array, num, i);

		if (num2 <= 0) {
			throw new System.IO.EndOfStreamException(Microsoft.Xna.Framework.FrameworkResources.DidNotReadEnoughData);
		}
		i -= num2;
		num += num2;
	}
	return array;
};

Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode$0 = function (error) {

	if (Microsoft.Xna.Framework.Helpers.Failed(error)) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(error);
	}
};

Microsoft.Xna.Framework.Helpers.ThrowExceptionFromErrorCode$1 = function (error) {

	if (Microsoft.Xna.Framework.Helpers.Failed(error)) {
		throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(error);
	}
};

Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult = function (result) {

	if (result !== 0) {
		return ;
	}
	throw Microsoft.Xna.Framework.Helpers.GetExceptionFromResult(result);
};

Microsoft.Xna.Framework.Helpers.GetExceptionFromResult = function (result) {

	var __label0__ = "__entry0__";
__step0__: 
	while (true) {

		switch (__label0__) {

			case "__entry0__":

				if (result !== 0) {
					return null;
				}

				if (result <= -2147024882) {

					if (result <= -2147467260) {

						if (result === -2147467263) {
							return new System.NotImplementedException();
						}

						if (result === -2147467260) {
							throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.ResourceInUse);
						}
					} else {

						if (result === -2147220906) {
							return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.NoAudioPlaybackDevicesFound);
						}

						if (result === -2147024891) {
							return new System.UnauthorizedAccessException();
						}

						if (result === -2147024882) {
							throw new System.OutOfMemoryException();
						}
					}
				} else if (result <= -2005530585) {

					if (result === -2147024809) {
						return new System.ArgumentException();
					}

					if (result === -2005532292) {
						return new Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException();
					}

					switch (result) {
						case -2005530600: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.WrongTextureFormat);
						case -2005530599: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.UnsupportedColorOperation);
						case -2005530598: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.UnsupportedColorArg);
						case -2005530597: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.UnsupportedAlphaOperation);
						case -2005530595: 
							return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.TooManyOperations);
						case -2005530594: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.ConflictingTextureFilter);
						case -2005530593: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.UnsupportedFactorValue);
						case -2005530591: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.ConflictingRenderState);
						case -2005530590: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.UnsupportedTextureFilter);
						case -2005530585: 
							return new Microsoft.Xna.Framework.Graphics.DriverInternalErrorException();
					}
				} else {

					switch (result) {
						case -2005530522: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotFound);
						case -2005530521: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.MoreData);
						case -2005530520: 
							return new Microsoft.Xna.Framework.Graphics.DeviceLostException();
						case -2005530519: 
							return new Microsoft.Xna.Framework.Graphics.DeviceNotResetException();
						case -2005530518: 
						case -2005530517: 
						case -2005530516: 
						case -2005530515: 
						case -2005530514: 
						case -2005530513: 
							break;
						case -2005530512: 
							return new Microsoft.Xna.Framework.Graphics.DeviceNotSupportedException();
						case -2005530511: 
							return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidDeviceType);
						case -2005530510: 
							return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InvalidCall);
						default: 

							switch (result) {
								case -1966669821: 
									return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.Expired);
								case -1966669820: 
								case -1966669819: 
								case -1966669815: 
								case -1966669807: 
								case -1966669803: 
									__label0__ = "IL_307";
									continue __step0__;
								case -1966669818: 
									return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InvalidUsage);
								case -1966669817: 
									return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidContentVersion);
								case -1966669816: 
									break;
								case -1966669814: 
									return new System.IndexOutOfRangeException(Microsoft.Xna.Framework.FrameworkResources.InvalidVariableIndex);
								case -1966669813: 
									return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidCategory);
								case -1966669812: 
									return new System.IndexOutOfRangeException(Microsoft.Xna.Framework.FrameworkResources.InvalidCue);
								case -1966669811: 
									return new System.IndexOutOfRangeException(Microsoft.Xna.Framework.FrameworkResources.InvalidWaveIndex);
								case -1966669810: 
									return new System.IndexOutOfRangeException(Microsoft.Xna.Framework.FrameworkResources.InvalidTrackIndex);
								case -1966669809: 
									return new System.IndexOutOfRangeException(Microsoft.Xna.Framework.FrameworkResources.InvalidSoundOffsetOrIndex);
								case -1966669808: 
									return new System.IO.IOException(Microsoft.Xna.Framework.FrameworkResources.XactReadFile);
								case -1966669806: 
									return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InCallback);
								case -1966669805: 
									return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.NoWaveBank);
								case -1966669804: 
									return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.SelectVariation);
								case -1966669802: 
									return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.WaveBankNotPrepared);
								case -1966669801: 
									return new Microsoft.Xna.Framework.Audio.NoAudioHardwareException();
								case -1966669800: 
									return new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidEntryCount);
								default: 

									if (result !== -1951596543) {
										__label0__ = "IL_307";
										continue __step0__;
									}
									break;
							}
							return new Microsoft.Xna.Framework.Audio.InstancePlayLimitException();
					}
				}
				__label0__ = "IL_307";
				continue __step0__;
				break;

			case "IL_307":
				return new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.UnexpectedError);
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.Helpers.CheckDisposed = function (obj, pComPtr) {

	if (System.IntPtr.op_Equality(pComPtr, System.IntPtr.Zero)) {
		throw new System.ObjectDisposedException(obj.GetType().Name);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Helpers, "Succeeded", [
		["Succeeded$0", [System.Int32]], 
		["Succeeded$1", [Microsoft.Xna.Framework.ErrorCodes]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Helpers, "Failed", [
		["Failed$0", [System.Int32]], 
		["Failed$1", [Microsoft.Xna.Framework.ErrorCodes]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Helpers, "ThrowExceptionFromErrorCode", [
		["ThrowExceptionFromErrorCode$0", [Microsoft.Xna.Framework.ErrorCodes]], 
		["ThrowExceptionFromErrorCode$1", [System.Int32]]
	]
);

Object.seal(Microsoft.Xna.Framework.Helpers);
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePad, "XinputNativeDll", { value: "xinput1_3.dll" });
Microsoft.Xna.Framework.Input.GamePad._disconnected = null;
Microsoft.Xna.Framework.Input.GamePad._lastReadTime = null;
Microsoft.Xna.Framework.Input.GamePad.GetState$0 = function (playerIndex) {
	return Microsoft.Xna.Framework.Input.GamePad.GetState(playerIndex, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes);
};

Microsoft.Xna.Framework.Input.GamePad.GetState$1 = function (playerIndex, deadZoneMode) {
	var xINPUT_STATE = new Microsoft.Xna.Framework.Input.XINPUT_STATE();
	var errorCodes = Microsoft.Xna.Framework.ErrorCodes.Success;

	if (Microsoft.Xna.Framework.Input.GamePad.ThrottleDisconnectedRetries(playerIndex)) {
		errorCodes = Microsoft.Xna.Framework.ErrorCodes.NotConnected;
	} else {
		errorCodes = Microsoft.Xna.Framework.Input.UnsafeNativeMethods.GetState(playerIndex, /* ref */ xINPUT_STATE);
		Microsoft.Xna.Framework.Input.GamePad.ResetThrottleState(playerIndex, errorCodes);
	}

	if (!((errorCodes !== 0) || (errorCodes === Microsoft.Xna.Framework.ErrorCodes.NotConnected))) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InvalidController);
	}
	return new Microsoft.Xna.Framework.Input.GamePadState(xINPUT_STATE, errorCodes, deadZoneMode);
};

Microsoft.Xna.Framework.Input.GamePad.GetCapabilities = function (playerIndex) {
	var xINPUT_CAPABILITIES = new Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES();
	var errorCodes = Microsoft.Xna.Framework.ErrorCodes.Success;

	if (Microsoft.Xna.Framework.Input.GamePad.ThrottleDisconnectedRetries(playerIndex)) {
		errorCodes = Microsoft.Xna.Framework.ErrorCodes.NotConnected;
	} else {
		errorCodes = Microsoft.Xna.Framework.Input.UnsafeNativeMethods.GetCaps(playerIndex, 1, /* ref */ xINPUT_CAPABILITIES);
		Microsoft.Xna.Framework.Input.GamePad.ResetThrottleState(playerIndex, errorCodes);
	}

	if (!((errorCodes !== 0) || (errorCodes === Microsoft.Xna.Framework.ErrorCodes.NotConnected))) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InvalidController);
	}
	return new Microsoft.Xna.Framework.Input.GamePadCapabilities(xINPUT_CAPABILITIES, errorCodes);
};

Microsoft.Xna.Framework.Input.GamePad.SetVibration = function (playerIndex, leftMotor, rightMotor) {
	var xINPUT_VIBRATION = new Microsoft.Xna.Framework.Input.XINPUT_VIBRATION();
	xINPUT_VIBRATION.LeftMotorSpeed = (leftMotor * 65535);
	xINPUT_VIBRATION.RightMotorSpeed = (rightMotor * 65535);
	var errorCodes = Microsoft.Xna.Framework.ErrorCodes.Success;

	if (Microsoft.Xna.Framework.Input.GamePad.ThrottleDisconnectedRetries(playerIndex)) {
		errorCodes = Microsoft.Xna.Framework.ErrorCodes.NotConnected;
	} else {
		errorCodes = Microsoft.Xna.Framework.Input.UnsafeNativeMethods.SetState(playerIndex, /* ref */ xINPUT_VIBRATION);
		Microsoft.Xna.Framework.Input.GamePad.ResetThrottleState(playerIndex, errorCodes);
	}

	if (errorCodes !== 0) {
		return true;
	}

	if (!((errorCodes !== 0) || 
			(errorCodes === Microsoft.Xna.Framework.ErrorCodes.NotConnected) || (errorCodes === Microsoft.Xna.Framework.ErrorCodes.Busy))) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.InvalidController);
	}
	return false;
};

Microsoft.Xna.Framework.Input.GamePad.ThrottleDisconnectedRetries = function (playerIndex) {

	if (!((playerIndex >= Microsoft.Xna.Framework.PlayerIndex.One) && (playerIndex <= Microsoft.Xna.Framework.PlayerIndex.Four))) {
		return false;
	}

	if (!Microsoft.Xna.Framework.Input.GamePad._disconnected[playerIndex]) {
		return false;
	}
	var timestamp = System.Diagnostics.Stopwatch.GetTimestamp();
	var i = 0;

__while0__: 
	while (i < 4) {

		if (Microsoft.Xna.Framework.Input.GamePad._disconnected[i]) {
			var num = (timestamp - Microsoft.Xna.Framework.Input.GamePad._lastReadTime[i]);
			var num2 = System.Diagnostics.Stopwatch.Frequency;

			if (i !== playerIndex) {
				num2 = Math.floor(num2 / 4);
			}

			if (!((num < 0) || (num > num2))) {
				return true;
			}
		}
		++i;
	}
	return false;
};

Microsoft.Xna.Framework.Input.GamePad.ResetThrottleState = function (playerIndex, result) {

	if (!((playerIndex >= Microsoft.Xna.Framework.PlayerIndex.One) && (playerIndex <= Microsoft.Xna.Framework.PlayerIndex.Four))) {
		return ;
	}

	if (result === Microsoft.Xna.Framework.ErrorCodes.NotConnected) {
		Microsoft.Xna.Framework.Input.GamePad._disconnected[playerIndex] = true;
		Microsoft.Xna.Framework.Input.GamePad._lastReadTime[playerIndex] = System.Diagnostics.Stopwatch.GetTimestamp();
		return ;
	}
	Microsoft.Xna.Framework.Input.GamePad._disconnected[playerIndex] = false;
};

Microsoft.Xna.Framework.Input.GamePad._cctor = function () {
	Microsoft.Xna.Framework.Input.GamePad._disconnected = JSIL.Array.New(System.Boolean, 4);
	Microsoft.Xna.Framework.Input.GamePad._lastReadTime = JSIL.Array.New(System.Int64, 4);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Input.GamePad, "GetState", [
		["GetState$0", [Microsoft.Xna.Framework.PlayerIndex]], 
		["GetState$1", [Microsoft.Xna.Framework.PlayerIndex, Microsoft.Xna.Framework.Input.GamePadDeadZone]]
	]
);
Microsoft.Xna.Framework.Input.GamePad._cctor();

Object.seal(Microsoft.Xna.Framework.Input.GamePad);
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils, "LeftStickDeadZoneSize", { value: 7849 });
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils, "RightStickDeadZoneSize", { value: 8689 });
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils, "TriggerDeadZoneSize", { value: 30 });
Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLeftStickDeadZone = function (x, y, deadZoneMode) {
	return Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyStickDeadZone(x, y, deadZoneMode, 7849);
};

Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyRightStickDeadZone = function (x, y, deadZoneMode) {
	return Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyStickDeadZone(x, y, deadZoneMode, 8689);
};

Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyStickDeadZone = function (x, y, deadZoneMode, deadZoneSize) {
	var result = new Microsoft.Xna.Framework.Vector2();

	if (deadZoneMode === Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes) {
		result.X = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLinearDeadZone(x, 32767, deadZoneSize);
		result.Y = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLinearDeadZone(y, 32767, deadZoneSize);
	} else if (deadZoneMode === Microsoft.Xna.Framework.Input.GamePadDeadZone.Circular) {
		var num = JSIL.Cast(System.Math.Sqrt(((x * x) + (y * y))), System.Single);
		var num2 = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLinearDeadZone(num, 32767, deadZoneSize);
		var num3 = (num2 > 0) ? (num2 / num) : 0;
		result.X = Microsoft.Xna.Framework.MathHelper.Clamp((x * num3), -1, 1);
		result.Y = Microsoft.Xna.Framework.MathHelper.Clamp((y * num3), -1, 1);
	} else {
		result.X = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLinearDeadZone(x, 32767, 0);
		result.Y = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLinearDeadZone(y, 32767, 0);
	}
	return result;
};

Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyTriggerDeadZone = function (value, deadZoneMode) {

	if (deadZoneMode !== 0) {
		return Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLinearDeadZone(value, 255, 0);
	}
	return Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLinearDeadZone(value, 255, 30);
};

Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLinearDeadZone = function (value, maxValue, deadZoneSize) {

	if (value < -deadZoneSize) {
		value += deadZoneSize;
	} else {

		if (!(value > deadZoneSize)) {
			return 0;
		}
		value -= deadZoneSize;
	}
	return Microsoft.Xna.Framework.MathHelper.Clamp((value / (maxValue - deadZoneSize)), -1, 1);
};


Object.seal(Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils);
Microsoft.Xna.Framework.Input.KeyboardState.stateMask0 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.stateMask1 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.stateMask2 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.stateMask3 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.stateMask4 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.stateMask5 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.stateMask6 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.stateMask7 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.prototype.currentState0 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.prototype.currentState1 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.prototype.currentState2 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.prototype.currentState3 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.prototype.currentState4 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.prototype.currentState5 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.prototype.currentState6 = 0;
Microsoft.Xna.Framework.Input.KeyboardState.prototype.currentState7 = 0;
Microsoft.Xna.Framework.Input.KeyboardState._cctor = function () {
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask0 = -1;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask1 = -1;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask2 = -1;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask3 = -1;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask4 = -1;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask5 = -1;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask6 = -1;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask7 = -1;
	var keyboardState = new Microsoft.Xna.Framework.Input.KeyboardState();
	var enumerator = System.Enum.GetValues(Microsoft.Xna.Framework.Input.Keys).GetEnumerator();

	try {

	__while0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			keyboardState.AddPressedKey(JSIL.Cast(enumerator.IEnumerator_Current, System.Int32));
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);

		if (disposable === null) {
			disposable.IDisposable_Dispose();
		}
	}
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask0 = keyboardState.currentState0;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask1 = keyboardState.currentState1;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask2 = keyboardState.currentState2;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask3 = keyboardState.currentState3;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask4 = keyboardState.currentState4;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask5 = keyboardState.currentState5;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask6 = keyboardState.currentState6;
	Microsoft.Xna.Framework.Input.KeyboardState.stateMask7 = keyboardState.currentState7;
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype._ctor = function (keys) {
	this.currentState0 = this.currentState1 = this.currentState2 = this.currentState3 = this.currentState4 = this.currentState5 = this.currentState6 = this.currentState7 = 0;

	if (keys === 0) {
		var i = 0;

	__while0__: 
		while (i < keys.length) {
			this.AddPressedKey(keys[i]);
			++i;
		}
	}
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype.AddPressedKey = function (key) {
	var num = (1 << (key & 31 & 31));

	switch (key >> 5) {
		case 0: 
			this.currentState0 = (this.currentState0 | (num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask0));
			return ;
		case 1: 
			this.currentState1 = (this.currentState1 | (num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask1));
			return ;
		case 2: 
			this.currentState2 = (this.currentState2 | (num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask2));
			return ;
		case 3: 
			this.currentState3 = (this.currentState3 | (num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask3));
			return ;
		case 4: 
			this.currentState4 = (this.currentState4 | (num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask4));
			return ;
		case 5: 
			this.currentState5 = (this.currentState5 | (num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask5));
			return ;
		case 6: 
			this.currentState6 = (this.currentState6 | (num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask6));
			return ;
		case 7: 
			this.currentState7 = (this.currentState7 | (num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask7));
			return ;
		default: 
			return ;
	}
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype.RemovePressedKey = function (key) {
	var num = (1 << (key & 31 & 31));

	switch (key >> 5) {
		case 0: 
			this.currentState0 = (this.currentState0 & ~(num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask0));
			return ;
		case 1: 
			this.currentState1 = (this.currentState1 & ~(num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask1));
			return ;
		case 2: 
			this.currentState2 = (this.currentState2 & ~(num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask2));
			return ;
		case 3: 
			this.currentState3 = (this.currentState3 & ~(num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask3));
			return ;
		case 4: 
			this.currentState4 = (this.currentState4 & ~(num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask4));
			return ;
		case 5: 
			this.currentState5 = (this.currentState5 & ~(num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask5));
			return ;
		case 6: 
			this.currentState6 = (this.currentState6 & ~(num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask6));
			return ;
		case 7: 
			this.currentState7 = (this.currentState7 & ~(num & Microsoft.Xna.Framework.Input.KeyboardState.stateMask7));
			return ;
		default: 
			return ;
	}
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype.get_Item = function (key) {

	switch (key >> 5) {
		case 0: 
			var num = this.currentState0;
			break;
		case 1: 
			num = this.currentState1;
			break;
		case 2: 
			num = this.currentState2;
			break;
		case 3: 
			num = this.currentState3;
			break;
		case 4: 
			num = this.currentState4;
			break;
		case 5: 
			num = this.currentState5;
			break;
		case 6: 
			num = this.currentState6;
			break;
		case 7: 
			num = this.currentState7;
			break;
		default: 
			return Microsoft.Xna.Framework.Input.KeyState.Up;
	}
	var num2 = (1 << (key & 31 & 31));

	if (!(num & num2)) {
		return Microsoft.Xna.Framework.Input.KeyState.Up;
	}
	return Microsoft.Xna.Framework.Input.KeyState.Down;
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype.IsKeyDown = function (key) {
	return (this.get_Item(key) === Microsoft.Xna.Framework.Input.KeyState.Down);
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype.IsKeyUp = function (key) {
	return (this.get_Item(key) === Microsoft.Xna.Framework.Input.KeyState.Up);
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype.GetPressedKeys = function () {
	var num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState0, 0, null, /* ref */ num);
	Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState1, 0, null, /* ref */ num);
	Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState2, 0, null, /* ref */ num);
	Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState3, 0, null, /* ref */ num);
	Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState4, 0, null, /* ref */ num);
	Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState5, 0, null, /* ref */ num);
	Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState6, 0, null, /* ref */ num);
	Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState7, 0, null, /* ref */ num);
	var array = JSIL.Array.New(Microsoft.Xna.Framework.Input.Keys, num.value);

	if (num.value > 0) {
		var num2 = new JSIL.Variable(0);
		Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState0, 0, array, /* ref */ num2);
		Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState1, 1, array, /* ref */ num2);
		Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState2, 2, array, /* ref */ num2);
		Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState3, 3, array, /* ref */ num2);
		Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState4, 4, array, /* ref */ num2);
		Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState5, 5, array, /* ref */ num2);
		Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState6, 6, array, /* ref */ num2);
		Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys(this.currentState7, 7, array, /* ref */ num2);
	}
	return array;
};

Microsoft.Xna.Framework.Input.KeyboardState.CheckPressedKeys = function (packedState, packedOffset, pressedKeys, /* ref */ index) {

	if (packedState !== 0) {
		return ;
	}
	var i = 0;

__while0__: 
	while (i < 32) {

		if ((packedState & (1 << (i & 31))) !== 0) {

			if (pressedKeys === 0) {
				pressedKeys[index.value] = ((packedOffset * 32) + i);
			}
			++index.value;
		}
		++i;
	}
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype.GetHashCode = function () {
	return (this.currentState0.GetHashCode() ^ this.currentState1.GetHashCode() ^ this.currentState2.GetHashCode() ^ this.currentState3.GetHashCode() ^ this.currentState4.GetHashCode() ^ this.currentState5.GetHashCode() ^ this.currentState6.GetHashCode() ^ this.currentState7.GetHashCode());
};

Microsoft.Xna.Framework.Input.KeyboardState.prototype.Equals = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Input.KeyboardState.MemberwiseClone()) === new Microsoft.Xna.Framework.Input.KeyboardState()) && Microsoft.Xna.Framework.Input.KeyboardState.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Input.KeyboardState.MemberwiseClone())));
};

Microsoft.Xna.Framework.Input.KeyboardState.op_Equality = function (a, b) {
	return (!((a.currentState0 !== b.currentState0) || 
			(a.currentState1 !== b.currentState1) || 
			(a.currentState2 !== b.currentState2) || 
			(a.currentState3 !== b.currentState3) || 
			(a.currentState4 !== b.currentState4) || 
			(a.currentState5 !== b.currentState5) || 
			(a.currentState6 !== b.currentState6)) && (a.currentState7 === b.currentState7));
};

Microsoft.Xna.Framework.Input.KeyboardState.op_Inequality = function (a, b) {
	return !Microsoft.Xna.Framework.Input.KeyboardState.op_Equality(a, b);
};

Object.defineProperty(Microsoft.Xna.Framework.Input.KeyboardState.prototype, "Item", {
		get: Microsoft.Xna.Framework.Input.KeyboardState.prototype.get_Item
	});
Microsoft.Xna.Framework.Input.KeyboardState._cctor();

Object.seal(Microsoft.Xna.Framework.Input.KeyboardState.prototype);
Object.seal(Microsoft.Xna.Framework.Input.KeyboardState);
Microsoft.Xna.Framework.Input.MouseState.prototype.x = 0;
Microsoft.Xna.Framework.Input.MouseState.prototype.y = 0;
Microsoft.Xna.Framework.Input.MouseState.prototype.leftButton = 0;
Microsoft.Xna.Framework.Input.MouseState.prototype.rightButton = 0;
Microsoft.Xna.Framework.Input.MouseState.prototype.middleButton = 0;
Microsoft.Xna.Framework.Input.MouseState.prototype.xb1 = 0;
Microsoft.Xna.Framework.Input.MouseState.prototype.xb2 = 0;
Microsoft.Xna.Framework.Input.MouseState.prototype.wheel = 0;
Microsoft.Xna.Framework.Input.MouseState.prototype._ctor = function (x, y, scrollWheel, leftButton, middleButton, rightButton, xButton1, xButton2) {
	this.x = x;
	this.y = y;
	this.wheel = scrollWheel;
	this.leftButton = leftButton;
	this.rightButton = rightButton;
	this.middleButton = middleButton;
	this.xb1 = xButton1;
	this.xb2 = xButton2;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.get_X = function () {
	return this.x;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.get_Y = function () {
	return this.y;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.get_LeftButton = function () {
	return this.leftButton;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.get_RightButton = function () {
	return this.rightButton;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.get_MiddleButton = function () {
	return this.middleButton;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.get_XButton1 = function () {
	return this.xb1;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.get_XButton2 = function () {
	return this.xb2;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.get_ScrollWheelValue = function () {
	return this.wheel;
};

Microsoft.Xna.Framework.Input.MouseState.prototype.GetHashCode = function () {
	return (this.x.GetHashCode() ^ this.y.GetHashCode() ^ this.leftButton.GetHashCode() ^ this.rightButton.GetHashCode() ^ this.middleButton.GetHashCode() ^ this.xb1.GetHashCode() ^ this.xb2.GetHashCode() ^ this.wheel.GetHashCode());
};

Microsoft.Xna.Framework.Input.MouseState.prototype.toString = function () {
	var text = System.String.Empty;

	if (this.leftButton === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + System.String.IsNullOrEmpty(text) ? "" : " " + "Left");
	}

	if (this.rightButton === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + System.String.IsNullOrEmpty(text) ? "" : " " + "Right");
	}

	if (this.middleButton === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + System.String.IsNullOrEmpty(text) ? "" : " " + "Middle");
	}

	if (this.xb1 === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + System.String.IsNullOrEmpty(text) ? "" : " " + "XButton1");
	}

	if (this.xb2 === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + System.String.IsNullOrEmpty(text) ? "" : " " + "XButton2");
	}

	if (System.String.IsNullOrEmpty(text)) {
		text = "None";
	}
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{X:{0} Y:{1} Buttons:{2} Wheel:{3}}}", [this.x, this.y, text, this.wheel]);
};

Microsoft.Xna.Framework.Input.MouseState.prototype.Equals = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Input.MouseState.MemberwiseClone()) === new Microsoft.Xna.Framework.Input.MouseState()) && Microsoft.Xna.Framework.Input.MouseState.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Input.MouseState.MemberwiseClone())));
};

Microsoft.Xna.Framework.Input.MouseState.op_Equality = function (left, right) {
	return (!((left.x !== right.x) || 
			(left.y !== right.y) || 
			(left.leftButton !== right.leftButton) || 
			(left.rightButton !== right.rightButton) || 
			(left.middleButton !== right.middleButton) || 
			(left.xb1 !== right.xb1) || 
			(left.xb2 !== right.xb2)) && (left.wheel === right.wheel));
};

Microsoft.Xna.Framework.Input.MouseState.op_Inequality = function (left, right) {
	return !Microsoft.Xna.Framework.Input.MouseState.op_Equality(left, right);
};

Object.defineProperty(Microsoft.Xna.Framework.Input.MouseState.prototype, "X", {
		get: Microsoft.Xna.Framework.Input.MouseState.prototype.get_X
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.MouseState.prototype, "Y", {
		get: Microsoft.Xna.Framework.Input.MouseState.prototype.get_Y
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.MouseState.prototype, "LeftButton", {
		get: Microsoft.Xna.Framework.Input.MouseState.prototype.get_LeftButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.MouseState.prototype, "RightButton", {
		get: Microsoft.Xna.Framework.Input.MouseState.prototype.get_RightButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.MouseState.prototype, "MiddleButton", {
		get: Microsoft.Xna.Framework.Input.MouseState.prototype.get_MiddleButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.MouseState.prototype, "XButton1", {
		get: Microsoft.Xna.Framework.Input.MouseState.prototype.get_XButton1
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.MouseState.prototype, "XButton2", {
		get: Microsoft.Xna.Framework.Input.MouseState.prototype.get_XButton2
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.MouseState.prototype, "ScrollWheelValue", {
		get: Microsoft.Xna.Framework.Input.MouseState.prototype.get_ScrollWheelValue
	});

Object.seal(Microsoft.Xna.Framework.Input.MouseState.prototype);
Object.seal(Microsoft.Xna.Framework.Input.MouseState);
Object.defineProperty(Microsoft.Xna.Framework.Input.UnsafeNativeMethods, "GWLP_WNDPROC", { value: -4 });
Microsoft.Xna.Framework.Input.UnsafeNativeMethods.GetWindowLongPtr = function (hWnd, nIndex) {

	if (System.IntPtr.Size === 4) {
		return Microsoft.Xna.Framework.Input.UnsafeNativeMethods.GetWindowLong32(hWnd, nIndex);
	}
	return Microsoft.Xna.Framework.Input.UnsafeNativeMethods.GetWindowLongPtr64(hWnd, nIndex);
};

Microsoft.Xna.Framework.Input.UnsafeNativeMethods.SetWindowLongPtr = function (hWnd, nIndex, newValue) {

	if (System.IntPtr.Size === 4) {
		return Microsoft.Xna.Framework.Input.UnsafeNativeMethods.SetWindowLong32(hWnd, nIndex, newValue);
	}
	return Microsoft.Xna.Framework.Input.UnsafeNativeMethods.SetWindowLongPtr64(hWnd, nIndex, newValue);
};


Object.seal(Microsoft.Xna.Framework.Input.UnsafeNativeMethods);
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._a = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._b = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._x = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._y = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._leftStick = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._rightStick = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._leftShoulder = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._rightShoulder = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._back = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._start = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._bigButton = 0;
Microsoft.Xna.Framework.Input.GamePadButtons.prototype._ctor = function (buttons) {
	this._a = ((buttons & Microsoft.Xna.Framework.Input.Buttons.A) === Microsoft.Xna.Framework.Input.Buttons.A) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._b = ((buttons & Microsoft.Xna.Framework.Input.Buttons.B) === Microsoft.Xna.Framework.Input.Buttons.B) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._x = ((buttons & Microsoft.Xna.Framework.Input.Buttons.X) === Microsoft.Xna.Framework.Input.Buttons.X) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._y = ((buttons & Microsoft.Xna.Framework.Input.Buttons.Y) === Microsoft.Xna.Framework.Input.Buttons.Y) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._start = ((buttons & Microsoft.Xna.Framework.Input.Buttons.Start) === Microsoft.Xna.Framework.Input.Buttons.Start) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._back = ((buttons & Microsoft.Xna.Framework.Input.Buttons.Back) === Microsoft.Xna.Framework.Input.Buttons.Back) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._leftStick = ((buttons & Microsoft.Xna.Framework.Input.Buttons.LeftStick) === Microsoft.Xna.Framework.Input.Buttons.LeftStick) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._rightStick = ((buttons & Microsoft.Xna.Framework.Input.Buttons.RightStick) === Microsoft.Xna.Framework.Input.Buttons.RightStick) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._leftShoulder = ((buttons & Microsoft.Xna.Framework.Input.Buttons.LeftShoulder) === Microsoft.Xna.Framework.Input.Buttons.LeftShoulder) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._rightShoulder = ((buttons & Microsoft.Xna.Framework.Input.Buttons.RightShoulder) === Microsoft.Xna.Framework.Input.Buttons.RightShoulder) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._bigButton = ((buttons & Microsoft.Xna.Framework.Input.Buttons.BigButton) === Microsoft.Xna.Framework.Input.Buttons.BigButton) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_A = function () {
	return this._a;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_B = function () {
	return this._b;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_Back = function () {
	return this._back;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_X = function () {
	return this._x;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_Y = function () {
	return this._y;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_Start = function () {
	return this._start;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_LeftShoulder = function () {
	return this._leftShoulder;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_LeftStick = function () {
	return this._leftStick;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_RightShoulder = function () {
	return this._rightShoulder;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_RightStick = function () {
	return this._rightStick;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_BigButton = function () {
	return this._bigButton;
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Input.GamePadButtons.MemberwiseClone())));
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Input.GamePadButtons.prototype.toString = function () {
	var text = System.String.Empty;

	if (this._a === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "A");
	}

	if (this._b === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "B");
	}

	if (this._x === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "X");
	}

	if (this._y === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "Y");
	}

	if (this._leftShoulder === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "LeftShoulder");
	}

	if (this._rightShoulder === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "RightShoulder");
	}

	if (this._leftStick === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "LeftStick");
	}

	if (this._rightStick === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "RightStick");
	}

	if (this._start === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "Start");
	}

	if (this._back === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "Back");
	}

	if (this._bigButton === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "BigButton");
	}

	if (text.length !== null) {
		text = "None";
	}
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Buttons:{0}}}", [text]);
};

Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality = function (left, right) {
	return (!((left._a !== right._a) || 
			(left._b !== right._b) || 
			(left._x !== right._x) || 
			(left._y !== right._y) || 
			(left._leftShoulder !== right._leftShoulder) || 
			(left._leftStick !== right._leftStick) || 
			(left._rightShoulder !== right._rightShoulder) || 
			(left._rightStick !== right._rightStick) || 
			(left._back !== right._back) || 
			(left._start !== right._start)) && (left._bigButton === right._bigButton));
};

Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality = function (left, right) {
	return ((left._a !== right._a) || 
		(left._b !== right._b) || 
		(left._x !== right._x) || 
		(left._y !== right._y) || 
		(left._leftShoulder !== right._leftShoulder) || 
		(left._leftStick !== right._leftStick) || 
		(left._rightShoulder !== right._rightShoulder) || 
		(left._rightStick !== right._rightStick) || 
		(left._back !== right._back) || 
		(left._start !== right._start) || (left._bigButton !== right._bigButton));
};

Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "A", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_A
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "B", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_B
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "Back", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_Back
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "X", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_X
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "Y", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_Y
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "Start", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_Start
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "LeftShoulder", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_LeftShoulder
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "LeftStick", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_LeftStick
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "RightShoulder", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_RightShoulder
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "RightStick", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_RightStick
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadButtons.prototype, "BigButton", {
		get: Microsoft.Xna.Framework.Input.GamePadButtons.prototype.get_BigButton
	});

Object.seal(Microsoft.Xna.Framework.Input.GamePadButtons.prototype);
Object.seal(Microsoft.Xna.Framework.Input.GamePadButtons);
Microsoft.Xna.Framework.Input.GamePadDPad.prototype._up = 0;
Microsoft.Xna.Framework.Input.GamePadDPad.prototype._right = 0;
Microsoft.Xna.Framework.Input.GamePadDPad.prototype._down = 0;
Microsoft.Xna.Framework.Input.GamePadDPad.prototype._left = 0;
Microsoft.Xna.Framework.Input.GamePadDPad.prototype._ctor = function (upValue, downValue, leftValue, rightValue) {
	this._up = upValue;
	this._right = rightValue;
	this._down = downValue;
	this._left = leftValue;
};

Microsoft.Xna.Framework.Input.GamePadDPad.prototype.get_Up = function () {
	return this._up;
};

Microsoft.Xna.Framework.Input.GamePadDPad.prototype.get_Down = function () {
	return this._down;
};

Microsoft.Xna.Framework.Input.GamePadDPad.prototype.get_Right = function () {
	return this._right;
};

Microsoft.Xna.Framework.Input.GamePadDPad.prototype.get_Left = function () {
	return this._left;
};

Microsoft.Xna.Framework.Input.GamePadDPad.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Input.GamePadDPad.MemberwiseClone())));
};

Microsoft.Xna.Framework.Input.GamePadDPad.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Input.GamePadDPad.prototype.toString = function () {
	var text = System.String.Empty;

	if (this._up === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "Up");
	}

	if (this._down === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "Down");
	}

	if (this._left === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "Left");
	}

	if (this._right === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		text = (text + text.length ? " " : "" + "Right");
	}

	if (text.length !== null) {
		text = "None";
	}
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{DPad:{0}}}", [text]);
};

Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality = function (left, right) {
	return (!((left._up !== right._up) || 
			(left._down !== right._down) || 
			(left._left !== right._left)) && (left._right === right._right));
};

Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality = function (left, right) {
	return ((left._up !== right._up) || 
		(left._down !== right._down) || 
		(left._left !== right._left) || (left._right !== right._right));
};

Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadDPad.prototype, "Up", {
		get: Microsoft.Xna.Framework.Input.GamePadDPad.prototype.get_Up
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadDPad.prototype, "Down", {
		get: Microsoft.Xna.Framework.Input.GamePadDPad.prototype.get_Down
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadDPad.prototype, "Right", {
		get: Microsoft.Xna.Framework.Input.GamePadDPad.prototype.get_Right
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadDPad.prototype, "Left", {
		get: Microsoft.Xna.Framework.Input.GamePadDPad.prototype.get_Left
	});

Object.seal(Microsoft.Xna.Framework.Input.GamePadDPad.prototype);
Object.seal(Microsoft.Xna.Framework.Input.GamePadDPad);
Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype.__StructFields__ = {
	_left: Microsoft.Xna.Framework.Vector2, 
	_right: Microsoft.Xna.Framework.Vector2
};
Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype._ctor = function (leftThumbstick, rightThumbstick) {
	this._left = leftThumbstick;
	this._right = rightThumbstick;
	this._left = Microsoft.Xna.Framework.Vector2.Min(this._left.MemberwiseClone(), Microsoft.Xna.Framework.Vector2.One);
	this._left = Microsoft.Xna.Framework.Vector2.Max(this._left.MemberwiseClone(), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2.One));
	this._right = Microsoft.Xna.Framework.Vector2.Min(this._right.MemberwiseClone(), Microsoft.Xna.Framework.Vector2.One);
	this._right = Microsoft.Xna.Framework.Vector2.Max(this._right.MemberwiseClone(), Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2.One));
};

Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype.get_Left = function () {
	return this._left;
};

Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype.get_Right = function () {
	return this._right;
};

Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Input.GamePadThumbSticks.MemberwiseClone())));
};

Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Left:{0} Right:{1}}}", [this._left, this._right]);
};

Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Equality = function (left, right) {
	return (Microsoft.Xna.Framework.Vector2.op_Equality(left._left.MemberwiseClone(), right._left.MemberwiseClone()) && Microsoft.Xna.Framework.Vector2.op_Equality(left._right.MemberwiseClone(), right._right.MemberwiseClone()));
};

Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Inequality = function (left, right) {
	return (Microsoft.Xna.Framework.Vector2.op_Inequality(left._left.MemberwiseClone(), right._left.MemberwiseClone()) || Microsoft.Xna.Framework.Vector2.op_Inequality(left._right.MemberwiseClone(), right._right.MemberwiseClone()));
};

Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype, "Left", {
		get: Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype.get_Left
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype, "Right", {
		get: Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype.get_Right
	});

Object.seal(Microsoft.Xna.Framework.Input.GamePadThumbSticks.prototype);
Object.seal(Microsoft.Xna.Framework.Input.GamePadThumbSticks);
Microsoft.Xna.Framework.Input.GamePadTriggers.prototype._left = 0;
Microsoft.Xna.Framework.Input.GamePadTriggers.prototype._right = 0;
Microsoft.Xna.Framework.Input.GamePadTriggers.prototype._ctor = function (leftTrigger, rightTrigger) {
	this._left = leftTrigger;
	this._right = rightTrigger;
	this._left = System.Math.Min(this._left, 1);
	this._left = System.Math.Max(this._left, 0);
	this._right = System.Math.Min(this._right, 1);
	this._right = System.Math.Max(this._right, 0);
};

Microsoft.Xna.Framework.Input.GamePadTriggers.prototype.get_Left = function () {
	return this._left;
};

Microsoft.Xna.Framework.Input.GamePadTriggers.prototype.get_Right = function () {
	return this._right;
};

Microsoft.Xna.Framework.Input.GamePadTriggers.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Input.GamePadTriggers.MemberwiseClone())));
};

Microsoft.Xna.Framework.Input.GamePadTriggers.prototype.GetHashCode = function () {
	return Microsoft.Xna.Framework.Helpers.SmartGetHashCode(this);
};

Microsoft.Xna.Framework.Input.GamePadTriggers.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Left:{0} Right:{1}}}", [this._left, this._right]);
};

Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality = function (left, right) {
	return ((left._left === right._left) && (left._right === right._right));
};

Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality = function (left, right) {
	return ((left._left !== right._left) || (left._right !== right._right));
};

Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadTriggers.prototype, "Left", {
		get: Microsoft.Xna.Framework.Input.GamePadTriggers.prototype.get_Left
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadTriggers.prototype, "Right", {
		get: Microsoft.Xna.Framework.Input.GamePadTriggers.prototype.get_Right
	});

Object.seal(Microsoft.Xna.Framework.Input.GamePadTriggers.prototype);
Object.seal(Microsoft.Xna.Framework.Input.GamePadTriggers);
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadState, "_normalButtonMask", { value: 64511 });
Microsoft.Xna.Framework.Input.GamePadState.prototype._connected = new System.Boolean();
Microsoft.Xna.Framework.Input.GamePadState.prototype._packet = 0;
Microsoft.Xna.Framework.Input.GamePadState.prototype.__StructFields__ = {
	_thumbs: Microsoft.Xna.Framework.Input.GamePadThumbSticks, 
	_triggers: Microsoft.Xna.Framework.Input.GamePadTriggers, 
	_buttons: Microsoft.Xna.Framework.Input.GamePadButtons, 
	_dpad: Microsoft.Xna.Framework.Input.GamePadDPad, 
	_state: Microsoft.Xna.Framework.Input.XINPUT_STATE
};
Microsoft.Xna.Framework.Input.GamePadState.prototype._ctor$0 = function (thumbSticks, triggers, buttons, dPad) {
	this._packet = 0;
	this._connected = true;
	this._thumbs = thumbSticks;
	this._triggers = triggers;
	this._buttons = buttons;
	this._dpad = dPad;
	this._state = new Microsoft.Xna.Framework.Input.XINPUT_STATE();
	this.FillInternalState();
};

Microsoft.Xna.Framework.Input.GamePadState.prototype._ctor$1 = function (leftThumbStick, rightThumbStick, leftTrigger, rightTrigger, buttons) {
	this._packet = 0;
	this._connected = true;
	this._thumbs = new Microsoft.Xna.Framework.Input.GamePadThumbSticks(leftThumbStick, rightThumbStick);
	this._triggers = new Microsoft.Xna.Framework.Input.GamePadTriggers(leftTrigger, rightTrigger);
	var buttons2 = 0;

	if (buttons === 0) {
		var i = 0;

	__while0__: 
		while (i < buttons.length) {
			buttons2 = (buttons2 | buttons[i]);
			++i;
		}
	}
	this._buttons = new Microsoft.Xna.Framework.Input.GamePadButtons(buttons2);
	this._dpad = new Microsoft.Xna.Framework.Input.GamePadDPad();
	this._dpad._down = (buttons2 & Microsoft.Xna.Framework.Input.Buttons.DPadDown) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._dpad._up = (buttons2 & Microsoft.Xna.Framework.Input.Buttons.DPadUp) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._dpad._left = (buttons2 & Microsoft.Xna.Framework.Input.Buttons.DPadLeft) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._dpad._right = (buttons2 & Microsoft.Xna.Framework.Input.Buttons.DPadRight) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._state = new Microsoft.Xna.Framework.Input.XINPUT_STATE();
	this.FillInternalState();
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.FillInternalState = function () {
	this._state.PacketNumber = 0;

	if (this.get_Buttons().get_A() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.A), System.UInt16);
	}

	if (this.get_Buttons().get_B() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.B), System.UInt16);
	}

	if (this.get_Buttons().get_X() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.X), System.UInt16);
	}

	if (this.get_Buttons().get_Y() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.Y), System.UInt16);
	}

	if (this.get_Buttons().get_Back() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.Back), System.UInt16);
	}

	if (this.get_Buttons().get_LeftShoulder() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.LeftShoulder), System.UInt16);
	}

	if (this.get_Buttons().get_LeftStick() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.LeftThumb), System.UInt16);
	}

	if (this.get_Buttons().get_RightShoulder() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.RightShoulder), System.UInt16);
	}

	if (this.get_Buttons().get_RightStick() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.RightThumb), System.UInt16);
	}

	if (this.get_Buttons().get_Start() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.Start), System.UInt16);
	}

	if (this.get_Buttons().get_BigButton() === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.BigButton), System.UInt16);
	}

	if (this.get_DPad().Up === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.Up), System.UInt16);
	}

	if (this.get_DPad().Down === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.Down), System.UInt16);
	}

	if (this.get_DPad().Right === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.Right), System.UInt16);
	}

	if (this.get_DPad().Left === Microsoft.Xna.Framework.Input.ButtonState.Pressed) {
		this._state.GamePad.Buttons = JSIL.Cast((this._state.GamePad.Buttons | Microsoft.Xna.Framework.Input.ButtonValues.Left), System.UInt16);
	}
	this._state.GamePad.LeftTrigger = (this._triggers._left * 255);
	this._state.GamePad.RightTrigger = (this._triggers._right * 255);
	this._state.GamePad.ThumbLX = (this._thumbs._left.X * 32767);
	this._state.GamePad.ThumbLY = (this._thumbs._left.Y * 32767);
	this._state.GamePad.ThumbRX = (this._thumbs._right.X * 32767);
	this._state.GamePad.ThumbRY = (this._thumbs._right.Y * 32767);
};

Microsoft.Xna.Framework.Input.GamePadState.prototype._ctor$2 = function (/* ref */ pState, result, deadZoneMode) {
	this._state = pState.value.MemberwiseClone();
	this._connected = (result !== Microsoft.Xna.Framework.ErrorCodes.NotConnected);
	this._packet = pState.PacketNumber;
	this._buttons._a = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.A) === 4096) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._b = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.B) === 8192) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._x = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.X) === 16384) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._y = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Y) === 32768) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._start = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Start) === 16) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._back = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Back) === 32) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._leftStick = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.LeftThumb) === 64) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._rightStick = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.RightThumb) === 128) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._leftShoulder = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.LeftShoulder) === 256) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._rightShoulder = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.RightShoulder) === 512) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._buttons._bigButton = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.BigButton) === 2048) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._triggers._left = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyTriggerDeadZone(pState.GamePad.LeftTrigger, deadZoneMode);
	this._triggers._right = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyTriggerDeadZone(pState.GamePad.RightTrigger, deadZoneMode);
	this._thumbs._left = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLeftStickDeadZone(pState.GamePad.ThumbLX, pState.GamePad.ThumbLY, deadZoneMode);
	this._thumbs._right = Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyRightStickDeadZone(pState.GamePad.ThumbRX, pState.GamePad.ThumbRY, deadZoneMode);
	this._dpad._down = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Down) === 2) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._dpad._up = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Up) === 1) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._dpad._left = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Left) === 4) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
	this._dpad._right = ((pState.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Right) === 8) ? Microsoft.Xna.Framework.Input.ButtonState.Pressed : Microsoft.Xna.Framework.Input.ButtonState.Released;
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.get_Buttons = function () {
	return this._buttons;
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.get_DPad = function () {
	return this._dpad;
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.get_IsConnected = function () {
	return this._connected;
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.get_PacketNumber = function () {
	return this._packet;
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.get_ThumbSticks = function () {
	return this._thumbs;
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.get_Triggers = function () {
	return this._triggers;
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.IsButtonDown = function (button) {
	var buttons = (this._state.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.A | Microsoft.Xna.Framework.Input.ButtonValues.B | Microsoft.Xna.Framework.Input.ButtonValues.Back | Microsoft.Xna.Framework.Input.ButtonValues.Down | Microsoft.Xna.Framework.Input.ButtonValues.Left | Microsoft.Xna.Framework.Input.ButtonValues.LeftShoulder | Microsoft.Xna.Framework.Input.ButtonValues.LeftThumb | Microsoft.Xna.Framework.Input.ButtonValues.Right | Microsoft.Xna.Framework.Input.ButtonValues.RightShoulder | Microsoft.Xna.Framework.Input.ButtonValues.RightThumb | Microsoft.Xna.Framework.Input.ButtonValues.Start | Microsoft.Xna.Framework.Input.ButtonValues.Up | Microsoft.Xna.Framework.Input.ButtonValues.X | Microsoft.Xna.Framework.Input.ButtonValues.Y | Microsoft.Xna.Framework.Input.ButtonValues.BigButton);

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickLeft) !== Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickLeft) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLeftStickDeadZone(this._state.GamePad.ThumbLX, this._state.GamePad.ThumbLY, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes).X >= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickLeft);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickRight) !== Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickRight) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLeftStickDeadZone(this._state.GamePad.ThumbLX, this._state.GamePad.ThumbLY, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes).X <= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickRight);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickDown) !== Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickDown) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLeftStickDeadZone(this._state.GamePad.ThumbLX, this._state.GamePad.ThumbLY, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes).Y >= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickDown);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickUp) !== Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickUp) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyLeftStickDeadZone(this._state.GamePad.ThumbLX, this._state.GamePad.ThumbLY, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes).Y <= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.LeftThumbstickUp);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.RightThumbstickLeft) !== Microsoft.Xna.Framework.Input.Buttons.RightThumbstickLeft) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyRightStickDeadZone(this._state.GamePad.ThumbRX, this._state.GamePad.ThumbRY, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes).X >= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.RightThumbstickLeft);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.RightThumbstickRight) !== Microsoft.Xna.Framework.Input.Buttons.RightThumbstickRight) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyRightStickDeadZone(this._state.GamePad.ThumbRX, this._state.GamePad.ThumbRY, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes).X <= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.RightThumbstickRight);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.RightThumbstickDown) !== Microsoft.Xna.Framework.Input.Buttons.RightThumbstickDown) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyRightStickDeadZone(this._state.GamePad.ThumbRX, this._state.GamePad.ThumbRY, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes).Y >= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.RightThumbstickDown);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.RightThumbstickUp) !== Microsoft.Xna.Framework.Input.Buttons.RightThumbstickUp) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyRightStickDeadZone(this._state.GamePad.ThumbRX, this._state.GamePad.ThumbRY, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes).Y <= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.RightThumbstickUp);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.LeftTrigger) !== Microsoft.Xna.Framework.Input.Buttons.LeftTrigger) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyTriggerDeadZone(this._state.GamePad.LeftTrigger, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes) <= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.LeftTrigger);
	}

	if (!(((button & Microsoft.Xna.Framework.Input.Buttons.RightTrigger) !== Microsoft.Xna.Framework.Input.Buttons.RightTrigger) || (Microsoft.Xna.Framework.Input.GamePadDeadZoneUtils.ApplyTriggerDeadZone(this._state.GamePad.RightTrigger, Microsoft.Xna.Framework.Input.GamePadDeadZone.IndependentAxes) <= 0))) {
		buttons = (buttons | Microsoft.Xna.Framework.Input.Buttons.RightTrigger);
	}
	return ((button & buttons) === button);
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.IsButtonUp = function (button) {
	return !this.IsButtonDown(button);
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.Equals = function (obj) {
	return (obj && 
		(obj.GetType() === this.GetType()) && Microsoft.Xna.Framework.Input.GamePadState.op_Equality(this, JSIL.Cast(obj, Microsoft.Xna.Framework.Input.GamePadState.MemberwiseClone())));
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.GetHashCode = function () {
	return (this._thumbs.GetHashCode() ^ this._triggers.GetHashCode() ^ this._buttons.GetHashCode() ^ this._connected.GetHashCode() ^ this._dpad.GetHashCode() ^ this._packet.GetHashCode());
};

Microsoft.Xna.Framework.Input.GamePadState.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{IsConnected:{0}}}", [this._connected]);
};

Microsoft.Xna.Framework.Input.GamePadState.op_Equality = function (left, right) {
	return (!((left._connected !== right._connected) || 
			(left._packet !== right._packet) || 
			!Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Equality(left._thumbs.MemberwiseClone(), right._thumbs.MemberwiseClone()) || 
			!Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(left._triggers.MemberwiseClone(), right._triggers.MemberwiseClone()) || 
			!Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(left._buttons.MemberwiseClone(), right._buttons.MemberwiseClone())) && Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(left._dpad.MemberwiseClone(), right._dpad.MemberwiseClone()));
};

Microsoft.Xna.Framework.Input.GamePadState.op_Inequality = function (left, right) {
	return ((left._connected !== right._connected) || 
		(left._packet !== right._packet) || 
		Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Inequality(left._thumbs.MemberwiseClone(), right._thumbs.MemberwiseClone()) || 
		Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(left._triggers.MemberwiseClone(), right._triggers.MemberwiseClone()) || 
		Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(left._buttons.MemberwiseClone(), right._buttons.MemberwiseClone()) || Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(left._dpad.MemberwiseClone(), right._dpad.MemberwiseClone()));
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Input.GamePadState.prototype, "_ctor", [
		["_ctor$0", [Microsoft.Xna.Framework.Input.GamePadThumbSticks, Microsoft.Xna.Framework.Input.GamePadTriggers, Microsoft.Xna.Framework.Input.GamePadButtons, Microsoft.Xna.Framework.Input.GamePadDPad]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single, System.Single, System.Array.Of(Microsoft.Xna.Framework.Input.Buttons)]], 
		["_ctor$2", [JSIL.Reference.Of(Microsoft.Xna.Framework.Input.XINPUT_STATE), Microsoft.Xna.Framework.ErrorCodes, Microsoft.Xna.Framework.Input.GamePadDeadZone]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadState.prototype, "Buttons", {
		get: Microsoft.Xna.Framework.Input.GamePadState.prototype.get_Buttons
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadState.prototype, "DPad", {
		get: Microsoft.Xna.Framework.Input.GamePadState.prototype.get_DPad
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadState.prototype, "IsConnected", {
		get: Microsoft.Xna.Framework.Input.GamePadState.prototype.get_IsConnected
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadState.prototype, "PacketNumber", {
		get: Microsoft.Xna.Framework.Input.GamePadState.prototype.get_PacketNumber
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadState.prototype, "ThumbSticks", {
		get: Microsoft.Xna.Framework.Input.GamePadState.prototype.get_ThumbSticks
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadState.prototype, "Triggers", {
		get: Microsoft.Xna.Framework.Input.GamePadState.prototype.get_Triggers
	});

Object.seal(Microsoft.Xna.Framework.Input.GamePadState.prototype);
Object.seal(Microsoft.Xna.Framework.Input.GamePadState);
Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype._connected = new System.Boolean();
Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.__StructFields__ = {
	_caps: Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES
};
Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype._ctor = function (/* ref */ caps, result) {
	this._connected = (result !== Microsoft.Xna.Framework.ErrorCodes.NotConnected);
	this._caps = caps.value.MemberwiseClone();
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_GamePadType = function () {

	if (this._caps.Type === 3) {
		return ((this._caps.Type << 8) | this._caps.SubType);
	}
	return this._caps.SubType;
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_IsConnected = function () {
	return this._connected;
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasAButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.A) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasBackButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Back) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasBButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.B) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasDPadDownButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Down) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasDPadLeftButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Left) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasDPadRightButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Right) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasDPadUpButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Up) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftShoulderButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.LeftShoulder) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftStickButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.LeftThumb) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightShoulderButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.RightShoulder) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightStickButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.RightThumb) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasStartButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Start) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasXButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.X) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasYButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.Y) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasBigButton = function () {
	return ((this._caps.GamePad.Buttons & Microsoft.Xna.Framework.Input.ButtonValues.BigButton) !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftXThumbStick = function () {
	return (this._caps.GamePad.ThumbLX !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftYThumbStick = function () {
	return (this._caps.GamePad.ThumbLY !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightXThumbStick = function () {
	return (this._caps.GamePad.ThumbRX !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightYThumbStick = function () {
	return (this._caps.GamePad.ThumbRY !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftTrigger = function () {
	return (this._caps.GamePad.LeftTrigger !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightTrigger = function () {
	return (this._caps.GamePad.RightTrigger !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftVibrationMotor = function () {
	return (this._caps.Vibration.LeftMotorSpeed !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightVibrationMotor = function () {
	return (this._caps.Vibration.RightMotorSpeed !== 0);
};

Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasVoiceSupport = function () {
	return ((this._caps.Flags & 4) !== 0);
};

Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "GamePadType", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_GamePadType
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "IsConnected", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_IsConnected
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasAButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasAButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasBackButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasBackButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasBButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasBButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasDPadDownButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasDPadDownButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasDPadLeftButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasDPadLeftButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasDPadRightButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasDPadRightButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasDPadUpButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasDPadUpButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasLeftShoulderButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftShoulderButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasLeftStickButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftStickButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasRightShoulderButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightShoulderButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasRightStickButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightStickButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasStartButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasStartButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasXButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasXButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasYButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasYButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasBigButton", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasBigButton
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasLeftXThumbStick", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftXThumbStick
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasLeftYThumbStick", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftYThumbStick
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasRightXThumbStick", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightXThumbStick
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasRightYThumbStick", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightYThumbStick
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasLeftTrigger", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftTrigger
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasRightTrigger", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightTrigger
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasLeftVibrationMotor", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasLeftVibrationMotor
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasRightVibrationMotor", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasRightVibrationMotor
	});
Object.defineProperty(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype, "HasVoiceSupport", {
		get: Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype.get_HasVoiceSupport
	});

Object.seal(Microsoft.Xna.Framework.Input.GamePadCapabilities.prototype);
Object.seal(Microsoft.Xna.Framework.Input.GamePadCapabilities);
Microsoft.Xna.Framework.Input.XINPUT_STATE.prototype.PacketNumber = 0;
Microsoft.Xna.Framework.Input.XINPUT_STATE.prototype.__StructFields__ = {
	GamePad: Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD
};

Object.seal(Microsoft.Xna.Framework.Input.XINPUT_STATE.prototype);
Object.seal(Microsoft.Xna.Framework.Input.XINPUT_STATE);
Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD.prototype.Buttons = 0;
Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD.prototype.LeftTrigger = 0;
Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD.prototype.RightTrigger = 0;
Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD.prototype.ThumbLX = 0;
Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD.prototype.ThumbLY = 0;
Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD.prototype.ThumbRX = 0;
Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD.prototype.ThumbRY = 0;

Object.seal(Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD.prototype);
Object.seal(Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD);
Microsoft.Xna.Framework.Input.XINPUT_VIBRATION.prototype.LeftMotorSpeed = 0;
Microsoft.Xna.Framework.Input.XINPUT_VIBRATION.prototype.RightMotorSpeed = 0;

Object.seal(Microsoft.Xna.Framework.Input.XINPUT_VIBRATION.prototype);
Object.seal(Microsoft.Xna.Framework.Input.XINPUT_VIBRATION);
Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES.prototype.Type = 0;
Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES.prototype.SubType = 0;
Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES.prototype.Flags = 0;
Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES.prototype.__StructFields__ = {
	GamePad: Microsoft.Xna.Framework.Input.XINPUT_GAMEPAD, 
	Vibration: Microsoft.Xna.Framework.Input.XINPUT_VIBRATION
};

Object.seal(Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES.prototype);
Object.seal(Microsoft.Xna.Framework.Input.XINPUT_CAPABILITIES);
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_ACTIVATE", { value: 6 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_SETCURSOR", { value: 32 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_INPUTLANGCHANGE", { value: 81 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_NCACTIVATE", { value: 134 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_KEYDOWN", { value: 256 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_KEYUP", { value: 257 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_CHAR", { value: 258 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_IME_STARTCOMPOSITION", { value: 269 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_IME_ENDCOMPOSITION", { value: 270 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_IME_COMPOSITION", { value: 271 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_IME_SETCONTEXT", { value: 641 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_IME_NOTIFY", { value: 642 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_IME_CHAR", { value: 646 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_MOUSEMOVE", { value: 512 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_LBUTTONDOWN", { value: 513 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_LBUTTONUP", { value: 514 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_LBUTTONDBLCLK", { value: 515 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_RBUTTONDOWN", { value: 516 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_RBUTTONUP", { value: 517 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_RBUTTONDBLCLK", { value: 518 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_MBUTTONDOWN", { value: 519 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_MBUTTONUP", { value: 520 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_MBUTTONDBLCLK", { value: 521 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_MOUSEWHEEL", { value: 522 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_XBUTTONDOWN", { value: 523 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_XBUTTONUP", { value: 524 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "WM_XBUTTONDBLCLK", { value: 525 });
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker, "VK_HOME", { value: 36 });
Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.currentHook = null;
Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks = null;
Microsoft.Xna.Framework.Input.WindowMessageHooker.clobberDetectionMessage = 0;
Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.Dispose$1 = function (disposing) {
	this.RemoveCurrentHook();
	Microsoft.Xna.Framework.Input.WindowMessageHooker.CollectDeadHooks();
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.get_WindowHandle = function () {

	if (this.currentHook === null) {
		return this.currentHook.hWnd;
	}
	return System.IntPtr.Zero;
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.set_WindowHandle = function (value) {

	if (System.IntPtr.op_Inequality(value, this.WindowHandle)) {
		this.RemoveCurrentHook();

		if (System.IntPtr.op_Inequality(value, System.IntPtr.Zero)) {
			this.currentHook = new Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook(this, value);
		}
	}
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.RemoveCurrentHook = function () {

	if (this.currentHook !== null) {
		return ;
	}

	if (this.currentHook.TryRemove()) {
		Microsoft.Xna.Framework.Input.WindowMessageHooker.CollectDeadHooks();
	} else {
		this.currentHook.isHookRemoved = true;
		Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.Add(this.currentHook);
	}
	this.currentHook = null;
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.CollectDeadHooks = function () {
	var i = (Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.Count - 1);

__while0__: 
	while (i >= 0) {

		if (Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.get_Item(i).TryRemove() === null) {
			Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.RemoveAt(i);
			i = Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.Count;
		}
		--i;
	}
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.Update = function () {

	if (this.currentHook !== null) {
		return ;
	}

	if (this.currentHook.isWindowDestroyed) {
		return ;
	}
	this.currentHook.seenClobberDetectionMessage = false;
	Microsoft.Xna.Framework.Input.UnsafeNativeMethods.SendMessage(this.currentHook.hWnd, Microsoft.Xna.Framework.Input.WindowMessageHooker.clobberDetectionMessage, System.IntPtr.Zero, System.IntPtr.Zero);

	if (!this.currentHook.seenClobberDetectionMessage) {
		this.currentHook.isHookRemoved = true;
		Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.Add(this.currentHook);
		this.currentHook = new Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook(this, this.currentHook.hWnd);
	}
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Input.WindowMessageHooker._cctor = function () {
	Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook)) ();
	Microsoft.Xna.Framework.Input.WindowMessageHooker.clobberDetectionMessage = Microsoft.Xna.Framework.Input.UnsafeNativeMethods.RegisterWindowMessage(Microsoft.Xna.Framework.Input.WindowMessageHooker.FullName);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype, "WindowHandle", {
		get: Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.get_WindowHandle, 
		set: Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.set_WindowHandle
	});
Microsoft.Xna.Framework.Input.WindowMessageHooker._cctor();
Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype.__ImplementInterface__(System.IDisposable);

Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.parent = null;
Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.hWnd = 0;
Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.previousWndProc = 0;
Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.wndProcDelegate = null;
Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.wndProcFunction = 0;
Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.isHookRemoved = new System.Boolean();
Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.isWindowDestroyed = new System.Boolean();
Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.seenClobberDetectionMessage = new System.Boolean();
Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype._ctor = function (parent, hWnd) {
	System.Object.prototype._ctor.call(this);
	this.parent = parent;
	this.hWnd = hWnd;
	this.previousWndProc = Microsoft.Xna.Framework.Input.UnsafeNativeMethods.GetWindowLongPtr(hWnd, -4);
	this.wndProcDelegate = JSIL.Delegate.New("Microsoft.Xna.Framework.Input.WindowMessageHooker/Hook/WndProcDelegate", this, Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.WndProc);
	this.wndProcFunction = System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(this.wndProcDelegate);
	Microsoft.Xna.Framework.Input.UnsafeNativeMethods.SetWindowLongPtr(hWnd, -4, this.wndProcFunction);
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.TryRemove = function () {

	if (this.isWindowDestroyed) {
		return true;
	}

	if (System.IntPtr.op_Inequality(Microsoft.Xna.Framework.Input.UnsafeNativeMethods.GetWindowLongPtr(this.hWnd, -4), this.wndProcFunction)) {
		return false;
	}
	Microsoft.Xna.Framework.Input.UnsafeNativeMethods.SetWindowLongPtr(this.hWnd, -4, this.previousWndProc);
	return true;
};

Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype.WndProc = function (msgWnd, msg, wParam, lParam) {

	if (msg === Microsoft.Xna.Framework.Input.WindowMessageHooker.clobberDetectionMessage) {
		this.seenClobberDetectionMessage = true;
		return System.IntPtr.Zero;
	}

	if (msg === 130) {
		this.isWindowDestroyed = true;
		var i = (Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.Count - 1);

	__while0__: 
		while (i >= 0) {

			if (System.IntPtr.op_Equality(Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.get_Item(i).hWnd, msgWnd)) {
				Microsoft.Xna.Framework.Input.WindowMessageHooker.deadHooks.RemoveAt(i);
			}
			--i;
		}
	}

	if (!this.isHookRemoved) {
		var intPtr = this.parent.WndProc(msgWnd, msg, wParam, lParam);

		if (intPtr.get_HasValue()) {
			return intPtr.get_Value();
		}
	}
	return Microsoft.Xna.Framework.Input.UnsafeNativeMethods.CallWindowProc(
		this.previousWndProc, 
		msgWnd, 
		msg, 
		wParam, 
		lParam
	);
};



Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.WndProcDelegate.prototype);
Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.WndProcDelegate);
Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook.prototype);
Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHooker.Hook);
Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype);
Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHooker);
Microsoft.Xna.Framework.Input.WindowMessageHookerTester.prototype.wndProcDelegate = null;
Microsoft.Xna.Framework.Input.WindowMessageHookerTester.prototype._ctor = function (wndProcDelegate) {
	Microsoft.Xna.Framework.Input.WindowMessageHooker.prototype._ctor.call(this);
	this.wndProcDelegate = wndProcDelegate;
};

Microsoft.Xna.Framework.Input.WindowMessageHookerTester.prototype.WndProc = function (hWnd, msg, wParam, lParam) {
	return this.wndProcDelegate(hWnd, msg, wParam, lParam);
};



Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHookerTester.WndProcDelegate.prototype);
Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHookerTester.WndProcDelegate);
Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHookerTester.prototype);
Object.seal(Microsoft.Xna.Framework.Input.WindowMessageHookerTester);
Object.defineProperty(Microsoft.Xna.Framework.BoundingBox, "CornerCount", { value: 8 });
Microsoft.Xna.Framework.BoundingBox.prototype.__StructFields__ = {
	Min: Microsoft.Xna.Framework.Vector3, 
	Max: Microsoft.Xna.Framework.Vector3
};
Microsoft.Xna.Framework.BoundingBox.prototype.GetCorners$0 = function () {
	return JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), [new Microsoft.Xna.Framework.Vector3(this.Min.X, this.Max.Y, this.Max.Z), new Microsoft.Xna.Framework.Vector3(this.Max.X, this.Max.Y, this.Max.Z), new Microsoft.Xna.Framework.Vector3(this.Max.X, this.Min.Y, this.Max.Z), new Microsoft.Xna.Framework.Vector3(this.Min.X, this.Min.Y, this.Max.Z), new Microsoft.Xna.Framework.Vector3(this.Min.X, this.Max.Y, this.Min.Z), new Microsoft.Xna.Framework.Vector3(this.Max.X, this.Max.Y, this.Min.Z), new Microsoft.Xna.Framework.Vector3(this.Max.X, this.Min.Y, this.Min.Z), new Microsoft.Xna.Framework.Vector3(this.Min.X, this.Min.Y, this.Min.Z)].MemberwiseClone());
};

Microsoft.Xna.Framework.BoundingBox.prototype.GetCorners$1 = function (corners) {

	if (corners !== null) {
		throw new System.ArgumentNullException("corners");
	}

	if (corners.length < 8) {
		throw new System.ArgumentOutOfRangeException("corners", Microsoft.Xna.Framework.FrameworkResources.NotEnoughCorners);
	}
	corners[0].X = this.Min.X;
	corners[0].Y = this.Max.Y;
	corners[0].Z = this.Max.Z;
	corners[1].X = this.Max.X;
	corners[1].Y = this.Max.Y;
	corners[1].Z = this.Max.Z;
	corners[2].X = this.Max.X;
	corners[2].Y = this.Min.Y;
	corners[2].Z = this.Max.Z;
	corners[3].X = this.Min.X;
	corners[3].Y = this.Min.Y;
	corners[3].Z = this.Max.Z;
	corners[4].X = this.Min.X;
	corners[4].Y = this.Max.Y;
	corners[4].Z = this.Min.Z;
	corners[5].X = this.Max.X;
	corners[5].Y = this.Max.Y;
	corners[5].Z = this.Min.Z;
	corners[6].X = this.Max.X;
	corners[6].Y = this.Min.Y;
	corners[6].Z = this.Min.Z;
	corners[7].X = this.Min.X;
	corners[7].Y = this.Min.Y;
	corners[7].Z = this.Min.Z;
};

Microsoft.Xna.Framework.BoundingBox.prototype._ctor = function (min, max) {
	this.Min = min;
	this.Max = max;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Equals$0 = function (other) {
	return (Microsoft.Xna.Framework.Vector3.op_Equality(this.Min.MemberwiseClone(), other.Min.MemberwiseClone()) && Microsoft.Xna.Framework.Vector3.op_Equality(this.Max.MemberwiseClone(), other.Max.MemberwiseClone()));
};

Microsoft.Xna.Framework.BoundingBox.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.BoundingBox.MemberwiseClone()) === new Microsoft.Xna.Framework.BoundingBox()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.BoundingBox.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.BoundingBox.prototype.GetHashCode = function () {
	return (this.Min.GetHashCode() + this.Max.GetHashCode());
};

Microsoft.Xna.Framework.BoundingBox.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Min:{0} Max:{1}}}", [this.Min.toString(), this.Max.toString()]);
};

Microsoft.Xna.Framework.BoundingBox.CreateMerged$0 = function (original, additional) {
	var result = new Microsoft.Xna.Framework.BoundingBox();
	Microsoft.Xna.Framework.Vector3.Min(/* ref */ new JSIL.MemberReference(original, "Min"), /* ref */ new JSIL.MemberReference(additional, "Min"), /* ref */ new JSIL.MemberReference(result, "Min"));
	Microsoft.Xna.Framework.Vector3.Max(/* ref */ new JSIL.MemberReference(original, "Max"), /* ref */ new JSIL.MemberReference(additional, "Max"), /* ref */ new JSIL.MemberReference(result, "Max"));
	return result;
};

Microsoft.Xna.Framework.BoundingBox.CreateMerged$1 = function (/* ref */ original, /* ref */ additional, /* ref */ result) {
	var min = new Microsoft.Xna.Framework.Vector3(), max = new Microsoft.Xna.Framework.Vector3();
	Microsoft.Xna.Framework.Vector3.Min(/* ref */ new JSIL.MemberReference(original, "Min"), /* ref */ new JSIL.MemberReference(additional, "Min"), /* ref */ min);
	Microsoft.Xna.Framework.Vector3.Max(/* ref */ new JSIL.MemberReference(original, "Max"), /* ref */ new JSIL.MemberReference(additional, "Max"), /* ref */ max);
	result.Min = min.MemberwiseClone();
	result.Max = max.MemberwiseClone();
};

Microsoft.Xna.Framework.BoundingBox.CreateFromSphere$0 = function (sphere) {
	var result = new Microsoft.Xna.Framework.BoundingBox();
	result.Min.X = (sphere.Center.X - sphere.Radius);
	result.Min.Y = (sphere.Center.Y - sphere.Radius);
	result.Min.Z = (sphere.Center.Z - sphere.Radius);
	result.Max.X = (sphere.Center.X + sphere.Radius);
	result.Max.Y = (sphere.Center.Y + sphere.Radius);
	result.Max.Z = (sphere.Center.Z + sphere.Radius);
	return result;
};

Microsoft.Xna.Framework.BoundingBox.CreateFromSphere$1 = function (/* ref */ sphere, /* ref */ result) {
	result.Min.X = (sphere.Center.X - sphere.Radius);
	result.Min.Y = (sphere.Center.Y - sphere.Radius);
	result.Min.Z = (sphere.Center.Z - sphere.Radius);
	result.Max.X = (sphere.Center.X + sphere.Radius);
	result.Max.Y = (sphere.Center.Y + sphere.Radius);
	result.Max.Z = (sphere.Center.Z + sphere.Radius);
};

Microsoft.Xna.Framework.BoundingBox.CreateFromPoints = function (points) {

	if (points !== null) {
		throw new System.ArgumentNullException();
	}
	var flag = false;
	var min = new Microsoft.Xna.Framework.Vector3(3.4028234663852886E+38);
	var max = new Microsoft.Xna.Framework.Vector3(-3.4028234663852886E+38);
	var enumerator = points.IEnumerable$b1_GetEnumerator();

	try {

	__while0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			var vector = current.MemberwiseClone();
			Microsoft.Xna.Framework.Vector3.Min(/* ref */ min, /* ref */ vector, /* ref */ min);
			Microsoft.Xna.Framework.Vector3.Max(/* ref */ max, /* ref */ vector, /* ref */ max);
			flag = true;
		}
	} finally {

		if (enumerator === null) {
			enumerator.IDisposable_Dispose();
		}
	}

	if (!flag) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.BoundingBoxZeroPoints);
	}
	return new Microsoft.Xna.Framework.BoundingBox(min, max);
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$0 = function (box) {
	return ((this.Max.X >= box.Min.X) && 
		(this.Min.X <= box.Max.X) && 
		(this.Max.Y >= box.Min.Y) && 
		(this.Min.Y <= box.Max.Y) && 
		(this.Max.Z >= box.Min.Z) && (this.Min.Z <= box.Max.Z));
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$1 = function (/* ref */ box, /* ref */ result) {
	result.value = false;

	if (!((this.Max.X >= box.Min.X) && (this.Min.X <= box.Max.X))) {
		return ;
	}

	if (!((this.Max.Y >= box.Min.Y) && (this.Min.Y <= box.Max.Y))) {
		return ;
	}

	if (!((this.Max.Z >= box.Min.Z) && (this.Min.Z <= box.Max.Z))) {
		return ;
	}
	result.value = true;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$2 = function (frustum) {

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(null, frustum)) {
		throw new System.ArgumentNullException("frustum", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return frustum.Intersects(this);
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$3 = function (plane) {
	var vector = new Microsoft.Xna.Framework.Vector3(), vector2 = new Microsoft.Xna.Framework.Vector3();
	vector.X = (plane.Normal.X >= 0) ? this.Min.X : this.Max.X;
	vector.Y = (plane.Normal.Y >= 0) ? this.Min.Y : this.Max.Y;
	vector.Z = (plane.Normal.Z >= 0) ? this.Min.Z : this.Max.Z;
	vector2.X = (plane.Normal.X >= 0) ? this.Max.X : this.Min.X;
	vector2.Y = (plane.Normal.Y >= 0) ? this.Max.Y : this.Min.Y;
	vector2.Z = (plane.Normal.Z >= 0) ? this.Max.Z : this.Min.Z;
	var num = ((plane.Normal.X * vector.X) + (plane.Normal.Y * vector.Y) + (plane.Normal.Z * vector.Z));

	if ((num + plane.D) > 0) {
		return Microsoft.Xna.Framework.PlaneIntersectionType.Front;
	}
	num = ((plane.Normal.X * vector2.X) + (plane.Normal.Y * vector2.Y) + (plane.Normal.Z * vector2.Z));

	if ((num + plane.D) < 0) {
		return Microsoft.Xna.Framework.PlaneIntersectionType.Back;
	}
	return Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$4 = function (/* ref */ plane, /* ref */ result) {
	var vector = new Microsoft.Xna.Framework.Vector3(), vector2 = new Microsoft.Xna.Framework.Vector3();
	vector.X = (plane.Normal.X >= 0) ? this.Min.X : this.Max.X;
	vector.Y = (plane.Normal.Y >= 0) ? this.Min.Y : this.Max.Y;
	vector.Z = (plane.Normal.Z >= 0) ? this.Min.Z : this.Max.Z;
	vector2.X = (plane.Normal.X >= 0) ? this.Max.X : this.Min.X;
	vector2.Y = (plane.Normal.Y >= 0) ? this.Max.Y : this.Min.Y;
	vector2.Z = (plane.Normal.Z >= 0) ? this.Max.Z : this.Min.Z;
	var num = ((plane.Normal.X * vector.X) + (plane.Normal.Y * vector.Y) + (plane.Normal.Z * vector.Z));

	if ((num + plane.D) > 0) {
		result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Front;
		return ;
	}
	num = ((plane.Normal.X * vector2.X) + (plane.Normal.Y * vector2.Y) + (plane.Normal.Z * vector2.Z));

	if ((num + plane.D) < 0) {
		result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Back;
		return ;
	}
	result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$5 = function (ray) {
	var num = 0;
	var num2 = 3.4028234663852886E+38;

	if (System.Math.Abs(ray.Direction.X) < 9.9999999747524271E-07) {

		if (!((ray.Position.X >= this.Min.X) && (ray.Position.X <= this.Max.X))) {
			return new (System.Nullable$b1.Of(System.Single)) ();
		}
	} else {
		var num3 = (1 / ray.Direction.X);
		var num4 = ((this.Min.X - ray.Position.X) * num3);
		var num5 = ((this.Max.X - ray.Position.X) * num3);

		if (num4 > num5) {
			var num6 = num4;
			num4 = num5;
			num5 = num6;
		}
		num = Microsoft.Xna.Framework.MathHelper.Max(num4, num);
		num2 = Microsoft.Xna.Framework.MathHelper.Min(num5, num2);

		if (num > num2) {
			return new (System.Nullable$b1.Of(System.Single)) ();
		}
	}

	if (System.Math.Abs(ray.Direction.Y) < 9.9999999747524271E-07) {

		if (!((ray.Position.Y >= this.Min.Y) && (ray.Position.Y <= this.Max.Y))) {
			return new (System.Nullable$b1.Of(System.Single)) ();
		}
	} else {
		var num7 = (1 / ray.Direction.Y);
		var num8 = ((this.Min.Y - ray.Position.Y) * num7);
		var num9 = ((this.Max.Y - ray.Position.Y) * num7);

		if (num8 > num9) {
			var num10 = num8;
			num8 = num9;
			num9 = num10;
		}
		num = Microsoft.Xna.Framework.MathHelper.Max(num8, num);
		num2 = Microsoft.Xna.Framework.MathHelper.Min(num9, num2);

		if (num > num2) {
			return new (System.Nullable$b1.Of(System.Single)) ();
		}
	}

	if (System.Math.Abs(ray.Direction.Z) < 9.9999999747524271E-07) {

		if (!((ray.Position.Z >= this.Min.Z) && (ray.Position.Z <= this.Max.Z))) {
			return new (System.Nullable$b1.Of(System.Single)) ();
		}
	} else {
		var num11 = (1 / ray.Direction.Z);
		var num12 = ((this.Min.Z - ray.Position.Z) * num11);
		var num13 = ((this.Max.Z - ray.Position.Z) * num11);

		if (num12 > num13) {
			var num14 = num12;
			num12 = num13;
			num13 = num14;
		}
		num = Microsoft.Xna.Framework.MathHelper.Max(num12, num);
		num2 = Microsoft.Xna.Framework.MathHelper.Min(num13, num2);

		if (num > num2) {
			return new (System.Nullable$b1.Of(System.Single)) ();
		}
	}
	return new (System.Nullable$b1.Of(System.Single)) (num);
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$6 = function (/* ref */ ray, /* ref */ result) {
	result.value = new (System.Nullable$b1.Of(System.Single)) ();
	var num = 0;
	var num2 = 3.4028234663852886E+38;

	if (System.Math.Abs(ray.Direction.X) < 9.9999999747524271E-07) {

		if (!((ray.Position.X >= this.Min.X) && (ray.Position.X <= this.Max.X))) {
			return ;
		}
	} else {
		var num3 = (1 / ray.Direction.X);
		var num4 = ((this.Min.X - ray.Position.X) * num3);
		var num5 = ((this.Max.X - ray.Position.X) * num3);

		if (num4 > num5) {
			var num6 = num4;
			num4 = num5;
			num5 = num6;
		}
		num = Microsoft.Xna.Framework.MathHelper.Max(num4, num);
		num2 = Microsoft.Xna.Framework.MathHelper.Min(num5, num2);

		if (num > num2) {
			return ;
		}
	}

	if (System.Math.Abs(ray.Direction.Y) < 9.9999999747524271E-07) {

		if (!((ray.Position.Y >= this.Min.Y) && (ray.Position.Y <= this.Max.Y))) {
			return ;
		}
	} else {
		var num7 = (1 / ray.Direction.Y);
		var num8 = ((this.Min.Y - ray.Position.Y) * num7);
		var num9 = ((this.Max.Y - ray.Position.Y) * num7);

		if (num8 > num9) {
			var num10 = num8;
			num8 = num9;
			num9 = num10;
		}
		num = Microsoft.Xna.Framework.MathHelper.Max(num8, num);
		num2 = Microsoft.Xna.Framework.MathHelper.Min(num9, num2);

		if (num > num2) {
			return ;
		}
	}

	if (System.Math.Abs(ray.Direction.Z) < 9.9999999747524271E-07) {

		if (!((ray.Position.Z >= this.Min.Z) && (ray.Position.Z <= this.Max.Z))) {
			return ;
		}
	} else {
		var num11 = (1 / ray.Direction.Z);
		var num12 = ((this.Min.Z - ray.Position.Z) * num11);
		var num13 = ((this.Max.Z - ray.Position.Z) * num11);

		if (num12 > num13) {
			var num14 = num12;
			num12 = num13;
			num13 = num14;
		}
		num = Microsoft.Xna.Framework.MathHelper.Max(num12, num);
		num2 = Microsoft.Xna.Framework.MathHelper.Min(num13, num2);

		if (num > num2) {
			return ;
		}
	}
	result.value = new (System.Nullable$b1.Of(System.Single)) (num);
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$7 = function (sphere) {
	var vector = new Microsoft.Xna.Framework.Vector3(), num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Clamp(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ new JSIL.MemberReference(this, "Min"), /* ref */ new JSIL.MemberReference(this, "Max"), /* ref */ vector);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ vector, /* ref */ num);
	return (num.value <= (sphere.Radius * sphere.Radius));
};

Microsoft.Xna.Framework.BoundingBox.prototype.Intersects$8 = function (/* ref */ sphere, /* ref */ result) {
	var vector = new Microsoft.Xna.Framework.Vector3(), num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Clamp(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ new JSIL.MemberReference(this, "Min"), /* ref */ new JSIL.MemberReference(this, "Max"), /* ref */ vector);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ vector, /* ref */ num);
	result.value = (num.value <= (sphere.Radius * sphere.Radius));
};

Microsoft.Xna.Framework.BoundingBox.prototype.Contains$0 = function (box) {

	if (!((this.Max.X >= box.Min.X) && (this.Min.X <= box.Max.X))) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}

	if (!((this.Max.Y >= box.Min.Y) && (this.Min.Y <= box.Max.Y))) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}

	if (!((this.Max.Z >= box.Min.Z) && (this.Min.Z <= box.Max.Z))) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}

	if (!((this.Min.X <= box.Min.X) && 
			(box.Max.X <= this.Max.X) && 
			(this.Min.Y <= box.Min.Y) && 
			(box.Max.Y <= this.Max.Y) && 
			(this.Min.Z <= box.Min.Z) && (box.Max.Z <= this.Max.Z))) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Contains$1 = function (/* ref */ box, /* ref */ result) {
	result.value = Microsoft.Xna.Framework.ContainmentType.Disjoint;

	if (!((this.Max.X >= box.Min.X) && (this.Min.X <= box.Max.X))) {
		return ;
	}

	if (!((this.Max.Y >= box.Min.Y) && (this.Min.Y <= box.Max.Y))) {
		return ;
	}

	if (!((this.Max.Z >= box.Min.Z) && (this.Min.Z <= box.Max.Z))) {
		return ;
	}
	result.value = ((this.Min.X <= box.Min.X) && 
		(box.Max.X <= this.Max.X) && 
		(this.Min.Y <= box.Min.Y) && 
		(box.Max.Y <= this.Max.Y) && 
		(this.Min.Z <= box.Min.Z) && 
		(box.Max.Z <= this.Max.Z)) ? Microsoft.Xna.Framework.ContainmentType.Contains : Microsoft.Xna.Framework.ContainmentType.Intersects;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Contains$2 = function (frustum) {

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(null, frustum)) {
		throw new System.ArgumentNullException("frustum", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}

	if (!frustum.Intersects(this)) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}
	var cornerArray = frustum.cornerArray;
	var i = 0;

__while0__: 
	while (i < cornerArray.length) {
		var point = cornerArray[i];

		if (this.Contains(point.MemberwiseClone()) !== 0) {
			return Microsoft.Xna.Framework.ContainmentType.Intersects;
		}
		++i;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Contains$3 = function (point) {

	if (!((this.Min.X <= point.X) && 
			(point.X <= this.Max.X) && 
			(this.Min.Y <= point.Y) && 
			(point.Y <= this.Max.Y) && 
			(this.Min.Z <= point.Z) && (point.Z <= this.Max.Z))) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Contains$4 = function (/* ref */ point, /* ref */ result) {
	result.value = ((this.Min.X <= point.X) && 
		(point.X <= this.Max.X) && 
		(this.Min.Y <= point.Y) && 
		(point.Y <= this.Max.Y) && 
		(this.Min.Z <= point.Z) && 
		(point.Z <= this.Max.Z)) ? Microsoft.Xna.Framework.ContainmentType.Contains : Microsoft.Xna.Framework.ContainmentType.Disjoint;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Contains$5 = function (sphere) {
	var vector = new Microsoft.Xna.Framework.Vector3(), num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Clamp(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ new JSIL.MemberReference(this, "Min"), /* ref */ new JSIL.MemberReference(this, "Max"), /* ref */ vector);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ vector, /* ref */ num);
	var radius = sphere.Radius;

	if (num.value > (radius * radius)) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}

	if (!(((this.Min.X + radius) <= sphere.Center.X) && 
			(sphere.Center.X <= (this.Max.X - radius)) && 
			((this.Max.X - this.Min.X) > radius) && 
			((this.Min.Y + radius) <= sphere.Center.Y) && 
			(sphere.Center.Y <= (this.Max.Y - radius)) && 
			((this.Max.Y - this.Min.Y) > radius) && 
			((this.Min.Z + radius) <= sphere.Center.Z) && 
			(sphere.Center.Z <= (this.Max.Z - radius)) && ((this.Max.X - this.Min.X) > radius))) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingBox.prototype.Contains$6 = function (/* ref */ sphere, /* ref */ result) {
	var vector = new Microsoft.Xna.Framework.Vector3(), num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Clamp(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ new JSIL.MemberReference(this, "Min"), /* ref */ new JSIL.MemberReference(this, "Max"), /* ref */ vector);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ vector, /* ref */ num);
	var radius = sphere.Radius;

	if (num.value > (radius * radius)) {
		result.value = Microsoft.Xna.Framework.ContainmentType.Disjoint;
		return ;
	}
	result.value = (((this.Min.X + radius) <= sphere.Center.X) && 
		(sphere.Center.X <= (this.Max.X - radius)) && 
		((this.Max.X - this.Min.X) > radius) && 
		((this.Min.Y + radius) <= sphere.Center.Y) && 
		(sphere.Center.Y <= (this.Max.Y - radius)) && 
		((this.Max.Y - this.Min.Y) > radius) && 
		((this.Min.Z + radius) <= sphere.Center.Z) && 
		(sphere.Center.Z <= (this.Max.Z - radius)) && 
		((this.Max.X - this.Min.X) > radius)) ? Microsoft.Xna.Framework.ContainmentType.Contains : Microsoft.Xna.Framework.ContainmentType.Intersects;
};

Microsoft.Xna.Framework.BoundingBox.prototype.SupportMapping = function (/* ref */ v, /* ref */ result) {
	result.X = (v.X >= 0) ? this.Max.X : this.Min.X;
	result.Y = (v.Y >= 0) ? this.Max.Y : this.Min.Y;
	result.Z = (v.Z >= 0) ? this.Max.Z : this.Min.Z;
};

Microsoft.Xna.Framework.BoundingBox.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.BoundingBox.op_Inequality = function (a, b) {
	return (Microsoft.Xna.Framework.Vector3.op_Inequality(a.Min.MemberwiseClone(), b.Min.MemberwiseClone()) || Microsoft.Xna.Framework.Vector3.op_Inequality(a.Max.MemberwiseClone(), b.Max.MemberwiseClone()));
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingBox.prototype, "GetCorners", [
		["GetCorners$0", []], 
		["GetCorners$1", [System.Array.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingBox.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingBox, "CreateMerged", [
		["CreateMerged$0", [Microsoft.Xna.Framework.BoundingBox, Microsoft.Xna.Framework.BoundingBox]], 
		["CreateMerged$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingBox, "CreateFromSphere", [
		["CreateFromSphere$0", [Microsoft.Xna.Framework.BoundingSphere]], 
		["CreateFromSphere$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingBox.prototype, "Intersects", [
		["Intersects$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Intersects$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(System.Boolean)]], 
		["Intersects$2", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Intersects$3", [Microsoft.Xna.Framework.Plane]], 
		["Intersects$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(Microsoft.Xna.Framework.PlaneIntersectionType)]], 
		["Intersects$5", [Microsoft.Xna.Framework.Ray]], 
		["Intersects$6", [JSIL.Reference.Of(Microsoft.Xna.Framework.Ray), JSIL.Reference.Of(System.Nullable$b1.Of(System.Single))]], 
		["Intersects$7", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Intersects$8", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(System.Boolean)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingBox.prototype, "Contains", [
		["Contains$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Contains$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]], 
		["Contains$2", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Contains$3", [Microsoft.Xna.Framework.Vector3]], 
		["Contains$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]], 
		["Contains$5", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Contains$6", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]]
	]
);
Microsoft.Xna.Framework.BoundingBox.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.BoundingBox));

Object.seal(Microsoft.Xna.Framework.BoundingBox.prototype);
Object.seal(Microsoft.Xna.Framework.BoundingBox);
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum, "CornerCount", { value: 8 });
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum, "NearPlaneIndex", { value: 0 });
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum, "FarPlaneIndex", { value: 1 });
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum, "LeftPlaneIndex", { value: 2 });
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum, "RightPlaneIndex", { value: 3 });
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum, "TopPlaneIndex", { value: 4 });
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum, "BottomPlaneIndex", { value: 5 });
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum, "NumPlanes", { value: 6 });
Microsoft.Xna.Framework.BoundingFrustum.prototype.planes = null;
Microsoft.Xna.Framework.BoundingFrustum.prototype.cornerArray = null;
Microsoft.Xna.Framework.BoundingFrustum.prototype.gjk = null;
Microsoft.Xna.Framework.BoundingFrustum.prototype.__StructFields__ = {
	matrix: Microsoft.Xna.Framework.Matrix
};
Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Near = function () {
	return this.planes[0];
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Far = function () {
	return this.planes[1];
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Left = function () {
	return this.planes[2];
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Right = function () {
	return this.planes[3];
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Top = function () {
	return this.planes[4];
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Bottom = function () {
	return this.planes[5];
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.GetCorners$0 = function () {
	return JSIL.Cast(this.cornerArray.Clone(), System.Array.Of(Microsoft.Xna.Framework.Vector3));
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.GetCorners$1 = function (corners) {

	if (corners !== null) {
		throw new System.ArgumentNullException("corners");
	}

	if (corners.length < 8) {
		throw new System.ArgumentOutOfRangeException("corners", Microsoft.Xna.Framework.FrameworkResources.NotEnoughCorners);
	}
	this.cornerArray.CopyTo(corners, 0);
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Matrix = function () {
	return this.matrix;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.set_Matrix = function (value) {
	this.SetMatrix(/* ref */ value);
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Equals$0 = function (other) {
	return (!Microsoft.Xna.Framework.BoundingFrustum.op_Equality(other, null) && Microsoft.Xna.Framework.Matrix.op_Equality(this.matrix.MemberwiseClone(), other.matrix.MemberwiseClone()));
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Equals$1 = function (obj) {
	var result = false;
	var boundingFrustum = JSIL.TryCast(obj, Microsoft.Xna.Framework.BoundingFrustum);

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Inequality(boundingFrustum, null)) {
		result = Microsoft.Xna.Framework.Matrix.op_Equality(this.matrix.MemberwiseClone(), boundingFrustum.matrix.MemberwiseClone());
	}
	return result;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.GetHashCode = function () {
	return this.matrix.GetHashCode();
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Near:{0} Far:{1} Left:{2} Right:{3} Top:{4} Bottom:{5}}}", [this.Near.toString(), this.Far.toString(), this.Left.toString(), this.Right.toString(), this.Top.toString(), this.Bottom.toString()]);
};

Microsoft.Xna.Framework.BoundingFrustum.prototype._ctor$0 = function () {
	this.planes = JSIL.Array.New(Microsoft.Xna.Framework.Plane.MemberwiseClone(), 6);
	this.cornerArray = JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), 8);
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.BoundingFrustum.prototype._ctor$1 = function (value) {
	this.planes = JSIL.Array.New(Microsoft.Xna.Framework.Plane.MemberwiseClone(), 6);
	this.cornerArray = JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), 8);
	System.Object.prototype._ctor.call(this);
	this.SetMatrix(/* ref */ value);
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.SetMatrix = function (/* ref */ value) {
	this.matrix = value.value.MemberwiseClone();
	this.planes[2].Normal.X = (-value.M14 - value.M11);
	this.planes[2].Normal.Y = (-value.M24 - value.M21);
	this.planes[2].Normal.Z = (-value.M34 - value.M31);
	this.planes[2].D = (-value.M44 - value.M41);
	this.planes[3].Normal.X = (-value.M14 + value.M11);
	this.planes[3].Normal.Y = (-value.M24 + value.M21);
	this.planes[3].Normal.Z = (-value.M34 + value.M31);
	this.planes[3].D = (-value.M44 + value.M41);
	this.planes[4].Normal.X = (-value.M14 + value.M12);
	this.planes[4].Normal.Y = (-value.M24 + value.M22);
	this.planes[4].Normal.Z = (-value.M34 + value.M32);
	this.planes[4].D = (-value.M44 + value.M42);
	this.planes[5].Normal.X = (-value.M14 - value.M12);
	this.planes[5].Normal.Y = (-value.M24 - value.M22);
	this.planes[5].Normal.Z = (-value.M34 - value.M32);
	this.planes[5].D = (-value.M44 - value.M42);
	this.planes[0].Normal.X = -value.M13;
	this.planes[0].Normal.Y = -value.M23;
	this.planes[0].Normal.Z = -value.M33;
	this.planes[0].D = -value.M43;
	this.planes[1].Normal.X = (-value.M14 + value.M13);
	this.planes[1].Normal.Y = (-value.M24 + value.M23);
	this.planes[1].Normal.Z = (-value.M34 + value.M33);
	this.planes[1].D = (-value.M44 + value.M43);
	var i = 0;

__while0__: 
	while (i < 6) {
		var num = this.planes[i].Normal.length();
		var expr_359_cp_0 = this.planes;
		var expr_359_cp_1 = i;
		expr_359_cp_0[expr_359_cp_1].Normal = Microsoft.Xna.Framework.Vector3.op_Division(expr_359_cp_0[expr_359_cp_1].Normal.MemberwiseClone(), num);
		var expr_376_cp_0 = this.planes;
		var expr_376_cp_1 = i;
		expr_376_cp_0[expr_376_cp_1].D = (expr_376_cp_0[expr_376_cp_1].D / num);
		++i;
	}
	var ray = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersectionLine(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference());
	this.cornerArray[0] = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection(JSIL.UnmaterializedReference(), /* ref */ ray);
	this.cornerArray[3] = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection(JSIL.UnmaterializedReference(), /* ref */ ray);
	ray = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersectionLine(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference());
	this.cornerArray[1] = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection(JSIL.UnmaterializedReference(), /* ref */ ray);
	this.cornerArray[2] = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection(JSIL.UnmaterializedReference(), /* ref */ ray);
	ray = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersectionLine(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference());
	this.cornerArray[4] = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection(JSIL.UnmaterializedReference(), /* ref */ ray);
	this.cornerArray[7] = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection(JSIL.UnmaterializedReference(), /* ref */ ray);
	ray = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersectionLine(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference());
	this.cornerArray[5] = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection(JSIL.UnmaterializedReference(), /* ref */ ray);
	this.cornerArray[6] = Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection(JSIL.UnmaterializedReference(), /* ref */ ray);
};

Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersectionLine = function (/* ref */ p1, /* ref */ p2) {
	var result = new Microsoft.Xna.Framework.Ray();
	result.Direction = Microsoft.Xna.Framework.Vector3.Cross(p1.Normal.MemberwiseClone(), p2.Normal.MemberwiseClone());
	result.Position = Microsoft.Xna.Framework.Vector3.op_Division(
		Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3.op_Addition(
				Microsoft.Xna.Framework.Vector3.op_Multiply(-p1.D, p2.Normal.MemberwiseClone()), 
				Microsoft.Xna.Framework.Vector3.op_Multiply(p2.D, p1.Normal.MemberwiseClone())
			), result.Direction.MemberwiseClone()), 
		result.Direction.LengthSquared()
	);
	return result;
};

Microsoft.Xna.Framework.BoundingFrustum.ComputeIntersection = function (/* ref */ plane, /* ref */ ray) {
	return Microsoft.Xna.Framework.Vector3.op_Addition(ray.Position.MemberwiseClone(), Microsoft.Xna.Framework.Vector3.op_Multiply(ray.Direction.MemberwiseClone(), ((-plane.D - Microsoft.Xna.Framework.Vector3.Dot(plane.Normal.MemberwiseClone(), ray.Position.MemberwiseClone())) / Microsoft.Xna.Framework.Vector3.Dot(plane.Normal.MemberwiseClone(), ray.Direction.MemberwiseClone()))));
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$0 = function (box) {
	var result = new JSIL.Variable(false);
	this.Intersects(/* ref */ box, /* ref */ result);
	return result.value;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$1 = function (/* ref */ box, /* ref */ result) {

	var __label0__ = null;
__step0__: 
	while (true) {

		switch (__label0__) {

			case null:
				var vector = new Microsoft.Xna.Framework.Vector3(), vector2 = new Microsoft.Xna.Framework.Vector3(), vector3 = new Microsoft.Xna.Framework.Vector3(), vector4 = new Microsoft.Xna.Framework.Vector3();
				__label0__ = "__entry0__";
				continue __step0__;
				break;

			case "__entry0__":

				if (this.gjk !== null) {
					this.gjk = new Microsoft.Xna.Framework.Gjk();
				}
				this.gjk.Reset();
				Microsoft.Xna.Framework.Vector3.Subtract(JSIL.UnmaterializedReference(), /* ref */ new JSIL.MemberReference(box, "Min"), /* ref */ closestPoint);

				if (closestPoint.LengthSquared() < 9.9999997473787516E-06) {
					Microsoft.Xna.Framework.Vector3.Subtract(JSIL.UnmaterializedReference(), /* ref */ new JSIL.MemberReference(box, "Max"), /* ref */ closestPoint);
				}
				var num = 3.4028234663852886E+38;
				result.value = false;

			__while0__: 
				while (true) {
					vector.X = -closestPoint.X;
					vector.Y = -closestPoint.Y;
					vector.Z = -closestPoint.Z;
					this.SupportMapping(/* ref */ vector, /* ref */ vector2);
					box.SupportMapping(/* ref */ closestPoint, /* ref */ vector3);
					Microsoft.Xna.Framework.Vector3.Subtract(/* ref */ vector2, /* ref */ vector3, /* ref */ vector4);
					var num2 = ((closestPoint.X * vector4.X) + (closestPoint.Y * vector4.Y) + (closestPoint.Z * vector4.Z));

					if (num2 > 0) {
						break __while0__;
					}
					this.gjk.AddSupportPoint(/* ref */ vector4);
					var closestPoint = this.gjk.ClosestPoint;
					var num3 = num;
					num = closestPoint.LengthSquared();

					if ((num3 - num) <= (9.9999997473787516E-06 * num3)) {
						return ;
					}
					var num4 = (3.9999998989515007E-05 * this.gjk.MaxLengthSquared);

					if (!(!this.gjk.FullSimplex && (num >= num4))) {
						__label0__ = "IL_14A";
						continue __step0__;
					}
				}
				return ;
				return ;
				__label0__ = "IL_14A";
				continue __step0__;
				break;

			case "IL_14A":
				result.value = true;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$2 = function (frustum) {
	var vector = new Microsoft.Xna.Framework.Vector3(), vector2 = new Microsoft.Xna.Framework.Vector3(), vector3 = new Microsoft.Xna.Framework.Vector3(), vector4 = new Microsoft.Xna.Framework.Vector3();

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(frustum, null)) {
		throw new System.ArgumentNullException("frustum");
	}

	if (this.gjk !== null) {
		this.gjk = new Microsoft.Xna.Framework.Gjk();
	}
	this.gjk.Reset();
	Microsoft.Xna.Framework.Vector3.Subtract(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference(), /* ref */ closestPoint);

	if (closestPoint.LengthSquared() < 9.9999997473787516E-06) {
		Microsoft.Xna.Framework.Vector3.Subtract(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference(), /* ref */ closestPoint);
	}
	var num = 3.4028234663852886E+38;

__while0__: 
	while (true) {
		vector.X = -closestPoint.X;
		vector.Y = -closestPoint.Y;
		vector.Z = -closestPoint.Z;
		this.SupportMapping(/* ref */ vector, /* ref */ vector2);
		frustum.SupportMapping(/* ref */ closestPoint, /* ref */ vector3);
		Microsoft.Xna.Framework.Vector3.Subtract(/* ref */ vector2, /* ref */ vector3, /* ref */ vector4);
		var num2 = ((closestPoint.X * vector4.X) + (closestPoint.Y * vector4.Y) + (closestPoint.Z * vector4.Z));

		if (num2 > 0) {
			break __while0__;
		}
		this.gjk.AddSupportPoint(/* ref */ vector4);
		var closestPoint = this.gjk.ClosestPoint;
		var num3 = num;
		num = closestPoint.LengthSquared();
		var num4 = (3.9999998989515007E-05 * this.gjk.MaxLengthSquared);

		if ((num3 - num) <= (9.9999997473787516E-06 * num3)) {
			return false;
		}

		if (!(!this.gjk.FullSimplex && (num >= num4))) {
			return true;
		}
	}
	return false;
	return false;
	return true;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$3 = function (plane) {
	var num2 = new JSIL.Variable(0);
	var num = 0;
	var i = 0;

__while0__: 
	while (i < 8) {
		Microsoft.Xna.Framework.Vector3.Dot(JSIL.UnmaterializedReference(), /* ref */ new JSIL.MemberReference(plane, "Normal"), /* ref */ num2);

		if ((num2.value + plane.D) > 0) {
			num = (num | 1);
		} else {
			num = (num | 2);
		}

		if (num === 3) {
			return Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting;
		}
		++i;
	}

	if (num !== 1) {
		return Microsoft.Xna.Framework.PlaneIntersectionType.Back;
	}
	return Microsoft.Xna.Framework.PlaneIntersectionType.Front;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$4 = function (/* ref */ plane, /* ref */ result) {
	var num2 = new JSIL.Variable(0);
	var num = 0;
	var i = 0;

__while0__: 
	while (i < 8) {
		Microsoft.Xna.Framework.Vector3.Dot(JSIL.UnmaterializedReference(), /* ref */ new JSIL.MemberReference(plane, "Normal"), /* ref */ num2);

		if ((num2.value + plane.D) > 0) {
			num = (num | 1);
		} else {
			num = (num | 2);
		}

		if (num === 3) {
			result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting;
			return ;
		}
		++i;
	}
	result.value = (num === 1) ? Microsoft.Xna.Framework.PlaneIntersectionType.Front : Microsoft.Xna.Framework.PlaneIntersectionType.Back;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$5 = function (ray) {
	var result = new (System.Nullable$b1.Of(System.Single)) ();
	this.Intersects(/* ref */ ray, /* ref */ result);
	return result;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$6 = function (/* ref */ ray, /* ref */ result) {
	var containmentType = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	this.Contains(/* ref */ new JSIL.MemberReference(ray, "Position"), /* ref */ containmentType);

	if (containmentType.value === Microsoft.Xna.Framework.ContainmentType.Contains) {
		result.value = new (System.Nullable$b1.Of(System.Single)) (0);
		return ;
	}
	var num = -3.4028234663852886E+38;
	var num2 = 3.4028234663852886E+38;
	result.value = new (System.Nullable$b1.Of(System.Single)) ();
	var array = this.planes;
	var i = 0;

__while0__: 
	while (i < array.length) {
		var plane = array[i];
		var normal = plane.Normal.MemberwiseClone();
		Microsoft.Xna.Framework.Vector3.Dot(/* ref */ new JSIL.MemberReference(ray, "Direction"), /* ref */ normal, /* ref */ num3);
		Microsoft.Xna.Framework.Vector3.Dot(/* ref */ new JSIL.MemberReference(ray, "Position"), /* ref */ normal, /* ref */ num4);
		var num4 = new JSIL.Variable((num4.value + plane.D));

		if (System.Math.Abs(num3.value) < 9.9999997473787516E-06) {

			if (num4.value > 0) {
				return ;
			}
		} else {
			var num5 = (-num4.value / num3.value);

			if (num3.value < 0) {

				if (num5 > num2) {
					return ;
				}

				if (num5 > num) {
					num = num5;
				}
			} else {

				if (num5 < num) {
					return ;
				}

				if (num5 < num2) {
					num2 = num5;
				}
			}
		}
		++i;
		continue __while0__;
		return ;
	}
	var num6 = (num >= 0) ? num : num2;

	if (num6 >= 0) {
		result.value = new (System.Nullable$b1.Of(System.Single)) (num6);
		return ;
	}
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$7 = function (sphere) {
	var result = new JSIL.Variable(false);
	this.Intersects(/* ref */ sphere, /* ref */ result);
	return result.value;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Intersects$8 = function (/* ref */ sphere, /* ref */ result) {

	var __label0__ = null;
__step0__: 
	while (true) {

		switch (__label0__) {

			case null:
				var vector2 = new Microsoft.Xna.Framework.Vector3(), vector3 = new Microsoft.Xna.Framework.Vector3(), vector4 = new Microsoft.Xna.Framework.Vector3(), vector5 = new Microsoft.Xna.Framework.Vector3();
				__label0__ = "__entry0__";
				continue __step0__;
				break;

			case "__entry0__":

				if (this.gjk !== null) {
					this.gjk = new Microsoft.Xna.Framework.Gjk();
				}
				this.gjk.Reset();
				Microsoft.Xna.Framework.Vector3.Subtract(JSIL.UnmaterializedReference(), /* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ vector);

				if (vector.LengthSquared() < 9.9999997473787516E-06) {
					var vector = Microsoft.Xna.Framework.Vector3.UnitX;
				}
				var num = 3.4028234663852886E+38;
				result.value = false;

			__while0__: 
				while (true) {
					vector2.X = -vector.X;
					vector2.Y = -vector.Y;
					vector2.Z = -vector.Z;
					this.SupportMapping(/* ref */ vector2, /* ref */ vector3);
					sphere.SupportMapping(/* ref */ vector, /* ref */ vector4);
					Microsoft.Xna.Framework.Vector3.Subtract(/* ref */ vector3, /* ref */ vector4, /* ref */ vector5);
					var num2 = ((vector.X * vector5.X) + (vector.Y * vector5.Y) + (vector.Z * vector5.Z));

					if (num2 > 0) {
						break __while0__;
					}
					this.gjk.AddSupportPoint(/* ref */ vector5);
					vector = this.gjk.ClosestPoint;
					var num3 = num;
					num = vector.LengthSquared();

					if ((num3 - num) <= (9.9999997473787516E-06 * num3)) {
						return ;
					}
					var num4 = (3.9999998989515007E-05 * this.gjk.MaxLengthSquared);

					if (!(!this.gjk.FullSimplex && (num >= num4))) {
						__label0__ = "IL_138";
						continue __step0__;
					}
				}
				return ;
				return ;
				__label0__ = "IL_138";
				continue __step0__;
				break;

			case "IL_138":
				result.value = true;
				break __step0__;
		}
	}
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Contains$0 = function (box) {
	var flag = false;
	var array = this.planes;
	var i = 0;

__while0__: 
	while (i < array.length) {
		var planeIntersectionType = box.Intersects(array[i]);

		if (planeIntersectionType !== 0) {
			return Microsoft.Xna.Framework.ContainmentType.Disjoint;
		}

		if (planeIntersectionType === Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting) {
			flag = true;
		}
		++i;
	}

	if (!flag) {
		return Microsoft.Xna.Framework.ContainmentType.Contains;
	}
	return Microsoft.Xna.Framework.ContainmentType.Intersects;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Contains$1 = function (/* ref */ box, /* ref */ result) {
	var flag = false;
	var array = this.planes;
	var i = 0;

__while0__: 
	while (i < array.length) {
		var planeIntersectionType = box.Intersects(array[i]);

		if (planeIntersectionType !== 0) {
			result.value = Microsoft.Xna.Framework.ContainmentType.Disjoint;
			return ;
		}

		if (planeIntersectionType === Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting) {
			flag = true;
		}
		++i;
	}
	result.value = flag ? Microsoft.Xna.Framework.ContainmentType.Intersects : Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Contains$2 = function (frustum) {

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(frustum, null)) {
		throw new System.ArgumentNullException("frustum");
	}
	var result = Microsoft.Xna.Framework.ContainmentType.Disjoint;

	if (this.Intersects(frustum)) {
		result = Microsoft.Xna.Framework.ContainmentType.Contains;
		var i = 0;

	__while0__: 
		while (i < this.cornerArray.length) {

			if (this.Contains(frustum.cornerArray[i]) !== 0) {
				result = Microsoft.Xna.Framework.ContainmentType.Intersects;
				break __while0__;
			}
			++i;
		}
	}
	return result;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Contains$3 = function (point) {
	var array = this.planes;
	var i = 0;

__while0__: 
	while (i < array.length) {
		var plane = array[i];
		var num = ((plane.Normal.X * point.X) + (plane.Normal.Y * point.Y) + (plane.Normal.Z * point.Z) + plane.D);

		if (num > 9.9999997473787516E-06) {
			return Microsoft.Xna.Framework.ContainmentType.Disjoint;
		}
		++i;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Contains$4 = function (/* ref */ point, /* ref */ result) {
	var array = this.planes;
	var i = 0;

__while0__: 
	while (i < array.length) {
		var plane = array[i];
		var num = ((plane.Normal.X * point.X) + (plane.Normal.Y * point.Y) + (plane.Normal.Z * point.Z) + plane.D);

		if (num > 9.9999997473787516E-06) {
			result.value = Microsoft.Xna.Framework.ContainmentType.Disjoint;
			return ;
		}
		++i;
	}
	result.value = Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Contains$5 = function (sphere) {
	var center = sphere.Center.MemberwiseClone();
	var radius = sphere.Radius;
	var num = 0;
	var array = this.planes;
	var i = 0;

__while0__: 
	while (i < array.length) {
		var plane = array[i];
		var num3 = ((plane.Normal.X * center.X) + (plane.Normal.Y * center.Y) + (plane.Normal.Z * center.Z) + plane.D);

		if (num3 > radius) {
			return Microsoft.Xna.Framework.ContainmentType.Disjoint;
		}

		if (num3 < -radius) {
			++num;
		}
		++i;
	}

	if (num !== 6) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.Contains$6 = function (/* ref */ sphere, /* ref */ result) {
	var center = sphere.Center.MemberwiseClone();
	var radius = sphere.Radius;
	var num = 0;
	var array = this.planes;
	var i = 0;

__while0__: 
	while (i < array.length) {
		var plane = array[i];
		var num3 = ((plane.Normal.X * center.X) + (plane.Normal.Y * center.Y) + (plane.Normal.Z * center.Z) + plane.D);

		if (num3 > radius) {
			result.value = Microsoft.Xna.Framework.ContainmentType.Disjoint;
			return ;
		}

		if (num3 < -radius) {
			++num;
		}
		++i;
	}
	result.value = (num === 6) ? Microsoft.Xna.Framework.ContainmentType.Contains : Microsoft.Xna.Framework.ContainmentType.Intersects;
};

Microsoft.Xna.Framework.BoundingFrustum.prototype.SupportMapping = function (/* ref */ v, /* ref */ result) {
	var num3 = new JSIL.Variable(0);
	var num = 0;
	Microsoft.Xna.Framework.Vector3.Dot(JSIL.UnmaterializedReference(), /* ref */ v, /* ref */ num2);
	var i = 1;

__while0__: 
	while (i < this.cornerArray.length) {
		Microsoft.Xna.Framework.Vector3.Dot(JSIL.UnmaterializedReference(), /* ref */ v, /* ref */ num3);

		if (num3.value > num2.value) {
			num = i;
			var num2 = new JSIL.Variable(num3.value);
		}
		++i;
	}
	result.value = this.cornerArray[num];
};

Microsoft.Xna.Framework.BoundingFrustum.op_Equality = function (a, b) {
	return System.Object.Equals(a, b);
};

Microsoft.Xna.Framework.BoundingFrustum.op_Inequality = function (a, b) {
	return !System.Object.Equals(a, b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingFrustum.prototype, "GetCorners", [
		["GetCorners$0", []], 
		["GetCorners$1", [System.Array.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingFrustum.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [Microsoft.Xna.Framework.Matrix]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Intersects", [
		["Intersects$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Intersects$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(System.Boolean)]], 
		["Intersects$2", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Intersects$3", [Microsoft.Xna.Framework.Plane]], 
		["Intersects$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(Microsoft.Xna.Framework.PlaneIntersectionType)]], 
		["Intersects$5", [Microsoft.Xna.Framework.Ray]], 
		["Intersects$6", [JSIL.Reference.Of(Microsoft.Xna.Framework.Ray), JSIL.Reference.Of(System.Nullable$b1.Of(System.Single))]], 
		["Intersects$7", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Intersects$8", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(System.Boolean)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Contains", [
		["Contains$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Contains$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]], 
		["Contains$2", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Contains$3", [Microsoft.Xna.Framework.Vector3]], 
		["Contains$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]], 
		["Contains$5", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Contains$6", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Near", {
		get: Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Near
	});
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Far", {
		get: Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Far
	});
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Left", {
		get: Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Left
	});
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Right", {
		get: Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Right
	});
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Top", {
		get: Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Top
	});
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Bottom", {
		get: Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Bottom
	});
Object.defineProperty(Microsoft.Xna.Framework.BoundingFrustum.prototype, "Matrix", {
		get: Microsoft.Xna.Framework.BoundingFrustum.prototype.get_Matrix, 
		set: Microsoft.Xna.Framework.BoundingFrustum.prototype.set_Matrix
	});
Microsoft.Xna.Framework.BoundingFrustum.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.BoundingFrustum));

Object.seal(Microsoft.Xna.Framework.BoundingFrustum.prototype);
Object.seal(Microsoft.Xna.Framework.BoundingFrustum);
Microsoft.Xna.Framework.BoundingSphere.prototype.Radius = 0;
Microsoft.Xna.Framework.BoundingSphere.prototype.__StructFields__ = {
	Center: Microsoft.Xna.Framework.Vector3
};
Microsoft.Xna.Framework.BoundingSphere.prototype._ctor = function (center, radius) {

	if (radius < 0) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NegativeRadius);
	}
	this.Center = center;
	this.Radius = radius;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Equals$0 = function (other) {
	return (Microsoft.Xna.Framework.Vector3.op_Equality(this.Center.MemberwiseClone(), other.Center.MemberwiseClone()) && (this.Radius === other.Radius));
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.BoundingSphere.MemberwiseClone()) === new Microsoft.Xna.Framework.BoundingSphere()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.BoundingSphere.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.GetHashCode = function () {
	return (this.Center.GetHashCode() + this.Radius.GetHashCode());
};

Microsoft.Xna.Framework.BoundingSphere.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return System.String.Format(currentCulture, "{{Center:{0} Radius:{1}}}", [this.Center.toString(), this.Radius.toString(currentCulture)]);
};

Microsoft.Xna.Framework.BoundingSphere.CreateMerged$0 = function (original, additional) {
	var value = new Microsoft.Xna.Framework.Vector3(), result = new Microsoft.Xna.Framework.BoundingSphere();
	Microsoft.Xna.Framework.Vector3.Subtract(/* ref */ new JSIL.MemberReference(additional, "Center"), /* ref */ new JSIL.MemberReference(original, "Center"), /* ref */ value);
	var num = value.length();
	var radius = original.Radius;
	var radius2 = additional.Radius;

	if ((radius + radius2) >= num) {

		if ((radius - radius2) >= num) {
			return original;
		}

		if ((radius2 - radius) >= num) {
			return additional;
		}
	}
	var value2 = Microsoft.Xna.Framework.Vector3.op_Multiply(value.MemberwiseClone(), (1 / num));
	var num2 = Microsoft.Xna.Framework.MathHelper.Min(-radius, (num - radius2));
	var num4 = ((Microsoft.Xna.Framework.MathHelper.Max(radius, (num + radius2)) - num2) * 0.5);
	result.Center = Microsoft.Xna.Framework.Vector3.op_Addition(original.Center.MemberwiseClone(), Microsoft.Xna.Framework.Vector3.op_Multiply(value2.MemberwiseClone(), (num4 + num2)));
	result.Radius = num4;
	return result;
};

Microsoft.Xna.Framework.BoundingSphere.CreateMerged$1 = function (/* ref */ original, /* ref */ additional, /* ref */ result) {
	var value = new Microsoft.Xna.Framework.Vector3();
	Microsoft.Xna.Framework.Vector3.Subtract(/* ref */ new JSIL.MemberReference(additional, "Center"), /* ref */ new JSIL.MemberReference(original, "Center"), /* ref */ value);
	var num = value.length();
	var radius = original.Radius;
	var radius2 = additional.Radius;

	if ((radius + radius2) >= num) {

		if ((radius - radius2) >= num) {
			result.value = original.value.MemberwiseClone();
			return ;
		}

		if ((radius2 - radius) >= num) {
			result.value = additional.value.MemberwiseClone();
			return ;
		}
	}
	var value2 = Microsoft.Xna.Framework.Vector3.op_Multiply(value.MemberwiseClone(), (1 / num));
	var num2 = Microsoft.Xna.Framework.MathHelper.Min(-radius, (num - radius2));
	var num4 = ((Microsoft.Xna.Framework.MathHelper.Max(radius, (num + radius2)) - num2) * 0.5);
	result.Center = Microsoft.Xna.Framework.Vector3.op_Addition(original.Center.MemberwiseClone(), Microsoft.Xna.Framework.Vector3.op_Multiply(value2.MemberwiseClone(), (num4 + num2)));
	result.Radius = num4;
};

Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox$0 = function (box) {
	var result = new Microsoft.Xna.Framework.BoundingSphere(), num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Lerp(/* ref */ new JSIL.MemberReference(box, "Min"), /* ref */ new JSIL.MemberReference(box, "Max"), 0.5, /* ref */ new JSIL.MemberReference(result, "Center"));
	Microsoft.Xna.Framework.Vector3.Distance(/* ref */ new JSIL.MemberReference(box, "Min"), /* ref */ new JSIL.MemberReference(box, "Max"), /* ref */ num);
	result.Radius = (num.value * 0.5);
	return result;
};

Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox$1 = function (/* ref */ box, /* ref */ result) {
	var num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Lerp(/* ref */ new JSIL.MemberReference(box, "Min"), /* ref */ new JSIL.MemberReference(box, "Max"), 0.5, /* ref */ new JSIL.MemberReference(result, "Center"));
	Microsoft.Xna.Framework.Vector3.Distance(/* ref */ new JSIL.MemberReference(box, "Min"), /* ref */ new JSIL.MemberReference(box, "Max"), /* ref */ num);
	result.Radius = (num.value * 0.5);
};

Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints = function (points) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0), value = new Microsoft.Xna.Framework.Vector3(), result = new Microsoft.Xna.Framework.BoundingSphere();

	if (points !== null) {
		throw new System.ArgumentNullException("points");
	}
	var enumerator = points.IEnumerable$b1_GetEnumerator();

	if (!enumerator.IEnumerator_MoveNext()) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.BoundingSphereZeroPoints);
	}
	var vector = vector2 = vector3 = vector4 = vector5 = vector6 = enumerator.IEnumerator$b1_Current;
	var enumerator2 = points.IEnumerable$b1_GetEnumerator();

	try {

	__while0__: 
		while (enumerator2.IEnumerator_MoveNext()) {
			var current = enumerator2.IEnumerator$b1_Current;

			if (current.X < vector2.X) {
				vector2 = current.MemberwiseClone();
			}

			if (current.X > vector.X) {
				vector = current.MemberwiseClone();
			}

			if (current.Y < vector3.Y) {
				vector3 = current.MemberwiseClone();
			}

			if (current.Y > vector4.Y) {
				vector4 = current.MemberwiseClone();
			}

			if (current.Z < vector5.Z) {
				vector5 = current.MemberwiseClone();
			}

			if (current.Z > vector6.Z) {
				vector6 = current.MemberwiseClone();
			}
		}
	} finally {

		if (enumerator2 === null) {
			enumerator2.IDisposable_Dispose();
		}
	}
	Microsoft.Xna.Framework.Vector3.Distance(/* ref */ vector, /* ref */ vector2, /* ref */ num);
	Microsoft.Xna.Framework.Vector3.Distance(/* ref */ vector4, /* ref */ vector3, /* ref */ num2);
	Microsoft.Xna.Framework.Vector3.Distance(/* ref */ vector6, /* ref */ vector5, /* ref */ num3);

	if (num.value > num2.value) {

		if (num.value > num3.value) {
			Microsoft.Xna.Framework.Vector3.Lerp(/* ref */ vector, /* ref */ vector2, 0.5, /* ref */ vector7);
			var num4 = (num.value * 0.5);
		} else {
			Microsoft.Xna.Framework.Vector3.Lerp(/* ref */ vector6, /* ref */ vector5, 0.5, /* ref */ vector7);
			num4 = (num3.value * 0.5);
		}
	} else if (num2.value > num3.value) {
		Microsoft.Xna.Framework.Vector3.Lerp(/* ref */ vector4, /* ref */ vector3, 0.5, /* ref */ vector7);
		num4 = (num2.value * 0.5);
	} else {
		Microsoft.Xna.Framework.Vector3.Lerp(/* ref */ vector6, /* ref */ vector5, 0.5, /* ref */ vector7);
		num4 = (num3.value * 0.5);
	}
	var enumerator3 = points.IEnumerable$b1_GetEnumerator();

	try {

	__while1__: 
		while (enumerator3.IEnumerator_MoveNext()) {
			var current2 = enumerator3.IEnumerator$b1_Current;
			value.X = (current2.X - vector7.X);
			value.Y = (current2.Y - vector7.Y);
			value.Z = (current2.Z - vector7.Z);
			var num5 = value.length();

			if (num5 > num4) {
				num4 = ((num4 + num5) * 0.5);
				var vector7 = Microsoft.Xna.Framework.Vector3.op_Addition(vector7.MemberwiseClone(), Microsoft.Xna.Framework.Vector3.op_Multiply((1 - (num4 / num5)), value.MemberwiseClone()));
			}
		}
	} finally {

		if (enumerator3 === null) {
			enumerator3.IDisposable_Dispose();
		}
	}
	result.Center = vector7.MemberwiseClone();
	result.Radius = num4;
	return result;
};

Microsoft.Xna.Framework.BoundingSphere.CreateFromFrustum = function (frustum) {

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(frustum, null)) {
		throw new System.ArgumentNullException("frustum");
	}
	return Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints(frustum.cornerArray);
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$0 = function (box) {
	var vector = new Microsoft.Xna.Framework.Vector3(), num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Clamp(/* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ new JSIL.MemberReference(box, "Min"), /* ref */ new JSIL.MemberReference(box, "Max"), /* ref */ vector);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ vector, /* ref */ num);
	return (num.value <= (this.Radius * this.Radius));
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$1 = function (/* ref */ box, /* ref */ result) {
	var vector = new Microsoft.Xna.Framework.Vector3(), num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Clamp(/* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ new JSIL.MemberReference(box, "Min"), /* ref */ new JSIL.MemberReference(box, "Max"), /* ref */ vector);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ vector, /* ref */ num);
	result.value = (num.value <= (this.Radius * this.Radius));
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$2 = function (frustum) {
	var result = new JSIL.Variable(false);

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(null, frustum)) {
		throw new System.ArgumentNullException("frustum", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	frustum.Intersects(/* ref */ this, /* ref */ result);
	return result.value;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$3 = function (plane) {
	return plane.Intersects(this);
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$4 = function (/* ref */ plane, /* ref */ result) {
	plane.Intersects(/* ref */ this, /* ref */ result);
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$5 = function (ray) {
	return ray.Intersects(this);
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$6 = function (/* ref */ ray, /* ref */ result) {
	ray.Intersects(/* ref */ this, /* ref */ result);
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$7 = function (sphere) {
	var num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ num);
	var radius = this.Radius;
	var radius2 = sphere.Radius;
	return (((radius * radius) + (2 * radius * radius2) + (radius2 * radius2)) > num.value);
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Intersects$8 = function (/* ref */ sphere, /* ref */ result) {
	var num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ num);
	var radius = this.Radius;
	var radius2 = sphere.Radius;
	result.value = (((radius * radius) + (2 * radius * radius2) + (radius2 * radius2)) > num.value);
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Contains$0 = function (box) {
	var vector = new Microsoft.Xna.Framework.Vector3();

	if (!box.Intersects(this)) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}
	var num = (this.Radius * this.Radius);
	vector.X = (this.Center.X - box.Min.X);
	vector.Y = (this.Center.Y - box.Max.Y);
	vector.Z = (this.Center.Z - box.Max.Z);

	if (vector.LengthSquared() > num) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	vector.X = (this.Center.X - box.Max.X);
	vector.Y = (this.Center.Y - box.Max.Y);
	vector.Z = (this.Center.Z - box.Max.Z);

	if (vector.LengthSquared() > num) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	vector.X = (this.Center.X - box.Max.X);
	vector.Y = (this.Center.Y - box.Min.Y);
	vector.Z = (this.Center.Z - box.Max.Z);

	if (vector.LengthSquared() > num) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	vector.X = (this.Center.X - box.Min.X);
	vector.Y = (this.Center.Y - box.Min.Y);
	vector.Z = (this.Center.Z - box.Max.Z);

	if (vector.LengthSquared() > num) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	vector.X = (this.Center.X - box.Min.X);
	vector.Y = (this.Center.Y - box.Max.Y);
	vector.Z = (this.Center.Z - box.Min.Z);

	if (vector.LengthSquared() > num) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	vector.X = (this.Center.X - box.Max.X);
	vector.Y = (this.Center.Y - box.Max.Y);
	vector.Z = (this.Center.Z - box.Min.Z);

	if (vector.LengthSquared() > num) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	vector.X = (this.Center.X - box.Max.X);
	vector.Y = (this.Center.Y - box.Min.Y);
	vector.Z = (this.Center.Z - box.Min.Z);

	if (vector.LengthSquared() > num) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	vector.X = (this.Center.X - box.Min.X);
	vector.Y = (this.Center.Y - box.Min.Y);
	vector.Z = (this.Center.Z - box.Min.Z);

	if (vector.LengthSquared() > num) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Contains$1 = function (/* ref */ box, /* ref */ result) {
	var flag = new JSIL.Variable(false), vector = new Microsoft.Xna.Framework.Vector3();
	box.Intersects(/* ref */ this, /* ref */ flag);

	if (!flag.value) {
		result.value = Microsoft.Xna.Framework.ContainmentType.Disjoint;
		return ;
	}
	var num = (this.Radius * this.Radius);
	result.value = Microsoft.Xna.Framework.ContainmentType.Intersects;
	vector.X = (this.Center.X - box.Min.X);
	vector.Y = (this.Center.Y - box.Max.Y);
	vector.Z = (this.Center.Z - box.Max.Z);

	if (vector.LengthSquared() > num) {
		return ;
	}
	vector.X = (this.Center.X - box.Max.X);
	vector.Y = (this.Center.Y - box.Max.Y);
	vector.Z = (this.Center.Z - box.Max.Z);

	if (vector.LengthSquared() > num) {
		return ;
	}
	vector.X = (this.Center.X - box.Max.X);
	vector.Y = (this.Center.Y - box.Min.Y);
	vector.Z = (this.Center.Z - box.Max.Z);

	if (vector.LengthSquared() > num) {
		return ;
	}
	vector.X = (this.Center.X - box.Min.X);
	vector.Y = (this.Center.Y - box.Min.Y);
	vector.Z = (this.Center.Z - box.Max.Z);

	if (vector.LengthSquared() > num) {
		return ;
	}
	vector.X = (this.Center.X - box.Min.X);
	vector.Y = (this.Center.Y - box.Max.Y);
	vector.Z = (this.Center.Z - box.Min.Z);

	if (vector.LengthSquared() > num) {
		return ;
	}
	vector.X = (this.Center.X - box.Max.X);
	vector.Y = (this.Center.Y - box.Max.Y);
	vector.Z = (this.Center.Z - box.Min.Z);

	if (vector.LengthSquared() > num) {
		return ;
	}
	vector.X = (this.Center.X - box.Max.X);
	vector.Y = (this.Center.Y - box.Min.Y);
	vector.Z = (this.Center.Z - box.Min.Z);

	if (vector.LengthSquared() > num) {
		return ;
	}
	vector.X = (this.Center.X - box.Min.X);
	vector.Y = (this.Center.Y - box.Min.Y);
	vector.Z = (this.Center.Z - box.Min.Z);

	if (vector.LengthSquared() > num) {
		return ;
	}
	result.value = Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Contains$2 = function (frustum) {
	var vector2 = new Microsoft.Xna.Framework.Vector3();

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(null, frustum)) {
		throw new System.ArgumentNullException("frustum", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}

	if (!frustum.Intersects(this)) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}
	var num = (this.Radius * this.Radius);
	var cornerArray = frustum.cornerArray;
	var i = 0;

__while0__: 
	while (i < cornerArray.length) {
		var vector = cornerArray[i];
		vector2.X = (vector.X - this.Center.X);
		vector2.Y = (vector.Y - this.Center.Y);
		vector2.Z = (vector.Z - this.Center.Z);

		if (vector2.LengthSquared() > num) {
			return Microsoft.Xna.Framework.ContainmentType.Intersects;
		}
		++i;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Contains$3 = function (point) {
	var num = Microsoft.Xna.Framework.Vector3.DistanceSquared(point, this.Center.MemberwiseClone());

	if (num >= (this.Radius * this.Radius)) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Contains$4 = function (/* ref */ point, /* ref */ result) {
	var num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.DistanceSquared(/* ref */ point, /* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ num);
	result.value = (num.value < (this.Radius * this.Radius)) ? Microsoft.Xna.Framework.ContainmentType.Contains : Microsoft.Xna.Framework.ContainmentType.Disjoint;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Contains$5 = function (sphere) {
	var num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Distance(/* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ num);
	var radius = this.Radius;
	var radius2 = sphere.Radius;

	if ((radius + radius2) < num.value) {
		return Microsoft.Xna.Framework.ContainmentType.Disjoint;
	}

	if ((radius - radius2) < num.value) {
		return Microsoft.Xna.Framework.ContainmentType.Intersects;
	}
	return Microsoft.Xna.Framework.ContainmentType.Contains;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Contains$6 = function (/* ref */ sphere, /* ref */ result) {
	var num = new JSIL.Variable(0);
	Microsoft.Xna.Framework.Vector3.Distance(/* ref */ new JSIL.MemberReference(this, "Center"), /* ref */ new JSIL.MemberReference(sphere, "Center"), /* ref */ num);
	var radius = this.Radius;
	var radius2 = sphere.Radius;
	result.value = ((radius + radius2) >= num.value) ? ((radius - radius2) >= num.value) ? Microsoft.Xna.Framework.ContainmentType.Contains : Microsoft.Xna.Framework.ContainmentType.Intersects : Microsoft.Xna.Framework.ContainmentType.Disjoint;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.SupportMapping = function (/* ref */ v, /* ref */ result) {
	var num2 = (this.Radius / v.length());
	result.X = (this.Center.X + (v.X * num2));
	result.Y = (this.Center.Y + (v.Y * num2));
	result.Z = (this.Center.Z + (v.Z * num2));
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Transform$0 = function (matrix) {
	var result = new Microsoft.Xna.Framework.BoundingSphere();
	result.Center = Microsoft.Xna.Framework.Vector3.Transform(this.Center.MemberwiseClone(), matrix.MemberwiseClone());
	result.Radius = (this.Radius * JSIL.Cast(System.Math.Sqrt(System.Math.Max(((matrix.M11 * matrix.M11) + (matrix.M12 * matrix.M12) + (matrix.M13 * matrix.M13)), System.Math.Max(((matrix.M21 * matrix.M21) + (matrix.M22 * matrix.M22) + (matrix.M23 * matrix.M23)), ((matrix.M31 * matrix.M31) + (matrix.M32 * matrix.M32) + (matrix.M33 * matrix.M33))))), System.Single));
	return result;
};

Microsoft.Xna.Framework.BoundingSphere.prototype.Transform$1 = function (/* ref */ matrix, /* ref */ result) {
	result.Center = Microsoft.Xna.Framework.Vector3.Transform(this.Center.MemberwiseClone(), matrix.value.MemberwiseClone());
	result.Radius = (this.Radius * JSIL.Cast(System.Math.Sqrt(System.Math.Max(((matrix.M11 * matrix.M11) + (matrix.M12 * matrix.M12) + (matrix.M13 * matrix.M13)), System.Math.Max(((matrix.M21 * matrix.M21) + (matrix.M22 * matrix.M22) + (matrix.M23 * matrix.M23)), ((matrix.M31 * matrix.M31) + (matrix.M32 * matrix.M32) + (matrix.M33 * matrix.M33))))), System.Single));
};

Microsoft.Xna.Framework.BoundingSphere.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.BoundingSphere.op_Inequality = function (a, b) {
	return (Microsoft.Xna.Framework.Vector3.op_Inequality(a.Center.MemberwiseClone(), b.Center.MemberwiseClone()) || (a.Radius !== b.Radius));
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingSphere.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingSphere, "CreateMerged", [
		["CreateMerged$0", [Microsoft.Xna.Framework.BoundingSphere, Microsoft.Xna.Framework.BoundingSphere]], 
		["CreateMerged$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingSphere, "CreateFromBoundingBox", [
		["CreateFromBoundingBox$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["CreateFromBoundingBox$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingSphere.prototype, "Intersects", [
		["Intersects$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Intersects$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(System.Boolean)]], 
		["Intersects$2", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Intersects$3", [Microsoft.Xna.Framework.Plane]], 
		["Intersects$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(Microsoft.Xna.Framework.PlaneIntersectionType)]], 
		["Intersects$5", [Microsoft.Xna.Framework.Ray]], 
		["Intersects$6", [JSIL.Reference.Of(Microsoft.Xna.Framework.Ray), JSIL.Reference.Of(System.Nullable$b1.Of(System.Single))]], 
		["Intersects$7", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Intersects$8", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(System.Boolean)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingSphere.prototype, "Contains", [
		["Contains$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Contains$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]], 
		["Contains$2", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Contains$3", [Microsoft.Xna.Framework.Vector3]], 
		["Contains$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]], 
		["Contains$5", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Contains$6", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(Microsoft.Xna.Framework.ContainmentType)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.BoundingSphere.prototype, "Transform", [
		["Transform$0", [Microsoft.Xna.Framework.Matrix]], 
		["Transform$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere)]]
	]
);
Microsoft.Xna.Framework.BoundingSphere.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.BoundingSphere));

Object.seal(Microsoft.Xna.Framework.BoundingSphere.prototype);
Object.seal(Microsoft.Xna.Framework.BoundingSphere);
Microsoft.Xna.Framework.Curve.prototype.preLoop = 0;
Microsoft.Xna.Framework.Curve.prototype.postLoop = 0;
Microsoft.Xna.Framework.Curve.prototype.keys = null;
Microsoft.Xna.Framework.Curve.prototype.get_PreLoop = function () {
	return this.preLoop;
};

Microsoft.Xna.Framework.Curve.prototype.set_PreLoop = function (value) {
	this.preLoop = value;
};

Microsoft.Xna.Framework.Curve.prototype.get_PostLoop = function () {
	return this.postLoop;
};

Microsoft.Xna.Framework.Curve.prototype.set_PostLoop = function (value) {
	this.postLoop = value;
};

Microsoft.Xna.Framework.Curve.prototype.get_Keys = function () {
	return this.keys;
};

Microsoft.Xna.Framework.Curve.prototype.get_IsConstant = function () {
	return (this.keys.Count <= 1);
};

Microsoft.Xna.Framework.Curve.prototype._ctor = function () {
	this.keys = new Microsoft.Xna.Framework.CurveKeyCollection();
	System.Object.prototype._ctor.call(this);
};

Microsoft.Xna.Framework.Curve.prototype.Clone = function () {
	return new Microsoft.Xna.Framework.Curve().__Initialize__({
			preLoop: this.preLoop, 
			postLoop: this.postLoop, 
			keys: this.keys.Clone()}
	);
};

Microsoft.Xna.Framework.Curve.prototype.ComputeTangent$0 = function (keyIndex, tangentType) {
	this.ComputeTangent(keyIndex, tangentType, tangentType);
};

Microsoft.Xna.Framework.Curve.prototype.ComputeTangent$1 = function (keyIndex, tangentInType, tangentOutType) {

	if (!((this.keys.Count > keyIndex) && (keyIndex >= 0))) {
		throw new System.ArgumentOutOfRangeException("keyIndex");
	}
	var curveKey = this.Keys.get_Item(keyIndex);
	var num = num2 = position = curveKey.Position;
	var num3 = num4 = value = curveKey.Value;

	if (keyIndex > 0) {
		num2 = this.Keys.get_Item((keyIndex - 1)).Position;
		num4 = this.Keys.get_Item((keyIndex - 1)).Value;
	}

	if ((keyIndex + 1) < this.keys.Count) {
		position = this.Keys.get_Item((keyIndex + 1)).Position;
		value = this.Keys.get_Item((keyIndex + 1)).Value;
	}

	if (tangentInType === Microsoft.Xna.Framework.CurveTangent.Smooth) {
		var num6 = (value - num4);

		if (System.Math.Abs(num6) < 1.1920928955078125E-07) {
			curveKey.TangentIn = 0;
		} else {
			curveKey.TangentIn = ((num6 * System.Math.Abs((num2 - num))) / (position - num2));
		}
	} else if (tangentInType === Microsoft.Xna.Framework.CurveTangent.Linear) {
		curveKey.TangentIn = (num3 - num4);
	} else {
		curveKey.TangentIn = 0;
	}

	if (tangentOutType === Microsoft.Xna.Framework.CurveTangent.Smooth) {
		var num8 = (value - num4);

		if (System.Math.Abs(num8) < 1.1920928955078125E-07) {
			curveKey.TangentOut = 0;
			return ;
		}
		curveKey.TangentOut = ((num8 * System.Math.Abs((position - num))) / (position - num2));
		return ;
	} else {

		if (tangentOutType === Microsoft.Xna.Framework.CurveTangent.Linear) {
			curveKey.TangentOut = (value - num3);
			return ;
		}
		curveKey.TangentOut = 0;
		return ;
	}
};

Microsoft.Xna.Framework.Curve.prototype.ComputeTangents$0 = function (tangentType) {
	this.ComputeTangents(tangentType, tangentType);
};

Microsoft.Xna.Framework.Curve.prototype.ComputeTangents$1 = function (tangentInType, tangentOutType) {
	var i = 0;

__while0__: 
	while (i < this.Keys.Count) {
		this.ComputeTangent(i, tangentInType, tangentOutType);
		++i;
	}
};

Microsoft.Xna.Framework.Curve.prototype.Evaluate = function (position) {

	if (this.keys.Count !== null) {
		return 0;
	}

	if (this.keys.Count === 1) {
		return this.keys.get_Item(0).internalValue;
	}
	var curveKey = this.keys.get_Item(0);
	var curveKey2 = this.keys.get_Item((this.keys.Count - 1));
	var num = position;
	var num2 = 0;

	if (num < curveKey.position) {

		if (this.preLoop !== 0) {
			return curveKey.internalValue;
		}

		if (this.preLoop === Microsoft.Xna.Framework.CurveLoopType.Linear) {
			return (curveKey.internalValue - (curveKey.tangentIn * (curveKey.position - num)));
		}

		if (!this.keys.IsCacheAvailable) {
			this.keys.ComputeCacheValues();
		}
		var num3 = this.CalcCycle(num);
		var num4 = (num - (curveKey.position + (num3 * this.keys.TimeRange)));

		if (this.preLoop === Microsoft.Xna.Framework.CurveLoopType.Cycle) {
			num = (curveKey.position + num4);
		} else if (this.preLoop === Microsoft.Xna.Framework.CurveLoopType.CycleOffset) {
			num = (curveKey.position + num4);
			num2 = ((curveKey2.internalValue - curveKey.internalValue) * num3);
		} else {
			num = (Math.floor(num3) & 1) ? (curveKey2.position - num4) : (curveKey.position + num4);
		}
	} else if (curveKey2.position < num) {

		if (this.postLoop !== 0) {
			return curveKey2.internalValue;
		}

		if (this.postLoop === Microsoft.Xna.Framework.CurveLoopType.Linear) {
			return (curveKey2.internalValue - (curveKey2.tangentOut * (curveKey2.position - num)));
		}

		if (!this.keys.IsCacheAvailable) {
			this.keys.ComputeCacheValues();
		}
		var num5 = this.CalcCycle(num);
		var num6 = (num - (curveKey.position + (num5 * this.keys.TimeRange)));

		if (this.postLoop === Microsoft.Xna.Framework.CurveLoopType.Cycle) {
			num = (curveKey.position + num6);
		} else if (this.postLoop === Microsoft.Xna.Framework.CurveLoopType.CycleOffset) {
			num = (curveKey.position + num6);
			num2 = ((curveKey2.internalValue - curveKey.internalValue) * num5);
		} else {
			num = (Math.floor(num5) & 1) ? (curveKey2.position - num6) : (curveKey.position + num6);
		}
	}
	var k = new JSIL.Variable(null);
	var k2 = new JSIL.Variable(null);
	num = this.FindSegment(num, /* ref */ k, /* ref */ k2);
	return (num2 + Microsoft.Xna.Framework.Curve.Hermite(k.value, k2.value, num));
};

Microsoft.Xna.Framework.Curve.prototype.CalcCycle = function (t) {
	var num = ((t - this.keys.get_Item(0).position) * this.keys.InvTimeRange);

	if (num < 0) {
		num -= 1;
	}
	return Math.floor(num);
};

Microsoft.Xna.Framework.Curve.prototype.FindSegment = function (t, /* ref */ k0, /* ref */ k1) {
	var result = t;
	JSIL.UntranslatableInstruction("stind.ref(ldloc:CurveKey&(k0), callvirtgetter:CurveKey(CurveKeyCollection::get_Item, ldfld:CurveKeyCollection(Curve::keys, ldloc:Curve(this)), ldc.i4:int32(0)))");
	var i = 1;

__while0__: 
	while (i < this.keys.Count) {
		JSIL.UntranslatableInstruction("stind.ref(ldloc:CurveKey&(k1), callvirtgetter:CurveKey(CurveKeyCollection::get_Item, ldfld:CurveKeyCollection(Curve::keys, ldloc:Curve(this)), ldloc:int32(i)))");

		if (k1.value.position >= t) {
			var num = k0.value.position;
			var num4 = (k1.value.position - num);
			result = 0;

			if (num4 > 1E-10) {
				result = ((t - num) / num4);
				break __while0__;
			}
			break __while0__;
		} else {
			JSIL.UntranslatableInstruction("stind.ref(ldloc:CurveKey&(k0), ldind.ref:CurveKey(ldloc:CurveKey&(k1)))");
			++i;
		}
	}
	return result;
};

Microsoft.Xna.Framework.Curve.Hermite = function (k0, k1, t) {

	if (!(k0.Continuity === Microsoft.Xna.Framework.CurveContinuity.Step)) {
		var num = (t * t);
		var num2 = (num * t);
		return ((k0.internalValue * (((2 * num2) - (3 * num)) + 1)) + (k1.internalValue * ((-2 * num2) + (3 * num))) + (k0.tangentOut * ((num2 - (2 * num)) + t)) + (k1.tangentIn * (num2 - num)));
	}

	if (t >= 1) {
		return k1.internalValue;
	}
	return k0.internalValue;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Curve.prototype, "ComputeTangent", [
		["ComputeTangent$0", [System.Int32, Microsoft.Xna.Framework.CurveTangent]], 
		["ComputeTangent$1", [System.Int32, Microsoft.Xna.Framework.CurveTangent, Microsoft.Xna.Framework.CurveTangent]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Curve.prototype, "ComputeTangents", [
		["ComputeTangents$0", [Microsoft.Xna.Framework.CurveTangent]], 
		["ComputeTangents$1", [Microsoft.Xna.Framework.CurveTangent, Microsoft.Xna.Framework.CurveTangent]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Curve.prototype, "PreLoop", {
		get: Microsoft.Xna.Framework.Curve.prototype.get_PreLoop, 
		set: Microsoft.Xna.Framework.Curve.prototype.set_PreLoop
	});
Object.defineProperty(Microsoft.Xna.Framework.Curve.prototype, "PostLoop", {
		get: Microsoft.Xna.Framework.Curve.prototype.get_PostLoop, 
		set: Microsoft.Xna.Framework.Curve.prototype.set_PostLoop
	});
Object.defineProperty(Microsoft.Xna.Framework.Curve.prototype, "Keys", {
		get: Microsoft.Xna.Framework.Curve.prototype.get_Keys
	});
Object.defineProperty(Microsoft.Xna.Framework.Curve.prototype, "IsConstant", {
		get: Microsoft.Xna.Framework.Curve.prototype.get_IsConstant
	});

Object.seal(Microsoft.Xna.Framework.Curve.prototype);
Object.seal(Microsoft.Xna.Framework.Curve);
Microsoft.Xna.Framework.CurveKey.prototype.position = 0;
Microsoft.Xna.Framework.CurveKey.prototype.internalValue = 0;
Microsoft.Xna.Framework.CurveKey.prototype.tangentOut = 0;
Microsoft.Xna.Framework.CurveKey.prototype.tangentIn = 0;
Microsoft.Xna.Framework.CurveKey.prototype.continuity = 0;
Microsoft.Xna.Framework.CurveKey.prototype.get_Position = function () {
	return this.position;
};

Microsoft.Xna.Framework.CurveKey.prototype.get_Value = function () {
	return this.internalValue;
};

Microsoft.Xna.Framework.CurveKey.prototype.set_Value = function (value) {
	this.internalValue = value;
};

Microsoft.Xna.Framework.CurveKey.prototype.get_TangentIn = function () {
	return this.tangentIn;
};

Microsoft.Xna.Framework.CurveKey.prototype.set_TangentIn = function (value) {
	this.tangentIn = value;
};

Microsoft.Xna.Framework.CurveKey.prototype.get_TangentOut = function () {
	return this.tangentOut;
};

Microsoft.Xna.Framework.CurveKey.prototype.set_TangentOut = function (value) {
	this.tangentOut = value;
};

Microsoft.Xna.Framework.CurveKey.prototype.get_Continuity = function () {
	return this.continuity;
};

Microsoft.Xna.Framework.CurveKey.prototype.set_Continuity = function (value) {
	this.continuity = value;
};

Microsoft.Xna.Framework.CurveKey.prototype._ctor$0 = function (position, value) {
	System.Object.prototype._ctor.call(this);
	this.position = position;
	this.internalValue = value;
};

Microsoft.Xna.Framework.CurveKey.prototype._ctor$1 = function (position, value, tangentIn, tangentOut) {
	System.Object.prototype._ctor.call(this);
	this.position = position;
	this.internalValue = value;
	this.tangentIn = tangentIn;
	this.tangentOut = tangentOut;
};

Microsoft.Xna.Framework.CurveKey.prototype._ctor$2 = function (position, value, tangentIn, tangentOut, continuity) {
	System.Object.prototype._ctor.call(this);
	this.position = position;
	this.internalValue = value;
	this.tangentIn = tangentIn;
	this.tangentOut = tangentOut;
	this.continuity = continuity;
};

Microsoft.Xna.Framework.CurveKey.prototype.Clone = function () {
	return new Microsoft.Xna.Framework.CurveKey(this.position, this.internalValue, this.tangentIn, this.tangentOut, this.continuity);
};

Microsoft.Xna.Framework.CurveKey.prototype.Equals$0 = function (other) {
	return (!(!Microsoft.Xna.Framework.CurveKey.op_Inequality(other, null) || 
			(other.position !== this.position) || 
			(other.internalValue !== this.internalValue) || 
			(other.tangentIn !== this.tangentIn) || 
			(other.tangentOut !== this.tangentOut)) && (other.continuity === this.continuity));
};

Microsoft.Xna.Framework.CurveKey.prototype.Equals$1 = function (obj) {
	return this.Equals(JSIL.TryCast(obj, Microsoft.Xna.Framework.CurveKey));
};

Microsoft.Xna.Framework.CurveKey.prototype.GetHashCode = function () {
	return (this.position.GetHashCode() + this.internalValue.GetHashCode() + this.tangentIn.GetHashCode() + this.tangentOut.GetHashCode() + this.continuity.GetHashCode());
};

Microsoft.Xna.Framework.CurveKey.op_Equality = function (a, b) {
	var result = false;
	var flag = (null === a);
	var flag2 = (null === b);

	if (!(!flag && !flag2)) {
		result = (flag === flag2);
	} else {
		result = a.Equals(b);
	}
	return result;
};

Microsoft.Xna.Framework.CurveKey.op_Inequality = function (a, b) {
	var result = false;
	var flag = Microsoft.Xna.Framework.CurveKey.op_Equality(a, null);
	var flag2 = Microsoft.Xna.Framework.CurveKey.op_Equality(b, null);

	if (!(!flag && !flag2)) {
		result = (flag !== flag2);
	} else {
		result = ((a.position !== b.position) || 
			(a.internalValue !== b.internalValue) || 
			(a.tangentIn !== b.tangentIn) || 
			(a.tangentOut !== b.tangentOut) || 
			(a.continuity !== b.continuity));
	}
	return result;
};

Microsoft.Xna.Framework.CurveKey.prototype.CompareTo = function (other) {

	if (this.position === other.position) {
		return 0;
	}

	if (this.position >= other.position) {
		return 1;
	}
	return -1;
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.CurveKey.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single]], 
		["_ctor$1", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$2", [System.Single, System.Single, System.Single, System.Single, Microsoft.Xna.Framework.CurveContinuity]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.CurveKey.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.CurveKey]], 
		["Equals$1", [System.Object]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.CurveKey.prototype, "Position", {
		get: Microsoft.Xna.Framework.CurveKey.prototype.get_Position
	});
Object.defineProperty(Microsoft.Xna.Framework.CurveKey.prototype, "Value", {
		get: Microsoft.Xna.Framework.CurveKey.prototype.get_Value, 
		set: Microsoft.Xna.Framework.CurveKey.prototype.set_Value
	});
Object.defineProperty(Microsoft.Xna.Framework.CurveKey.prototype, "TangentIn", {
		get: Microsoft.Xna.Framework.CurveKey.prototype.get_TangentIn, 
		set: Microsoft.Xna.Framework.CurveKey.prototype.set_TangentIn
	});
Object.defineProperty(Microsoft.Xna.Framework.CurveKey.prototype, "TangentOut", {
		get: Microsoft.Xna.Framework.CurveKey.prototype.get_TangentOut, 
		set: Microsoft.Xna.Framework.CurveKey.prototype.set_TangentOut
	});
Object.defineProperty(Microsoft.Xna.Framework.CurveKey.prototype, "Continuity", {
		get: Microsoft.Xna.Framework.CurveKey.prototype.get_Continuity, 
		set: Microsoft.Xna.Framework.CurveKey.prototype.set_Continuity
	});
Microsoft.Xna.Framework.CurveKey.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.CurveKey));
Microsoft.Xna.Framework.CurveKey.prototype.__ImplementInterface__(System.IComparable$b1.Of(Microsoft.Xna.Framework.CurveKey));

Object.seal(Microsoft.Xna.Framework.CurveKey.prototype);
Object.seal(Microsoft.Xna.Framework.CurveKey);
Microsoft.Xna.Framework.CurveKeyCollection.prototype.Keys = null;
Microsoft.Xna.Framework.CurveKeyCollection.prototype.TimeRange = 0;
Microsoft.Xna.Framework.CurveKeyCollection.prototype.InvTimeRange = 0;
Microsoft.Xna.Framework.CurveKeyCollection.prototype.IsCacheAvailable = new System.Boolean();
Microsoft.Xna.Framework.CurveKeyCollection.prototype.IndexOf = function (item) {
	return this.Keys.IndexOf(item);
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.RemoveAt = function (index) {
	this.Keys.RemoveAt(index);
	this.IsCacheAvailable = false;
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.get_Item = function (index) {
	return this.Keys.get_Item(index);
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.set_Item = function (index, value) {

	if (Microsoft.Xna.Framework.CurveKey.op_Equality(value, null)) {
		throw new System.ArgumentNullException();
	}
	var position = this.Keys.get_Item(index).Position;

	if (position === value.Position) {
		this.Keys.set_Item(index, value);
		return ;
	}
	this.Keys.RemoveAt(index);
	this.Add(value);
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.Add = function (item) {

	if (Microsoft.Xna.Framework.CurveKey.op_Equality(item, null)) {
		throw new System.ArgumentNullException();
	}
	var i = this.Keys.BinarySearch(item);

	if (i >= 0) {

	__while0__: 
		while (i < this.Keys.Count) {

			if (item.Position !== this.Keys.get_Item(i).Position) {
				break __while0__;
			}
			++i;
		}
	} else {
		i = ~i;
	}
	this.Keys.Insert(i, item);
	this.IsCacheAvailable = false;
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.Clear = function () {
	this.Keys.Clear();
	this.TimeRange = this.InvTimeRange = 0;
	this.IsCacheAvailable = false;
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.Contains = function (item) {
	return this.Keys.Contains(item);
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.CopyTo = function (array, arrayIndex) {
	this.Keys.CopyTo(array, arrayIndex);
	this.IsCacheAvailable = false;
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.get_Count = function () {
	return this.Keys.Count;
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.get_IsReadOnly = function () {
	return false;
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.Remove = function (item) {
	this.IsCacheAvailable = false;
	return this.Keys.Remove(item);
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.GetEnumerator = function () {
	return this.Keys.GetEnumerator();
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.Keys.IEnumerable_GetEnumerator();
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.Clone = function () {
	return new Microsoft.Xna.Framework.CurveKeyCollection().__Initialize__({
			Keys: new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.CurveKey)) (this.Keys), 
			InvTimeRange: this.InvTimeRange, 
			TimeRange: this.TimeRange, 
			IsCacheAvailable: true}
	);
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype.ComputeCacheValues = function () {
	this.TimeRange = this.InvTimeRange = 0;

	if (this.Keys.Count > 1) {
		this.TimeRange = (this.Keys.get_Item((this.Keys.Count - 1)).Position - this.Keys.get_Item(0).Position);

		if (this.TimeRange > 1.4012984643248171E-45) {
			this.InvTimeRange = (1 / this.TimeRange);
		}
	}
	this.IsCacheAvailable = true;
};

Microsoft.Xna.Framework.CurveKeyCollection.prototype._ctor = function () {
	this.Keys = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.CurveKey)) ();
	this.IsCacheAvailable = true;
	System.Object.prototype._ctor.call(this);
};

Object.defineProperty(Microsoft.Xna.Framework.CurveKeyCollection.prototype, "Item", {
		get: Microsoft.Xna.Framework.CurveKeyCollection.prototype.get_Item, 
		set: Microsoft.Xna.Framework.CurveKeyCollection.prototype.set_Item
	});
Object.defineProperty(Microsoft.Xna.Framework.CurveKeyCollection.prototype, "Count", {
		get: Microsoft.Xna.Framework.CurveKeyCollection.prototype.get_Count
	});
Object.defineProperty(Microsoft.Xna.Framework.CurveKeyCollection.prototype, "IsReadOnly", {
		get: Microsoft.Xna.Framework.CurveKeyCollection.prototype.get_IsReadOnly
	});
Microsoft.Xna.Framework.CurveKeyCollection.prototype.__ImplementInterface__(System.Collections.Generic.ICollection$b1.Of(Microsoft.Xna.Framework.CurveKey));
Microsoft.Xna.Framework.CurveKeyCollection.prototype.__ImplementInterface__(System.Collections.Generic.IEnumerable$b1.Of(Microsoft.Xna.Framework.CurveKey));
Microsoft.Xna.Framework.CurveKeyCollection.prototype.__ImplementInterface__(System.Collections.IEnumerable);

Object.seal(Microsoft.Xna.Framework.CurveKeyCollection.prototype);
Object.seal(Microsoft.Xna.Framework.CurveKeyCollection);
Microsoft.Xna.Framework.Gjk.BitsToIndices = null;
Microsoft.Xna.Framework.Gjk.prototype.y = null;
Microsoft.Xna.Framework.Gjk.prototype.yLengthSq = null;
Microsoft.Xna.Framework.Gjk.prototype.edges = null;
Microsoft.Xna.Framework.Gjk.prototype.edgeLengthSq = null;
Microsoft.Xna.Framework.Gjk.prototype.det = null;
Microsoft.Xna.Framework.Gjk.prototype.simplexBits = 0;
Microsoft.Xna.Framework.Gjk.prototype.maxLengthSq = 0;
Microsoft.Xna.Framework.Gjk.prototype.__StructFields__ = {
	closestPoint: Microsoft.Xna.Framework.Vector3
};
Microsoft.Xna.Framework.Gjk.prototype.get_FullSimplex = function () {
	return (this.simplexBits === 15);
};

Microsoft.Xna.Framework.Gjk.prototype.get_MaxLengthSquared = function () {
	return this.maxLengthSq;
};

Microsoft.Xna.Framework.Gjk.prototype.get_ClosestPoint = function () {
	return this.closestPoint;
};

Microsoft.Xna.Framework.Gjk.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.y = JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), 4);
	this.yLengthSq = JSIL.Array.New(System.Single, 4);
	this.edges = JSIL.Array.New(System.Array.Of(Microsoft.Xna.Framework.Vector3), [JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), 4), JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), 4), JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), 4), JSIL.Array.New(Microsoft.Xna.Framework.Vector3.MemberwiseClone(), 4)]);
	this.edgeLengthSq = JSIL.Array.New(System.Array.Of(System.Single), [JSIL.Array.New(System.Single, 4), JSIL.Array.New(System.Single, 4), JSIL.Array.New(System.Single, 4), JSIL.Array.New(System.Single, 4)]);
	this.det = JSIL.Array.New(System.Array.Of(System.Single), 16);
	var i = 0;

__while0__: 
	while (i < 16) {
		this.det[i] = JSIL.Array.New(System.Single, 4);
		++i;
	}
};

Microsoft.Xna.Framework.Gjk.prototype.Reset = function () {
	this.simplexBits = 0;
	this.maxLengthSq = 0;
};

Microsoft.Xna.Framework.Gjk.prototype.AddSupportPoint = function (/* ref */ newPoint) {
	var num = ((Microsoft.Xna.Framework.Gjk.BitsToIndices[(this.simplexBits ^ 15)] & 7) - 1);
	this.y[num] = newPoint.value.MemberwiseClone();
	this.yLengthSq[num] = newPoint.LengthSquared();
	var num2 = Microsoft.Xna.Framework.Gjk.BitsToIndices[this.simplexBits];

__while0__: 
	while (num2) {
		var num3 = ((num2 & 7) - 1);
		var vector = Microsoft.Xna.Framework.Vector3.op_Subtraction(this.y[num3], newPoint.value.MemberwiseClone());
		this.edges[num3][num] = vector.MemberwiseClone();
		this.edges[num][num3] = Microsoft.Xna.Framework.Vector3.op_UnaryNegation(vector.MemberwiseClone());
		this.edgeLengthSq[num][num3] = this.edgeLengthSq[num3][num] = vector.LengthSquared();
		num2 = (num2 >> 3);
	}
	this.UpdateDeterminant(num);
	return this.UpdateSimplex(num);
};

Microsoft.Xna.Framework.Gjk.Dot = function (/* ref */ a, /* ref */ b) {
	return ((a.X * b.X) + (a.Y * b.Y) + (a.Z * b.Z));
};

Microsoft.Xna.Framework.Gjk.prototype.UpdateDeterminant = function (xmIdx) {
	var num = (1 << (xmIdx & 31));
	this.det[num][xmIdx] = 1;
	var num2 = Microsoft.Xna.Framework.Gjk.BitsToIndices[this.simplexBits];
	var num3 = num2;
	var num4 = 0;

__while0__: 
	while (num3) {
		var num5 = ((num3 & 7) - 1);
		var num6 = (1 << (num5 & 31));
		var num7 = (num6 | num);
		this.det[num7][num5] = Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference());
		this.det[num7][xmIdx] = Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference());
		var num8 = num2;
		var i = 0;

	__while1__: 
		while (i < num4) {
			var num9 = ((num8 & 7) - 1);
			var num10 = (1 << (num9 & 31));
			var num11 = (num7 | num10);
			var num12 = (this.edgeLengthSq[num5][num9] < this.edgeLengthSq[xmIdx][num9]) ? num5 : xmIdx;
			this.det[num11][num9] = ((this.det[num7][num5] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[num7][xmIdx] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())));
			num12 = (this.edgeLengthSq[num9][num5] < this.edgeLengthSq[xmIdx][num5]) ? num9 : xmIdx;
			this.det[num11][num5] = ((this.det[(num10 | num)][num9] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[(num10 | num)][xmIdx] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())));
			num12 = (this.edgeLengthSq[num5][xmIdx] < this.edgeLengthSq[num9][xmIdx]) ? num5 : num9;
			this.det[num11][xmIdx] = ((this.det[(num6 | num10)][num9] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[(num6 | num10)][num5] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())));
			num8 = (num8 >> 3);
			++i;
		}
		num3 = (num3 >> 3);
		++num4;
	}

	if ((this.simplexBits | num) === 15) {
		var num13 = (this.edgeLengthSq[1][0] < this.edgeLengthSq[2][0]) ? (this.edgeLengthSq[1][0] < this.edgeLengthSq[3][0]) ? 1 : 3 : (this.edgeLengthSq[2][0] < this.edgeLengthSq[3][0]) ? 2 : 3;
		this.det[15][0] = ((this.det[14][1] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[14][2] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[14][3] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())));
		num13 = (this.edgeLengthSq[0][1] < this.edgeLengthSq[2][1]) ? (this.edgeLengthSq[0][1] < this.edgeLengthSq[3][1]) ? 0 : 3 : (this.edgeLengthSq[2][1] < this.edgeLengthSq[3][1]) ? 2 : 3;
		this.det[15][1] = ((this.det[13][0] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[13][2] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[13][3] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())));
		num13 = (this.edgeLengthSq[0][2] < this.edgeLengthSq[1][2]) ? (this.edgeLengthSq[0][2] < this.edgeLengthSq[3][2]) ? 0 : 3 : (this.edgeLengthSq[1][2] < this.edgeLengthSq[3][2]) ? 1 : 3;
		this.det[15][2] = ((this.det[11][0] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[11][1] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[11][3] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())));
		num13 = (this.edgeLengthSq[0][3] < this.edgeLengthSq[1][3]) ? (this.edgeLengthSq[0][3] < this.edgeLengthSq[2][3]) ? 0 : 2 : (this.edgeLengthSq[1][3] < this.edgeLengthSq[2][3]) ? 1 : 2;
		this.det[15][3] = ((this.det[7][0] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[7][1] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())) + (this.det[7][2] * Microsoft.Xna.Framework.Gjk.Dot(JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference())));
	}
};

Microsoft.Xna.Framework.Gjk.prototype.UpdateSimplex = function (newIndex) {
	var num = (this.simplexBits | (1 << (newIndex & 31)));
	var num2 = (1 << (newIndex & 31));
	var num3 = this.simplexBits;

__while0__: 
	while (num3) {

		if (!(((num3 & num) !== num3) || !this.IsSatisfiesRule((num3 | num2), num))) {
			this.simplexBits = (num3 | num2);
			this.closestPoint = this.ComputeClosestPoint();
			return true;
		}
		--num3;
	}
	var result = false;

	if (this.IsSatisfiesRule(num2, num)) {
		this.simplexBits = num2;
		this.closestPoint = this.y[newIndex];
		this.maxLengthSq = this.yLengthSq[newIndex];
		result = true;
	}
	return result;
};

Microsoft.Xna.Framework.Gjk.prototype.ComputeClosestPoint = function () {
	var num = 0;
	var vector = Microsoft.Xna.Framework.Vector3.Zero;
	this.maxLengthSq = 0;
	var num2 = Microsoft.Xna.Framework.Gjk.BitsToIndices[this.simplexBits];

__while0__: 
	while (num2) {
		var num3 = ((num2 & 7) - 1);
		var num4 = this.det[this.simplexBits][num3];
		num += num4;
		vector = Microsoft.Xna.Framework.Vector3.op_Addition(vector.MemberwiseClone(), Microsoft.Xna.Framework.Vector3.op_Multiply(this.y[num3], num4));
		this.maxLengthSq = Microsoft.Xna.Framework.MathHelper.Max(this.maxLengthSq, this.yLengthSq[num3]);
		num2 = (num2 >> 3);
	}
	return Microsoft.Xna.Framework.Vector3.op_Division(vector.MemberwiseClone(), num);
};

Microsoft.Xna.Framework.Gjk.prototype.IsSatisfiesRule = function (xBits, yBits) {
	var result = true;
	var num = Microsoft.Xna.Framework.Gjk.BitsToIndices[yBits];

__while0__: 
	while (num) {
		var num2 = ((num & 7) - 1);
		var num3 = (1 << (num2 & 31));

		if (num3 & xBits) {

			if (this.det[xBits][num2] <= 0) {
				result = false;
				break __while0__;
			}
		} else if (this.det[(xBits | num3)][num2] > 0) {
			result = false;
			break __while0__;
		}
		num = (num >> 3);
	}
	return result;
};

Microsoft.Xna.Framework.Gjk._cctor = function () {
	Microsoft.Xna.Framework.Gjk.BitsToIndices = JSIL.Array.New(System.Int32, [0, 1, 2, 17, 3, 25, 26, 209, 4, 33, 34, 273, 35, 281, 282, 2257]);
};

Object.defineProperty(Microsoft.Xna.Framework.Gjk.prototype, "FullSimplex", {
		get: Microsoft.Xna.Framework.Gjk.prototype.get_FullSimplex
	});
Object.defineProperty(Microsoft.Xna.Framework.Gjk.prototype, "MaxLengthSquared", {
		get: Microsoft.Xna.Framework.Gjk.prototype.get_MaxLengthSquared
	});
Object.defineProperty(Microsoft.Xna.Framework.Gjk.prototype, "ClosestPoint", {
		get: Microsoft.Xna.Framework.Gjk.prototype.get_ClosestPoint
	});
Microsoft.Xna.Framework.Gjk._cctor();

Object.seal(Microsoft.Xna.Framework.Gjk.prototype);
Object.seal(Microsoft.Xna.Framework.Gjk);
Object.defineProperty(Microsoft.Xna.Framework.MathHelper, "E", { value: 2.7182817459106445 });
Object.defineProperty(Microsoft.Xna.Framework.MathHelper, "Log2E", { value: 1.4426950216293335 });
Object.defineProperty(Microsoft.Xna.Framework.MathHelper, "Log10E", { value: 0.43429449200630188 });
Object.defineProperty(Microsoft.Xna.Framework.MathHelper, "Pi", { value: 3.1415927410125732 });
Object.defineProperty(Microsoft.Xna.Framework.MathHelper, "TwoPi", { value: 6.2831854820251465 });
Object.defineProperty(Microsoft.Xna.Framework.MathHelper, "PiOver2", { value: 1.5707963705062866 });
Object.defineProperty(Microsoft.Xna.Framework.MathHelper, "PiOver4", { value: 0.78539818525314331 });
Microsoft.Xna.Framework.MathHelper.ToRadians = function (degrees) {
	return (degrees * 0.01745329238474369);
};

Microsoft.Xna.Framework.MathHelper.ToDegrees = function (radians) {
	return (radians * 57.2957763671875);
};

Microsoft.Xna.Framework.MathHelper.Distance = function (value1, value2) {
	return JSIL.Cast(System.Math.Abs((value1 - value2)), System.Single);
};

Microsoft.Xna.Framework.MathHelper.Min = function (value1, value2) {
	return System.Math.Min(value1, value2);
};

Microsoft.Xna.Framework.MathHelper.Max = function (value1, value2) {
	return System.Math.Max(value1, value2);
};

Microsoft.Xna.Framework.MathHelper.Clamp = function (value, min, max) {
	value = (value > max) ? max : value;
	value = (value < min) ? min : value;
	return value;
};

Microsoft.Xna.Framework.MathHelper.Lerp = function (value1, value2, amount) {
	return (value1 + ((value2 - value1) * amount));
};

Microsoft.Xna.Framework.MathHelper.Barycentric = function (value1, value2, value3, amount1, amount2) {
	return (value1 + (amount1 * (value2 - value1)) + (amount2 * (value3 - value1)));
};

Microsoft.Xna.Framework.MathHelper.SmoothStep = function (value1, value2, amount) {
	var num = Microsoft.Xna.Framework.MathHelper.Clamp(amount, 0, 1);
	return Microsoft.Xna.Framework.MathHelper.Lerp(value1, value2, (num * num * (3 - (2 * num))));
};

Microsoft.Xna.Framework.MathHelper.CatmullRom = function (value1, value2, value3, value4, amount) {
	var num = (amount * amount);
	return (0.5 * ((2 * value2) + ((-value1 + value3) * amount) + (((((2 * value1) - (5 * value2)) + (4 * value3)) - value4) * num) + ((((-value1 + (3 * value2)) - (3 * value3)) + value4) * amount * num)));
};

Microsoft.Xna.Framework.MathHelper.Hermite = function (value1, tangent1, value2, tangent2, amount) {
	var num = (amount * amount);
	var num2 = (amount * num);
	return ((value1 * (((2 * num2) - (3 * num)) + 1)) + (value2 * ((-2 * num2) + (3 * num))) + (tangent1 * ((num2 - (2 * num)) + amount)) + (tangent2 * (num2 - num)));
};

Microsoft.Xna.Framework.MathHelper.WrapAngle = function (angle) {
	angle = JSIL.Cast(System.Math.IEEERemainder(angle, 6.2831854820251465), System.Single);

	if (angle <= -3.1415927410125732) {
		angle += 6.2831854820251465;
	} else if (angle > 3.1415927410125732) {
		angle -= 6.2831854820251465;
	}
	return angle;
};


Object.seal(Microsoft.Xna.Framework.MathHelper);
Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype._member = null;
Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype._ctor = function (member) {
	System.ComponentModel.PropertyDescriptor.prototype._ctor.call(this, member.Name, JSIL.Cast(member.GetCustomAttributes(System.Attribute, true), System.Array.Of(System.Attribute)));
	this._member = member;
};

Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.Equals = function (obj) {
	var memberPropertyDescriptor = JSIL.TryCast(obj, Microsoft.Xna.Framework.Design.MemberPropertyDescriptor);
	return ((memberPropertyDescriptor === null) && memberPropertyDescriptor._member.Equals(this._member));
};

Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.GetHashCode = function () {
	return this._member.GetHashCode();
};

Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.get_IsReadOnly = function () {
	return false;
};

Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.ResetValue = function (component) {
};

Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.CanResetValue = function (component) {
	return false;
};

Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.ShouldSerializeValue = function (component) {
	return true;
};

Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.get_ComponentType = function () {
	return this._member.DeclaringType;
};

Object.defineProperty(Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype, "IsReadOnly", {
		get: Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.get_IsReadOnly
	});
Object.defineProperty(Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype, "ComponentType", {
		get: Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype.get_ComponentType
	});

Object.seal(Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype);
Object.seal(Microsoft.Xna.Framework.Design.MemberPropertyDescriptor);
Microsoft.Xna.Framework.Design.FieldPropertyDescriptor.prototype._field = null;
Microsoft.Xna.Framework.Design.FieldPropertyDescriptor.prototype._ctor = function (field) {
	Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype._ctor.call(this, field);
	this._field = field;
};

Microsoft.Xna.Framework.Design.FieldPropertyDescriptor.prototype.get_PropertyType = function () {
	return this._field.FieldType;
};

Microsoft.Xna.Framework.Design.FieldPropertyDescriptor.prototype.GetValue = function (component) {
	return this._field.GetValue(component);
};

Microsoft.Xna.Framework.Design.FieldPropertyDescriptor.prototype.SetValue = function (component, value) {
	this._field.SetValue(component, value);
	this.OnValueChanged(component, System.EventArgs.Empty);
};

Object.defineProperty(Microsoft.Xna.Framework.Design.FieldPropertyDescriptor.prototype, "PropertyType", {
		get: Microsoft.Xna.Framework.Design.FieldPropertyDescriptor.prototype.get_PropertyType
	});

Object.seal(Microsoft.Xna.Framework.Design.FieldPropertyDescriptor.prototype);
Object.seal(Microsoft.Xna.Framework.Design.FieldPropertyDescriptor);
Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor.prototype._property = null;
Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor.prototype._ctor = function (property) {
	Microsoft.Xna.Framework.Design.MemberPropertyDescriptor.prototype._ctor.call(this, property);
	this._property = property;
};

Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor.prototype.get_PropertyType = function () {
	return this._property.PropertyType;
};

Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor.prototype.GetValue = function (component) {
	return this._property.GetValue(component, null);
};

Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor.prototype.SetValue = function (component, value) {
	this._property.SetValue(component, value, null);
	this.OnValueChanged(component, System.EventArgs.Empty);
};

Object.defineProperty(Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor.prototype, "PropertyType", {
		get: Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor.prototype.get_PropertyType
	});

Object.seal(Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor.prototype);
Object.seal(Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor);
Microsoft.Xna.Framework.Design.MathTypeConverter.prototype.propertyDescriptions = null;
Microsoft.Xna.Framework.Design.MathTypeConverter.prototype.supportStringConvert = new System.Boolean();
Microsoft.Xna.Framework.Design.MathTypeConverter.prototype.CanConvertFrom = function (context, sourceType) {
	return (!(!this.supportStringConvert || 
			(sourceType !== System.String)) || System.ComponentModel.TypeConverter.prototype.CanConvertFrom.call(this, context, sourceType));
};

Microsoft.Xna.Framework.Design.MathTypeConverter.prototype.CanConvertTo = function (context, destinationType) {
	return ((destinationType === System.ComponentModel.Design.Serialization.InstanceDescriptor) || System.ComponentModel.TypeConverter.prototype.CanConvertTo.call(this, context, destinationType));
};

Microsoft.Xna.Framework.Design.MathTypeConverter.prototype.GetCreateInstanceSupported = function (context) {
	return true;
};

Microsoft.Xna.Framework.Design.MathTypeConverter.prototype.GetPropertiesSupported = function (context) {
	return true;
};

Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertToValues = function (context, culture, value, arrayCount, expectedParams) {
	var text = JSIL.TryCast(value, System.String);

	if (text !== null) {
		return null;
	}
	text = text.Trim();

	if (culture !== null) {
		culture = System.Globalization.CultureInfo.CurrentCulture;
	}
	var array = text.Split(JSIL.Array.New(System.String, [culture.TextInfo.ListSeparator]), System.StringSplitOptions.None);
	var array2 = JSIL.Array.New(T, array.length);
	var converter = System.ComponentModel.TypeDescriptor.GetConverter(T);
	var i = 0;

__while0__: 
	while (i < array2.length) {

		try {
			array2[i] = JSIL.Cast(converter.ConvertFromString(context, culture, array[i]), T);
		} catch ($exception) {
			var arg_7B_0 = $exception;
			throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.InvalidStringFormat, [System.String.Join(culture.TextInfo.ListSeparator, expectedParams)]), arg_7B_0);
		}
		++i;
	}

	if (array2.length === arrayCount) {
		return array2;
	}
	throw new System.ArgumentException(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.InvalidStringFormat, [System.String.Join(culture.TextInfo.ListSeparator, expectedParams)]));
};

Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertFromValues = function (context, culture, values) {

	if (culture !== null) {
		culture = System.Globalization.CultureInfo.CurrentCulture;
	}
	var separator = (culture.TextInfo.ListSeparator + " ");
	var converter = System.ComponentModel.TypeDescriptor.GetConverter(T);
	var array = JSIL.Array.New(System.String, values.length);
	var i = 0;

__while0__: 
	while (i < values.length) {
		array[i] = converter.ConvertToString(context, culture, values[i]);
		++i;
	}
	return System.String.Join(separator, array);
};

Microsoft.Xna.Framework.Design.MathTypeConverter.prototype.GetProperties = function (context, value, attributes) {
	return this.propertyDescriptions;
};

Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor = function () {
	this.supportStringConvert = true;
	System.ComponentModel.ExpandableObjectConverter.prototype._ctor.call(this);
};


Object.seal(Microsoft.Xna.Framework.Design.MathTypeConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.MathTypeConverter);
Microsoft.Xna.Framework.Design.PointConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Point.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("X")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Y"))])).Sort(JSIL.Array.New(System.String, ["X", "Y"]));
};

Microsoft.Xna.Framework.Design.PointConverter.prototype.ConvertFrom = function (context, culture, value) {
	var array = Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertToValues(
		context, 
		culture, 
		value, 
		2, 
		JSIL.Array.New(System.String, ["X", "Y"])
	);

	if (array === null) {
		return new Microsoft.Xna.Framework.Point(array[0], array[1]);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.PointConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.String) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Point.MemberwiseClone()) !== new Microsoft.Xna.Framework.Point()))) {
		var point = JSIL.Cast(value, Microsoft.Xna.Framework.Point.MemberwiseClone());
		return Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertFromValues(context, culture, JSIL.Array.New(System.Int32, [point.X, point.Y]));
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Point.MemberwiseClone()) !== new Microsoft.Xna.Framework.Point()))) {
		var point2 = JSIL.Cast(value, Microsoft.Xna.Framework.Point.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Point.GetConstructor(JSIL.Array.New(System.Type, [System.Int32, System.Int32]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [point2.X, point2.Y]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.PointConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Point(JSIL.Cast(propertyValues.IDictionary_get_Item("X"), System.Int32), JSIL.Cast(propertyValues.IDictionary_get_Item("Y"), System.Int32));
};


Object.seal(Microsoft.Xna.Framework.Design.PointConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.PointConverter);
Microsoft.Xna.Framework.Design.RectangleConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Rectangle.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("X")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Y")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Width")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Height"))]));
	this.supportStringConvert = false;
};

Microsoft.Xna.Framework.Design.RectangleConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Rectangle.MemberwiseClone()) !== new Microsoft.Xna.Framework.Rectangle()))) {
		var rectangle = JSIL.Cast(value, Microsoft.Xna.Framework.Rectangle.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Rectangle.GetConstructor(JSIL.Array.New(System.Type, [System.Int32, System.Int32, System.Int32, System.Int32]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.RectangleConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Rectangle(JSIL.Cast(propertyValues.IDictionary_get_Item("X"), System.Int32), JSIL.Cast(propertyValues.IDictionary_get_Item("Y"), System.Int32), JSIL.Cast(propertyValues.IDictionary_get_Item("Width"), System.Int32), JSIL.Cast(propertyValues.IDictionary_get_Item("Height"), System.Int32));
};


Object.seal(Microsoft.Xna.Framework.Design.RectangleConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.RectangleConverter);
Microsoft.Xna.Framework.Design.Vector2Converter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Vector2.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("X")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Y"))])).Sort(JSIL.Array.New(System.String, ["X", "Y"]));
};

Microsoft.Xna.Framework.Design.Vector2Converter.prototype.ConvertFrom = function (context, culture, value) {
	var array = Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertToValues(
		context, 
		culture, 
		value, 
		2, 
		JSIL.Array.New(System.String, ["X", "Y"])
	);

	if (array === null) {
		return new Microsoft.Xna.Framework.Vector2(array[0], array[1]);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.Vector2Converter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.String) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Vector2.MemberwiseClone()) !== new Microsoft.Xna.Framework.Vector2()))) {
		var vector = JSIL.Cast(value, Microsoft.Xna.Framework.Vector2.MemberwiseClone());
		return Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertFromValues(context, culture, JSIL.Array.New(System.Single, [vector.X, vector.Y]));
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Vector2.MemberwiseClone()) !== new Microsoft.Xna.Framework.Vector2()))) {
		var vector2 = JSIL.Cast(value, Microsoft.Xna.Framework.Vector2.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Vector2.GetConstructor(JSIL.Array.New(System.Type, [System.Single, System.Single]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [vector2.X, vector2.Y]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.Vector2Converter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Vector2(JSIL.Cast(propertyValues.IDictionary_get_Item("X"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("Y"), System.Single));
};


Object.seal(Microsoft.Xna.Framework.Design.Vector2Converter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.Vector2Converter);
Microsoft.Xna.Framework.Design.Vector3Converter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Vector3.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("X")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Y")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Z"))])).Sort(JSIL.Array.New(System.String, ["X", "Y", "Z"]));
};

Microsoft.Xna.Framework.Design.Vector3Converter.prototype.ConvertFrom = function (context, culture, value) {
	var array = Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertToValues(
		context, 
		culture, 
		value, 
		3, 
		JSIL.Array.New(System.String, ["X", "Y", "Z"])
	);

	if (array === null) {
		return new Microsoft.Xna.Framework.Vector3(array[0], array[1], array[2]);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.Vector3Converter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.String) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Vector3.MemberwiseClone()) !== new Microsoft.Xna.Framework.Vector3()))) {
		var vector = JSIL.Cast(value, Microsoft.Xna.Framework.Vector3.MemberwiseClone());
		return Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertFromValues(context, culture, JSIL.Array.New(System.Single, [vector.X, vector.Y, vector.Z]));
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Vector3.MemberwiseClone()) !== new Microsoft.Xna.Framework.Vector3()))) {
		var vector2 = JSIL.Cast(value, Microsoft.Xna.Framework.Vector3.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Vector3.GetConstructor(JSIL.Array.New(System.Type, [System.Single, System.Single, System.Single]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [vector2.X, vector2.Y, vector2.Z]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.Vector3Converter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Vector3(JSIL.Cast(propertyValues.IDictionary_get_Item("X"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("Y"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("Z"), System.Single));
};


Object.seal(Microsoft.Xna.Framework.Design.Vector3Converter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.Vector3Converter);
Microsoft.Xna.Framework.Design.Vector4Converter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Vector4.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("X")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Y")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Z")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("W"))])).Sort(JSIL.Array.New(System.String, ["X", "Y", "Z", "W"]));
};

Microsoft.Xna.Framework.Design.Vector4Converter.prototype.ConvertFrom = function (context, culture, value) {
	var array = Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertToValues(
		context, 
		culture, 
		value, 
		4, 
		JSIL.Array.New(System.String, ["X", "Y", "Z", "W"])
	);

	if (array === null) {
		return new Microsoft.Xna.Framework.Vector4(array[0], array[1], array[2], array[3]);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.Vector4Converter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.String) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Vector4.MemberwiseClone()) !== new Microsoft.Xna.Framework.Vector4()))) {
		var vector = JSIL.Cast(value, Microsoft.Xna.Framework.Vector4.MemberwiseClone());
		return Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertFromValues(context, culture, JSIL.Array.New(System.Single, [vector.X, vector.Y, vector.Z, vector.W]));
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Vector4.MemberwiseClone()) !== new Microsoft.Xna.Framework.Vector4()))) {
		var vector2 = JSIL.Cast(value, Microsoft.Xna.Framework.Vector4.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Vector4.GetConstructor(JSIL.Array.New(System.Type, [System.Single, System.Single, System.Single, System.Single]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [vector2.X, vector2.Y, vector2.Z, vector2.W]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.Vector4Converter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Vector4(JSIL.Cast(propertyValues.IDictionary_get_Item("X"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("Y"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("Z"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("W"), System.Single));
};


Object.seal(Microsoft.Xna.Framework.Design.Vector4Converter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.Vector4Converter);
Microsoft.Xna.Framework.Design.QuaternionConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Quaternion.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("X")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Y")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Z")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("W"))])).Sort(JSIL.Array.New(System.String, ["X", "Y", "Z", "W"]));
};

Microsoft.Xna.Framework.Design.QuaternionConverter.prototype.ConvertFrom = function (context, culture, value) {
	var array = Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertToValues(
		context, 
		culture, 
		value, 
		4, 
		JSIL.Array.New(System.String, ["X", "Y", "Z", "W"])
	);

	if (array === null) {
		return new Microsoft.Xna.Framework.Quaternion(array[0], array[1], array[2], array[3]);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.QuaternionConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.String) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Quaternion.MemberwiseClone()) !== new Microsoft.Xna.Framework.Quaternion()))) {
		var quaternion = JSIL.Cast(value, Microsoft.Xna.Framework.Quaternion.MemberwiseClone());
		return Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertFromValues(context, culture, JSIL.Array.New(System.Single, [quaternion.X, quaternion.Y, quaternion.Z, quaternion.W]));
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Quaternion.MemberwiseClone()) !== new Microsoft.Xna.Framework.Quaternion()))) {
		var quaternion2 = JSIL.Cast(value, Microsoft.Xna.Framework.Quaternion.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Quaternion.GetConstructor(JSIL.Array.New(System.Type, [System.Single, System.Single, System.Single, System.Single]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [quaternion2.X, quaternion2.Y, quaternion2.Z, quaternion2.W]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.QuaternionConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Quaternion(JSIL.Cast(propertyValues.IDictionary_get_Item("X"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("Y"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("Z"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("W"), System.Single));
};


Object.seal(Microsoft.Xna.Framework.Design.QuaternionConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.QuaternionConverter);
Microsoft.Xna.Framework.Design.MatrixConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Matrix.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [System.ComponentModel.TypeDescriptor.GetProperties(typeFromHandle).Find("Translation", true), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M11")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M12")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M13")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M14")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M21")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M22")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M23")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M24")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M31")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M32")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M33")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M34")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M41")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M42")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M43")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("M44"))]));
	this.supportStringConvert = false;
};

Microsoft.Xna.Framework.Design.MatrixConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Matrix.MemberwiseClone()) !== new Microsoft.Xna.Framework.Matrix()))) {
		var matrix = JSIL.Cast(value, Microsoft.Xna.Framework.Matrix.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Matrix.GetConstructor(JSIL.Array.New(System.Type, [System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, System.Single]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [matrix.M11, matrix.M12, matrix.M13, matrix.M14, matrix.M21, matrix.M22, matrix.M23, matrix.M24, matrix.M31, matrix.M32, matrix.M33, matrix.M34, matrix.M41, matrix.M42, matrix.M43, matrix.M44]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.MatrixConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Matrix(JSIL.Cast(propertyValues.IDictionary_get_Item("M11"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M12"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M13"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M14"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M21"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M22"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M23"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M24"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M31"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M32"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M33"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M34"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M41"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M42"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M43"), System.Single), JSIL.Cast(propertyValues.IDictionary_get_Item("M44"), System.Single));
};


Object.seal(Microsoft.Xna.Framework.Design.MatrixConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.MatrixConverter);
Microsoft.Xna.Framework.Design.BoundingBoxConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.BoundingBox.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Min")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Max"))])).Sort(JSIL.Array.New(System.String, ["Min", "Max"]));
	this.supportStringConvert = false;
};

Microsoft.Xna.Framework.Design.BoundingBoxConverter.prototype.ConvertFrom = function (context, culture, value) {
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.BoundingBoxConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.BoundingBox.MemberwiseClone()) !== new Microsoft.Xna.Framework.BoundingBox()))) {
		var boundingBox = JSIL.Cast(value, Microsoft.Xna.Framework.BoundingBox.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.BoundingBox.GetConstructor(JSIL.Array.New(System.Type, [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [boundingBox.Min, boundingBox.Max]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.BoundingBoxConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.BoundingBox(JSIL.Cast(propertyValues.IDictionary_get_Item("Min"), Microsoft.Xna.Framework.Vector3.MemberwiseClone()), JSIL.Cast(propertyValues.IDictionary_get_Item("Max"), Microsoft.Xna.Framework.Vector3.MemberwiseClone()));
};


Object.seal(Microsoft.Xna.Framework.Design.BoundingBoxConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.BoundingBoxConverter);
Microsoft.Xna.Framework.Design.BoundingSphereConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.BoundingSphere.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Center")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Radius"))])).Sort(JSIL.Array.New(System.String, ["Center", "Radius"]));
	this.supportStringConvert = false;
};

Microsoft.Xna.Framework.Design.BoundingSphereConverter.prototype.ConvertFrom = function (context, culture, value) {
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.BoundingSphereConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.BoundingSphere.MemberwiseClone()) !== new Microsoft.Xna.Framework.BoundingSphere()))) {
		var boundingSphere = JSIL.Cast(value, Microsoft.Xna.Framework.BoundingSphere.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.BoundingSphere.GetConstructor(JSIL.Array.New(System.Type, [Microsoft.Xna.Framework.Vector3, System.Single]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [boundingSphere.Center, boundingSphere.Radius]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.BoundingSphereConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.BoundingSphere(JSIL.Cast(propertyValues.IDictionary_get_Item("Center"), Microsoft.Xna.Framework.Vector3.MemberwiseClone()), JSIL.Cast(propertyValues.IDictionary_get_Item("Radius"), System.Single));
};


Object.seal(Microsoft.Xna.Framework.Design.BoundingSphereConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.BoundingSphereConverter);
Microsoft.Xna.Framework.Design.PlaneConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Plane.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Normal")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("D"))])).Sort(JSIL.Array.New(System.String, ["Normal", "D"]));
	this.supportStringConvert = false;
};

Microsoft.Xna.Framework.Design.PlaneConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Plane.MemberwiseClone()) !== new Microsoft.Xna.Framework.Plane()))) {
		var plane = JSIL.Cast(value, Microsoft.Xna.Framework.Plane.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Plane.GetConstructor(JSIL.Array.New(System.Type, [Microsoft.Xna.Framework.Vector3, System.Single]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [plane.Normal, plane.D]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.PlaneConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Plane(JSIL.Cast(propertyValues.IDictionary_get_Item("Normal"), Microsoft.Xna.Framework.Vector3.MemberwiseClone()), JSIL.Cast(propertyValues.IDictionary_get_Item("D"), System.Single));
};


Object.seal(Microsoft.Xna.Framework.Design.PlaneConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.PlaneConverter);
Microsoft.Xna.Framework.Design.RayConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Ray.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Position")), new Microsoft.Xna.Framework.Design.FieldPropertyDescriptor(typeFromHandle.GetField("Direction"))])).Sort(JSIL.Array.New(System.String, ["Position", "Direction"]));
	this.supportStringConvert = false;
};

Microsoft.Xna.Framework.Design.RayConverter.prototype.ConvertFrom = function (context, culture, value) {
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.RayConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Ray.MemberwiseClone()) !== new Microsoft.Xna.Framework.Ray()))) {
		var ray = JSIL.Cast(value, Microsoft.Xna.Framework.Ray.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Ray.GetConstructor(JSIL.Array.New(System.Type, [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [ray.Position, ray.Direction]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.RayConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return new Microsoft.Xna.Framework.Ray(JSIL.Cast(propertyValues.IDictionary_get_Item("Position"), Microsoft.Xna.Framework.Vector3.MemberwiseClone()), JSIL.Cast(propertyValues.IDictionary_get_Item("Direction"), Microsoft.Xna.Framework.Vector3.MemberwiseClone()));
};


Object.seal(Microsoft.Xna.Framework.Design.RayConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.RayConverter);
Microsoft.Xna.Framework.Design.ColorConverter.prototype._ctor = function () {
	Microsoft.Xna.Framework.Design.MathTypeConverter.prototype._ctor.call(this);
	var typeFromHandle = Microsoft.Xna.Framework.Graphics.Color.MemberwiseClone();
	this.propertyDescriptions = new System.ComponentModel.PropertyDescriptorCollection(JSIL.Array.New(System.ComponentModel.PropertyDescriptor, [new Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor(typeFromHandle.GetProperty("R")), new Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor(typeFromHandle.GetProperty("G")), new Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor(typeFromHandle.GetProperty("B")), new Microsoft.Xna.Framework.Design.PropertyPropertyDescriptor(typeFromHandle.GetProperty("A"))])).Sort(JSIL.Array.New(System.String, ["R", "G", "B", "A"]));
};

Microsoft.Xna.Framework.Design.ColorConverter.prototype.ConvertFrom = function (context, culture, value) {
	var array = Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertToValues(
		context, 
		culture, 
		value, 
		4, 
		JSIL.Array.New(System.String, ["R", "G", "B", "A"])
	);

	if (array === null) {
		return new Microsoft.Xna.Framework.Graphics.Color(array[0], array[1], array[2], array[3]);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom.call(this, context, culture, value);
};

Microsoft.Xna.Framework.Design.ColorConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {

	if (destinationType !== null) {
		throw new System.ArgumentNullException("destinationType");
	}

	if (!((destinationType !== System.String) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Graphics.Color.MemberwiseClone()) !== new Microsoft.Xna.Framework.Graphics.Color()))) {
		var color = JSIL.Cast(value, Microsoft.Xna.Framework.Graphics.Color.MemberwiseClone());
		return Microsoft.Xna.Framework.Design.MathTypeConverter.ConvertFromValues(context, culture, JSIL.Array.New(System.Byte, [color.get_R(), color.get_G(), color.get_B(), color.get_A()]));
	}

	if (!((destinationType !== System.ComponentModel.Design.Serialization.InstanceDescriptor) || (JSIL.TryCast(value, Microsoft.Xna.Framework.Graphics.Color.MemberwiseClone()) !== new Microsoft.Xna.Framework.Graphics.Color()))) {
		var color2 = JSIL.Cast(value, Microsoft.Xna.Framework.Graphics.Color.MemberwiseClone());
		var constructor = Microsoft.Xna.Framework.Graphics.Color.GetConstructor(JSIL.Array.New(System.Type, [System.Byte, System.Byte, System.Byte, System.Byte]));

		if (constructor === null) {
			return new System.ComponentModel.Design.Serialization.InstanceDescriptor(constructor, [color2.get_R(), color2.get_G(), color2.get_B(), color2.get_A()]);
		}
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo.call(
		this, 
		context, 
		culture, 
		value, 
		destinationType
	);
};

Microsoft.Xna.Framework.Design.ColorConverter.prototype.CreateInstance = function (context, propertyValues) {

	if (propertyValues !== null) {
		throw new System.ArgumentNullException("propertyValues");
	}
	return new Microsoft.Xna.Framework.Graphics.Color(JSIL.Cast(propertyValues.IDictionary_get_Item("R"), System.Byte), JSIL.Cast(propertyValues.IDictionary_get_Item("G"), System.Byte), JSIL.Cast(propertyValues.IDictionary_get_Item("B"), System.Byte), JSIL.Cast(propertyValues.IDictionary_get_Item("A"), System.Byte));
};


Object.seal(Microsoft.Xna.Framework.Design.ColorConverter.prototype);
Object.seal(Microsoft.Xna.Framework.Design.ColorConverter);
Microsoft.Xna.Framework.Matrix.prototype.M11 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M12 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M13 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M14 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M21 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M22 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M23 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M24 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M31 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M32 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M33 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M34 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M41 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M42 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M43 = 0;
Microsoft.Xna.Framework.Matrix.prototype.M44 = 0;
Microsoft.Xna.Framework.Matrix._identity = new Microsoft.Xna.Framework.Matrix();
Microsoft.Xna.Framework.Matrix.get_Identity = function () {
	return Microsoft.Xna.Framework.Matrix._identity;
};

Microsoft.Xna.Framework.Matrix.prototype.get_Up = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = this.M21;
	result.Y = this.M22;
	result.Z = this.M23;
	return result;
};

Microsoft.Xna.Framework.Matrix.prototype.set_Up = function (value) {
	this.M21 = value.X;
	this.M22 = value.Y;
	this.M23 = value.Z;
};

Microsoft.Xna.Framework.Matrix.prototype.get_Down = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = -this.M21;
	result.Y = -this.M22;
	result.Z = -this.M23;
	return result;
};

Microsoft.Xna.Framework.Matrix.prototype.set_Down = function (value) {
	this.M21 = -value.X;
	this.M22 = -value.Y;
	this.M23 = -value.Z;
};

Microsoft.Xna.Framework.Matrix.prototype.get_Right = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = this.M11;
	result.Y = this.M12;
	result.Z = this.M13;
	return result;
};

Microsoft.Xna.Framework.Matrix.prototype.set_Right = function (value) {
	this.M11 = value.X;
	this.M12 = value.Y;
	this.M13 = value.Z;
};

Microsoft.Xna.Framework.Matrix.prototype.get_Left = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = -this.M11;
	result.Y = -this.M12;
	result.Z = -this.M13;
	return result;
};

Microsoft.Xna.Framework.Matrix.prototype.set_Left = function (value) {
	this.M11 = -value.X;
	this.M12 = -value.Y;
	this.M13 = -value.Z;
};

Microsoft.Xna.Framework.Matrix.prototype.get_Forward = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = -this.M31;
	result.Y = -this.M32;
	result.Z = -this.M33;
	return result;
};

Microsoft.Xna.Framework.Matrix.prototype.set_Forward = function (value) {
	this.M31 = -value.X;
	this.M32 = -value.Y;
	this.M33 = -value.Z;
};

Microsoft.Xna.Framework.Matrix.prototype.get_Backward = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = this.M31;
	result.Y = this.M32;
	result.Z = this.M33;
	return result;
};

Microsoft.Xna.Framework.Matrix.prototype.set_Backward = function (value) {
	this.M31 = value.X;
	this.M32 = value.Y;
	this.M33 = value.Z;
};

Microsoft.Xna.Framework.Matrix.prototype.get_Translation = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = this.M41;
	result.Y = this.M42;
	result.Z = this.M43;
	return result;
};

Microsoft.Xna.Framework.Matrix.prototype.set_Translation = function (value) {
	this.M41 = value.X;
	this.M42 = value.Y;
	this.M43 = value.Z;
};

Microsoft.Xna.Framework.Matrix.prototype._ctor = function (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
	this.M11 = m11;
	this.M12 = m12;
	this.M13 = m13;
	this.M14 = m14;
	this.M21 = m21;
	this.M22 = m22;
	this.M23 = m23;
	this.M24 = m24;
	this.M31 = m31;
	this.M32 = m32;
	this.M33 = m33;
	this.M34 = m34;
	this.M41 = m41;
	this.M42 = m42;
	this.M43 = m43;
	this.M44 = m44;
};

Microsoft.Xna.Framework.Matrix.CreateBillboard$0 = function (objectPosition, cameraPosition, cameraUpVector, cameraForwardVector) {
	var vector2 = new Microsoft.Xna.Framework.Vector3(), vector3 = new Microsoft.Xna.Framework.Vector3(), result = new Microsoft.Xna.Framework.Matrix();
	vector.X = (objectPosition.X - cameraPosition.X);
	vector.Y = (objectPosition.Y - cameraPosition.Y);
	vector.Z = (objectPosition.Z - cameraPosition.Z);
	var num = vector.LengthSquared();

	if (num < 9.9999997473787516E-05) {
		var vector = cameraForwardVector.get_HasValue() ? Microsoft.Xna.Framework.Vector3.op_UnaryNegation(cameraForwardVector.get_Value()) : Microsoft.Xna.Framework.Vector3.Forward.MemberwiseClone();
	} else {
		Microsoft.Xna.Framework.Vector3.Multiply(/* ref */ vector, (1 / JSIL.Cast(System.Math.Sqrt(num), System.Single)), /* ref */ vector);
	}
	Microsoft.Xna.Framework.Vector3.Cross(/* ref */ cameraUpVector, /* ref */ vector, /* ref */ vector2);
	vector2.Normalize();
	Microsoft.Xna.Framework.Vector3.Cross(/* ref */ vector, /* ref */ vector2, /* ref */ vector3);
	result.M11 = vector2.X;
	result.M12 = vector2.Y;
	result.M13 = vector2.Z;
	result.M14 = 0;
	result.M21 = vector3.X;
	result.M22 = vector3.Y;
	result.M23 = vector3.Z;
	result.M24 = 0;
	result.M31 = vector.X;
	result.M32 = vector.Y;
	result.M33 = vector.Z;
	result.M34 = 0;
	result.M41 = objectPosition.X;
	result.M42 = objectPosition.Y;
	result.M43 = objectPosition.Z;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateBillboard$1 = function (/* ref */ objectPosition, /* ref */ cameraPosition, /* ref */ cameraUpVector, cameraForwardVector, /* ref */ result) {
	var vector2 = new Microsoft.Xna.Framework.Vector3(), vector3 = new Microsoft.Xna.Framework.Vector3();
	vector.X = (objectPosition.X - cameraPosition.X);
	vector.Y = (objectPosition.Y - cameraPosition.Y);
	vector.Z = (objectPosition.Z - cameraPosition.Z);
	var num = vector.LengthSquared();

	if (num < 9.9999997473787516E-05) {
		var vector = cameraForwardVector.get_HasValue() ? Microsoft.Xna.Framework.Vector3.op_UnaryNegation(cameraForwardVector.get_Value()) : Microsoft.Xna.Framework.Vector3.Forward.MemberwiseClone();
	} else {
		Microsoft.Xna.Framework.Vector3.Multiply(/* ref */ vector, (1 / JSIL.Cast(System.Math.Sqrt(num), System.Single)), /* ref */ vector);
	}
	Microsoft.Xna.Framework.Vector3.Cross(/* ref */ cameraUpVector, /* ref */ vector, /* ref */ vector2);
	vector2.Normalize();
	Microsoft.Xna.Framework.Vector3.Cross(/* ref */ vector, /* ref */ vector2, /* ref */ vector3);
	result.M11 = vector2.X;
	result.M12 = vector2.Y;
	result.M13 = vector2.Z;
	result.M14 = 0;
	result.M21 = vector3.X;
	result.M22 = vector3.Y;
	result.M23 = vector3.Z;
	result.M24 = 0;
	result.M31 = vector.X;
	result.M32 = vector.Y;
	result.M33 = vector.Z;
	result.M34 = 0;
	result.M41 = objectPosition.X;
	result.M42 = objectPosition.Y;
	result.M43 = objectPosition.Z;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard$0 = function (objectPosition, cameraPosition, rotateAxis, cameraForwardVector, objectForwardVector) {
	var vector4 = new Microsoft.Xna.Framework.Vector3(), result = new Microsoft.Xna.Framework.Matrix();
	vector.X = (objectPosition.X - cameraPosition.X);
	vector.Y = (objectPosition.Y - cameraPosition.Y);
	vector.Z = (objectPosition.Z - cameraPosition.Z);
	var num = vector.LengthSquared();

	if (num < 9.9999997473787516E-05) {
		var vector = cameraForwardVector.get_HasValue() ? Microsoft.Xna.Framework.Vector3.op_UnaryNegation(cameraForwardVector.get_Value()) : Microsoft.Xna.Framework.Vector3.Forward.MemberwiseClone();
	} else {
		Microsoft.Xna.Framework.Vector3.Multiply(/* ref */ vector, (1 / JSIL.Cast(System.Math.Sqrt(num), System.Single)), /* ref */ vector);
	}
	var vector2 = rotateAxis.MemberwiseClone();
	Microsoft.Xna.Framework.Vector3.Dot(/* ref */ rotateAxis, /* ref */ vector, /* ref */ value);

	if (System.Math.Abs(value.value) > 0.998254656791687) {

		if (objectForwardVector.get_HasValue()) {
			var vector3 = objectForwardVector.get_Value();
			Microsoft.Xna.Framework.Vector3.Dot(/* ref */ rotateAxis, /* ref */ vector3, /* ref */ value);

			if (System.Math.Abs(value.value) > 0.998254656791687) {
				var value = new JSIL.Variable(((rotateAxis.X * Microsoft.Xna.Framework.Vector3.Forward.X) + (rotateAxis.Y * Microsoft.Xna.Framework.Vector3.Forward.Y) + (rotateAxis.Z * Microsoft.Xna.Framework.Vector3.Forward.Z)));
				vector3 = (System.Math.Abs(value.value) > 0.998254656791687) ? Microsoft.Xna.Framework.Vector3.Right : Microsoft.Xna.Framework.Vector3.Forward.MemberwiseClone();
			}
		} else {
			value.value = ((rotateAxis.X * Microsoft.Xna.Framework.Vector3.Forward.X) + (rotateAxis.Y * Microsoft.Xna.Framework.Vector3.Forward.Y) + (rotateAxis.Z * Microsoft.Xna.Framework.Vector3.Forward.Z));
			vector3 = (System.Math.Abs(value.value) > 0.998254656791687) ? Microsoft.Xna.Framework.Vector3.Right : Microsoft.Xna.Framework.Vector3.Forward.MemberwiseClone();
		}
		Microsoft.Xna.Framework.Vector3.Cross(/* ref */ rotateAxis, /* ref */ vector3, /* ref */ vector4);
		vector4.Normalize();
		Microsoft.Xna.Framework.Vector3.Cross(/* ref */ vector4, /* ref */ rotateAxis, /* ref */ vector3);
		vector3.Normalize();
	} else {
		Microsoft.Xna.Framework.Vector3.Cross(/* ref */ rotateAxis, /* ref */ vector, /* ref */ vector4);
		vector4.Normalize();
		Microsoft.Xna.Framework.Vector3.Cross(/* ref */ vector4, /* ref */ vector2, /* ref */ vector3);
		vector3.Normalize();
	}
	result.M11 = vector4.X;
	result.M12 = vector4.Y;
	result.M13 = vector4.Z;
	result.M14 = 0;
	result.M21 = vector2.X;
	result.M22 = vector2.Y;
	result.M23 = vector2.Z;
	result.M24 = 0;
	result.M31 = vector3.X;
	result.M32 = vector3.Y;
	result.M33 = vector3.Z;
	result.M34 = 0;
	result.M41 = objectPosition.X;
	result.M42 = objectPosition.Y;
	result.M43 = objectPosition.Z;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard$1 = function (/* ref */ objectPosition, /* ref */ cameraPosition, /* ref */ rotateAxis, cameraForwardVector, objectForwardVector, /* ref */ result) {
	var vector4 = new Microsoft.Xna.Framework.Vector3();
	vector.X = (objectPosition.X - cameraPosition.X);
	vector.Y = (objectPosition.Y - cameraPosition.Y);
	vector.Z = (objectPosition.Z - cameraPosition.Z);
	var num = vector.LengthSquared();

	if (num < 9.9999997473787516E-05) {
		var vector = cameraForwardVector.get_HasValue() ? Microsoft.Xna.Framework.Vector3.op_UnaryNegation(cameraForwardVector.get_Value()) : Microsoft.Xna.Framework.Vector3.Forward.MemberwiseClone();
	} else {
		Microsoft.Xna.Framework.Vector3.Multiply(/* ref */ vector, (1 / JSIL.Cast(System.Math.Sqrt(num), System.Single)), /* ref */ vector);
	}
	var vector2 = rotateAxis.value.MemberwiseClone();
	Microsoft.Xna.Framework.Vector3.Dot(/* ref */ rotateAxis, /* ref */ vector, /* ref */ value);

	if (System.Math.Abs(value.value) > 0.998254656791687) {

		if (objectForwardVector.get_HasValue()) {
			var vector3 = objectForwardVector.get_Value();
			Microsoft.Xna.Framework.Vector3.Dot(/* ref */ rotateAxis, /* ref */ vector3, /* ref */ value);

			if (System.Math.Abs(value.value) > 0.998254656791687) {
				var value = new JSIL.Variable(((rotateAxis.X * Microsoft.Xna.Framework.Vector3.Forward.X) + (rotateAxis.Y * Microsoft.Xna.Framework.Vector3.Forward.Y) + (rotateAxis.Z * Microsoft.Xna.Framework.Vector3.Forward.Z)));
				vector3 = (System.Math.Abs(value.value) > 0.998254656791687) ? Microsoft.Xna.Framework.Vector3.Right : Microsoft.Xna.Framework.Vector3.Forward.MemberwiseClone();
			}
		} else {
			value.value = ((rotateAxis.X * Microsoft.Xna.Framework.Vector3.Forward.X) + (rotateAxis.Y * Microsoft.Xna.Framework.Vector3.Forward.Y) + (rotateAxis.Z * Microsoft.Xna.Framework.Vector3.Forward.Z));
			vector3 = (System.Math.Abs(value.value) > 0.998254656791687) ? Microsoft.Xna.Framework.Vector3.Right : Microsoft.Xna.Framework.Vector3.Forward.MemberwiseClone();
		}
		Microsoft.Xna.Framework.Vector3.Cross(/* ref */ rotateAxis, /* ref */ vector3, /* ref */ vector4);
		vector4.Normalize();
		Microsoft.Xna.Framework.Vector3.Cross(/* ref */ vector4, /* ref */ rotateAxis, /* ref */ vector3);
		vector3.Normalize();
	} else {
		Microsoft.Xna.Framework.Vector3.Cross(/* ref */ rotateAxis, /* ref */ vector, /* ref */ vector4);
		vector4.Normalize();
		Microsoft.Xna.Framework.Vector3.Cross(/* ref */ vector4, /* ref */ vector2, /* ref */ vector3);
		vector3.Normalize();
	}
	result.M11 = vector4.X;
	result.M12 = vector4.Y;
	result.M13 = vector4.Z;
	result.M14 = 0;
	result.M21 = vector2.X;
	result.M22 = vector2.Y;
	result.M23 = vector2.Z;
	result.M24 = 0;
	result.M31 = vector3.X;
	result.M32 = vector3.Y;
	result.M33 = vector3.Z;
	result.M34 = 0;
	result.M41 = objectPosition.X;
	result.M42 = objectPosition.Y;
	result.M43 = objectPosition.Z;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateTranslation$0 = function (position) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = 1;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = 1;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = 1;
	result.M34 = 0;
	result.M41 = position.X;
	result.M42 = position.Y;
	result.M43 = position.Z;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateTranslation$1 = function (/* ref */ position, /* ref */ result) {
	result.M11 = 1;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = 1;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = 1;
	result.M34 = 0;
	result.M41 = position.X;
	result.M42 = position.Y;
	result.M43 = position.Z;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateTranslation$2 = function (xPosition, yPosition, zPosition) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = 1;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = 1;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = 1;
	result.M34 = 0;
	result.M41 = xPosition;
	result.M42 = yPosition;
	result.M43 = zPosition;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateTranslation$3 = function (xPosition, yPosition, zPosition, /* ref */ result) {
	result.M11 = 1;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = 1;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = 1;
	result.M34 = 0;
	result.M41 = xPosition;
	result.M42 = yPosition;
	result.M43 = zPosition;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateScale$0 = function (xScale, yScale, zScale) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = xScale;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = yScale;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = zScale;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateScale$1 = function (xScale, yScale, zScale, /* ref */ result) {
	result.M11 = xScale;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = yScale;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = zScale;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateScale$2 = function (scales) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = scales.X;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = scales.Y;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = scales.Z;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateScale$3 = function (/* ref */ scales, /* ref */ result) {
	result.M11 = scales.X;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = scales.Y;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = scales.Z;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateScale$4 = function (scale) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = scale;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = scale;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = scale;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateScale$5 = function (scale, /* ref */ result) {
	result.M11 = scale;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = scale;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = scale;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateRotationX$0 = function (radians) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var num = JSIL.Cast(System.Math.Cos(radians), System.Single);
	var num2 = JSIL.Cast(System.Math.Sin(radians), System.Single);
	result.M11 = 1;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = num;
	result.M23 = num2;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = -num2;
	result.M33 = num;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateRotationX$1 = function (radians, /* ref */ result) {
	var num = JSIL.Cast(System.Math.Cos(radians), System.Single);
	var num2 = JSIL.Cast(System.Math.Sin(radians), System.Single);
	result.M11 = 1;
	result.M12 = 0;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = num;
	result.M23 = num2;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = -num2;
	result.M33 = num;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateRotationY$0 = function (radians) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var num = JSIL.Cast(System.Math.Cos(radians), System.Single);
	var num2 = JSIL.Cast(System.Math.Sin(radians), System.Single);
	result.M11 = num;
	result.M12 = 0;
	result.M13 = -num2;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = 1;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = num2;
	result.M32 = 0;
	result.M33 = num;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateRotationY$1 = function (radians, /* ref */ result) {
	var num = JSIL.Cast(System.Math.Cos(radians), System.Single);
	var num2 = JSIL.Cast(System.Math.Sin(radians), System.Single);
	result.M11 = num;
	result.M12 = 0;
	result.M13 = -num2;
	result.M14 = 0;
	result.M21 = 0;
	result.M22 = 1;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = num2;
	result.M32 = 0;
	result.M33 = num;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateRotationZ$0 = function (radians) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var num = JSIL.Cast(System.Math.Cos(radians), System.Single);
	var num2 = JSIL.Cast(System.Math.Sin(radians), System.Single);
	result.M11 = num;
	result.M12 = num2;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = -num2;
	result.M22 = num;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = 1;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateRotationZ$1 = function (radians, /* ref */ result) {
	var num = JSIL.Cast(System.Math.Cos(radians), System.Single);
	var num2 = JSIL.Cast(System.Math.Sin(radians), System.Single);
	result.M11 = num;
	result.M12 = num2;
	result.M13 = 0;
	result.M14 = 0;
	result.M21 = -num2;
	result.M22 = num;
	result.M23 = 0;
	result.M24 = 0;
	result.M31 = 0;
	result.M32 = 0;
	result.M33 = 1;
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle$0 = function (axis, angle) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var x = axis.X;
	var y = axis.Y;
	var z = axis.Z;
	var num = JSIL.Cast(System.Math.Sin(angle), System.Single);
	var num2 = JSIL.Cast(System.Math.Cos(angle), System.Single);
	var num3 = (x * x);
	var num4 = (y * y);
	var num5 = (z * z);
	var num6 = (x * y);
	var num7 = (x * z);
	var num8 = (y * z);
	result.M11 = (num3 + (num2 * (1 - num3)));
	result.M12 = ((num6 - (num2 * num6)) + (num * z));
	result.M13 = (num7 - (num2 * num7) - (num * y));
	result.M14 = 0;
	result.M21 = (num6 - (num2 * num6) - (num * z));
	result.M22 = (num4 + (num2 * (1 - num4)));
	result.M23 = ((num8 - (num2 * num8)) + (num * x));
	result.M24 = 0;
	result.M31 = ((num7 - (num2 * num7)) + (num * y));
	result.M32 = (num8 - (num2 * num8) - (num * x));
	result.M33 = (num5 + (num2 * (1 - num5)));
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle$1 = function (/* ref */ axis, angle, /* ref */ result) {
	var x = axis.X;
	var y = axis.Y;
	var z = axis.Z;
	var num = JSIL.Cast(System.Math.Sin(angle), System.Single);
	var num2 = JSIL.Cast(System.Math.Cos(angle), System.Single);
	var num3 = (x * x);
	var num4 = (y * y);
	var num5 = (z * z);
	var num6 = (x * y);
	var num7 = (x * z);
	var num8 = (y * z);
	result.M11 = (num3 + (num2 * (1 - num3)));
	result.M12 = ((num6 - (num2 * num6)) + (num * z));
	result.M13 = (num7 - (num2 * num7) - (num * y));
	result.M14 = 0;
	result.M21 = (num6 - (num2 * num6) - (num * z));
	result.M22 = (num4 + (num2 * (1 - num4)));
	result.M23 = ((num8 - (num2 * num8)) + (num * x));
	result.M24 = 0;
	result.M31 = ((num7 - (num2 * num7)) + (num * y));
	result.M32 = (num8 - (num2 * num8) - (num * x));
	result.M33 = (num5 + (num2 * (1 - num5)));
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView$0 = function (fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance) {
	var result = new Microsoft.Xna.Framework.Matrix();

	if (!((fieldOfView > 0) && (fieldOfView < 3.1415927410125732))) {
		throw new System.ArgumentOutOfRangeException("fieldOfView", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.OutRangeFieldOfView, ["fieldOfView"]));
	}

	if (nearPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["nearPlaneDistance"]));
	}

	if (farPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("farPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["farPlaneDistance"]));
	}

	if (nearPlaneDistance >= farPlaneDistance) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", Microsoft.Xna.Framework.FrameworkResources.OppositePlanes);
	}
	var num = (1 / JSIL.Cast(System.Math.Tan((fieldOfView * 0.5)), System.Single));
	result.M11 = (num / aspectRatio);
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = num;
	result.M21 = result.M23 = result.M24 = 0;
	result.M31 = result.M32 = 0;
	result.M33 = (farPlaneDistance / (nearPlaneDistance - farPlaneDistance));
	result.M34 = -1;
	result.M41 = result.M42 = result.M44 = 0;
	result.M43 = ((nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance));
	return result;
};

Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView$1 = function (fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance, /* ref */ result) {

	if (!((fieldOfView > 0) && (fieldOfView < 3.1415927410125732))) {
		throw new System.ArgumentOutOfRangeException("fieldOfView", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.OutRangeFieldOfView, ["fieldOfView"]));
	}

	if (nearPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["nearPlaneDistance"]));
	}

	if (farPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("farPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["farPlaneDistance"]));
	}

	if (nearPlaneDistance >= farPlaneDistance) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", Microsoft.Xna.Framework.FrameworkResources.OppositePlanes);
	}
	var num = (1 / JSIL.Cast(System.Math.Tan((fieldOfView * 0.5)), System.Single));
	result.M11 = (num / aspectRatio);
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = num;
	result.M21 = result.M23 = result.M24 = 0;
	result.M31 = result.M32 = 0;
	result.M33 = (farPlaneDistance / (nearPlaneDistance - farPlaneDistance));
	result.M34 = -1;
	result.M41 = result.M42 = result.M44 = 0;
	result.M43 = ((nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance));
};

Microsoft.Xna.Framework.Matrix.CreatePerspective$0 = function (width, height, nearPlaneDistance, farPlaneDistance) {
	var result = new Microsoft.Xna.Framework.Matrix();

	if (nearPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["nearPlaneDistance"]));
	}

	if (farPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("farPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["farPlaneDistance"]));
	}

	if (nearPlaneDistance >= farPlaneDistance) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", Microsoft.Xna.Framework.FrameworkResources.OppositePlanes);
	}
	result.M11 = ((2 * nearPlaneDistance) / width);
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = ((2 * nearPlaneDistance) / height);
	result.M21 = result.M23 = result.M24 = 0;
	result.M33 = (farPlaneDistance / (nearPlaneDistance - farPlaneDistance));
	result.M31 = result.M32 = 0;
	result.M34 = -1;
	result.M41 = result.M42 = result.M44 = 0;
	result.M43 = ((nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance));
	return result;
};

Microsoft.Xna.Framework.Matrix.CreatePerspective$1 = function (width, height, nearPlaneDistance, farPlaneDistance, /* ref */ result) {

	if (nearPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["nearPlaneDistance"]));
	}

	if (farPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("farPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["farPlaneDistance"]));
	}

	if (nearPlaneDistance >= farPlaneDistance) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", Microsoft.Xna.Framework.FrameworkResources.OppositePlanes);
	}
	result.M11 = ((2 * nearPlaneDistance) / width);
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = ((2 * nearPlaneDistance) / height);
	result.M21 = result.M23 = result.M24 = 0;
	result.M33 = (farPlaneDistance / (nearPlaneDistance - farPlaneDistance));
	result.M31 = result.M32 = 0;
	result.M34 = -1;
	result.M41 = result.M42 = result.M44 = 0;
	result.M43 = ((nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance));
};

Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter$0 = function (left, right, bottom, top, nearPlaneDistance, farPlaneDistance) {
	var result = new Microsoft.Xna.Framework.Matrix();

	if (nearPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["nearPlaneDistance"]));
	}

	if (farPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("farPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["farPlaneDistance"]));
	}

	if (nearPlaneDistance >= farPlaneDistance) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", Microsoft.Xna.Framework.FrameworkResources.OppositePlanes);
	}
	result.M11 = ((2 * nearPlaneDistance) / (right - left));
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = ((2 * nearPlaneDistance) / (top - bottom));
	result.M21 = result.M23 = result.M24 = 0;
	result.M31 = ((left + right) / (right - left));
	result.M32 = ((top + bottom) / (top - bottom));
	result.M33 = (farPlaneDistance / (nearPlaneDistance - farPlaneDistance));
	result.M34 = -1;
	result.M43 = ((nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance));
	result.M41 = result.M42 = result.M44 = 0;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter$1 = function (left, right, bottom, top, nearPlaneDistance, farPlaneDistance, /* ref */ result) {

	if (nearPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["nearPlaneDistance"]));
	}

	if (farPlaneDistance <= 0) {
		throw new System.ArgumentOutOfRangeException("farPlaneDistance", System.String.Format(System.Globalization.CultureInfo.CurrentCulture, Microsoft.Xna.Framework.FrameworkResources.NegativePlaneDistance, ["farPlaneDistance"]));
	}

	if (nearPlaneDistance >= farPlaneDistance) {
		throw new System.ArgumentOutOfRangeException("nearPlaneDistance", Microsoft.Xna.Framework.FrameworkResources.OppositePlanes);
	}
	result.M11 = ((2 * nearPlaneDistance) / (right - left));
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = ((2 * nearPlaneDistance) / (top - bottom));
	result.M21 = result.M23 = result.M24 = 0;
	result.M31 = ((left + right) / (right - left));
	result.M32 = ((top + bottom) / (top - bottom));
	result.M33 = (farPlaneDistance / (nearPlaneDistance - farPlaneDistance));
	result.M34 = -1;
	result.M43 = ((nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance));
	result.M41 = result.M42 = result.M44 = 0;
};

Microsoft.Xna.Framework.Matrix.CreateOrthographic$0 = function (width, height, zNearPlane, zFarPlane) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (2 / width);
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = (2 / height);
	result.M21 = result.M23 = result.M24 = 0;
	result.M33 = (1 / (zNearPlane - zFarPlane));
	result.M31 = result.M32 = result.M34 = 0;
	result.M41 = result.M42 = 0;
	result.M43 = (zNearPlane / (zNearPlane - zFarPlane));
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateOrthographic$1 = function (width, height, zNearPlane, zFarPlane, /* ref */ result) {
	result.M11 = (2 / width);
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = (2 / height);
	result.M21 = result.M23 = result.M24 = 0;
	result.M33 = (1 / (zNearPlane - zFarPlane));
	result.M31 = result.M32 = result.M34 = 0;
	result.M41 = result.M42 = 0;
	result.M43 = (zNearPlane / (zNearPlane - zFarPlane));
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter$0 = function (left, right, bottom, top, zNearPlane, zFarPlane) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (2 / (right - left));
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = (2 / (top - bottom));
	result.M21 = result.M23 = result.M24 = 0;
	result.M33 = (1 / (zNearPlane - zFarPlane));
	result.M31 = result.M32 = result.M34 = 0;
	result.M41 = ((left + right) / (left - right));
	result.M42 = ((top + bottom) / (bottom - top));
	result.M43 = (zNearPlane / (zNearPlane - zFarPlane));
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter$1 = function (left, right, bottom, top, zNearPlane, zFarPlane, /* ref */ result) {
	result.M11 = (2 / (right - left));
	result.M12 = result.M13 = result.M14 = 0;
	result.M22 = (2 / (top - bottom));
	result.M21 = result.M23 = result.M24 = 0;
	result.M33 = (1 / (zNearPlane - zFarPlane));
	result.M31 = result.M32 = result.M34 = 0;
	result.M41 = ((left + right) / (left - right));
	result.M42 = ((top + bottom) / (bottom - top));
	result.M43 = (zNearPlane / (zNearPlane - zFarPlane));
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateLookAt$0 = function (cameraPosition, cameraTarget, cameraUpVector) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var vector = Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3.op_Subtraction(cameraPosition.MemberwiseClone(), cameraTarget));
	var vector2 = Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3.Cross(cameraUpVector, vector.MemberwiseClone()));
	var vector3 = Microsoft.Xna.Framework.Vector3.Cross(vector.MemberwiseClone(), vector2.MemberwiseClone());
	result.M11 = vector2.X;
	result.M12 = vector3.X;
	result.M13 = vector.X;
	result.M14 = 0;
	result.M21 = vector2.Y;
	result.M22 = vector3.Y;
	result.M23 = vector.Y;
	result.M24 = 0;
	result.M31 = vector2.Z;
	result.M32 = vector3.Z;
	result.M33 = vector.Z;
	result.M34 = 0;
	result.M41 = -Microsoft.Xna.Framework.Vector3.Dot(vector2.MemberwiseClone(), cameraPosition.MemberwiseClone());
	result.M42 = -Microsoft.Xna.Framework.Vector3.Dot(vector3.MemberwiseClone(), cameraPosition.MemberwiseClone());
	result.M43 = -Microsoft.Xna.Framework.Vector3.Dot(vector.MemberwiseClone(), cameraPosition.MemberwiseClone());
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateLookAt$1 = function (/* ref */ cameraPosition, /* ref */ cameraTarget, /* ref */ cameraUpVector, /* ref */ result) {
	var vector = Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3.op_Subtraction(cameraPosition.value.MemberwiseClone(), cameraTarget.value.MemberwiseClone()));
	var vector2 = Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3.Cross(cameraUpVector.value.MemberwiseClone(), vector.MemberwiseClone()));
	var vector3 = Microsoft.Xna.Framework.Vector3.Cross(vector.MemberwiseClone(), vector2.MemberwiseClone());
	result.M11 = vector2.X;
	result.M12 = vector3.X;
	result.M13 = vector.X;
	result.M14 = 0;
	result.M21 = vector2.Y;
	result.M22 = vector3.Y;
	result.M23 = vector.Y;
	result.M24 = 0;
	result.M31 = vector2.Z;
	result.M32 = vector3.Z;
	result.M33 = vector.Z;
	result.M34 = 0;
	result.M41 = -Microsoft.Xna.Framework.Vector3.Dot(vector2.MemberwiseClone(), cameraPosition.value.MemberwiseClone());
	result.M42 = -Microsoft.Xna.Framework.Vector3.Dot(vector3.MemberwiseClone(), cameraPosition.value.MemberwiseClone());
	result.M43 = -Microsoft.Xna.Framework.Vector3.Dot(vector.MemberwiseClone(), cameraPosition.value.MemberwiseClone());
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateWorld$0 = function (position, forward, up) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var vector = Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3.op_UnaryNegation(forward));
	var vector2 = Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3.Cross(up, vector.MemberwiseClone()));
	var vector3 = Microsoft.Xna.Framework.Vector3.Cross(vector.MemberwiseClone(), vector2.MemberwiseClone());
	result.M11 = vector2.X;
	result.M12 = vector2.Y;
	result.M13 = vector2.Z;
	result.M14 = 0;
	result.M21 = vector3.X;
	result.M22 = vector3.Y;
	result.M23 = vector3.Z;
	result.M24 = 0;
	result.M31 = vector.X;
	result.M32 = vector.Y;
	result.M33 = vector.Z;
	result.M34 = 0;
	result.M41 = position.X;
	result.M42 = position.Y;
	result.M43 = position.Z;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateWorld$1 = function (/* ref */ position, /* ref */ forward, /* ref */ up, /* ref */ result) {
	var vector = Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3.op_UnaryNegation(forward.value.MemberwiseClone()));
	var vector2 = Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3.Cross(up.value.MemberwiseClone(), vector.MemberwiseClone()));
	var vector3 = Microsoft.Xna.Framework.Vector3.Cross(vector.MemberwiseClone(), vector2.MemberwiseClone());
	result.M11 = vector2.X;
	result.M12 = vector2.Y;
	result.M13 = vector2.Z;
	result.M14 = 0;
	result.M21 = vector3.X;
	result.M22 = vector3.Y;
	result.M23 = vector3.Z;
	result.M24 = 0;
	result.M31 = vector.X;
	result.M32 = vector.Y;
	result.M33 = vector.Z;
	result.M34 = 0;
	result.M41 = position.X;
	result.M42 = position.Y;
	result.M43 = position.Z;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateFromQuaternion$0 = function (quaternion) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var num = (quaternion.X * quaternion.X);
	var num2 = (quaternion.Y * quaternion.Y);
	var num3 = (quaternion.Z * quaternion.Z);
	var num4 = (quaternion.X * quaternion.Y);
	var num5 = (quaternion.Z * quaternion.W);
	var num6 = (quaternion.Z * quaternion.X);
	var num7 = (quaternion.Y * quaternion.W);
	var num8 = (quaternion.Y * quaternion.Z);
	var num9 = (quaternion.X * quaternion.W);
	result.M11 = (1 - (2 * (num2 + num3)));
	result.M12 = (2 * (num4 + num5));
	result.M13 = (2 * (num6 - num7));
	result.M14 = 0;
	result.M21 = (2 * (num4 - num5));
	result.M22 = (1 - (2 * (num3 + num)));
	result.M23 = (2 * (num8 + num9));
	result.M24 = 0;
	result.M31 = (2 * (num6 + num7));
	result.M32 = (2 * (num8 - num9));
	result.M33 = (1 - (2 * (num2 + num)));
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateFromQuaternion$1 = function (/* ref */ quaternion, /* ref */ result) {
	var num = (quaternion.X * quaternion.X);
	var num2 = (quaternion.Y * quaternion.Y);
	var num3 = (quaternion.Z * quaternion.Z);
	var num4 = (quaternion.X * quaternion.Y);
	var num5 = (quaternion.Z * quaternion.W);
	var num6 = (quaternion.Z * quaternion.X);
	var num7 = (quaternion.Y * quaternion.W);
	var num8 = (quaternion.Y * quaternion.Z);
	var num9 = (quaternion.X * quaternion.W);
	result.M11 = (1 - (2 * (num2 + num3)));
	result.M12 = (2 * (num4 + num5));
	result.M13 = (2 * (num6 - num7));
	result.M14 = 0;
	result.M21 = (2 * (num4 - num5));
	result.M22 = (1 - (2 * (num3 + num)));
	result.M23 = (2 * (num8 + num9));
	result.M24 = 0;
	result.M31 = (2 * (num6 + num7));
	result.M32 = (2 * (num8 - num9));
	result.M33 = (1 - (2 * (num2 + num)));
	result.M34 = 0;
	result.M41 = 0;
	result.M42 = 0;
	result.M43 = 0;
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll$0 = function (yaw, pitch, roll) {
	var quaternion = new Microsoft.Xna.Framework.Quaternion(), result = new Microsoft.Xna.Framework.Matrix();
	Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(yaw, pitch, roll, /* ref */ quaternion);
	Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(/* ref */ quaternion, /* ref */ result);
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll$1 = function (yaw, pitch, roll, /* ref */ result) {
	var quaternion = new Microsoft.Xna.Framework.Quaternion();
	Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(yaw, pitch, roll, /* ref */ quaternion);
	Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(/* ref */ quaternion, /* ref */ result);
};

Microsoft.Xna.Framework.Matrix.CreateShadow$0 = function (lightDirection, plane) {
	var plane2 = new Microsoft.Xna.Framework.Plane(), result = new Microsoft.Xna.Framework.Matrix();
	Microsoft.Xna.Framework.Plane.Normalize(/* ref */ plane, /* ref */ plane2);
	var num = ((plane2.Normal.X * lightDirection.X) + (plane2.Normal.Y * lightDirection.Y) + (plane2.Normal.Z * lightDirection.Z));
	var num2 = -plane2.Normal.X;
	var num3 = -plane2.Normal.Y;
	var num4 = -plane2.Normal.Z;
	var num5 = -plane2.D;
	result.M11 = ((num2 * lightDirection.X) + num);
	result.M21 = (num3 * lightDirection.X);
	result.M31 = (num4 * lightDirection.X);
	result.M41 = (num5 * lightDirection.X);
	result.M12 = (num2 * lightDirection.Y);
	result.M22 = ((num3 * lightDirection.Y) + num);
	result.M32 = (num4 * lightDirection.Y);
	result.M42 = (num5 * lightDirection.Y);
	result.M13 = (num2 * lightDirection.Z);
	result.M23 = (num3 * lightDirection.Z);
	result.M33 = ((num4 * lightDirection.Z) + num);
	result.M43 = (num5 * lightDirection.Z);
	result.M14 = 0;
	result.M24 = 0;
	result.M34 = 0;
	result.M44 = num;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateShadow$1 = function (/* ref */ lightDirection, /* ref */ plane, /* ref */ result) {
	var plane2 = new Microsoft.Xna.Framework.Plane();
	Microsoft.Xna.Framework.Plane.Normalize(/* ref */ plane, /* ref */ plane2);
	var num = ((plane2.Normal.X * lightDirection.X) + (plane2.Normal.Y * lightDirection.Y) + (plane2.Normal.Z * lightDirection.Z));
	var num2 = -plane2.Normal.X;
	var num3 = -plane2.Normal.Y;
	var num4 = -plane2.Normal.Z;
	var num5 = -plane2.D;
	result.M11 = ((num2 * lightDirection.X) + num);
	result.M21 = (num3 * lightDirection.X);
	result.M31 = (num4 * lightDirection.X);
	result.M41 = (num5 * lightDirection.X);
	result.M12 = (num2 * lightDirection.Y);
	result.M22 = ((num3 * lightDirection.Y) + num);
	result.M32 = (num4 * lightDirection.Y);
	result.M42 = (num5 * lightDirection.Y);
	result.M13 = (num2 * lightDirection.Z);
	result.M23 = (num3 * lightDirection.Z);
	result.M33 = ((num4 * lightDirection.Z) + num);
	result.M43 = (num5 * lightDirection.Z);
	result.M14 = 0;
	result.M24 = 0;
	result.M34 = 0;
	result.M44 = num;
};

Microsoft.Xna.Framework.Matrix.CreateReflection$0 = function (value) {
	var result = new Microsoft.Xna.Framework.Matrix();
	value.Normalize();
	var x = value.Normal.X;
	var y = value.Normal.Y;
	var z = value.Normal.Z;
	var num = (-2 * x);
	var num2 = (-2 * y);
	var num3 = (-2 * z);
	result.M11 = ((num * x) + 1);
	result.M12 = (num2 * x);
	result.M13 = (num3 * x);
	result.M14 = 0;
	result.M21 = (num * y);
	result.M22 = ((num2 * y) + 1);
	result.M23 = (num3 * y);
	result.M24 = 0;
	result.M31 = (num * z);
	result.M32 = (num2 * z);
	result.M33 = ((num3 * z) + 1);
	result.M34 = 0;
	result.M41 = (num * value.D);
	result.M42 = (num2 * value.D);
	result.M43 = (num3 * value.D);
	result.M44 = 1;
	return result;
};

Microsoft.Xna.Framework.Matrix.CreateReflection$1 = function (/* ref */ value, /* ref */ result) {
	var plane = new Microsoft.Xna.Framework.Plane();
	Microsoft.Xna.Framework.Plane.Normalize(/* ref */ value, /* ref */ plane);
	value.Normalize();
	var x = plane.Normal.X;
	var y = plane.Normal.Y;
	var z = plane.Normal.Z;
	var num = (-2 * x);
	var num2 = (-2 * y);
	var num3 = (-2 * z);
	result.M11 = ((num * x) + 1);
	result.M12 = (num2 * x);
	result.M13 = (num3 * x);
	result.M14 = 0;
	result.M21 = (num * y);
	result.M22 = ((num2 * y) + 1);
	result.M23 = (num3 * y);
	result.M24 = 0;
	result.M31 = (num * z);
	result.M32 = (num2 * z);
	result.M33 = ((num3 * z) + 1);
	result.M34 = 0;
	result.M41 = (num * plane.D);
	result.M42 = (num2 * plane.D);
	result.M43 = (num3 * plane.D);
	result.M44 = 1;
};

Microsoft.Xna.Framework.Matrix.prototype.Decompose = JSIL.UntranslatableFunction("Decompose");

Microsoft.Xna.Framework.Matrix.Transform$0 = function (value, rotation) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	var num13 = (1 - num10 - num12);
	var num14 = (num8 - num6);
	var num15 = (num9 + num5);
	var num16 = (num8 + num6);
	var num17 = (1 - num7 - num12);
	var num18 = (num11 - num4);
	var num19 = (num9 - num5);
	var num20 = (num11 + num4);
	var num21 = (1 - num7 - num10);
	result.M11 = ((value.M11 * num13) + (value.M12 * num14) + (value.M13 * num15));
	result.M12 = ((value.M11 * num16) + (value.M12 * num17) + (value.M13 * num18));
	result.M13 = ((value.M11 * num19) + (value.M12 * num20) + (value.M13 * num21));
	result.M14 = value.M14;
	result.M21 = ((value.M21 * num13) + (value.M22 * num14) + (value.M23 * num15));
	result.M22 = ((value.M21 * num16) + (value.M22 * num17) + (value.M23 * num18));
	result.M23 = ((value.M21 * num19) + (value.M22 * num20) + (value.M23 * num21));
	result.M24 = value.M24;
	result.M31 = ((value.M31 * num13) + (value.M32 * num14) + (value.M33 * num15));
	result.M32 = ((value.M31 * num16) + (value.M32 * num17) + (value.M33 * num18));
	result.M33 = ((value.M31 * num19) + (value.M32 * num20) + (value.M33 * num21));
	result.M34 = value.M34;
	result.M41 = ((value.M41 * num13) + (value.M42 * num14) + (value.M43 * num15));
	result.M42 = ((value.M41 * num16) + (value.M42 * num17) + (value.M43 * num18));
	result.M43 = ((value.M41 * num19) + (value.M42 * num20) + (value.M43 * num21));
	result.M44 = value.M44;
	return result;
};

Microsoft.Xna.Framework.Matrix.Transform$1 = function (/* ref */ value, /* ref */ rotation, /* ref */ result) {
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	var num13 = (1 - num10 - num12);
	var num14 = (num8 - num6);
	var num15 = (num9 + num5);
	var num16 = (num8 + num6);
	var num17 = (1 - num7 - num12);
	var num18 = (num11 - num4);
	var num19 = (num9 - num5);
	var num20 = (num11 + num4);
	var num21 = (1 - num7 - num10);
	result.M11 = ((value.M11 * num13) + (value.M12 * num14) + (value.M13 * num15));
	result.M12 = ((value.M11 * num16) + (value.M12 * num17) + (value.M13 * num18));
	result.M13 = ((value.M11 * num19) + (value.M12 * num20) + (value.M13 * num21));
	result.M14 = value.M14;
	result.M21 = ((value.M21 * num13) + (value.M22 * num14) + (value.M23 * num15));
	result.M22 = ((value.M21 * num16) + (value.M22 * num17) + (value.M23 * num18));
	result.M23 = ((value.M21 * num19) + (value.M22 * num20) + (value.M23 * num21));
	result.M24 = value.M24;
	result.M31 = ((value.M31 * num13) + (value.M32 * num14) + (value.M33 * num15));
	result.M32 = ((value.M31 * num16) + (value.M32 * num17) + (value.M33 * num18));
	result.M33 = ((value.M31 * num19) + (value.M32 * num20) + (value.M33 * num21));
	result.M34 = value.M34;
	result.M41 = ((value.M41 * num13) + (value.M42 * num14) + (value.M43 * num15));
	result.M42 = ((value.M41 * num16) + (value.M42 * num17) + (value.M43 * num18));
	result.M43 = ((value.M41 * num19) + (value.M42 * num20) + (value.M43 * num21));
	result.M44 = value.M44;
};

Microsoft.Xna.Framework.Matrix.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return JSIL.Array.New(System.String, ["{ ", System.String.Format(currentCulture, "{{M11:{0} M12:{1} M13:{2} M14:{3}}} ", [this.M11.toString(currentCulture), this.M12.toString(currentCulture), this.M13.toString(currentCulture), this.M14.toString(currentCulture)]), System.String.Format(currentCulture, "{{M21:{0} M22:{1} M23:{2} M24:{3}}} ", [this.M21.toString(currentCulture), this.M22.toString(currentCulture), this.M23.toString(currentCulture), this.M24.toString(currentCulture)]), System.String.Format(currentCulture, "{{M31:{0} M32:{1} M33:{2} M34:{3}}} ", [this.M31.toString(currentCulture), this.M32.toString(currentCulture), this.M33.toString(currentCulture), this.M34.toString(currentCulture)]), System.String.Format(currentCulture, "{{M41:{0} M42:{1} M43:{2} M44:{3}}} ", [this.M41.toString(currentCulture), this.M42.toString(currentCulture), this.M43.toString(currentCulture), this.M44.toString(currentCulture)]), "}"]);
};

Microsoft.Xna.Framework.Matrix.prototype.Equals$0 = function (other) {
	return (!((this.M11 !== other.M11) || 
			(this.M22 !== other.M22) || 
			(this.M33 !== other.M33) || 
			(this.M44 !== other.M44) || 
			(this.M12 !== other.M12) || 
			(this.M13 !== other.M13) || 
			(this.M14 !== other.M14) || 
			(this.M21 !== other.M21) || 
			(this.M23 !== other.M23) || 
			(this.M24 !== other.M24) || 
			(this.M31 !== other.M31) || 
			(this.M32 !== other.M32) || 
			(this.M34 !== other.M34) || 
			(this.M41 !== other.M41) || 
			(this.M42 !== other.M42)) && (this.M43 === other.M43));
};

Microsoft.Xna.Framework.Matrix.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Matrix.MemberwiseClone()) === new Microsoft.Xna.Framework.Matrix()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Matrix.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Matrix.prototype.GetHashCode = function () {
	return (this.M11.GetHashCode() + this.M12.GetHashCode() + this.M13.GetHashCode() + this.M14.GetHashCode() + this.M21.GetHashCode() + this.M22.GetHashCode() + this.M23.GetHashCode() + this.M24.GetHashCode() + this.M31.GetHashCode() + this.M32.GetHashCode() + this.M33.GetHashCode() + this.M34.GetHashCode() + this.M41.GetHashCode() + this.M42.GetHashCode() + this.M43.GetHashCode() + this.M44.GetHashCode());
};

Microsoft.Xna.Framework.Matrix.Transpose$0 = function (matrix) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = matrix.M11;
	result.M12 = matrix.M21;
	result.M13 = matrix.M31;
	result.M14 = matrix.M41;
	result.M21 = matrix.M12;
	result.M22 = matrix.M22;
	result.M23 = matrix.M32;
	result.M24 = matrix.M42;
	result.M31 = matrix.M13;
	result.M32 = matrix.M23;
	result.M33 = matrix.M33;
	result.M34 = matrix.M43;
	result.M41 = matrix.M14;
	result.M42 = matrix.M24;
	result.M43 = matrix.M34;
	result.M44 = matrix.M44;
	return result;
};

Microsoft.Xna.Framework.Matrix.Transpose$1 = function (/* ref */ matrix, /* ref */ result) {
	result.M11 = matrix.M11;
	result.M12 = matrix.M21;
	result.M13 = matrix.M31;
	result.M14 = matrix.M41;
	result.M21 = matrix.M12;
	result.M22 = matrix.M22;
	result.M23 = matrix.M32;
	result.M24 = matrix.M42;
	result.M31 = matrix.M13;
	result.M32 = matrix.M23;
	result.M33 = matrix.M33;
	result.M34 = matrix.M43;
	result.M41 = matrix.M14;
	result.M42 = matrix.M24;
	result.M43 = matrix.M34;
	result.M44 = matrix.M44;
};

Microsoft.Xna.Framework.Matrix.prototype.Determinant = function () {
	var m5 = this.M21;
	var m6 = this.M22;
	var m7 = this.M23;
	var m8 = this.M24;
	var m9 = this.M31;
	var m10 = this.M32;
	var m11 = this.M33;
	var m12 = this.M34;
	var m13 = this.M41;
	var m14 = this.M42;
	var m15 = this.M43;
	var m16 = this.M44;
	var num = ((m11 * m16) - (m12 * m15));
	var num2 = ((m10 * m16) - (m12 * m14));
	var num3 = ((m10 * m15) - (m11 * m14));
	var num4 = ((m9 * m16) - (m12 * m13));
	var num5 = ((m9 * m15) - (m11 * m13));
	var num6 = ((m9 * m14) - (m10 * m13));
	return ((((this.M11 * (((m6 * num) - (m7 * num2)) + (m8 * num3))) - (this.M12 * (((m5 * num) - (m7 * num4)) + (m8 * num5)))) + (this.M13 * (((m5 * num2) - (m6 * num4)) + (m8 * num6)))) - (this.M14 * (((m5 * num3) - (m6 * num5)) + (m7 * num6))));
};

Microsoft.Xna.Framework.Matrix.Invert$0 = function (matrix) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var m = matrix.M11;
	var m2 = matrix.M12;
	var m3 = matrix.M13;
	var m4 = matrix.M14;
	var m5 = matrix.M21;
	var m6 = matrix.M22;
	var m7 = matrix.M23;
	var m8 = matrix.M24;
	var m9 = matrix.M31;
	var m10 = matrix.M32;
	var m11 = matrix.M33;
	var m12 = matrix.M34;
	var m13 = matrix.M41;
	var m14 = matrix.M42;
	var m15 = matrix.M43;
	var m16 = matrix.M44;
	var num = ((m11 * m16) - (m12 * m15));
	var num2 = ((m10 * m16) - (m12 * m14));
	var num3 = ((m10 * m15) - (m11 * m14));
	var num4 = ((m9 * m16) - (m12 * m13));
	var num5 = ((m9 * m15) - (m11 * m13));
	var num6 = ((m9 * m14) - (m10 * m13));
	var num7 = (((m6 * num) - (m7 * num2)) + (m8 * num3));
	var num8 = -(((m5 * num) - (m7 * num4)) + (m8 * num5));
	var num9 = (((m5 * num2) - (m6 * num4)) + (m8 * num6));
	var num10 = -(((m5 * num3) - (m6 * num5)) + (m7 * num6));
	var num11 = (1 / ((m * num7) + (m2 * num8) + (m3 * num9) + (m4 * num10)));
	result.M11 = (num7 * num11);
	result.M21 = (num8 * num11);
	result.M31 = (num9 * num11);
	result.M41 = (num10 * num11);
	result.M12 = (-(((m2 * num) - (m3 * num2)) + (m4 * num3)) * num11);
	result.M22 = ((((m * num) - (m3 * num4)) + (m4 * num5)) * num11);
	result.M32 = (-(((m * num2) - (m2 * num4)) + (m4 * num6)) * num11);
	result.M42 = ((((m * num3) - (m2 * num5)) + (m3 * num6)) * num11);
	var num12 = ((m7 * m16) - (m8 * m15));
	var num13 = ((m6 * m16) - (m8 * m14));
	var num14 = ((m6 * m15) - (m7 * m14));
	var num15 = ((m5 * m16) - (m8 * m13));
	var num16 = ((m5 * m15) - (m7 * m13));
	var num17 = ((m5 * m14) - (m6 * m13));
	result.M13 = ((((m2 * num12) - (m3 * num13)) + (m4 * num14)) * num11);
	result.M23 = (-(((m * num12) - (m3 * num15)) + (m4 * num16)) * num11);
	result.M33 = ((((m * num13) - (m2 * num15)) + (m4 * num17)) * num11);
	result.M43 = (-(((m * num14) - (m2 * num16)) + (m3 * num17)) * num11);
	var num18 = ((m7 * m12) - (m8 * m11));
	var num19 = ((m6 * m12) - (m8 * m10));
	var num20 = ((m6 * m11) - (m7 * m10));
	var num21 = ((m5 * m12) - (m8 * m9));
	var num22 = ((m5 * m11) - (m7 * m9));
	var num23 = ((m5 * m10) - (m6 * m9));
	result.M14 = (-(((m2 * num18) - (m3 * num19)) + (m4 * num20)) * num11);
	result.M24 = ((((m * num18) - (m3 * num21)) + (m4 * num22)) * num11);
	result.M34 = (-(((m * num19) - (m2 * num21)) + (m4 * num23)) * num11);
	result.M44 = ((((m * num20) - (m2 * num22)) + (m3 * num23)) * num11);
	return result;
};

Microsoft.Xna.Framework.Matrix.Invert$1 = function (/* ref */ matrix, /* ref */ result) {
	var m = matrix.M11;
	var m2 = matrix.M12;
	var m3 = matrix.M13;
	var m4 = matrix.M14;
	var m5 = matrix.M21;
	var m6 = matrix.M22;
	var m7 = matrix.M23;
	var m8 = matrix.M24;
	var m9 = matrix.M31;
	var m10 = matrix.M32;
	var m11 = matrix.M33;
	var m12 = matrix.M34;
	var m13 = matrix.M41;
	var m14 = matrix.M42;
	var m15 = matrix.M43;
	var m16 = matrix.M44;
	var num = ((m11 * m16) - (m12 * m15));
	var num2 = ((m10 * m16) - (m12 * m14));
	var num3 = ((m10 * m15) - (m11 * m14));
	var num4 = ((m9 * m16) - (m12 * m13));
	var num5 = ((m9 * m15) - (m11 * m13));
	var num6 = ((m9 * m14) - (m10 * m13));
	var num7 = (((m6 * num) - (m7 * num2)) + (m8 * num3));
	var num8 = -(((m5 * num) - (m7 * num4)) + (m8 * num5));
	var num9 = (((m5 * num2) - (m6 * num4)) + (m8 * num6));
	var num10 = -(((m5 * num3) - (m6 * num5)) + (m7 * num6));
	var num11 = (1 / ((m * num7) + (m2 * num8) + (m3 * num9) + (m4 * num10)));
	result.M11 = (num7 * num11);
	result.M21 = (num8 * num11);
	result.M31 = (num9 * num11);
	result.M41 = (num10 * num11);
	result.M12 = (-(((m2 * num) - (m3 * num2)) + (m4 * num3)) * num11);
	result.M22 = ((((m * num) - (m3 * num4)) + (m4 * num5)) * num11);
	result.M32 = (-(((m * num2) - (m2 * num4)) + (m4 * num6)) * num11);
	result.M42 = ((((m * num3) - (m2 * num5)) + (m3 * num6)) * num11);
	var num12 = ((m7 * m16) - (m8 * m15));
	var num13 = ((m6 * m16) - (m8 * m14));
	var num14 = ((m6 * m15) - (m7 * m14));
	var num15 = ((m5 * m16) - (m8 * m13));
	var num16 = ((m5 * m15) - (m7 * m13));
	var num17 = ((m5 * m14) - (m6 * m13));
	result.M13 = ((((m2 * num12) - (m3 * num13)) + (m4 * num14)) * num11);
	result.M23 = (-(((m * num12) - (m3 * num15)) + (m4 * num16)) * num11);
	result.M33 = ((((m * num13) - (m2 * num15)) + (m4 * num17)) * num11);
	result.M43 = (-(((m * num14) - (m2 * num16)) + (m3 * num17)) * num11);
	var num18 = ((m7 * m12) - (m8 * m11));
	var num19 = ((m6 * m12) - (m8 * m10));
	var num20 = ((m6 * m11) - (m7 * m10));
	var num21 = ((m5 * m12) - (m8 * m9));
	var num22 = ((m5 * m11) - (m7 * m9));
	var num23 = ((m5 * m10) - (m6 * m9));
	result.M14 = (-(((m2 * num18) - (m3 * num19)) + (m4 * num20)) * num11);
	result.M24 = ((((m * num18) - (m3 * num21)) + (m4 * num22)) * num11);
	result.M34 = (-(((m * num19) - (m2 * num21)) + (m4 * num23)) * num11);
	result.M44 = ((((m * num20) - (m2 * num22)) + (m3 * num23)) * num11);
};

Microsoft.Xna.Framework.Matrix.Lerp$0 = function (matrix1, matrix2, amount) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix1.M11 + ((matrix2.M11 - matrix1.M11) * amount));
	result.M12 = (matrix1.M12 + ((matrix2.M12 - matrix1.M12) * amount));
	result.M13 = (matrix1.M13 + ((matrix2.M13 - matrix1.M13) * amount));
	result.M14 = (matrix1.M14 + ((matrix2.M14 - matrix1.M14) * amount));
	result.M21 = (matrix1.M21 + ((matrix2.M21 - matrix1.M21) * amount));
	result.M22 = (matrix1.M22 + ((matrix2.M22 - matrix1.M22) * amount));
	result.M23 = (matrix1.M23 + ((matrix2.M23 - matrix1.M23) * amount));
	result.M24 = (matrix1.M24 + ((matrix2.M24 - matrix1.M24) * amount));
	result.M31 = (matrix1.M31 + ((matrix2.M31 - matrix1.M31) * amount));
	result.M32 = (matrix1.M32 + ((matrix2.M32 - matrix1.M32) * amount));
	result.M33 = (matrix1.M33 + ((matrix2.M33 - matrix1.M33) * amount));
	result.M34 = (matrix1.M34 + ((matrix2.M34 - matrix1.M34) * amount));
	result.M41 = (matrix1.M41 + ((matrix2.M41 - matrix1.M41) * amount));
	result.M42 = (matrix1.M42 + ((matrix2.M42 - matrix1.M42) * amount));
	result.M43 = (matrix1.M43 + ((matrix2.M43 - matrix1.M43) * amount));
	result.M44 = (matrix1.M44 + ((matrix2.M44 - matrix1.M44) * amount));
	return result;
};

Microsoft.Xna.Framework.Matrix.Lerp$1 = function (/* ref */ matrix1, /* ref */ matrix2, amount, /* ref */ result) {
	result.M11 = (matrix1.M11 + ((matrix2.M11 - matrix1.M11) * amount));
	result.M12 = (matrix1.M12 + ((matrix2.M12 - matrix1.M12) * amount));
	result.M13 = (matrix1.M13 + ((matrix2.M13 - matrix1.M13) * amount));
	result.M14 = (matrix1.M14 + ((matrix2.M14 - matrix1.M14) * amount));
	result.M21 = (matrix1.M21 + ((matrix2.M21 - matrix1.M21) * amount));
	result.M22 = (matrix1.M22 + ((matrix2.M22 - matrix1.M22) * amount));
	result.M23 = (matrix1.M23 + ((matrix2.M23 - matrix1.M23) * amount));
	result.M24 = (matrix1.M24 + ((matrix2.M24 - matrix1.M24) * amount));
	result.M31 = (matrix1.M31 + ((matrix2.M31 - matrix1.M31) * amount));
	result.M32 = (matrix1.M32 + ((matrix2.M32 - matrix1.M32) * amount));
	result.M33 = (matrix1.M33 + ((matrix2.M33 - matrix1.M33) * amount));
	result.M34 = (matrix1.M34 + ((matrix2.M34 - matrix1.M34) * amount));
	result.M41 = (matrix1.M41 + ((matrix2.M41 - matrix1.M41) * amount));
	result.M42 = (matrix1.M42 + ((matrix2.M42 - matrix1.M42) * amount));
	result.M43 = (matrix1.M43 + ((matrix2.M43 - matrix1.M43) * amount));
	result.M44 = (matrix1.M44 + ((matrix2.M44 - matrix1.M44) * amount));
};

Microsoft.Xna.Framework.Matrix.Negate$0 = function (matrix) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = -matrix.M11;
	result.M12 = -matrix.M12;
	result.M13 = -matrix.M13;
	result.M14 = -matrix.M14;
	result.M21 = -matrix.M21;
	result.M22 = -matrix.M22;
	result.M23 = -matrix.M23;
	result.M24 = -matrix.M24;
	result.M31 = -matrix.M31;
	result.M32 = -matrix.M32;
	result.M33 = -matrix.M33;
	result.M34 = -matrix.M34;
	result.M41 = -matrix.M41;
	result.M42 = -matrix.M42;
	result.M43 = -matrix.M43;
	result.M44 = -matrix.M44;
	return result;
};

Microsoft.Xna.Framework.Matrix.Negate$1 = function (/* ref */ matrix, /* ref */ result) {
	result.M11 = -matrix.M11;
	result.M12 = -matrix.M12;
	result.M13 = -matrix.M13;
	result.M14 = -matrix.M14;
	result.M21 = -matrix.M21;
	result.M22 = -matrix.M22;
	result.M23 = -matrix.M23;
	result.M24 = -matrix.M24;
	result.M31 = -matrix.M31;
	result.M32 = -matrix.M32;
	result.M33 = -matrix.M33;
	result.M34 = -matrix.M34;
	result.M41 = -matrix.M41;
	result.M42 = -matrix.M42;
	result.M43 = -matrix.M43;
	result.M44 = -matrix.M44;
};

Microsoft.Xna.Framework.Matrix.Add$0 = function (matrix1, matrix2) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix1.M11 + matrix2.M11);
	result.M12 = (matrix1.M12 + matrix2.M12);
	result.M13 = (matrix1.M13 + matrix2.M13);
	result.M14 = (matrix1.M14 + matrix2.M14);
	result.M21 = (matrix1.M21 + matrix2.M21);
	result.M22 = (matrix1.M22 + matrix2.M22);
	result.M23 = (matrix1.M23 + matrix2.M23);
	result.M24 = (matrix1.M24 + matrix2.M24);
	result.M31 = (matrix1.M31 + matrix2.M31);
	result.M32 = (matrix1.M32 + matrix2.M32);
	result.M33 = (matrix1.M33 + matrix2.M33);
	result.M34 = (matrix1.M34 + matrix2.M34);
	result.M41 = (matrix1.M41 + matrix2.M41);
	result.M42 = (matrix1.M42 + matrix2.M42);
	result.M43 = (matrix1.M43 + matrix2.M43);
	result.M44 = (matrix1.M44 + matrix2.M44);
	return result;
};

Microsoft.Xna.Framework.Matrix.Add$1 = function (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
	result.M11 = (matrix1.M11 + matrix2.M11);
	result.M12 = (matrix1.M12 + matrix2.M12);
	result.M13 = (matrix1.M13 + matrix2.M13);
	result.M14 = (matrix1.M14 + matrix2.M14);
	result.M21 = (matrix1.M21 + matrix2.M21);
	result.M22 = (matrix1.M22 + matrix2.M22);
	result.M23 = (matrix1.M23 + matrix2.M23);
	result.M24 = (matrix1.M24 + matrix2.M24);
	result.M31 = (matrix1.M31 + matrix2.M31);
	result.M32 = (matrix1.M32 + matrix2.M32);
	result.M33 = (matrix1.M33 + matrix2.M33);
	result.M34 = (matrix1.M34 + matrix2.M34);
	result.M41 = (matrix1.M41 + matrix2.M41);
	result.M42 = (matrix1.M42 + matrix2.M42);
	result.M43 = (matrix1.M43 + matrix2.M43);
	result.M44 = (matrix1.M44 + matrix2.M44);
};

Microsoft.Xna.Framework.Matrix.Subtract$0 = function (matrix1, matrix2) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix1.M11 - matrix2.M11);
	result.M12 = (matrix1.M12 - matrix2.M12);
	result.M13 = (matrix1.M13 - matrix2.M13);
	result.M14 = (matrix1.M14 - matrix2.M14);
	result.M21 = (matrix1.M21 - matrix2.M21);
	result.M22 = (matrix1.M22 - matrix2.M22);
	result.M23 = (matrix1.M23 - matrix2.M23);
	result.M24 = (matrix1.M24 - matrix2.M24);
	result.M31 = (matrix1.M31 - matrix2.M31);
	result.M32 = (matrix1.M32 - matrix2.M32);
	result.M33 = (matrix1.M33 - matrix2.M33);
	result.M34 = (matrix1.M34 - matrix2.M34);
	result.M41 = (matrix1.M41 - matrix2.M41);
	result.M42 = (matrix1.M42 - matrix2.M42);
	result.M43 = (matrix1.M43 - matrix2.M43);
	result.M44 = (matrix1.M44 - matrix2.M44);
	return result;
};

Microsoft.Xna.Framework.Matrix.Subtract$1 = function (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
	result.M11 = (matrix1.M11 - matrix2.M11);
	result.M12 = (matrix1.M12 - matrix2.M12);
	result.M13 = (matrix1.M13 - matrix2.M13);
	result.M14 = (matrix1.M14 - matrix2.M14);
	result.M21 = (matrix1.M21 - matrix2.M21);
	result.M22 = (matrix1.M22 - matrix2.M22);
	result.M23 = (matrix1.M23 - matrix2.M23);
	result.M24 = (matrix1.M24 - matrix2.M24);
	result.M31 = (matrix1.M31 - matrix2.M31);
	result.M32 = (matrix1.M32 - matrix2.M32);
	result.M33 = (matrix1.M33 - matrix2.M33);
	result.M34 = (matrix1.M34 - matrix2.M34);
	result.M41 = (matrix1.M41 - matrix2.M41);
	result.M42 = (matrix1.M42 - matrix2.M42);
	result.M43 = (matrix1.M43 - matrix2.M43);
	result.M44 = (matrix1.M44 - matrix2.M44);
};

Microsoft.Xna.Framework.Matrix.Multiply$0 = function (matrix1, matrix2) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = ((matrix1.M11 * matrix2.M11) + (matrix1.M12 * matrix2.M21) + (matrix1.M13 * matrix2.M31) + (matrix1.M14 * matrix2.M41));
	result.M12 = ((matrix1.M11 * matrix2.M12) + (matrix1.M12 * matrix2.M22) + (matrix1.M13 * matrix2.M32) + (matrix1.M14 * matrix2.M42));
	result.M13 = ((matrix1.M11 * matrix2.M13) + (matrix1.M12 * matrix2.M23) + (matrix1.M13 * matrix2.M33) + (matrix1.M14 * matrix2.M43));
	result.M14 = ((matrix1.M11 * matrix2.M14) + (matrix1.M12 * matrix2.M24) + (matrix1.M13 * matrix2.M34) + (matrix1.M14 * matrix2.M44));
	result.M21 = ((matrix1.M21 * matrix2.M11) + (matrix1.M22 * matrix2.M21) + (matrix1.M23 * matrix2.M31) + (matrix1.M24 * matrix2.M41));
	result.M22 = ((matrix1.M21 * matrix2.M12) + (matrix1.M22 * matrix2.M22) + (matrix1.M23 * matrix2.M32) + (matrix1.M24 * matrix2.M42));
	result.M23 = ((matrix1.M21 * matrix2.M13) + (matrix1.M22 * matrix2.M23) + (matrix1.M23 * matrix2.M33) + (matrix1.M24 * matrix2.M43));
	result.M24 = ((matrix1.M21 * matrix2.M14) + (matrix1.M22 * matrix2.M24) + (matrix1.M23 * matrix2.M34) + (matrix1.M24 * matrix2.M44));
	result.M31 = ((matrix1.M31 * matrix2.M11) + (matrix1.M32 * matrix2.M21) + (matrix1.M33 * matrix2.M31) + (matrix1.M34 * matrix2.M41));
	result.M32 = ((matrix1.M31 * matrix2.M12) + (matrix1.M32 * matrix2.M22) + (matrix1.M33 * matrix2.M32) + (matrix1.M34 * matrix2.M42));
	result.M33 = ((matrix1.M31 * matrix2.M13) + (matrix1.M32 * matrix2.M23) + (matrix1.M33 * matrix2.M33) + (matrix1.M34 * matrix2.M43));
	result.M34 = ((matrix1.M31 * matrix2.M14) + (matrix1.M32 * matrix2.M24) + (matrix1.M33 * matrix2.M34) + (matrix1.M34 * matrix2.M44));
	result.M41 = ((matrix1.M41 * matrix2.M11) + (matrix1.M42 * matrix2.M21) + (matrix1.M43 * matrix2.M31) + (matrix1.M44 * matrix2.M41));
	result.M42 = ((matrix1.M41 * matrix2.M12) + (matrix1.M42 * matrix2.M22) + (matrix1.M43 * matrix2.M32) + (matrix1.M44 * matrix2.M42));
	result.M43 = ((matrix1.M41 * matrix2.M13) + (matrix1.M42 * matrix2.M23) + (matrix1.M43 * matrix2.M33) + (matrix1.M44 * matrix2.M43));
	result.M44 = ((matrix1.M41 * matrix2.M14) + (matrix1.M42 * matrix2.M24) + (matrix1.M43 * matrix2.M34) + (matrix1.M44 * matrix2.M44));
	return result;
};

Microsoft.Xna.Framework.Matrix.Multiply$1 = function (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
	result.M11 = ((matrix1.M11 * matrix2.M11) + (matrix1.M12 * matrix2.M21) + (matrix1.M13 * matrix2.M31) + (matrix1.M14 * matrix2.M41));
	result.M12 = ((matrix1.M11 * matrix2.M12) + (matrix1.M12 * matrix2.M22) + (matrix1.M13 * matrix2.M32) + (matrix1.M14 * matrix2.M42));
	result.M13 = ((matrix1.M11 * matrix2.M13) + (matrix1.M12 * matrix2.M23) + (matrix1.M13 * matrix2.M33) + (matrix1.M14 * matrix2.M43));
	result.M14 = ((matrix1.M11 * matrix2.M14) + (matrix1.M12 * matrix2.M24) + (matrix1.M13 * matrix2.M34) + (matrix1.M14 * matrix2.M44));
	result.M21 = ((matrix1.M21 * matrix2.M11) + (matrix1.M22 * matrix2.M21) + (matrix1.M23 * matrix2.M31) + (matrix1.M24 * matrix2.M41));
	result.M22 = ((matrix1.M21 * matrix2.M12) + (matrix1.M22 * matrix2.M22) + (matrix1.M23 * matrix2.M32) + (matrix1.M24 * matrix2.M42));
	result.M23 = ((matrix1.M21 * matrix2.M13) + (matrix1.M22 * matrix2.M23) + (matrix1.M23 * matrix2.M33) + (matrix1.M24 * matrix2.M43));
	result.M24 = ((matrix1.M21 * matrix2.M14) + (matrix1.M22 * matrix2.M24) + (matrix1.M23 * matrix2.M34) + (matrix1.M24 * matrix2.M44));
	result.M31 = ((matrix1.M31 * matrix2.M11) + (matrix1.M32 * matrix2.M21) + (matrix1.M33 * matrix2.M31) + (matrix1.M34 * matrix2.M41));
	result.M32 = ((matrix1.M31 * matrix2.M12) + (matrix1.M32 * matrix2.M22) + (matrix1.M33 * matrix2.M32) + (matrix1.M34 * matrix2.M42));
	result.M33 = ((matrix1.M31 * matrix2.M13) + (matrix1.M32 * matrix2.M23) + (matrix1.M33 * matrix2.M33) + (matrix1.M34 * matrix2.M43));
	result.M34 = ((matrix1.M31 * matrix2.M14) + (matrix1.M32 * matrix2.M24) + (matrix1.M33 * matrix2.M34) + (matrix1.M34 * matrix2.M44));
	result.M41 = ((matrix1.M41 * matrix2.M11) + (matrix1.M42 * matrix2.M21) + (matrix1.M43 * matrix2.M31) + (matrix1.M44 * matrix2.M41));
	result.M42 = ((matrix1.M41 * matrix2.M12) + (matrix1.M42 * matrix2.M22) + (matrix1.M43 * matrix2.M32) + (matrix1.M44 * matrix2.M42));
	result.M43 = ((matrix1.M41 * matrix2.M13) + (matrix1.M42 * matrix2.M23) + (matrix1.M43 * matrix2.M33) + (matrix1.M44 * matrix2.M43));
	result.M44 = ((matrix1.M41 * matrix2.M14) + (matrix1.M42 * matrix2.M24) + (matrix1.M43 * matrix2.M34) + (matrix1.M44 * matrix2.M44));
};

Microsoft.Xna.Framework.Matrix.Multiply$2 = function (matrix1, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix1.M11 * scaleFactor);
	result.M12 = (matrix1.M12 * scaleFactor);
	result.M13 = (matrix1.M13 * scaleFactor);
	result.M14 = (matrix1.M14 * scaleFactor);
	result.M21 = (matrix1.M21 * scaleFactor);
	result.M22 = (matrix1.M22 * scaleFactor);
	result.M23 = (matrix1.M23 * scaleFactor);
	result.M24 = (matrix1.M24 * scaleFactor);
	result.M31 = (matrix1.M31 * scaleFactor);
	result.M32 = (matrix1.M32 * scaleFactor);
	result.M33 = (matrix1.M33 * scaleFactor);
	result.M34 = (matrix1.M34 * scaleFactor);
	result.M41 = (matrix1.M41 * scaleFactor);
	result.M42 = (matrix1.M42 * scaleFactor);
	result.M43 = (matrix1.M43 * scaleFactor);
	result.M44 = (matrix1.M44 * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Matrix.Multiply$3 = function (/* ref */ matrix1, scaleFactor, /* ref */ result) {
	result.M11 = (matrix1.M11 * scaleFactor);
	result.M12 = (matrix1.M12 * scaleFactor);
	result.M13 = (matrix1.M13 * scaleFactor);
	result.M14 = (matrix1.M14 * scaleFactor);
	result.M21 = (matrix1.M21 * scaleFactor);
	result.M22 = (matrix1.M22 * scaleFactor);
	result.M23 = (matrix1.M23 * scaleFactor);
	result.M24 = (matrix1.M24 * scaleFactor);
	result.M31 = (matrix1.M31 * scaleFactor);
	result.M32 = (matrix1.M32 * scaleFactor);
	result.M33 = (matrix1.M33 * scaleFactor);
	result.M34 = (matrix1.M34 * scaleFactor);
	result.M41 = (matrix1.M41 * scaleFactor);
	result.M42 = (matrix1.M42 * scaleFactor);
	result.M43 = (matrix1.M43 * scaleFactor);
	result.M44 = (matrix1.M44 * scaleFactor);
};

Microsoft.Xna.Framework.Matrix.Divide$0 = function (matrix1, matrix2) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix1.M11 / matrix2.M11);
	result.M12 = (matrix1.M12 / matrix2.M12);
	result.M13 = (matrix1.M13 / matrix2.M13);
	result.M14 = (matrix1.M14 / matrix2.M14);
	result.M21 = (matrix1.M21 / matrix2.M21);
	result.M22 = (matrix1.M22 / matrix2.M22);
	result.M23 = (matrix1.M23 / matrix2.M23);
	result.M24 = (matrix1.M24 / matrix2.M24);
	result.M31 = (matrix1.M31 / matrix2.M31);
	result.M32 = (matrix1.M32 / matrix2.M32);
	result.M33 = (matrix1.M33 / matrix2.M33);
	result.M34 = (matrix1.M34 / matrix2.M34);
	result.M41 = (matrix1.M41 / matrix2.M41);
	result.M42 = (matrix1.M42 / matrix2.M42);
	result.M43 = (matrix1.M43 / matrix2.M43);
	result.M44 = (matrix1.M44 / matrix2.M44);
	return result;
};

Microsoft.Xna.Framework.Matrix.Divide$1 = function (/* ref */ matrix1, /* ref */ matrix2, /* ref */ result) {
	result.M11 = (matrix1.M11 / matrix2.M11);
	result.M12 = (matrix1.M12 / matrix2.M12);
	result.M13 = (matrix1.M13 / matrix2.M13);
	result.M14 = (matrix1.M14 / matrix2.M14);
	result.M21 = (matrix1.M21 / matrix2.M21);
	result.M22 = (matrix1.M22 / matrix2.M22);
	result.M23 = (matrix1.M23 / matrix2.M23);
	result.M24 = (matrix1.M24 / matrix2.M24);
	result.M31 = (matrix1.M31 / matrix2.M31);
	result.M32 = (matrix1.M32 / matrix2.M32);
	result.M33 = (matrix1.M33 / matrix2.M33);
	result.M34 = (matrix1.M34 / matrix2.M34);
	result.M41 = (matrix1.M41 / matrix2.M41);
	result.M42 = (matrix1.M42 / matrix2.M42);
	result.M43 = (matrix1.M43 / matrix2.M43);
	result.M44 = (matrix1.M44 / matrix2.M44);
};

Microsoft.Xna.Framework.Matrix.Divide$2 = function (matrix1, divider) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var num = (1 / divider);
	result.M11 = (matrix1.M11 * num);
	result.M12 = (matrix1.M12 * num);
	result.M13 = (matrix1.M13 * num);
	result.M14 = (matrix1.M14 * num);
	result.M21 = (matrix1.M21 * num);
	result.M22 = (matrix1.M22 * num);
	result.M23 = (matrix1.M23 * num);
	result.M24 = (matrix1.M24 * num);
	result.M31 = (matrix1.M31 * num);
	result.M32 = (matrix1.M32 * num);
	result.M33 = (matrix1.M33 * num);
	result.M34 = (matrix1.M34 * num);
	result.M41 = (matrix1.M41 * num);
	result.M42 = (matrix1.M42 * num);
	result.M43 = (matrix1.M43 * num);
	result.M44 = (matrix1.M44 * num);
	return result;
};

Microsoft.Xna.Framework.Matrix.Divide$3 = function (/* ref */ matrix1, divider, /* ref */ result) {
	var num = (1 / divider);
	result.M11 = (matrix1.M11 * num);
	result.M12 = (matrix1.M12 * num);
	result.M13 = (matrix1.M13 * num);
	result.M14 = (matrix1.M14 * num);
	result.M21 = (matrix1.M21 * num);
	result.M22 = (matrix1.M22 * num);
	result.M23 = (matrix1.M23 * num);
	result.M24 = (matrix1.M24 * num);
	result.M31 = (matrix1.M31 * num);
	result.M32 = (matrix1.M32 * num);
	result.M33 = (matrix1.M33 * num);
	result.M34 = (matrix1.M34 * num);
	result.M41 = (matrix1.M41 * num);
	result.M42 = (matrix1.M42 * num);
	result.M43 = (matrix1.M43 * num);
	result.M44 = (matrix1.M44 * num);
};

Microsoft.Xna.Framework.Matrix.op_UnaryNegation = function (matrix1) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = -matrix1.M11;
	result.M12 = -matrix1.M12;
	result.M13 = -matrix1.M13;
	result.M14 = -matrix1.M14;
	result.M21 = -matrix1.M21;
	result.M22 = -matrix1.M22;
	result.M23 = -matrix1.M23;
	result.M24 = -matrix1.M24;
	result.M31 = -matrix1.M31;
	result.M32 = -matrix1.M32;
	result.M33 = -matrix1.M33;
	result.M34 = -matrix1.M34;
	result.M41 = -matrix1.M41;
	result.M42 = -matrix1.M42;
	result.M43 = -matrix1.M43;
	result.M44 = -matrix1.M44;
	return result;
};

Microsoft.Xna.Framework.Matrix.op_Equality = function (matrix1, matrix2) {
	return (!((matrix1.M11 !== matrix2.M11) || 
			(matrix1.M22 !== matrix2.M22) || 
			(matrix1.M33 !== matrix2.M33) || 
			(matrix1.M44 !== matrix2.M44) || 
			(matrix1.M12 !== matrix2.M12) || 
			(matrix1.M13 !== matrix2.M13) || 
			(matrix1.M14 !== matrix2.M14) || 
			(matrix1.M21 !== matrix2.M21) || 
			(matrix1.M23 !== matrix2.M23) || 
			(matrix1.M24 !== matrix2.M24) || 
			(matrix1.M31 !== matrix2.M31) || 
			(matrix1.M32 !== matrix2.M32) || 
			(matrix1.M34 !== matrix2.M34) || 
			(matrix1.M41 !== matrix2.M41) || 
			(matrix1.M42 !== matrix2.M42)) && (matrix1.M43 === matrix2.M43));
};

Microsoft.Xna.Framework.Matrix.op_Inequality = function (matrix1, matrix2) {
	return ((matrix1.M11 !== matrix2.M11) || 
		(matrix1.M12 !== matrix2.M12) || 
		(matrix1.M13 !== matrix2.M13) || 
		(matrix1.M14 !== matrix2.M14) || 
		(matrix1.M21 !== matrix2.M21) || 
		(matrix1.M22 !== matrix2.M22) || 
		(matrix1.M23 !== matrix2.M23) || 
		(matrix1.M24 !== matrix2.M24) || 
		(matrix1.M31 !== matrix2.M31) || 
		(matrix1.M32 !== matrix2.M32) || 
		(matrix1.M33 !== matrix2.M33) || 
		(matrix1.M34 !== matrix2.M34) || 
		(matrix1.M41 !== matrix2.M41) || 
		(matrix1.M42 !== matrix2.M42) || 
		(matrix1.M43 !== matrix2.M43) || (matrix1.M44 !== matrix2.M44));
};

Microsoft.Xna.Framework.Matrix.op_Addition = function (matrix1, matrix2) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix1.M11 + matrix2.M11);
	result.M12 = (matrix1.M12 + matrix2.M12);
	result.M13 = (matrix1.M13 + matrix2.M13);
	result.M14 = (matrix1.M14 + matrix2.M14);
	result.M21 = (matrix1.M21 + matrix2.M21);
	result.M22 = (matrix1.M22 + matrix2.M22);
	result.M23 = (matrix1.M23 + matrix2.M23);
	result.M24 = (matrix1.M24 + matrix2.M24);
	result.M31 = (matrix1.M31 + matrix2.M31);
	result.M32 = (matrix1.M32 + matrix2.M32);
	result.M33 = (matrix1.M33 + matrix2.M33);
	result.M34 = (matrix1.M34 + matrix2.M34);
	result.M41 = (matrix1.M41 + matrix2.M41);
	result.M42 = (matrix1.M42 + matrix2.M42);
	result.M43 = (matrix1.M43 + matrix2.M43);
	result.M44 = (matrix1.M44 + matrix2.M44);
	return result;
};

Microsoft.Xna.Framework.Matrix.op_Subtraction = function (matrix1, matrix2) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix1.M11 - matrix2.M11);
	result.M12 = (matrix1.M12 - matrix2.M12);
	result.M13 = (matrix1.M13 - matrix2.M13);
	result.M14 = (matrix1.M14 - matrix2.M14);
	result.M21 = (matrix1.M21 - matrix2.M21);
	result.M22 = (matrix1.M22 - matrix2.M22);
	result.M23 = (matrix1.M23 - matrix2.M23);
	result.M24 = (matrix1.M24 - matrix2.M24);
	result.M31 = (matrix1.M31 - matrix2.M31);
	result.M32 = (matrix1.M32 - matrix2.M32);
	result.M33 = (matrix1.M33 - matrix2.M33);
	result.M34 = (matrix1.M34 - matrix2.M34);
	result.M41 = (matrix1.M41 - matrix2.M41);
	result.M42 = (matrix1.M42 - matrix2.M42);
	result.M43 = (matrix1.M43 - matrix2.M43);
	result.M44 = (matrix1.M44 - matrix2.M44);
	return result;
};

Microsoft.Xna.Framework.Matrix.op_Multiply$0 = function (matrix1, matrix2) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = ((matrix1.M11 * matrix2.M11) + (matrix1.M12 * matrix2.M21) + (matrix1.M13 * matrix2.M31) + (matrix1.M14 * matrix2.M41));
	result.M12 = ((matrix1.M11 * matrix2.M12) + (matrix1.M12 * matrix2.M22) + (matrix1.M13 * matrix2.M32) + (matrix1.M14 * matrix2.M42));
	result.M13 = ((matrix1.M11 * matrix2.M13) + (matrix1.M12 * matrix2.M23) + (matrix1.M13 * matrix2.M33) + (matrix1.M14 * matrix2.M43));
	result.M14 = ((matrix1.M11 * matrix2.M14) + (matrix1.M12 * matrix2.M24) + (matrix1.M13 * matrix2.M34) + (matrix1.M14 * matrix2.M44));
	result.M21 = ((matrix1.M21 * matrix2.M11) + (matrix1.M22 * matrix2.M21) + (matrix1.M23 * matrix2.M31) + (matrix1.M24 * matrix2.M41));
	result.M22 = ((matrix1.M21 * matrix2.M12) + (matrix1.M22 * matrix2.M22) + (matrix1.M23 * matrix2.M32) + (matrix1.M24 * matrix2.M42));
	result.M23 = ((matrix1.M21 * matrix2.M13) + (matrix1.M22 * matrix2.M23) + (matrix1.M23 * matrix2.M33) + (matrix1.M24 * matrix2.M43));
	result.M24 = ((matrix1.M21 * matrix2.M14) + (matrix1.M22 * matrix2.M24) + (matrix1.M23 * matrix2.M34) + (matrix1.M24 * matrix2.M44));
	result.M31 = ((matrix1.M31 * matrix2.M11) + (matrix1.M32 * matrix2.M21) + (matrix1.M33 * matrix2.M31) + (matrix1.M34 * matrix2.M41));
	result.M32 = ((matrix1.M31 * matrix2.M12) + (matrix1.M32 * matrix2.M22) + (matrix1.M33 * matrix2.M32) + (matrix1.M34 * matrix2.M42));
	result.M33 = ((matrix1.M31 * matrix2.M13) + (matrix1.M32 * matrix2.M23) + (matrix1.M33 * matrix2.M33) + (matrix1.M34 * matrix2.M43));
	result.M34 = ((matrix1.M31 * matrix2.M14) + (matrix1.M32 * matrix2.M24) + (matrix1.M33 * matrix2.M34) + (matrix1.M34 * matrix2.M44));
	result.M41 = ((matrix1.M41 * matrix2.M11) + (matrix1.M42 * matrix2.M21) + (matrix1.M43 * matrix2.M31) + (matrix1.M44 * matrix2.M41));
	result.M42 = ((matrix1.M41 * matrix2.M12) + (matrix1.M42 * matrix2.M22) + (matrix1.M43 * matrix2.M32) + (matrix1.M44 * matrix2.M42));
	result.M43 = ((matrix1.M41 * matrix2.M13) + (matrix1.M42 * matrix2.M23) + (matrix1.M43 * matrix2.M33) + (matrix1.M44 * matrix2.M43));
	result.M44 = ((matrix1.M41 * matrix2.M14) + (matrix1.M42 * matrix2.M24) + (matrix1.M43 * matrix2.M34) + (matrix1.M44 * matrix2.M44));
	return result;
};

Microsoft.Xna.Framework.Matrix.op_Multiply$1 = function (matrix, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix.M11 * scaleFactor);
	result.M12 = (matrix.M12 * scaleFactor);
	result.M13 = (matrix.M13 * scaleFactor);
	result.M14 = (matrix.M14 * scaleFactor);
	result.M21 = (matrix.M21 * scaleFactor);
	result.M22 = (matrix.M22 * scaleFactor);
	result.M23 = (matrix.M23 * scaleFactor);
	result.M24 = (matrix.M24 * scaleFactor);
	result.M31 = (matrix.M31 * scaleFactor);
	result.M32 = (matrix.M32 * scaleFactor);
	result.M33 = (matrix.M33 * scaleFactor);
	result.M34 = (matrix.M34 * scaleFactor);
	result.M41 = (matrix.M41 * scaleFactor);
	result.M42 = (matrix.M42 * scaleFactor);
	result.M43 = (matrix.M43 * scaleFactor);
	result.M44 = (matrix.M44 * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Matrix.op_Multiply$2 = function (scaleFactor, matrix) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix.M11 * scaleFactor);
	result.M12 = (matrix.M12 * scaleFactor);
	result.M13 = (matrix.M13 * scaleFactor);
	result.M14 = (matrix.M14 * scaleFactor);
	result.M21 = (matrix.M21 * scaleFactor);
	result.M22 = (matrix.M22 * scaleFactor);
	result.M23 = (matrix.M23 * scaleFactor);
	result.M24 = (matrix.M24 * scaleFactor);
	result.M31 = (matrix.M31 * scaleFactor);
	result.M32 = (matrix.M32 * scaleFactor);
	result.M33 = (matrix.M33 * scaleFactor);
	result.M34 = (matrix.M34 * scaleFactor);
	result.M41 = (matrix.M41 * scaleFactor);
	result.M42 = (matrix.M42 * scaleFactor);
	result.M43 = (matrix.M43 * scaleFactor);
	result.M44 = (matrix.M44 * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Matrix.op_Division$0 = function (matrix1, matrix2) {
	var result = new Microsoft.Xna.Framework.Matrix();
	result.M11 = (matrix1.M11 / matrix2.M11);
	result.M12 = (matrix1.M12 / matrix2.M12);
	result.M13 = (matrix1.M13 / matrix2.M13);
	result.M14 = (matrix1.M14 / matrix2.M14);
	result.M21 = (matrix1.M21 / matrix2.M21);
	result.M22 = (matrix1.M22 / matrix2.M22);
	result.M23 = (matrix1.M23 / matrix2.M23);
	result.M24 = (matrix1.M24 / matrix2.M24);
	result.M31 = (matrix1.M31 / matrix2.M31);
	result.M32 = (matrix1.M32 / matrix2.M32);
	result.M33 = (matrix1.M33 / matrix2.M33);
	result.M34 = (matrix1.M34 / matrix2.M34);
	result.M41 = (matrix1.M41 / matrix2.M41);
	result.M42 = (matrix1.M42 / matrix2.M42);
	result.M43 = (matrix1.M43 / matrix2.M43);
	result.M44 = (matrix1.M44 / matrix2.M44);
	return result;
};

Microsoft.Xna.Framework.Matrix.op_Division$1 = function (matrix1, divider) {
	var result = new Microsoft.Xna.Framework.Matrix();
	var num = (1 / divider);
	result.M11 = (matrix1.M11 * num);
	result.M12 = (matrix1.M12 * num);
	result.M13 = (matrix1.M13 * num);
	result.M14 = (matrix1.M14 * num);
	result.M21 = (matrix1.M21 * num);
	result.M22 = (matrix1.M22 * num);
	result.M23 = (matrix1.M23 * num);
	result.M24 = (matrix1.M24 * num);
	result.M31 = (matrix1.M31 * num);
	result.M32 = (matrix1.M32 * num);
	result.M33 = (matrix1.M33 * num);
	result.M34 = (matrix1.M34 * num);
	result.M41 = (matrix1.M41 * num);
	result.M42 = (matrix1.M42 * num);
	result.M43 = (matrix1.M43 * num);
	result.M44 = (matrix1.M44 * num);
	return result;
};

Microsoft.Xna.Framework.Matrix._cctor = function () {
	Microsoft.Xna.Framework.Matrix._identity = new Microsoft.Xna.Framework.Matrix(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateBillboard", [
		["CreateBillboard$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Nullable$b1.Of(Microsoft.Xna.Framework.Vector3)]], 
		["CreateBillboard$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Nullable$b1.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateConstrainedBillboard", [
		["CreateConstrainedBillboard$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Nullable$b1.Of(Microsoft.Xna.Framework.Vector3), System.Nullable$b1.Of(Microsoft.Xna.Framework.Vector3)]], 
		["CreateConstrainedBillboard$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Nullable$b1.Of(Microsoft.Xna.Framework.Vector3), System.Nullable$b1.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateTranslation", [
		["CreateTranslation$0", [Microsoft.Xna.Framework.Vector3]], 
		["CreateTranslation$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]], 
		["CreateTranslation$2", [System.Single, System.Single, System.Single]], 
		["CreateTranslation$3", [System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateScale", [
		["CreateScale$0", [System.Single, System.Single, System.Single]], 
		["CreateScale$1", [System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]], 
		["CreateScale$2", [Microsoft.Xna.Framework.Vector3]], 
		["CreateScale$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]], 
		["CreateScale$4", [System.Single]], 
		["CreateScale$5", [System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateRotationX", [
		["CreateRotationX$0", [System.Single]], 
		["CreateRotationX$1", [System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateRotationY", [
		["CreateRotationY$0", [System.Single]], 
		["CreateRotationY$1", [System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateRotationZ", [
		["CreateRotationZ$0", [System.Single]], 
		["CreateRotationZ$1", [System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateFromAxisAngle", [
		["CreateFromAxisAngle$0", [Microsoft.Xna.Framework.Vector3, System.Single]], 
		["CreateFromAxisAngle$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreatePerspectiveFieldOfView", [
		["CreatePerspectiveFieldOfView$0", [System.Single, System.Single, System.Single, System.Single]], 
		["CreatePerspectiveFieldOfView$1", [System.Single, System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreatePerspective", [
		["CreatePerspective$0", [System.Single, System.Single, System.Single, System.Single]], 
		["CreatePerspective$1", [System.Single, System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreatePerspectiveOffCenter", [
		["CreatePerspectiveOffCenter$0", [System.Single, System.Single, System.Single, System.Single, System.Single, System.Single]], 
		["CreatePerspectiveOffCenter$1", [System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateOrthographic", [
		["CreateOrthographic$0", [System.Single, System.Single, System.Single, System.Single]], 
		["CreateOrthographic$1", [System.Single, System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateOrthographicOffCenter", [
		["CreateOrthographicOffCenter$0", [System.Single, System.Single, System.Single, System.Single, System.Single, System.Single]], 
		["CreateOrthographicOffCenter$1", [System.Single, System.Single, System.Single, System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateLookAt", [
		["CreateLookAt$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["CreateLookAt$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateWorld", [
		["CreateWorld$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["CreateWorld$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateFromQuaternion", [
		["CreateFromQuaternion$0", [Microsoft.Xna.Framework.Quaternion]], 
		["CreateFromQuaternion$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateFromYawPitchRoll", [
		["CreateFromYawPitchRoll$0", [System.Single, System.Single, System.Single]], 
		["CreateFromYawPitchRoll$1", [System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateShadow", [
		["CreateShadow$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Plane]], 
		["CreateShadow$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "CreateReflection", [
		["CreateReflection$0", [Microsoft.Xna.Framework.Plane]], 
		["CreateReflection$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Transform", [
		["Transform$0", [Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Quaternion]], 
		["Transform$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Matrix]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Transpose", [
		["Transpose$0", [Microsoft.Xna.Framework.Matrix]], 
		["Transpose$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Invert", [
		["Invert$0", [Microsoft.Xna.Framework.Matrix]], 
		["Invert$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Lerp", [
		["Lerp$0", [Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Matrix, System.Single]], 
		["Lerp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Negate", [
		["Negate$0", [Microsoft.Xna.Framework.Matrix]], 
		["Negate$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Add", [
		["Add$0", [Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Matrix]], 
		["Add$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Subtract", [
		["Subtract$0", [Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Matrix]], 
		["Subtract$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Multiply", [
		["Multiply$0", [Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Matrix]], 
		["Multiply$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]], 
		["Multiply$2", [Microsoft.Xna.Framework.Matrix, System.Single]], 
		["Multiply$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "Divide", [
		["Divide$0", [Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Matrix]], 
		["Divide$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]], 
		["Divide$2", [Microsoft.Xna.Framework.Matrix, System.Single]], 
		["Divide$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "op_Multiply", [
		["op_Multiply$0", [Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Matrix]], 
		["op_Multiply$1", [Microsoft.Xna.Framework.Matrix, System.Single]], 
		["op_Multiply$2", [System.Single, Microsoft.Xna.Framework.Matrix]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Matrix, "op_Division", [
		["op_Division$0", [Microsoft.Xna.Framework.Matrix, Microsoft.Xna.Framework.Matrix]], 
		["op_Division$1", [Microsoft.Xna.Framework.Matrix, System.Single]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Matrix, "Identity", {
		get: Microsoft.Xna.Framework.Matrix.get_Identity
	});
Object.defineProperty(Microsoft.Xna.Framework.Matrix.prototype, "Up", {
		get: Microsoft.Xna.Framework.Matrix.prototype.get_Up, 
		set: Microsoft.Xna.Framework.Matrix.prototype.set_Up
	});
Object.defineProperty(Microsoft.Xna.Framework.Matrix.prototype, "Down", {
		get: Microsoft.Xna.Framework.Matrix.prototype.get_Down, 
		set: Microsoft.Xna.Framework.Matrix.prototype.set_Down
	});
Object.defineProperty(Microsoft.Xna.Framework.Matrix.prototype, "Right", {
		get: Microsoft.Xna.Framework.Matrix.prototype.get_Right, 
		set: Microsoft.Xna.Framework.Matrix.prototype.set_Right
	});
Object.defineProperty(Microsoft.Xna.Framework.Matrix.prototype, "Left", {
		get: Microsoft.Xna.Framework.Matrix.prototype.get_Left, 
		set: Microsoft.Xna.Framework.Matrix.prototype.set_Left
	});
Object.defineProperty(Microsoft.Xna.Framework.Matrix.prototype, "Forward", {
		get: Microsoft.Xna.Framework.Matrix.prototype.get_Forward, 
		set: Microsoft.Xna.Framework.Matrix.prototype.set_Forward
	});
Object.defineProperty(Microsoft.Xna.Framework.Matrix.prototype, "Backward", {
		get: Microsoft.Xna.Framework.Matrix.prototype.get_Backward, 
		set: Microsoft.Xna.Framework.Matrix.prototype.set_Backward
	});
Object.defineProperty(Microsoft.Xna.Framework.Matrix.prototype, "Translation", {
		get: Microsoft.Xna.Framework.Matrix.prototype.get_Translation, 
		set: Microsoft.Xna.Framework.Matrix.prototype.set_Translation
	});
Microsoft.Xna.Framework.Matrix._cctor();
Microsoft.Xna.Framework.Matrix.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Matrix));

Microsoft.Xna.Framework.Matrix.CanonicalBasis.prototype.__StructFields__ = {
	Row0: Microsoft.Xna.Framework.Vector3, 
	Row1: Microsoft.Xna.Framework.Vector3, 
	Row2: Microsoft.Xna.Framework.Vector3
};

Object.seal(Microsoft.Xna.Framework.Matrix.CanonicalBasis.prototype);
Object.seal(Microsoft.Xna.Framework.Matrix.CanonicalBasis);
Microsoft.Xna.Framework.Matrix.VectorBasis.prototype.Element0 = null;
Microsoft.Xna.Framework.Matrix.VectorBasis.prototype.Element1 = null;
Microsoft.Xna.Framework.Matrix.VectorBasis.prototype.Element2 = null;

Object.seal(Microsoft.Xna.Framework.Matrix.VectorBasis.prototype);
Object.seal(Microsoft.Xna.Framework.Matrix.VectorBasis);
Object.seal(Microsoft.Xna.Framework.Matrix.prototype);
Object.seal(Microsoft.Xna.Framework.Matrix);
Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype._ctor = function (alpha) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackHelper(alpha);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackHelper(vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackHelper = function (alpha) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, alpha), System.Byte);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.ToAlpha = function () {
	return Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, this.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.IPackedVector_ToVector4 = function () {
	return new Microsoft.Xna.Framework.Vector4(0, 0, 0, this.ToAlpha());
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.toString = function () {
	return this.packedValue.toString("X2", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.Byte));
Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8);
Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype._ctor$0 = function (x, y, z) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackHelper(x, y, z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackHelper(vector.X, vector.Y, vector.Z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackHelper(vector.X, vector.Y, vector.Z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackHelper = function (vectorX, vectorY, vectorZ) {
	var num = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(31, vectorX) << 11);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(63, vectorY) << 5);
	return (num | num2 | Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(31, vectorZ));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.ToVector3 = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(31, (this.packedValue >>> 11));
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(63, (this.packedValue >>> 5));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(31, this.packedValue);
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.IPackedVector_ToVector4 = function () {
	var vector = this.ToVector3();
	return new Microsoft.Xna.Framework.Vector4(vector.X, vector.Y, vector.Z, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.toString = function () {
	return this.packedValue.toString("X4", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector3]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt16));
Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565);
Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(31, vectorX) << 10);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(31, vectorY) << 5);
	var num3 = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(31, vectorZ);
	return (num | num2 | num3 | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(1, vectorW) << 15));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(31, (this.packedValue >>> 10));
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(31, (this.packedValue >>> 5));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(31, this.packedValue);
	result.W = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(1, (this.packedValue >>> 15));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.toString = function () {
	return this.packedValue.toString("X4", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt16));
Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551);
Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUnsigned(255, vectorX);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUnsigned(255, vectorY) << 8);
	var num3 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUnsigned(255, vectorZ) << 16);
	return (num | num2 | num3 | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUnsigned(255, vectorW) << 24));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (this.packedValue & 255);
	result.Y = ((this.packedValue >>> 8) & 255);
	result.Z = ((this.packedValue >>> 16) & 255);
	result.W = ((this.packedValue >>> 24) & 255);
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Byte4()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Byte4]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4);
Microsoft.Xna.Framework.Graphics.Color.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$0 = function (packedValue) {
	this.packedValue = packedValue;
};

Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$1 = function (r, g, b) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.Color.PackHelper(r, g, b, 255);
};

Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$2 = function (r, g, b, a) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.Color.PackHelper(r, g, b, a);
};

Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$3 = function (r, g, b) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.Color.PackHelper(r, g, b, 1);
};

Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$4 = function (r, g, b, a) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.Color.PackHelper(r, g, b, a);
};

Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$5 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.Color.PackHelper(vector.X, vector.Y, vector.Z, 1);
};

Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$6 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.Color.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$7 = function (rgb, a) {
	this.packedValue = ((rgb.packedValue & 16777215) | (a << 24));
};

Microsoft.Xna.Framework.Graphics.Color.prototype._ctor$8 = function (rgb, a) {
	this.packedValue = ((rgb.packedValue & 16777215) | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, a) << 24));
};

Microsoft.Xna.Framework.Graphics.Color.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.Color.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.Color.PackHelper$0 = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, vectorX) << 16);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, vectorY) << 8);
	var num3 = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, vectorZ);
	return (num | num2 | num3 | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, vectorW) << 24));
};

Microsoft.Xna.Framework.Graphics.Color.PackHelper$1 = function (r, g, b, a) {
	return ((r << 16) | (g << 8) | b | (a << 24));
};

Microsoft.Xna.Framework.Graphics.Color.prototype.ToVector3 = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, (this.packedValue >>> 16));
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, (this.packedValue >>> 8));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, this.packedValue);
	return result;
};

Microsoft.Xna.Framework.Graphics.Color.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, (this.packedValue >>> 16));
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, (this.packedValue >>> 8));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, this.packedValue);
	result.W = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, (this.packedValue >>> 24));
	return result;
};

Microsoft.Xna.Framework.Graphics.Color.prototype.get_R = function () {
	return (this.packedValue >>> 16);
};

Microsoft.Xna.Framework.Graphics.Color.prototype.set_R = function (value) {
	this.packedValue = ((this.packedValue & -16711681) | (value << 16));
};

Microsoft.Xna.Framework.Graphics.Color.prototype.get_G = function () {
	return (this.packedValue >>> 8);
};

Microsoft.Xna.Framework.Graphics.Color.prototype.set_G = function (value) {
	this.packedValue = ((this.packedValue & -65281) | (value << 8));
};

Microsoft.Xna.Framework.Graphics.Color.prototype.get_B = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.Color.prototype.set_B = function (value) {
	this.packedValue = ((this.packedValue & -256) | value);
};

Microsoft.Xna.Framework.Graphics.Color.prototype.get_A = function () {
	return (this.packedValue >>> 24);
};

Microsoft.Xna.Framework.Graphics.Color.prototype.set_A = function (value) {
	this.packedValue = ((this.packedValue & 16777215) | (value << 24));
};

Microsoft.Xna.Framework.Graphics.Color.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.Color.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.Color.Lerp = function (value1, value2, amount) {
	var result = new Microsoft.Xna.Framework.Graphics.Color();
	var num = value1.packedValue;
	var num2 = value2.packedValue;
	var num3 = (num >>> 16);
	var num4 = (num >>> 8);
	var num5 = num;
	var num6 = (num >>> 24);
	var num11 = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(65536, amount);
	var num12 = (num3 + ((((num2 >>> 16) - num3) * num11) >> 16));
	var num13 = (num4 + ((((num2 >>> 8) - num4) * num11) >> 16));
	var num14 = (num5 + (((num2 - num5) * num11) >> 16));
	result.packedValue = ((num12 << 16) | (num13 << 8) | num14 | ((num6 + ((((num2 >>> 24) - num6) * num11) >> 16)) << 24));
	return result;
};

Microsoft.Xna.Framework.Graphics.Color.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{R:{0} G:{1} B:{2} A:{3}}}", [this.get_R(), this.get_G(), this.get_B(), this.get_A()]);
};

Microsoft.Xna.Framework.Graphics.Color.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.Color.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.Color.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.Color()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.Color.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.Color.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.Color.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.Color.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.Color.get_TransparentBlack = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(0);
};

Microsoft.Xna.Framework.Graphics.Color.get_TransparentWhite = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(16777215);
};

Microsoft.Xna.Framework.Graphics.Color.get_AliceBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-984833);
};

Microsoft.Xna.Framework.Graphics.Color.get_AntiqueWhite = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-332841);
};

Microsoft.Xna.Framework.Graphics.Color.get_Aqua = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16711681);
};

Microsoft.Xna.Framework.Graphics.Color.get_Aquamarine = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8388652);
};

Microsoft.Xna.Framework.Graphics.Color.get_Azure = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-983041);
};

Microsoft.Xna.Framework.Graphics.Color.get_Beige = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-657956);
};

Microsoft.Xna.Framework.Graphics.Color.get_Bisque = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-6972);
};

Microsoft.Xna.Framework.Graphics.Color.get_Black = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16777216);
};

Microsoft.Xna.Framework.Graphics.Color.get_BlanchedAlmond = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5171);
};

Microsoft.Xna.Framework.Graphics.Color.get_Blue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16776961);
};

Microsoft.Xna.Framework.Graphics.Color.get_BlueViolet = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7722014);
};

Microsoft.Xna.Framework.Graphics.Color.get_Brown = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5952982);
};

Microsoft.Xna.Framework.Graphics.Color.get_BurlyWood = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2180985);
};

Microsoft.Xna.Framework.Graphics.Color.get_CadetBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-10510688);
};

Microsoft.Xna.Framework.Graphics.Color.get_Chartreuse = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8388864);
};

Microsoft.Xna.Framework.Graphics.Color.get_Chocolate = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2987746);
};

Microsoft.Xna.Framework.Graphics.Color.get_Coral = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-32944);
};

Microsoft.Xna.Framework.Graphics.Color.get_CornflowerBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-10185235);
};

Microsoft.Xna.Framework.Graphics.Color.get_Cornsilk = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1828);
};

Microsoft.Xna.Framework.Graphics.Color.get_Crimson = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2354116);
};

Microsoft.Xna.Framework.Graphics.Color.get_Cyan = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16711681);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16777077);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkCyan = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16741493);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkGoldenrod = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-4684277);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkGray = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5658199);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16751616);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkKhaki = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-4343957);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkMagenta = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7667573);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkOliveGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-11179217);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkOrange = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-29696);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkOrchid = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-6737204);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkRed = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7667712);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkSalmon = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1468806);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkSeaGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7357301);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkSlateBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-12042869);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkSlateGray = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-13676721);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkTurquoise = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16724271);
};

Microsoft.Xna.Framework.Graphics.Color.get_DarkViolet = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7077677);
};

Microsoft.Xna.Framework.Graphics.Color.get_DeepPink = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-60269);
};

Microsoft.Xna.Framework.Graphics.Color.get_DeepSkyBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16728065);
};

Microsoft.Xna.Framework.Graphics.Color.get_DimGray = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-9868951);
};

Microsoft.Xna.Framework.Graphics.Color.get_DodgerBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-14774017);
};

Microsoft.Xna.Framework.Graphics.Color.get_Firebrick = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5103070);
};

Microsoft.Xna.Framework.Graphics.Color.get_FloralWhite = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1296);
};

Microsoft.Xna.Framework.Graphics.Color.get_ForestGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-14513374);
};

Microsoft.Xna.Framework.Graphics.Color.get_Fuchsia = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-65281);
};

Microsoft.Xna.Framework.Graphics.Color.get_Gainsboro = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2302756);
};

Microsoft.Xna.Framework.Graphics.Color.get_GhostWhite = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-460545);
};

Microsoft.Xna.Framework.Graphics.Color.get_Gold = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-10496);
};

Microsoft.Xna.Framework.Graphics.Color.get_Goldenrod = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2448096);
};

Microsoft.Xna.Framework.Graphics.Color.get_Gray = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8355712);
};

Microsoft.Xna.Framework.Graphics.Color.get_Green = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16744448);
};

Microsoft.Xna.Framework.Graphics.Color.get_GreenYellow = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5374161);
};

Microsoft.Xna.Framework.Graphics.Color.get_Honeydew = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-983056);
};

Microsoft.Xna.Framework.Graphics.Color.get_HotPink = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-38476);
};

Microsoft.Xna.Framework.Graphics.Color.get_IndianRed = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-3318692);
};

Microsoft.Xna.Framework.Graphics.Color.get_Indigo = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-11861886);
};

Microsoft.Xna.Framework.Graphics.Color.get_Ivory = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16);
};

Microsoft.Xna.Framework.Graphics.Color.get_Khaki = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-989556);
};

Microsoft.Xna.Framework.Graphics.Color.get_Lavender = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1644806);
};

Microsoft.Xna.Framework.Graphics.Color.get_LavenderBlush = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-3851);
};

Microsoft.Xna.Framework.Graphics.Color.get_LawnGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8586240);
};

Microsoft.Xna.Framework.Graphics.Color.get_LemonChiffon = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1331);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5383962);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightCoral = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1015680);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightCyan = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2031617);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightGoldenrodYellow = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-329006);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7278960);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightGray = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2894893);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightPink = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-18751);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightSalmon = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-24454);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightSeaGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-14634326);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightSkyBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7876870);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightSlateGray = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8943463);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightSteelBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5192482);
};

Microsoft.Xna.Framework.Graphics.Color.get_LightYellow = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-32);
};

Microsoft.Xna.Framework.Graphics.Color.get_Lime = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16711936);
};

Microsoft.Xna.Framework.Graphics.Color.get_LimeGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-13447886);
};

Microsoft.Xna.Framework.Graphics.Color.get_Linen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-331546);
};

Microsoft.Xna.Framework.Graphics.Color.get_Magenta = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-65281);
};

Microsoft.Xna.Framework.Graphics.Color.get_Maroon = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8388608);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumAquamarine = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-10039894);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16777011);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumOrchid = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-4565549);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumPurple = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7114533);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumSeaGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-12799119);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumSlateBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8689426);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumSpringGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16713062);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumTurquoise = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-12004916);
};

Microsoft.Xna.Framework.Graphics.Color.get_MediumVioletRed = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-3730043);
};

Microsoft.Xna.Framework.Graphics.Color.get_MidnightBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-15132304);
};

Microsoft.Xna.Framework.Graphics.Color.get_MintCream = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-655366);
};

Microsoft.Xna.Framework.Graphics.Color.get_MistyRose = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-6943);
};

Microsoft.Xna.Framework.Graphics.Color.get_Moccasin = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-6987);
};

Microsoft.Xna.Framework.Graphics.Color.get_NavajoWhite = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8531);
};

Microsoft.Xna.Framework.Graphics.Color.get_Navy = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16777088);
};

Microsoft.Xna.Framework.Graphics.Color.get_OldLace = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-133658);
};

Microsoft.Xna.Framework.Graphics.Color.get_Olive = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8355840);
};

Microsoft.Xna.Framework.Graphics.Color.get_OliveDrab = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-9728477);
};

Microsoft.Xna.Framework.Graphics.Color.get_Orange = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-23296);
};

Microsoft.Xna.Framework.Graphics.Color.get_OrangeRed = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-47872);
};

Microsoft.Xna.Framework.Graphics.Color.get_Orchid = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2461482);
};

Microsoft.Xna.Framework.Graphics.Color.get_PaleGoldenrod = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1120086);
};

Microsoft.Xna.Framework.Graphics.Color.get_PaleGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-6751336);
};

Microsoft.Xna.Framework.Graphics.Color.get_PaleTurquoise = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5247250);
};

Microsoft.Xna.Framework.Graphics.Color.get_PaleVioletRed = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2396013);
};

Microsoft.Xna.Framework.Graphics.Color.get_PapayaWhip = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-4139);
};

Microsoft.Xna.Framework.Graphics.Color.get_PeachPuff = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-9543);
};

Microsoft.Xna.Framework.Graphics.Color.get_Peru = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-3308225);
};

Microsoft.Xna.Framework.Graphics.Color.get_Pink = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16181);
};

Microsoft.Xna.Framework.Graphics.Color.get_Plum = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2252579);
};

Microsoft.Xna.Framework.Graphics.Color.get_PowderBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-5185306);
};

Microsoft.Xna.Framework.Graphics.Color.get_Purple = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-8388480);
};

Microsoft.Xna.Framework.Graphics.Color.get_Red = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-65536);
};

Microsoft.Xna.Framework.Graphics.Color.get_RosyBrown = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-4419697);
};

Microsoft.Xna.Framework.Graphics.Color.get_RoyalBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-12490271);
};

Microsoft.Xna.Framework.Graphics.Color.get_SaddleBrown = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7650029);
};

Microsoft.Xna.Framework.Graphics.Color.get_Salmon = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-360334);
};

Microsoft.Xna.Framework.Graphics.Color.get_SandyBrown = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-744352);
};

Microsoft.Xna.Framework.Graphics.Color.get_SeaGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-13726889);
};

Microsoft.Xna.Framework.Graphics.Color.get_SeaShell = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2578);
};

Microsoft.Xna.Framework.Graphics.Color.get_Sienna = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-6270419);
};

Microsoft.Xna.Framework.Graphics.Color.get_Silver = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-4144960);
};

Microsoft.Xna.Framework.Graphics.Color.get_SkyBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-7876885);
};

Microsoft.Xna.Framework.Graphics.Color.get_SlateBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-9807155);
};

Microsoft.Xna.Framework.Graphics.Color.get_SlateGray = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-9404272);
};

Microsoft.Xna.Framework.Graphics.Color.get_Snow = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1286);
};

Microsoft.Xna.Framework.Graphics.Color.get_SpringGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16711809);
};

Microsoft.Xna.Framework.Graphics.Color.get_SteelBlue = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-12156236);
};

Microsoft.Xna.Framework.Graphics.Color.get_Tan = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2968436);
};

Microsoft.Xna.Framework.Graphics.Color.get_Teal = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-16744320);
};

Microsoft.Xna.Framework.Graphics.Color.get_Thistle = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-2572328);
};

Microsoft.Xna.Framework.Graphics.Color.get_Tomato = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-40121);
};

Microsoft.Xna.Framework.Graphics.Color.get_Turquoise = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-12525360);
};

Microsoft.Xna.Framework.Graphics.Color.get_Violet = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1146130);
};

Microsoft.Xna.Framework.Graphics.Color.get_Wheat = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-663885);
};

Microsoft.Xna.Framework.Graphics.Color.get_White = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-1);
};

Microsoft.Xna.Framework.Graphics.Color.get_WhiteSmoke = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-657931);
};

Microsoft.Xna.Framework.Graphics.Color.get_Yellow = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-256);
};

Microsoft.Xna.Framework.Graphics.Color.get_YellowGreen = function () {
	return new Microsoft.Xna.Framework.Graphics.Color(-6632142);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Color.prototype, "_ctor", [
		["_ctor$0", [System.UInt32]], 
		["_ctor$1", [System.Byte, System.Byte, System.Byte]], 
		["_ctor$2", [System.Byte, System.Byte, System.Byte, System.Byte]], 
		["_ctor$3", [System.Single, System.Single, System.Single]], 
		["_ctor$4", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$5", [Microsoft.Xna.Framework.Vector3]], 
		["_ctor$6", [Microsoft.Xna.Framework.Vector4]], 
		["_ctor$7", [Microsoft.Xna.Framework.Graphics.Color, System.Byte]], 
		["_ctor$8", [Microsoft.Xna.Framework.Graphics.Color, System.Single]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Color, "PackHelper", [
		["PackHelper$0", [System.Single, System.Single, System.Single, System.Single]], 
		["PackHelper$1", [System.Byte, System.Byte, System.Byte, System.Byte]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.Color.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.Color]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color.prototype, "R", {
		get: Microsoft.Xna.Framework.Graphics.Color.prototype.get_R, 
		set: Microsoft.Xna.Framework.Graphics.Color.prototype.set_R
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color.prototype, "G", {
		get: Microsoft.Xna.Framework.Graphics.Color.prototype.get_G, 
		set: Microsoft.Xna.Framework.Graphics.Color.prototype.set_G
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color.prototype, "B", {
		get: Microsoft.Xna.Framework.Graphics.Color.prototype.get_B, 
		set: Microsoft.Xna.Framework.Graphics.Color.prototype.set_B
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color.prototype, "A", {
		get: Microsoft.Xna.Framework.Graphics.Color.prototype.get_A, 
		set: Microsoft.Xna.Framework.Graphics.Color.prototype.set_A
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.Color.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.Color.prototype.set_PackedValue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "TransparentBlack", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_TransparentBlack
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "TransparentWhite", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_TransparentWhite
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "AliceBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_AliceBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "AntiqueWhite", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_AntiqueWhite
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Aqua", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Aqua
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Aquamarine", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Aquamarine
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Azure", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Azure
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Beige", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Beige
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Bisque", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Bisque
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Black", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Black
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "BlanchedAlmond", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_BlanchedAlmond
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Blue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Blue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "BlueViolet", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_BlueViolet
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Brown", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Brown
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "BurlyWood", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_BurlyWood
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "CadetBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_CadetBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Chartreuse", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Chartreuse
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Chocolate", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Chocolate
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Coral", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Coral
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "CornflowerBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_CornflowerBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Cornsilk", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Cornsilk
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Crimson", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Crimson
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Cyan", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Cyan
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkCyan", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkCyan
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkGoldenrod", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkGoldenrod
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkGray", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkGray
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkKhaki", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkKhaki
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkMagenta", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkMagenta
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkOliveGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkOliveGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkOrange", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkOrange
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkOrchid", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkOrchid
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkRed", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkRed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkSalmon", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkSalmon
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkSeaGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkSeaGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkSlateBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkSlateBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkSlateGray", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkSlateGray
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkTurquoise", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkTurquoise
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DarkViolet", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DarkViolet
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DeepPink", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DeepPink
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DeepSkyBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DeepSkyBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DimGray", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DimGray
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "DodgerBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_DodgerBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Firebrick", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Firebrick
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "FloralWhite", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_FloralWhite
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "ForestGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_ForestGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Fuchsia", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Fuchsia
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Gainsboro", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Gainsboro
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "GhostWhite", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_GhostWhite
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Gold", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Gold
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Goldenrod", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Goldenrod
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Gray", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Gray
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Green", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Green
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "GreenYellow", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_GreenYellow
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Honeydew", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Honeydew
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "HotPink", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_HotPink
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "IndianRed", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_IndianRed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Indigo", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Indigo
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Ivory", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Ivory
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Khaki", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Khaki
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Lavender", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Lavender
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LavenderBlush", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LavenderBlush
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LawnGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LawnGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LemonChiffon", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LemonChiffon
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightCoral", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightCoral
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightCyan", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightCyan
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightGoldenrodYellow", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightGoldenrodYellow
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightGray", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightGray
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightPink", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightPink
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightSalmon", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightSalmon
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightSeaGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightSeaGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightSkyBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightSkyBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightSlateGray", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightSlateGray
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightSteelBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightSteelBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LightYellow", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LightYellow
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Lime", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Lime
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "LimeGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_LimeGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Linen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Linen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Magenta", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Magenta
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Maroon", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Maroon
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumAquamarine", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumAquamarine
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumOrchid", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumOrchid
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumPurple", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumPurple
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumSeaGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumSeaGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumSlateBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumSlateBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumSpringGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumSpringGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumTurquoise", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumTurquoise
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MediumVioletRed", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MediumVioletRed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MidnightBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MidnightBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MintCream", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MintCream
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "MistyRose", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_MistyRose
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Moccasin", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Moccasin
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "NavajoWhite", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_NavajoWhite
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Navy", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Navy
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "OldLace", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_OldLace
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Olive", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Olive
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "OliveDrab", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_OliveDrab
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Orange", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Orange
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "OrangeRed", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_OrangeRed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Orchid", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Orchid
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "PaleGoldenrod", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_PaleGoldenrod
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "PaleGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_PaleGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "PaleTurquoise", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_PaleTurquoise
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "PaleVioletRed", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_PaleVioletRed
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "PapayaWhip", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_PapayaWhip
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "PeachPuff", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_PeachPuff
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Peru", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Peru
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Pink", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Pink
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Plum", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Plum
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "PowderBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_PowderBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Purple", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Purple
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Red", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Red
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "RosyBrown", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_RosyBrown
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "RoyalBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_RoyalBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SaddleBrown", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SaddleBrown
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Salmon", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Salmon
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SandyBrown", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SandyBrown
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SeaGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SeaGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SeaShell", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SeaShell
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Sienna", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Sienna
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Silver", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Silver
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SkyBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SkyBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SlateBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SlateBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SlateGray", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SlateGray
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Snow", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Snow
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SpringGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SpringGreen
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "SteelBlue", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_SteelBlue
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Tan", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Tan
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Teal", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Teal
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Thistle", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Thistle
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Tomato", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Tomato
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Turquoise", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Turquoise
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Violet", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Violet
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Wheat", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Wheat
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "White", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_White
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "WhiteSmoke", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_WhiteSmoke
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "Yellow", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_Yellow
	});
Object.defineProperty(Microsoft.Xna.Framework.Graphics.Color, "YellowGreen", {
		get: Microsoft.Xna.Framework.Graphics.Color.get_YellowGreen
	});
Microsoft.Xna.Framework.Graphics.Color.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.Color.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.Color.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.Color));

Object.seal(Microsoft.Xna.Framework.Graphics.Color.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.Color);
Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype._ctor = function (value) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack(value);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack(vector.X);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.ToSingle = function () {
	return Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Unpack(this.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.IPackedVector_ToVector4 = function () {
	return new Microsoft.Xna.Framework.Vector4(this.ToSingle(), 0, 0, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.toString = function () {
	return this.ToSingle().toString(System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt16));
Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "cFracBits", { value: 10 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "cExpBits", { value: 5 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "cSignBit", { value: 15 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "cSignMask", { value: 32768 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "cFracMask", { value: 1023 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "cExpBias", { value: 15 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "cRoundBit", { value: 4096 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "eMax", { value: 16 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "eMin", { value: -14 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "wMaxNormal", { value: 1207955455 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "wMinNormal", { value: 947912704 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "BiasDiffo", { value: 3355443200 });
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils, "cFracBitsDiff", { value: 13 });
Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack = function (value) {
	var num = JSIL.UntranslatableInstruction("conv.u:uint32*(ldloca:float32&[exp:uint32*](value))");
	var num2 = ((num & -2147483648) >>> 16);
	var num3 = (num & 2147483647);

	if (num3 > 1207955455) {
		var result = (num2 | 32767);
	} else if (num3 < 947912704) {
		var num5 = (113 - (num3 >>> 23));
		num3 = (num5 > 31) ? 0 : (((num3 & 8388607) | 8388608) >>> (num5 & 31));
		result = (num2 | ((num3 + 4095 + ((num3 >>> 13) & 1)) >>> 13));
	} else {
		result = (num2 | ((num3 + -939524096 + 4095 + ((num3 >>> 13) & 1)) >>> 13));
	}
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Unpack = function (value) {

	if (!(value & -33792)) {

		if (value & 1023) {
			var num = -14;
			var num2 = (value & 1023);

		__while0__: 
			while (!(num2 & 1024)) {
				--num;
				num2 = (num2 << 1);
			}
			num2 = (num2 & -1025);
			var num3 = (((value & 32768) << 16) | ((num + 127) << 23) | (num2 << 13));
		} else {
			num3 = ((value & 32768) << 16);
		}
	} else {
		num3 = (((value & 32768) << 16) | (((((value >> 10) & 31) - 15) + 127) << 23) | ((value & 1023) << 13));
	}
	return JSIL.UntranslatableInstruction("conv.u:float32*(ldloca:uint32&[exp:float32*](num3))");
};


Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils);
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype._ctor$0 = function (x, y) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.PackHelper(x, y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.PackHelper = function (vectorX, vectorY) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack(vectorX);
	return (num | (Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack(vectorY) << 16));
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.ToVector2 = function () {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Unpack(this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Unpack((this.packedValue >>> 16));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.IPackedVector_ToVector4 = function () {
	var vector = this.ToVector2();
	return new Microsoft.Xna.Framework.Vector4(vector.X, vector.Y, 0, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.toString = function () {
	return this.ToVector2().toString();
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector2]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2);
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack(vectorX), System.UInt64);
	var num2 = (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack(vectorY), System.UInt64) << 16);
	var num3 = (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack(vectorZ), System.UInt64) << 32);
	return (num | num2 | num3 | (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Pack(vectorW), System.UInt64) << 48));
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Unpack(this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Unpack((this.packedValue >>> 16));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Unpack((this.packedValue >>> 32));
	result.W = Microsoft.Xna.Framework.Graphics.PackedVector.HalfUtils.Unpack((this.packedValue >>> 48));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.toString = function () {
	return this.ToVector4().toString();
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt64));
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4);
Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype._ctor$0 = function (x, y, z) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.PackHelper(x, y, z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.PackHelper(vector.X, vector.Y, vector.Z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.PackHelper(vector.X, vector.Y, vector.Z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.PackHelper = function (vectorX, vectorY, vectorZ) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(1023, vectorX);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(1023, vectorY) << 10);
	return (num | num2 | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(1023, vectorZ) << 20));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.ToVector3 = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(1023, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(1023, (this.packedValue >>> 10));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(1023, (this.packedValue >>> 20));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.IPackedVector_ToVector4 = function () {
	var vector = this.ToVector3();
	return new Microsoft.Xna.Framework.Vector4(vector.X, vector.Y, vector.Z, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector3]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010);
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype._ctor$0 = function (x, y) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackHelper(x, y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackHelper = function (vectorX, vectorY) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(255, vectorX);
	return (num | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(255, vectorY) << 8));
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.ToVector2 = function () {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(255, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(255, (this.packedValue >>> 8));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.IPackedVector_ToVector4 = function () {
	var vector = this.ToVector2();
	return new Microsoft.Xna.Framework.Vector4(vector.X, vector.Y, 0, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.toString = function () {
	return this.packedValue.toString("X4", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector2]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt16));
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2);
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(255, vectorX);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(255, vectorY) << 8);
	var num3 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(255, vectorZ) << 16);
	return (num | num2 | num3 | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(255, vectorW) << 24));
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(255, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(255, (this.packedValue >>> 8));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(255, (this.packedValue >>> 16));
	result.W = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(255, (this.packedValue >>> 24));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4);
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype._ctor$0 = function (x, y) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackHelper(x, y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackHelper = function (vectorX, vectorY) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(65535, vectorX);
	return (num | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(65535, vectorY) << 16));
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.ToVector2 = function () {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(65535, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(65535, (this.packedValue >>> 16));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.IPackedVector_ToVector4 = function () {
	var vector = this.ToVector2();
	return new Microsoft.Xna.Framework.Vector4(vector.X, vector.Y, 0, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector2]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2);
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(65535, vectorX), System.UInt64);
	var num2 = (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(65535, vectorY), System.UInt64) << 16);
	var num3 = (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(65535, vectorZ), System.UInt64) << 32);
	return (num | num2 | num3 | (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm(65535, vectorW), System.UInt64) << 48));
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(65535, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(65535, (this.packedValue >>> 16));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(65535, (this.packedValue >>> 32));
	result.W = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm(65535, (this.packedValue >>> 48));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.toString = function () {
	return this.packedValue.toString("X16", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt64));
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4);
Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUnsigned = function (bitmask, value) {
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.ClampAndRound(value, 0, bitmask), System.UInt32);
};

Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSigned = function (bitmask, value) {
	var num = (bitmask >>> 1);
	return (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.ClampAndRound(value, (-num - 1), num), System.Int32) & bitmask);
};

Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm = function (bitmask, value) {
	value *= bitmask;
	return JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.ClampAndRound(value, 0, bitmask), System.UInt32);
};

Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm = function (bitmask, value) {
	value = (value & bitmask);
	return Math.floor(value / bitmask);
};

Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSNorm = function (bitmask, value) {
	var num = (bitmask >>> 1);
	value *= num;
	return (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.ClampAndRound(value, -num, num), System.Int32) & bitmask);
};

Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackSNorm = function (bitmask, value) {
	var num = ((bitmask + 1) >>> 1);

	if (value & num) {

		if ((value & bitmask) === num) {
			return -1;
		}
		value = (value | ~bitmask);
	} else {
		value = (value & bitmask);
	}
	return (value / (bitmask >>> 1));
};

Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.ClampAndRound = function (value, min, max) {

	if (System.Single.IsNaN(value)) {
		return 0;
	}

	if (System.Single.IsInfinity(value)) {
		return System.Single.IsNegativeInfinity(value) ? min : max;
	}

	if (value < min) {
		return min;
	}

	if (value > max) {
		return max;
	}
	return System.Math.Round(value);
};


Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils);
Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype._ctor$0 = function (x, y) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackHelper(x, y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackHelper = function (vectorX, vectorY) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(65535, vectorX);
	return (num | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(65535, vectorY) << 16));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.ToVector2 = function () {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(65535, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(65535, (this.packedValue >>> 16));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.IPackedVector_ToVector4 = function () {
	var vector = this.ToVector2();
	return new Microsoft.Xna.Framework.Vector4(vector.X, vector.Y, 0, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Rg32()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector2]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Rg32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32);
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(1023, vectorX);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(1023, vectorY) << 10);
	var num3 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(1023, vectorZ) << 20);
	return (num | num2 | num3 | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(3, vectorW) << 30));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(1023, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(1023, (this.packedValue >>> 10));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(1023, (this.packedValue >>> 20));
	result.W = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(3, (this.packedValue >>> 30));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102);
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, vectorX);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, vectorY) << 8);
	var num3 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, vectorZ) << 16);
	return (num | num2 | num3 | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(255, vectorW) << 24));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, (this.packedValue >>> 8));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, (this.packedValue >>> 16));
	result.W = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(255, (this.packedValue >>> 24));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32);
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(65535, vectorX), System.UInt64);
	var num2 = (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(65535, vectorY), System.UInt64) << 16);
	var num3 = (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(65535, vectorZ), System.UInt64) << 32);
	return (num | num2 | num3 | (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUNorm(65535, vectorW), System.UInt64) << 48));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(65535, this.packedValue);
	result.Y = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(65535, (this.packedValue >>> 16));
	result.Z = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(65535, (this.packedValue >>> 32));
	result.W = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.UnpackUNorm(65535, (this.packedValue >>> 48));
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.toString = function () {
	return this.packedValue.toString("X16", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt64));
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64);
Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype._ctor$0 = function (x, y) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackHelper(x, y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackHelper(vector.X, vector.Y);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackHelper = function (vectorX, vectorY) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSigned(65535, vectorX);
	return (num | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSigned(65535, vectorY) << 16));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.ToVector2 = function () {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = this.packedValue;
	result.Y = (this.packedValue >>> 16);
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.IPackedVector_ToVector4 = function () {
	var vector = this.ToVector2();
	return new Microsoft.Xna.Framework.Vector4(vector.X, vector.Y, 0, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Short2.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Short2()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Short2.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector2]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Short2]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Short2));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Short2.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Short2);
Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype._ctor$0 = function (x, y, z, w) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackHelper(x, y, z, w);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackHelper(vector.X, vector.Y, vector.Z, vector.W);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackHelper = function (vectorX, vectorY, vectorZ, vectorW) {
	var num = JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSigned(65535, vectorX), System.UInt64);
	var num2 = (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSigned(65535, vectorY), System.UInt64) << 16);
	var num3 = (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSigned(65535, vectorZ), System.UInt64) << 32);
	return (num | num2 | num3 | (JSIL.Cast(Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackSigned(65535, vectorW), System.UInt64) << 48));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.ToVector4 = function () {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = this.packedValue;
	result.Y = (this.packedValue >>> 16);
	result.Z = (this.packedValue >>> 32);
	result.W = (this.packedValue >>> 48);
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.toString = function () {
	return this.packedValue.toString("X16", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Short4.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.Short4()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.Short4.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.Short4]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt64));
Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.Short4));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Short4.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.Short4);
Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.packedValue = 0;
Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype._ctor$0 = function (x, y, z) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.PackHelper(x, y, z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype._ctor$1 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.PackHelper(vector.X, vector.Y, vector.Z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.IPackedVector_PackFromVector4 = function (vector) {
	this.packedValue = Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.PackHelper(vector.X, vector.Y, vector.Z);
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.PackHelper = function (vectorX, vectorY, vectorZ) {
	var num = Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUnsigned(1023, vectorX);
	var num2 = (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUnsigned(1023, vectorY) << 10);
	return (num | num2 | (Microsoft.Xna.Framework.Graphics.PackedVector.PackUtils.PackUnsigned(1023, vectorZ) << 20));
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.ToVector3 = function () {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (this.packedValue & 1023);
	result.Y = ((this.packedValue >>> 10) & 1023);
	result.Z = ((this.packedValue >>> 20) & 1023);
	return result;
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.IPackedVector_ToVector4 = function () {
	var vector = this.ToVector3();
	return new Microsoft.Xna.Framework.Vector4(vector.X, vector.Y, vector.Z, 1);
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.get_PackedValue = function () {
	return this.packedValue;
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.set_PackedValue = function (value) {
	this.packedValue = value;
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.toString = function () {
	return this.packedValue.toString("X8", System.Globalization.CultureInfo.InvariantCulture);
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.GetHashCode = function () {
	return this.packedValue.GetHashCode();
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.Equals$0 = function (obj) {
	return ((JSIL.TryCast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.MemberwiseClone()) === new Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010()) && this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.MemberwiseClone())));
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.Equals$1 = function (other) {
	return this.packedValue.Equals(other.packedValue);
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.op_Inequality = function (a, b) {
	return !a.Equals(b);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector3]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype, "PackedValue", {
		get: Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.get_PackedValue, 
		set: Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.set_PackedValue
	});
Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector$b1.Of(System.UInt32));
Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.__ImplementInterface__(Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector);
Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010));

Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.prototype);
Object.seal(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010);
Microsoft.Xna.Framework.Plane.prototype.D = 0;
Microsoft.Xna.Framework.Plane.prototype.__StructFields__ = {
	Normal: Microsoft.Xna.Framework.Vector3
};
Microsoft.Xna.Framework.Plane.prototype._ctor$0 = function (a, b, c, d) {
	this.Normal.X = a;
	this.Normal.Y = b;
	this.Normal.Z = c;
	this.D = d;
};

Microsoft.Xna.Framework.Plane.prototype._ctor$1 = function (normal, d) {
	this.Normal = normal;
	this.D = d;
};

Microsoft.Xna.Framework.Plane.prototype._ctor$2 = function (value) {
	this.Normal.X = value.X;
	this.Normal.Y = value.Y;
	this.Normal.Z = value.Z;
	this.D = value.W;
};

Microsoft.Xna.Framework.Plane.prototype._ctor$3 = function (point1, point2, point3) {
	var num = (point2.X - point1.X);
	var num2 = (point2.Y - point1.Y);
	var num3 = (point2.Z - point1.Z);
	var num4 = (point3.X - point1.X);
	var num5 = (point3.Y - point1.Y);
	var num6 = (point3.Z - point1.Z);
	var num7 = ((num2 * num6) - (num3 * num5));
	var num8 = ((num3 * num4) - (num * num6));
	var num9 = ((num * num5) - (num2 * num4));
	var num11 = (1 / JSIL.Cast(System.Math.Sqrt(((num7 * num7) + (num8 * num8) + (num9 * num9))), System.Single));
	this.Normal.X = (num7 * num11);
	this.Normal.Y = (num8 * num11);
	this.Normal.Z = (num9 * num11);
	this.D = -((this.Normal.X * point1.X) + (this.Normal.Y * point1.Y) + (this.Normal.Z * point1.Z));
};

Microsoft.Xna.Framework.Plane.prototype.Equals$0 = function (other) {
	return (!((this.Normal.X !== other.Normal.X) || 
			(this.Normal.Y !== other.Normal.Y) || 
			(this.Normal.Z !== other.Normal.Z)) && (this.D === other.D));
};

Microsoft.Xna.Framework.Plane.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Plane.MemberwiseClone()) === new Microsoft.Xna.Framework.Plane()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Plane.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Plane.prototype.GetHashCode = function () {
	return (this.Normal.GetHashCode() + this.D.GetHashCode());
};

Microsoft.Xna.Framework.Plane.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return System.String.Format(currentCulture, "{{Normal:{0} D:{1}}}", [this.Normal.toString(), this.D.toString(currentCulture)]);
};

Microsoft.Xna.Framework.Plane.prototype.Normalize = function () {
	var num = ((this.Normal.X * this.Normal.X) + (this.Normal.Y * this.Normal.Y) + (this.Normal.Z * this.Normal.Z));

	if (System.Math.Abs((num - 1)) < 1.1920928955078125E-07) {
		return ;
	}
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(num), System.Single));
	this.Normal.X *= num2;
	this.Normal.Y *= num2;
	this.Normal.Z *= num2;
	this.D *= num2;
};

Microsoft.Xna.Framework.Plane.Normalize$0 = function (value) {
	var result = new Microsoft.Xna.Framework.Plane();
	var num = ((value.Normal.X * value.Normal.X) + (value.Normal.Y * value.Normal.Y) + (value.Normal.Z * value.Normal.Z));

	if (System.Math.Abs((num - 1)) < 1.1920928955078125E-07) {
		result.Normal = value.Normal.MemberwiseClone();
		result.D = value.D;
		return result;
	}
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(num), System.Single));
	result.Normal.X = (value.Normal.X * num2);
	result.Normal.Y = (value.Normal.Y * num2);
	result.Normal.Z = (value.Normal.Z * num2);
	result.D = (value.D * num2);
	return result;
};

Microsoft.Xna.Framework.Plane.Normalize$1 = function (/* ref */ value, /* ref */ result) {
	var num = ((value.Normal.X * value.Normal.X) + (value.Normal.Y * value.Normal.Y) + (value.Normal.Z * value.Normal.Z));

	if (System.Math.Abs((num - 1)) < 1.1920928955078125E-07) {
		result.Normal = value.Normal.MemberwiseClone();
		result.D = value.D;
		return ;
	}
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(num), System.Single));
	result.Normal.X = (value.Normal.X * num2);
	result.Normal.Y = (value.Normal.Y * num2);
	result.Normal.Z = (value.Normal.Z * num2);
	result.D = (value.D * num2);
};

Microsoft.Xna.Framework.Plane.Transform$0 = function (plane, matrix) {
	var matrix2 = new Microsoft.Xna.Framework.Matrix(), result = new Microsoft.Xna.Framework.Plane();
	Microsoft.Xna.Framework.Matrix.Invert(/* ref */ matrix, /* ref */ matrix2);
	var x = plane.Normal.X;
	var y = plane.Normal.Y;
	var z = plane.Normal.Z;
	var d = plane.D;
	result.Normal.X = ((x * matrix2.M11) + (y * matrix2.M12) + (z * matrix2.M13) + (d * matrix2.M14));
	result.Normal.Y = ((x * matrix2.M21) + (y * matrix2.M22) + (z * matrix2.M23) + (d * matrix2.M24));
	result.Normal.Z = ((x * matrix2.M31) + (y * matrix2.M32) + (z * matrix2.M33) + (d * matrix2.M34));
	result.D = ((x * matrix2.M41) + (y * matrix2.M42) + (z * matrix2.M43) + (d * matrix2.M44));
	return result;
};

Microsoft.Xna.Framework.Plane.Transform$1 = function (/* ref */ plane, /* ref */ matrix, /* ref */ result) {
	var matrix2 = new Microsoft.Xna.Framework.Matrix();
	Microsoft.Xna.Framework.Matrix.Invert(/* ref */ matrix, /* ref */ matrix2);
	var x = plane.Normal.X;
	var y = plane.Normal.Y;
	var z = plane.Normal.Z;
	var d = plane.D;
	result.Normal.X = ((x * matrix2.M11) + (y * matrix2.M12) + (z * matrix2.M13) + (d * matrix2.M14));
	result.Normal.Y = ((x * matrix2.M21) + (y * matrix2.M22) + (z * matrix2.M23) + (d * matrix2.M24));
	result.Normal.Z = ((x * matrix2.M31) + (y * matrix2.M32) + (z * matrix2.M33) + (d * matrix2.M34));
	result.D = ((x * matrix2.M41) + (y * matrix2.M42) + (z * matrix2.M43) + (d * matrix2.M44));
};

Microsoft.Xna.Framework.Plane.Transform$2 = function (plane, rotation) {
	var result = new Microsoft.Xna.Framework.Plane();
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	var x = plane.Normal.X;
	var y = plane.Normal.Y;
	var z = plane.Normal.Z;
	result.Normal.X = ((x * (1 - num10 - num12)) + (y * (num8 - num6)) + (z * (num9 + num5)));
	result.Normal.Y = ((x * (num8 + num6)) + (y * (1 - num7 - num12)) + (z * (num11 - num4)));
	result.Normal.Z = ((x * (num9 - num5)) + (y * (num11 + num4)) + (z * (1 - num7 - num10)));
	result.D = plane.D;
	return result;
};

Microsoft.Xna.Framework.Plane.Transform$3 = function (/* ref */ plane, /* ref */ rotation, /* ref */ result) {
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	var x = plane.Normal.X;
	var y = plane.Normal.Y;
	var z = plane.Normal.Z;
	result.Normal.X = ((x * (1 - num10 - num12)) + (y * (num8 - num6)) + (z * (num9 + num5)));
	result.Normal.Y = ((x * (num8 + num6)) + (y * (1 - num7 - num12)) + (z * (num11 - num4)));
	result.Normal.Z = ((x * (num9 - num5)) + (y * (num11 + num4)) + (z * (1 - num7 - num10)));
	result.D = plane.D;
};

Microsoft.Xna.Framework.Plane.prototype.Dot$0 = function (value) {
	return ((this.Normal.X * value.X) + (this.Normal.Y * value.Y) + (this.Normal.Z * value.Z) + (this.D * value.W));
};

Microsoft.Xna.Framework.Plane.prototype.Dot$1 = function (/* ref */ value, /* ref */ result) {
	result.value = ((this.Normal.X * value.X) + (this.Normal.Y * value.Y) + (this.Normal.Z * value.Z) + (this.D * value.W));
};

Microsoft.Xna.Framework.Plane.prototype.DotCoordinate$0 = function (value) {
	return ((this.Normal.X * value.X) + (this.Normal.Y * value.Y) + (this.Normal.Z * value.Z) + this.D);
};

Microsoft.Xna.Framework.Plane.prototype.DotCoordinate$1 = function (/* ref */ value, /* ref */ result) {
	result.value = ((this.Normal.X * value.X) + (this.Normal.Y * value.Y) + (this.Normal.Z * value.Z) + this.D);
};

Microsoft.Xna.Framework.Plane.prototype.DotNormal$0 = function (value) {
	return ((this.Normal.X * value.X) + (this.Normal.Y * value.Y) + (this.Normal.Z * value.Z));
};

Microsoft.Xna.Framework.Plane.prototype.DotNormal$1 = function (/* ref */ value, /* ref */ result) {
	result.value = ((this.Normal.X * value.X) + (this.Normal.Y * value.Y) + (this.Normal.Z * value.Z));
};

Microsoft.Xna.Framework.Plane.prototype.Intersects$0 = function (box) {
	var vector = new Microsoft.Xna.Framework.Vector3(), vector2 = new Microsoft.Xna.Framework.Vector3();
	vector.X = (this.Normal.X >= 0) ? box.Min.X : box.Max.X;
	vector.Y = (this.Normal.Y >= 0) ? box.Min.Y : box.Max.Y;
	vector.Z = (this.Normal.Z >= 0) ? box.Min.Z : box.Max.Z;
	vector2.X = (this.Normal.X >= 0) ? box.Max.X : box.Min.X;
	vector2.Y = (this.Normal.Y >= 0) ? box.Max.Y : box.Min.Y;
	vector2.Z = (this.Normal.Z >= 0) ? box.Max.Z : box.Min.Z;
	var num = ((this.Normal.X * vector.X) + (this.Normal.Y * vector.Y) + (this.Normal.Z * vector.Z));

	if ((num + this.D) > 0) {
		return Microsoft.Xna.Framework.PlaneIntersectionType.Front;
	}
	num = ((this.Normal.X * vector2.X) + (this.Normal.Y * vector2.Y) + (this.Normal.Z * vector2.Z));

	if ((num + this.D) < 0) {
		return Microsoft.Xna.Framework.PlaneIntersectionType.Back;
	}
	return Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting;
};

Microsoft.Xna.Framework.Plane.prototype.Intersects$1 = function (/* ref */ box, /* ref */ result) {
	var vector = new Microsoft.Xna.Framework.Vector3(), vector2 = new Microsoft.Xna.Framework.Vector3();
	vector.X = (this.Normal.X >= 0) ? box.Min.X : box.Max.X;
	vector.Y = (this.Normal.Y >= 0) ? box.Min.Y : box.Max.Y;
	vector.Z = (this.Normal.Z >= 0) ? box.Min.Z : box.Max.Z;
	vector2.X = (this.Normal.X >= 0) ? box.Max.X : box.Min.X;
	vector2.Y = (this.Normal.Y >= 0) ? box.Max.Y : box.Min.Y;
	vector2.Z = (this.Normal.Z >= 0) ? box.Max.Z : box.Min.Z;
	var num = ((this.Normal.X * vector.X) + (this.Normal.Y * vector.Y) + (this.Normal.Z * vector.Z));

	if ((num + this.D) > 0) {
		result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Front;
		return ;
	}
	num = ((this.Normal.X * vector2.X) + (this.Normal.Y * vector2.Y) + (this.Normal.Z * vector2.Z));

	if ((num + this.D) < 0) {
		result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Back;
		return ;
	}
	result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting;
};

Microsoft.Xna.Framework.Plane.prototype.Intersects$2 = function (frustum) {

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(null, frustum)) {
		throw new System.ArgumentNullException("frustum", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	return frustum.Intersects(this);
};

Microsoft.Xna.Framework.Plane.prototype.Intersects$3 = function (sphere) {
	var num2 = ((sphere.Center.X * this.Normal.X) + (sphere.Center.Y * this.Normal.Y) + (sphere.Center.Z * this.Normal.Z) + this.D);

	if (num2 > sphere.Radius) {
		return Microsoft.Xna.Framework.PlaneIntersectionType.Front;
	}

	if (num2 < -sphere.Radius) {
		return Microsoft.Xna.Framework.PlaneIntersectionType.Back;
	}
	return Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting;
};

Microsoft.Xna.Framework.Plane.prototype.Intersects$4 = function (/* ref */ sphere, /* ref */ result) {
	var num2 = ((sphere.Center.X * this.Normal.X) + (sphere.Center.Y * this.Normal.Y) + (sphere.Center.Z * this.Normal.Z) + this.D);

	if (num2 > sphere.Radius) {
		result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Front;
		return ;
	}

	if (num2 < -sphere.Radius) {
		result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Back;
		return ;
	}
	result.value = Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting;
};

Microsoft.Xna.Framework.Plane.op_Equality = function (lhs, rhs) {
	return lhs.Equals(rhs);
};

Microsoft.Xna.Framework.Plane.op_Inequality = function (lhs, rhs) {
	return ((lhs.Normal.X !== rhs.Normal.X) || 
		(lhs.Normal.Y !== rhs.Normal.Y) || 
		(lhs.Normal.Z !== rhs.Normal.Z) || (lhs.D !== rhs.D));
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Plane.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector3, System.Single]], 
		["_ctor$2", [Microsoft.Xna.Framework.Vector4]], 
		["_ctor$3", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Plane.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Plane]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Plane, "Normalize", [
		["Normalize$0", [Microsoft.Xna.Framework.Plane]], 
		["Normalize$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(Microsoft.Xna.Framework.Plane)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Plane, "Transform", [
		["Transform$0", [Microsoft.Xna.Framework.Plane, Microsoft.Xna.Framework.Matrix]], 
		["Transform$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Plane)]], 
		["Transform$2", [Microsoft.Xna.Framework.Plane, Microsoft.Xna.Framework.Quaternion]], 
		["Transform$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Plane)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Plane.prototype, "Dot", [
		["Dot$0", [Microsoft.Xna.Framework.Vector4]], 
		["Dot$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Plane.prototype, "DotCoordinate", [
		["DotCoordinate$0", [Microsoft.Xna.Framework.Vector3]], 
		["DotCoordinate$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Plane.prototype, "DotNormal", [
		["DotNormal$0", [Microsoft.Xna.Framework.Vector3]], 
		["DotNormal$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Plane.prototype, "Intersects", [
		["Intersects$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Intersects$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(Microsoft.Xna.Framework.PlaneIntersectionType)]], 
		["Intersects$2", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Intersects$3", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Intersects$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(Microsoft.Xna.Framework.PlaneIntersectionType)]]
	]
);
Microsoft.Xna.Framework.Plane.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Plane));

Object.seal(Microsoft.Xna.Framework.Plane.prototype);
Object.seal(Microsoft.Xna.Framework.Plane);
Microsoft.Xna.Framework.Point.prototype.X = 0;
Microsoft.Xna.Framework.Point.prototype.Y = 0;
Microsoft.Xna.Framework.Point._zero = new Microsoft.Xna.Framework.Point();
Microsoft.Xna.Framework.Point.get_Zero = function () {
	return Microsoft.Xna.Framework.Point._zero;
};

Microsoft.Xna.Framework.Point.prototype._ctor = function (x, y) {
	this.X = x;
	this.Y = y;
};

Microsoft.Xna.Framework.Point.prototype.Equals$0 = function (other) {
	return ((this.X === other.X) && (this.Y === other.Y));
};

Microsoft.Xna.Framework.Point.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Point.MemberwiseClone()) === new Microsoft.Xna.Framework.Point()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Point.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Point.prototype.GetHashCode = function () {
	return (this.X.GetHashCode() + this.Y.GetHashCode());
};

Microsoft.Xna.Framework.Point.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return System.String.Format(currentCulture, "{{X:{0} Y:{1}}}", [this.X.toString(currentCulture), this.Y.toString(currentCulture)]);
};

Microsoft.Xna.Framework.Point.op_Equality = function (a, b) {
	return a.Equals(b);
};

Microsoft.Xna.Framework.Point.op_Inequality = function (a, b) {
	return ((a.X !== b.X) || (a.Y !== b.Y));
};

Microsoft.Xna.Framework.Point._cctor = function () {
	Microsoft.Xna.Framework.Point._zero = new Microsoft.Xna.Framework.Point();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Point.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Point]], 
		["Equals$1", [System.Object]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Point, "Zero", {
		get: Microsoft.Xna.Framework.Point.get_Zero
	});
Microsoft.Xna.Framework.Point._cctor();
Microsoft.Xna.Framework.Point.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Point));

Object.seal(Microsoft.Xna.Framework.Point.prototype);
Object.seal(Microsoft.Xna.Framework.Point);
Microsoft.Xna.Framework.Quaternion.prototype.X = 0;
Microsoft.Xna.Framework.Quaternion.prototype.Y = 0;
Microsoft.Xna.Framework.Quaternion.prototype.Z = 0;
Microsoft.Xna.Framework.Quaternion.prototype.W = 0;
Microsoft.Xna.Framework.Quaternion._identity = new Microsoft.Xna.Framework.Quaternion();
Microsoft.Xna.Framework.Quaternion.get_Identity = function () {
	return Microsoft.Xna.Framework.Quaternion._identity;
};

Microsoft.Xna.Framework.Quaternion.prototype._ctor$0 = function (x, y, z, w) {
	this.X = x;
	this.Y = y;
	this.Z = z;
	this.W = w;
};

Microsoft.Xna.Framework.Quaternion.prototype._ctor$1 = function (vectorPart, scalarPart) {
	this.X = vectorPart.X;
	this.Y = vectorPart.Y;
	this.Z = vectorPart.Z;
	this.W = scalarPart;
};

Microsoft.Xna.Framework.Quaternion.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return System.String.Format(currentCulture, "{{X:{0} Y:{1} Z:{2} W:{3}}}", [this.X.toString(currentCulture), this.Y.toString(currentCulture), this.Z.toString(currentCulture), this.W.toString(currentCulture)]);
};

Microsoft.Xna.Framework.Quaternion.prototype.Equals$0 = function (other) {
	return (!((this.X !== other.X) || 
			(this.Y !== other.Y) || 
			(this.Z !== other.Z)) && (this.W === other.W));
};

Microsoft.Xna.Framework.Quaternion.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Quaternion.MemberwiseClone()) === new Microsoft.Xna.Framework.Quaternion()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Quaternion.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Quaternion.prototype.GetHashCode = function () {
	return (this.X.GetHashCode() + this.Y.GetHashCode() + this.Z.GetHashCode() + this.W.GetHashCode());
};

Microsoft.Xna.Framework.Quaternion.prototype.LengthSquared = function () {
	return ((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z) + (this.W * this.W));
};

Microsoft.Xna.Framework.Quaternion.prototype.length = function () {
	return JSIL.Cast(System.Math.Sqrt(((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z) + (this.W * this.W))), System.Single);
};

Microsoft.Xna.Framework.Quaternion.prototype.Normalize = function () {
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z) + (this.W * this.W))), System.Single));
	this.X *= num2;
	this.Y *= num2;
	this.Z *= num2;
	this.W *= num2;
};

Microsoft.Xna.Framework.Quaternion.Normalize$0 = function (quaternion) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y) + (quaternion.Z * quaternion.Z) + (quaternion.W * quaternion.W))), System.Single));
	result.X = (quaternion.X * num2);
	result.Y = (quaternion.Y * num2);
	result.Z = (quaternion.Z * num2);
	result.W = (quaternion.W * num2);
	return result;
};

Microsoft.Xna.Framework.Quaternion.Normalize$1 = function (/* ref */ quaternion, /* ref */ result) {
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y) + (quaternion.Z * quaternion.Z) + (quaternion.W * quaternion.W))), System.Single));
	result.X = (quaternion.X * num2);
	result.Y = (quaternion.Y * num2);
	result.Z = (quaternion.Z * num2);
	result.W = (quaternion.W * num2);
};

Microsoft.Xna.Framework.Quaternion.prototype.Conjugate = function () {
	this.X = -this.X;
	this.Y = -this.Y;
	this.Z = -this.Z;
};

Microsoft.Xna.Framework.Quaternion.Conjugate$0 = function (value) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = -value.X;
	result.Y = -value.Y;
	result.Z = -value.Z;
	result.W = value.W;
	return result;
};

Microsoft.Xna.Framework.Quaternion.Conjugate$1 = function (/* ref */ value, /* ref */ result) {
	result.X = -value.X;
	result.Y = -value.Y;
	result.Z = -value.Z;
	result.W = value.W;
};

Microsoft.Xna.Framework.Quaternion.Inverse$0 = function (quaternion) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var num2 = (1 / ((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y) + (quaternion.Z * quaternion.Z) + (quaternion.W * quaternion.W)));
	result.X = (-quaternion.X * num2);
	result.Y = (-quaternion.Y * num2);
	result.Z = (-quaternion.Z * num2);
	result.W = (quaternion.W * num2);
	return result;
};

Microsoft.Xna.Framework.Quaternion.Inverse$1 = function (/* ref */ quaternion, /* ref */ result) {
	var num2 = (1 / ((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y) + (quaternion.Z * quaternion.Z) + (quaternion.W * quaternion.W)));
	result.X = (-quaternion.X * num2);
	result.Y = (-quaternion.Y * num2);
	result.Z = (-quaternion.Z * num2);
	result.W = (quaternion.W * num2);
};

Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle$0 = function (axis, angle) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var num = (angle * 0.5);
	var num2 = JSIL.Cast(System.Math.Sin(num), System.Single);
	var w = JSIL.Cast(System.Math.Cos(num), System.Single);
	result.X = (axis.X * num2);
	result.Y = (axis.Y * num2);
	result.Z = (axis.Z * num2);
	result.W = w;
	return result;
};

Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle$1 = function (/* ref */ axis, angle, /* ref */ result) {
	var num = (angle * 0.5);
	var num2 = JSIL.Cast(System.Math.Sin(num), System.Single);
	var w = JSIL.Cast(System.Math.Cos(num), System.Single);
	result.X = (axis.X * num2);
	result.Y = (axis.Y * num2);
	result.Z = (axis.Z * num2);
	result.W = w;
};

Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll$0 = function (yaw, pitch, roll) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var num = (roll * 0.5);
	var num2 = JSIL.Cast(System.Math.Sin(num), System.Single);
	var num3 = JSIL.Cast(System.Math.Cos(num), System.Single);
	var num4 = (pitch * 0.5);
	var num5 = JSIL.Cast(System.Math.Sin(num4), System.Single);
	var num6 = JSIL.Cast(System.Math.Cos(num4), System.Single);
	var num7 = (yaw * 0.5);
	var num8 = JSIL.Cast(System.Math.Sin(num7), System.Single);
	var num9 = JSIL.Cast(System.Math.Cos(num7), System.Single);
	result.X = ((num9 * num5 * num3) + (num8 * num6 * num2));
	result.Y = ((num8 * num6 * num3) - (num9 * num5 * num2));
	result.Z = ((num9 * num6 * num2) - (num8 * num5 * num3));
	result.W = ((num9 * num6 * num3) + (num8 * num5 * num2));
	return result;
};

Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll$1 = function (yaw, pitch, roll, /* ref */ result) {
	var num = (roll * 0.5);
	var num2 = JSIL.Cast(System.Math.Sin(num), System.Single);
	var num3 = JSIL.Cast(System.Math.Cos(num), System.Single);
	var num4 = (pitch * 0.5);
	var num5 = JSIL.Cast(System.Math.Sin(num4), System.Single);
	var num6 = JSIL.Cast(System.Math.Cos(num4), System.Single);
	var num7 = (yaw * 0.5);
	var num8 = JSIL.Cast(System.Math.Sin(num7), System.Single);
	var num9 = JSIL.Cast(System.Math.Cos(num7), System.Single);
	result.X = ((num9 * num5 * num3) + (num8 * num6 * num2));
	result.Y = ((num8 * num6 * num3) - (num9 * num5 * num2));
	result.Z = ((num9 * num6 * num2) - (num8 * num5 * num3));
	result.W = ((num9 * num6 * num3) + (num8 * num5 * num2));
};

Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix$0 = function (matrix) {
	var num = (matrix.M11 + matrix.M22 + matrix.M33);
	var result = new Microsoft.Xna.Framework.Quaternion();

	if (num > 0) {
		var num2 = JSIL.Cast(System.Math.Sqrt((num + 1)), System.Single);
		result.W = (num2 * 0.5);
		num2 = (0.5 / num2);
		result.X = ((matrix.M23 - matrix.M32) * num2);
		result.Y = ((matrix.M31 - matrix.M13) * num2);
		result.Z = ((matrix.M12 - matrix.M21) * num2);
	} else if (!((matrix.M11 < matrix.M22) || (matrix.M11 < matrix.M33))) {
		var num3 = JSIL.Cast(System.Math.Sqrt(((1 + matrix.M11) - matrix.M22 - matrix.M33)), System.Single);
		var num4 = (0.5 / num3);
		result.X = (0.5 * num3);
		result.Y = ((matrix.M12 + matrix.M21) * num4);
		result.Z = ((matrix.M13 + matrix.M31) * num4);
		result.W = ((matrix.M23 - matrix.M32) * num4);
	} else if (matrix.M22 > matrix.M33) {
		var num5 = JSIL.Cast(System.Math.Sqrt(((1 + matrix.M22) - matrix.M11 - matrix.M33)), System.Single);
		var num6 = (0.5 / num5);
		result.X = ((matrix.M21 + matrix.M12) * num6);
		result.Y = (0.5 * num5);
		result.Z = ((matrix.M32 + matrix.M23) * num6);
		result.W = ((matrix.M31 - matrix.M13) * num6);
	} else {
		var num7 = JSIL.Cast(System.Math.Sqrt(((1 + matrix.M33) - matrix.M11 - matrix.M22)), System.Single);
		var num8 = (0.5 / num7);
		result.X = ((matrix.M31 + matrix.M13) * num8);
		result.Y = ((matrix.M32 + matrix.M23) * num8);
		result.Z = (0.5 * num7);
		result.W = ((matrix.M12 - matrix.M21) * num8);
	}
	return result;
};

Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix$1 = function (/* ref */ matrix, /* ref */ result) {
	var num = (matrix.M11 + matrix.M22 + matrix.M33);

	if (num > 0) {
		var num2 = JSIL.Cast(System.Math.Sqrt((num + 1)), System.Single);
		result.W = (num2 * 0.5);
		num2 = (0.5 / num2);
		result.X = ((matrix.M23 - matrix.M32) * num2);
		result.Y = ((matrix.M31 - matrix.M13) * num2);
		result.Z = ((matrix.M12 - matrix.M21) * num2);
		return ;
	}

	if (!((matrix.M11 < matrix.M22) || (matrix.M11 < matrix.M33))) {
		var num3 = JSIL.Cast(System.Math.Sqrt(((1 + matrix.M11) - matrix.M22 - matrix.M33)), System.Single);
		var num4 = (0.5 / num3);
		result.X = (0.5 * num3);
		result.Y = ((matrix.M12 + matrix.M21) * num4);
		result.Z = ((matrix.M13 + matrix.M31) * num4);
		result.W = ((matrix.M23 - matrix.M32) * num4);
		return ;
	}

	if (matrix.M22 > matrix.M33) {
		var num5 = JSIL.Cast(System.Math.Sqrt(((1 + matrix.M22) - matrix.M11 - matrix.M33)), System.Single);
		var num6 = (0.5 / num5);
		result.X = ((matrix.M21 + matrix.M12) * num6);
		result.Y = (0.5 * num5);
		result.Z = ((matrix.M32 + matrix.M23) * num6);
		result.W = ((matrix.M31 - matrix.M13) * num6);
		return ;
	}
	var num7 = JSIL.Cast(System.Math.Sqrt(((1 + matrix.M33) - matrix.M11 - matrix.M22)), System.Single);
	var num8 = (0.5 / num7);
	result.X = ((matrix.M31 + matrix.M13) * num8);
	result.Y = ((matrix.M32 + matrix.M23) * num8);
	result.Z = (0.5 * num7);
	result.W = ((matrix.M12 - matrix.M21) * num8);
};

Microsoft.Xna.Framework.Quaternion.Dot$0 = function (quaternion1, quaternion2) {
	return ((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y) + (quaternion1.Z * quaternion2.Z) + (quaternion1.W * quaternion2.W));
};

Microsoft.Xna.Framework.Quaternion.Dot$1 = function (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
	result.value = ((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y) + (quaternion1.Z * quaternion2.Z) + (quaternion1.W * quaternion2.W));
};

Microsoft.Xna.Framework.Quaternion.Slerp$0 = function (quaternion1, quaternion2, amount) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var num = ((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y) + (quaternion1.Z * quaternion2.Z) + (quaternion1.W * quaternion2.W));
	var flag = false;

	if (num < 0) {
		flag = true;
		num = -num;
	}

	if (num > 0.99999898672103882) {
		var num2 = (1 - amount);
		var num3 = flag ? -amount : amount;
	} else {
		var num4 = JSIL.Cast(System.Math.Acos(num), System.Single);
		var num5 = (1 / System.Math.Sin(num4));
		num2 = (JSIL.Cast(System.Math.Sin(((1 - amount) * num4)), System.Single) * num5);
		num3 = flag ? (-System.Math.Sin((amount * num4)) * num5) : (JSIL.Cast(System.Math.Sin((amount * num4)), System.Single) * num5);
	}
	result.X = ((num2 * quaternion1.X) + (num3 * quaternion2.X));
	result.Y = ((num2 * quaternion1.Y) + (num3 * quaternion2.Y));
	result.Z = ((num2 * quaternion1.Z) + (num3 * quaternion2.Z));
	result.W = ((num2 * quaternion1.W) + (num3 * quaternion2.W));
	return result;
};

Microsoft.Xna.Framework.Quaternion.Slerp$1 = function (/* ref */ quaternion1, /* ref */ quaternion2, amount, /* ref */ result) {
	var num = ((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y) + (quaternion1.Z * quaternion2.Z) + (quaternion1.W * quaternion2.W));
	var flag = false;

	if (num < 0) {
		flag = true;
		num = -num;
	}

	if (num > 0.99999898672103882) {
		var num2 = (1 - amount);
		var num3 = flag ? -amount : amount;
	} else {
		var num4 = JSIL.Cast(System.Math.Acos(num), System.Single);
		var num5 = (1 / System.Math.Sin(num4));
		num2 = (JSIL.Cast(System.Math.Sin(((1 - amount) * num4)), System.Single) * num5);
		num3 = flag ? (-System.Math.Sin((amount * num4)) * num5) : (JSIL.Cast(System.Math.Sin((amount * num4)), System.Single) * num5);
	}
	result.X = ((num2 * quaternion1.X) + (num3 * quaternion2.X));
	result.Y = ((num2 * quaternion1.Y) + (num3 * quaternion2.Y));
	result.Z = ((num2 * quaternion1.Z) + (num3 * quaternion2.Z));
	result.W = ((num2 * quaternion1.W) + (num3 * quaternion2.W));
};

Microsoft.Xna.Framework.Quaternion.Lerp$0 = function (quaternion1, quaternion2, amount) {
	var num = (1 - amount);
	var result = new Microsoft.Xna.Framework.Quaternion();
	var num2 = ((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y) + (quaternion1.Z * quaternion2.Z) + (quaternion1.W * quaternion2.W));

	if (num2 >= 0) {
		result.X = ((num * quaternion1.X) + (amount * quaternion2.X));
		result.Y = ((num * quaternion1.Y) + (amount * quaternion2.Y));
		result.Z = ((num * quaternion1.Z) + (amount * quaternion2.Z));
		result.W = ((num * quaternion1.W) + (amount * quaternion2.W));
	} else {
		result.X = ((num * quaternion1.X) - (amount * quaternion2.X));
		result.Y = ((num * quaternion1.Y) - (amount * quaternion2.Y));
		result.Z = ((num * quaternion1.Z) - (amount * quaternion2.Z));
		result.W = ((num * quaternion1.W) - (amount * quaternion2.W));
	}
	var num4 = (1 / JSIL.Cast(System.Math.Sqrt(((result.X * result.X) + (result.Y * result.Y) + (result.Z * result.Z) + (result.W * result.W))), System.Single));
	result.X = (result.X * num4);
	result.Y = (result.Y * num4);
	result.Z = (result.Z * num4);
	result.W = (result.W * num4);
	return result;
};

Microsoft.Xna.Framework.Quaternion.Lerp$1 = function (/* ref */ quaternion1, /* ref */ quaternion2, amount, /* ref */ result) {
	var num = (1 - amount);
	var num2 = ((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y) + (quaternion1.Z * quaternion2.Z) + (quaternion1.W * quaternion2.W));

	if (num2 >= 0) {
		result.X = ((num * quaternion1.X) + (amount * quaternion2.X));
		result.Y = ((num * quaternion1.Y) + (amount * quaternion2.Y));
		result.Z = ((num * quaternion1.Z) + (amount * quaternion2.Z));
		result.W = ((num * quaternion1.W) + (amount * quaternion2.W));
	} else {
		result.X = ((num * quaternion1.X) - (amount * quaternion2.X));
		result.Y = ((num * quaternion1.Y) - (amount * quaternion2.Y));
		result.Z = ((num * quaternion1.Z) - (amount * quaternion2.Z));
		result.W = ((num * quaternion1.W) - (amount * quaternion2.W));
	}
	var num4 = (1 / JSIL.Cast(System.Math.Sqrt(((result.X * result.X) + (result.Y * result.Y) + (result.Z * result.Z) + (result.W * result.W))), System.Single));
	result.X = (result.X * num4);
	result.Y = (result.Y * num4);
	result.Z = (result.Z * num4);
	result.W = (result.W * num4);
};

Microsoft.Xna.Framework.Quaternion.Concatenate$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var x = value2.X;
	var y = value2.Y;
	var z = value2.Z;
	var w = value2.W;
	var x2 = value1.X;
	var y2 = value1.Y;
	var z2 = value1.Z;
	var w2 = value1.W;
	result.X = ((x * w2) + (x2 * w) + ((y * z2) - (z * y2)));
	result.Y = ((y * w2) + (y2 * w) + ((z * x2) - (x * z2)));
	result.Z = ((z * w2) + (z2 * w) + ((x * y2) - (y * x2)));
	result.W = ((w * w2) - ((x * x2) + (y * y2) + (z * z2)));
	return result;
};

Microsoft.Xna.Framework.Quaternion.Concatenate$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var x = value2.X;
	var y = value2.Y;
	var z = value2.Z;
	var w = value2.W;
	var x2 = value1.X;
	var y2 = value1.Y;
	var z2 = value1.Z;
	var w2 = value1.W;
	result.X = ((x * w2) + (x2 * w) + ((y * z2) - (z * y2)));
	result.Y = ((y * w2) + (y2 * w) + ((z * x2) - (x * z2)));
	result.Z = ((z * w2) + (z2 * w) + ((x * y2) - (y * x2)));
	result.W = ((w * w2) - ((x * x2) + (y * y2) + (z * z2)));
};

Microsoft.Xna.Framework.Quaternion.Negate$0 = function (quaternion) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = -quaternion.X;
	result.Y = -quaternion.Y;
	result.Z = -quaternion.Z;
	result.W = -quaternion.W;
	return result;
};

Microsoft.Xna.Framework.Quaternion.Negate$1 = function (/* ref */ quaternion, /* ref */ result) {
	result.X = -quaternion.X;
	result.Y = -quaternion.Y;
	result.Z = -quaternion.Z;
	result.W = -quaternion.W;
};

Microsoft.Xna.Framework.Quaternion.Add$0 = function (quaternion1, quaternion2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = (quaternion1.X + quaternion2.X);
	result.Y = (quaternion1.Y + quaternion2.Y);
	result.Z = (quaternion1.Z + quaternion2.Z);
	result.W = (quaternion1.W + quaternion2.W);
	return result;
};

Microsoft.Xna.Framework.Quaternion.Add$1 = function (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
	result.X = (quaternion1.X + quaternion2.X);
	result.Y = (quaternion1.Y + quaternion2.Y);
	result.Z = (quaternion1.Z + quaternion2.Z);
	result.W = (quaternion1.W + quaternion2.W);
};

Microsoft.Xna.Framework.Quaternion.Subtract$0 = function (quaternion1, quaternion2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = (quaternion1.X - quaternion2.X);
	result.Y = (quaternion1.Y - quaternion2.Y);
	result.Z = (quaternion1.Z - quaternion2.Z);
	result.W = (quaternion1.W - quaternion2.W);
	return result;
};

Microsoft.Xna.Framework.Quaternion.Subtract$1 = function (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
	result.X = (quaternion1.X - quaternion2.X);
	result.Y = (quaternion1.Y - quaternion2.Y);
	result.Z = (quaternion1.Z - quaternion2.Z);
	result.W = (quaternion1.W - quaternion2.W);
};

Microsoft.Xna.Framework.Quaternion.Multiply$0 = function (quaternion1, quaternion2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var x = quaternion1.X;
	var y = quaternion1.Y;
	var z = quaternion1.Z;
	var w = quaternion1.W;
	var x2 = quaternion2.X;
	var y2 = quaternion2.Y;
	var z2 = quaternion2.Z;
	var w2 = quaternion2.W;
	result.X = ((x * w2) + (x2 * w) + ((y * z2) - (z * y2)));
	result.Y = ((y * w2) + (y2 * w) + ((z * x2) - (x * z2)));
	result.Z = ((z * w2) + (z2 * w) + ((x * y2) - (y * x2)));
	result.W = ((w * w2) - ((x * x2) + (y * y2) + (z * z2)));
	return result;
};

Microsoft.Xna.Framework.Quaternion.Multiply$1 = function (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
	var x = quaternion1.X;
	var y = quaternion1.Y;
	var z = quaternion1.Z;
	var w = quaternion1.W;
	var x2 = quaternion2.X;
	var y2 = quaternion2.Y;
	var z2 = quaternion2.Z;
	var w2 = quaternion2.W;
	result.X = ((x * w2) + (x2 * w) + ((y * z2) - (z * y2)));
	result.Y = ((y * w2) + (y2 * w) + ((z * x2) - (x * z2)));
	result.Z = ((z * w2) + (z2 * w) + ((x * y2) - (y * x2)));
	result.W = ((w * w2) - ((x * x2) + (y * y2) + (z * z2)));
};

Microsoft.Xna.Framework.Quaternion.Multiply$2 = function (quaternion1, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = (quaternion1.X * scaleFactor);
	result.Y = (quaternion1.Y * scaleFactor);
	result.Z = (quaternion1.Z * scaleFactor);
	result.W = (quaternion1.W * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Quaternion.Multiply$3 = function (/* ref */ quaternion1, scaleFactor, /* ref */ result) {
	result.X = (quaternion1.X * scaleFactor);
	result.Y = (quaternion1.Y * scaleFactor);
	result.Z = (quaternion1.Z * scaleFactor);
	result.W = (quaternion1.W * scaleFactor);
};

Microsoft.Xna.Framework.Quaternion.Divide$0 = function (quaternion1, quaternion2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var x = quaternion1.X;
	var y = quaternion1.Y;
	var z = quaternion1.Z;
	var w = quaternion1.W;
	var num2 = (1 / ((quaternion2.X * quaternion2.X) + (quaternion2.Y * quaternion2.Y) + (quaternion2.Z * quaternion2.Z) + (quaternion2.W * quaternion2.W)));
	var num3 = (-quaternion2.X * num2);
	var num4 = (-quaternion2.Y * num2);
	var num5 = (-quaternion2.Z * num2);
	var num6 = (quaternion2.W * num2);
	result.X = ((x * num6) + (num3 * w) + ((y * num5) - (z * num4)));
	result.Y = ((y * num6) + (num4 * w) + ((z * num3) - (x * num5)));
	result.Z = ((z * num6) + (num5 * w) + ((x * num4) - (y * num3)));
	result.W = ((w * num6) - ((x * num3) + (y * num4) + (z * num5)));
	return result;
};

Microsoft.Xna.Framework.Quaternion.Divide$1 = function (/* ref */ quaternion1, /* ref */ quaternion2, /* ref */ result) {
	var x = quaternion1.X;
	var y = quaternion1.Y;
	var z = quaternion1.Z;
	var w = quaternion1.W;
	var num2 = (1 / ((quaternion2.X * quaternion2.X) + (quaternion2.Y * quaternion2.Y) + (quaternion2.Z * quaternion2.Z) + (quaternion2.W * quaternion2.W)));
	var num3 = (-quaternion2.X * num2);
	var num4 = (-quaternion2.Y * num2);
	var num5 = (-quaternion2.Z * num2);
	var num6 = (quaternion2.W * num2);
	result.X = ((x * num6) + (num3 * w) + ((y * num5) - (z * num4)));
	result.Y = ((y * num6) + (num4 * w) + ((z * num3) - (x * num5)));
	result.Z = ((z * num6) + (num5 * w) + ((x * num4) - (y * num3)));
	result.W = ((w * num6) - ((x * num3) + (y * num4) + (z * num5)));
};

Microsoft.Xna.Framework.Quaternion.op_UnaryNegation = function (quaternion) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = -quaternion.X;
	result.Y = -quaternion.Y;
	result.Z = -quaternion.Z;
	result.W = -quaternion.W;
	return result;
};

Microsoft.Xna.Framework.Quaternion.op_Equality = function (quaternion1, quaternion2) {
	return (!((quaternion1.X !== quaternion2.X) || 
			(quaternion1.Y !== quaternion2.Y) || 
			(quaternion1.Z !== quaternion2.Z)) && (quaternion1.W === quaternion2.W));
};

Microsoft.Xna.Framework.Quaternion.op_Inequality = function (quaternion1, quaternion2) {
	return ((quaternion1.X !== quaternion2.X) || 
		(quaternion1.Y !== quaternion2.Y) || 
		(quaternion1.Z !== quaternion2.Z) || (quaternion1.W !== quaternion2.W));
};

Microsoft.Xna.Framework.Quaternion.op_Addition = function (quaternion1, quaternion2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = (quaternion1.X + quaternion2.X);
	result.Y = (quaternion1.Y + quaternion2.Y);
	result.Z = (quaternion1.Z + quaternion2.Z);
	result.W = (quaternion1.W + quaternion2.W);
	return result;
};

Microsoft.Xna.Framework.Quaternion.op_Subtraction = function (quaternion1, quaternion2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = (quaternion1.X - quaternion2.X);
	result.Y = (quaternion1.Y - quaternion2.Y);
	result.Z = (quaternion1.Z - quaternion2.Z);
	result.W = (quaternion1.W - quaternion2.W);
	return result;
};

Microsoft.Xna.Framework.Quaternion.op_Multiply$0 = function (quaternion1, quaternion2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var x = quaternion1.X;
	var y = quaternion1.Y;
	var z = quaternion1.Z;
	var w = quaternion1.W;
	var x2 = quaternion2.X;
	var y2 = quaternion2.Y;
	var z2 = quaternion2.Z;
	var w2 = quaternion2.W;
	result.X = ((x * w2) + (x2 * w) + ((y * z2) - (z * y2)));
	result.Y = ((y * w2) + (y2 * w) + ((z * x2) - (x * z2)));
	result.Z = ((z * w2) + (z2 * w) + ((x * y2) - (y * x2)));
	result.W = ((w * w2) - ((x * x2) + (y * y2) + (z * z2)));
	return result;
};

Microsoft.Xna.Framework.Quaternion.op_Multiply$1 = function (quaternion1, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	result.X = (quaternion1.X * scaleFactor);
	result.Y = (quaternion1.Y * scaleFactor);
	result.Z = (quaternion1.Z * scaleFactor);
	result.W = (quaternion1.W * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Quaternion.op_Division = function (quaternion1, quaternion2) {
	var result = new Microsoft.Xna.Framework.Quaternion();
	var x = quaternion1.X;
	var y = quaternion1.Y;
	var z = quaternion1.Z;
	var w = quaternion1.W;
	var num2 = (1 / ((quaternion2.X * quaternion2.X) + (quaternion2.Y * quaternion2.Y) + (quaternion2.Z * quaternion2.Z) + (quaternion2.W * quaternion2.W)));
	var num3 = (-quaternion2.X * num2);
	var num4 = (-quaternion2.Y * num2);
	var num5 = (-quaternion2.Z * num2);
	var num6 = (quaternion2.W * num2);
	result.X = ((x * num6) + (num3 * w) + ((y * num5) - (z * num4)));
	result.Y = ((y * num6) + (num4 * w) + ((z * num3) - (x * num5)));
	result.Z = ((z * num6) + (num5 * w) + ((x * num4) - (y * num3)));
	result.W = ((w * num6) - ((x * num3) + (y * num4) + (z * num5)));
	return result;
};

Microsoft.Xna.Framework.Quaternion._cctor = function () {
	Microsoft.Xna.Framework.Quaternion._identity = new Microsoft.Xna.Framework.Quaternion(0, 0, 0, 1);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector3, System.Single]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Quaternion]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Normalize", [
		["Normalize$0", [Microsoft.Xna.Framework.Quaternion]], 
		["Normalize$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Conjugate", [
		["Conjugate$0", [Microsoft.Xna.Framework.Quaternion]], 
		["Conjugate$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Inverse", [
		["Inverse$0", [Microsoft.Xna.Framework.Quaternion]], 
		["Inverse$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "CreateFromAxisAngle", [
		["CreateFromAxisAngle$0", [Microsoft.Xna.Framework.Vector3, System.Single]], 
		["CreateFromAxisAngle$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "CreateFromYawPitchRoll", [
		["CreateFromYawPitchRoll$0", [System.Single, System.Single, System.Single]], 
		["CreateFromYawPitchRoll$1", [System.Single, System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "CreateFromRotationMatrix", [
		["CreateFromRotationMatrix$0", [Microsoft.Xna.Framework.Matrix]], 
		["CreateFromRotationMatrix$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Dot", [
		["Dot$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion]], 
		["Dot$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Slerp", [
		["Slerp$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion, System.Single]], 
		["Slerp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Lerp", [
		["Lerp$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion, System.Single]], 
		["Lerp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Concatenate", [
		["Concatenate$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion]], 
		["Concatenate$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Negate", [
		["Negate$0", [Microsoft.Xna.Framework.Quaternion]], 
		["Negate$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Add", [
		["Add$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion]], 
		["Add$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Subtract", [
		["Subtract$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion]], 
		["Subtract$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Multiply", [
		["Multiply$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion]], 
		["Multiply$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]], 
		["Multiply$2", [Microsoft.Xna.Framework.Quaternion, System.Single]], 
		["Multiply$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "Divide", [
		["Divide$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion]], 
		["Divide$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Quaternion, "op_Multiply", [
		["op_Multiply$0", [Microsoft.Xna.Framework.Quaternion, Microsoft.Xna.Framework.Quaternion]], 
		["op_Multiply$1", [Microsoft.Xna.Framework.Quaternion, System.Single]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Quaternion, "Identity", {
		get: Microsoft.Xna.Framework.Quaternion.get_Identity
	});
Microsoft.Xna.Framework.Quaternion._cctor();
Microsoft.Xna.Framework.Quaternion.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Quaternion));

Object.seal(Microsoft.Xna.Framework.Quaternion.prototype);
Object.seal(Microsoft.Xna.Framework.Quaternion);
Microsoft.Xna.Framework.Ray.prototype.__StructFields__ = {
	Position: Microsoft.Xna.Framework.Vector3, 
	Direction: Microsoft.Xna.Framework.Vector3
};
Microsoft.Xna.Framework.Ray.prototype._ctor = function (position, direction) {
	this.Position = position;
	this.Direction = direction;
};

Microsoft.Xna.Framework.Ray.prototype.Equals$0 = function (other) {
	return (!((this.Position.X !== other.Position.X) || 
			(this.Position.Y !== other.Position.Y) || 
			(this.Position.Z !== other.Position.Z) || 
			(this.Direction.X !== other.Direction.X) || 
			(this.Direction.Y !== other.Direction.Y)) && (this.Direction.Z === other.Direction.Z));
};

Microsoft.Xna.Framework.Ray.prototype.Equals$1 = function (obj) {
	var result = false;

	if (!((obj !== null) || (JSIL.TryCast(obj, Microsoft.Xna.Framework.Ray.MemberwiseClone()) !== new Microsoft.Xna.Framework.Ray()))) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Ray.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Ray.prototype.GetHashCode = function () {
	return (this.Position.GetHashCode() + this.Direction.GetHashCode());
};

Microsoft.Xna.Framework.Ray.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{{Position:{0} Direction:{1}}}", [this.Position.toString(), this.Direction.toString()]);
};

Microsoft.Xna.Framework.Ray.prototype.Intersects$0 = function (box) {
	return box.Intersects(this);
};

Microsoft.Xna.Framework.Ray.prototype.Intersects$1 = function (/* ref */ box, /* ref */ result) {
	box.Intersects(/* ref */ this, /* ref */ result);
};

Microsoft.Xna.Framework.Ray.prototype.Intersects$2 = function (frustum) {

	if (Microsoft.Xna.Framework.BoundingFrustum.op_Equality(frustum, null)) {
		throw new System.ArgumentNullException("frustum");
	}
	return frustum.Intersects(this);
};

Microsoft.Xna.Framework.Ray.prototype.Intersects$3 = function (plane) {
	var num = ((plane.Normal.X * this.Direction.X) + (plane.Normal.Y * this.Direction.Y) + (plane.Normal.Z * this.Direction.Z));

	if (System.Math.Abs(num) < 9.9999997473787516E-06) {
		return new (System.Nullable$b1.Of(System.Single)) ();
	}
	var num3 = ((-plane.D - ((plane.Normal.X * this.Position.X) + (plane.Normal.Y * this.Position.Y) + (plane.Normal.Z * this.Position.Z))) / num);

	if (num3 < 0) {

		if (num3 < -9.9999997473787516E-06) {
			return new (System.Nullable$b1.Of(System.Single)) ();
		}
		num3 = 0;
	}
	return new (System.Nullable$b1.Of(System.Single)) (num3);
};

Microsoft.Xna.Framework.Ray.prototype.Intersects$4 = function (/* ref */ plane, /* ref */ result) {
	var num = ((plane.Normal.X * this.Direction.X) + (plane.Normal.Y * this.Direction.Y) + (plane.Normal.Z * this.Direction.Z));

	if (System.Math.Abs(num) < 9.9999997473787516E-06) {
		result.value = new (System.Nullable$b1.Of(System.Single)) ();
		return ;
	}
	var num3 = ((-plane.D - ((plane.Normal.X * this.Position.X) + (plane.Normal.Y * this.Position.Y) + (plane.Normal.Z * this.Position.Z))) / num);

	if (num3 < 0) {

		if (num3 < -9.9999997473787516E-06) {
			result.value = new (System.Nullable$b1.Of(System.Single)) ();
			return ;
		}
		result.value = new (System.Nullable$b1.Of(System.Single)) (0);
	}
	result.value = new (System.Nullable$b1.Of(System.Single)) (num3);
};

Microsoft.Xna.Framework.Ray.prototype.Intersects$5 = function (sphere) {
	var num = (sphere.Center.X - this.Position.X);
	var num2 = (sphere.Center.Y - this.Position.Y);
	var num3 = (sphere.Center.Z - this.Position.Z);
	var num4 = ((num * num) + (num2 * num2) + (num3 * num3));
	var num5 = (sphere.Radius * sphere.Radius);

	if (num4 <= num5) {
		return new (System.Nullable$b1.Of(System.Single)) (0);
	}
	var num6 = ((num * this.Direction.X) + (num2 * this.Direction.Y) + (num3 * this.Direction.Z));

	if (num6 < 0) {
		return new (System.Nullable$b1.Of(System.Single)) ();
	}
	var num7 = (num4 - (num6 * num6));

	if (num7 > num5) {
		return new (System.Nullable$b1.Of(System.Single)) ();
	}
	return new (System.Nullable$b1.Of(System.Single)) ((num6 - JSIL.Cast(System.Math.Sqrt((num5 - num7)), System.Single)));
};

Microsoft.Xna.Framework.Ray.prototype.Intersects$6 = function (/* ref */ sphere, /* ref */ result) {
	var num = (sphere.Center.X - this.Position.X);
	var num2 = (sphere.Center.Y - this.Position.Y);
	var num3 = (sphere.Center.Z - this.Position.Z);
	var num4 = ((num * num) + (num2 * num2) + (num3 * num3));
	var num5 = (sphere.Radius * sphere.Radius);

	if (num4 <= num5) {
		result.value = new (System.Nullable$b1.Of(System.Single)) (0);
		return ;
	}
	result.value = new (System.Nullable$b1.Of(System.Single)) ();
	var num6 = ((num * this.Direction.X) + (num2 * this.Direction.Y) + (num3 * this.Direction.Z));

	if (num6 < 0) {
		return ;
	}
	var num7 = (num4 - (num6 * num6));

	if (num7 > num5) {
		return ;
	}
	result.value = new (System.Nullable$b1.Of(System.Single)) ((num6 - JSIL.Cast(System.Math.Sqrt((num5 - num7)), System.Single)));
};

Microsoft.Xna.Framework.Ray.op_Equality = function (a, b) {
	return (!((a.Position.X !== b.Position.X) || 
			(a.Position.Y !== b.Position.Y) || 
			(a.Position.Z !== b.Position.Z) || 
			(a.Direction.X !== b.Direction.X) || 
			(a.Direction.Y !== b.Direction.Y)) && (a.Direction.Z === b.Direction.Z));
};

Microsoft.Xna.Framework.Ray.op_Inequality = function (a, b) {
	return ((a.Position.X !== b.Position.X) || 
		(a.Position.Y !== b.Position.Y) || 
		(a.Position.Z !== b.Position.Z) || 
		(a.Direction.X !== b.Direction.X) || 
		(a.Direction.Y !== b.Direction.Y) || (a.Direction.Z !== b.Direction.Z));
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Ray.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Ray]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Ray.prototype, "Intersects", [
		["Intersects$0", [Microsoft.Xna.Framework.BoundingBox]], 
		["Intersects$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingBox), JSIL.Reference.Of(System.Nullable$b1.Of(System.Single))]], 
		["Intersects$2", [Microsoft.Xna.Framework.BoundingFrustum]], 
		["Intersects$3", [Microsoft.Xna.Framework.Plane]], 
		["Intersects$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.Plane), JSIL.Reference.Of(System.Nullable$b1.Of(System.Single))]], 
		["Intersects$5", [Microsoft.Xna.Framework.BoundingSphere]], 
		["Intersects$6", [JSIL.Reference.Of(Microsoft.Xna.Framework.BoundingSphere), JSIL.Reference.Of(System.Nullable$b1.Of(System.Single))]]
	]
);
Microsoft.Xna.Framework.Ray.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Ray));

Object.seal(Microsoft.Xna.Framework.Ray.prototype);
Object.seal(Microsoft.Xna.Framework.Ray);
Microsoft.Xna.Framework.Rectangle.prototype.X = 0;
Microsoft.Xna.Framework.Rectangle.prototype.Y = 0;
Microsoft.Xna.Framework.Rectangle.prototype.Width = 0;
Microsoft.Xna.Framework.Rectangle.prototype.Height = 0;
Microsoft.Xna.Framework.Rectangle._empty = new Microsoft.Xna.Framework.Rectangle();
Microsoft.Xna.Framework.Rectangle.prototype.get_Left = function () {
	return this.X;
};

Microsoft.Xna.Framework.Rectangle.prototype.get_Right = function () {
	return (this.X + this.Width);
};

Microsoft.Xna.Framework.Rectangle.prototype.get_Top = function () {
	return this.Y;
};

Microsoft.Xna.Framework.Rectangle.prototype.get_Bottom = function () {
	return (this.Y + this.Height);
};

Microsoft.Xna.Framework.Rectangle.prototype.get_Location = function () {
	return new Microsoft.Xna.Framework.Point(this.X, this.Y);
};

Microsoft.Xna.Framework.Rectangle.prototype.set_Location = function (value) {
	this.X = value.X;
	this.Y = value.Y;
};

Microsoft.Xna.Framework.Rectangle.prototype.get_Center = function () {
	return new Microsoft.Xna.Framework.Point((this.X + Math.floor(this.Width / 2)), (this.Y + Math.floor(this.Height / 2)));
};

Microsoft.Xna.Framework.Rectangle.get_Empty = function () {
	return Microsoft.Xna.Framework.Rectangle._empty;
};

Microsoft.Xna.Framework.Rectangle.prototype.get_IsEmpty = function () {
	return (!(this.Width || 
			this.Height || 
			this.X) && (this.Y === 0));
};

Microsoft.Xna.Framework.Rectangle.prototype._ctor = function (x, y, width, height) {
	this.X = x;
	this.Y = y;
	this.Width = width;
	this.Height = height;
};

Microsoft.Xna.Framework.Rectangle.prototype.Offset$0 = function (amount) {
	this.X += amount.X;
	this.Y += amount.Y;
};

Microsoft.Xna.Framework.Rectangle.prototype.Offset$1 = function (offsetX, offsetY) {
	this.X += offsetX;
	this.Y += offsetY;
};

Microsoft.Xna.Framework.Rectangle.prototype.Inflate = function (horizontalAmount, verticalAmount) {
	this.X -= horizontalAmount;
	this.Y -= verticalAmount;
	this.Width += (horizontalAmount * 2);
	this.Height += (verticalAmount * 2);
};

Microsoft.Xna.Framework.Rectangle.prototype.Contains$0 = function (x, y) {
	return (!((this.X > x) || 
			(x >= (this.X + this.Width)) || 
			(this.Y > y)) && (y < (this.Y + this.Height)));
};

Microsoft.Xna.Framework.Rectangle.prototype.Contains$1 = function (value) {
	return (!((this.X > value.X) || 
			(value.X >= (this.X + this.Width)) || 
			(this.Y > value.Y)) && (value.Y < (this.Y + this.Height)));
};

Microsoft.Xna.Framework.Rectangle.prototype.Contains$2 = function (/* ref */ value, /* ref */ result) {
	result.value = (!((this.X > value.X) || 
			(value.X >= (this.X + this.Width)) || 
			(this.Y > value.Y)) && 
		(value.Y < (this.Y + this.Height)));
};

Microsoft.Xna.Framework.Rectangle.prototype.Contains$3 = function (value) {
	return (!((this.X > value.X) || 
			((value.X + value.Width) > (this.X + this.Width)) || 
			(this.Y > value.Y)) && ((value.Y + value.Height) <= (this.Y + this.Height)));
};

Microsoft.Xna.Framework.Rectangle.prototype.Contains$4 = function (/* ref */ value, /* ref */ result) {
	result.value = (!((this.X > value.X) || 
			((value.X + value.Width) > (this.X + this.Width)) || 
			(this.Y > value.Y)) && 
		((value.Y + value.Height) <= (this.Y + this.Height)));
};

Microsoft.Xna.Framework.Rectangle.prototype.Intersects$0 = function (value) {
	return (!((value.X >= (this.X + this.Width)) || 
			(this.X >= (value.X + value.Width)) || 
			(value.Y >= (this.Y + this.Height))) && (this.Y < (value.Y + value.Height)));
};

Microsoft.Xna.Framework.Rectangle.prototype.Intersects$1 = function (/* ref */ value, /* ref */ result) {
	result.value = (!((value.X >= (this.X + this.Width)) || 
			(this.X >= (value.X + value.Width)) || 
			(value.Y >= (this.Y + this.Height))) && 
		(this.Y < (value.Y + value.Height)));
};

Microsoft.Xna.Framework.Rectangle.Intersect$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Rectangle();
	var num = (value1.X + value1.Width);
	var num2 = (value2.X + value2.Width);
	var num3 = (value1.Y + value1.Height);
	var num4 = (value2.Y + value2.Height);
	var num5 = (value1.X > value2.X) ? value1.X : value2.X;
	var num6 = (value1.Y > value2.Y) ? value1.Y : value2.Y;
	var num7 = (num < num2) ? num : num2;
	var num8 = (num3 < num4) ? num3 : num4;

	if (!((num7 <= num5) || (num8 <= num6))) {
		result.X = num5;
		result.Y = num6;
		result.Width = (num7 - num5);
		result.Height = (num8 - num6);
	} else {
		result.X = 0;
		result.Y = 0;
		result.Width = 0;
		result.Height = 0;
	}
	return result;
};

Microsoft.Xna.Framework.Rectangle.Intersect$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var num = (value1.X + value1.Width);
	var num2 = (value2.X + value2.Width);
	var num3 = (value1.Y + value1.Height);
	var num4 = (value2.Y + value2.Height);
	var num5 = (value1.X > value2.X) ? value1.X : value2.X;
	var num6 = (value1.Y > value2.Y) ? value1.Y : value2.Y;
	var num7 = (num < num2) ? num : num2;
	var num8 = (num3 < num4) ? num3 : num4;

	if (!((num7 <= num5) || (num8 <= num6))) {
		result.X = num5;
		result.Y = num6;
		result.Width = (num7 - num5);
		result.Height = (num8 - num6);
		return ;
	}
	result.X = 0;
	result.Y = 0;
	result.Width = 0;
	result.Height = 0;
};

Microsoft.Xna.Framework.Rectangle.Union$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Rectangle();
	var num = (value1.X + value1.Width);
	var num2 = (value2.X + value2.Width);
	var num3 = (value1.Y + value1.Height);
	var num4 = (value2.Y + value2.Height);
	var num5 = (value1.X < value2.X) ? value1.X : value2.X;
	var num6 = (value1.Y < value2.Y) ? value1.Y : value2.Y;
	var num7 = (num > num2) ? num : num2;
	var num8 = (num3 > num4) ? num3 : num4;
	result.X = num5;
	result.Y = num6;
	result.Width = (num7 - num5);
	result.Height = (num8 - num6);
	return result;
};

Microsoft.Xna.Framework.Rectangle.Union$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var num = (value1.X + value1.Width);
	var num2 = (value2.X + value2.Width);
	var num3 = (value1.Y + value1.Height);
	var num4 = (value2.Y + value2.Height);
	var num5 = (value1.X < value2.X) ? value1.X : value2.X;
	var num6 = (value1.Y < value2.Y) ? value1.Y : value2.Y;
	var num7 = (num > num2) ? num : num2;
	var num8 = (num3 > num4) ? num3 : num4;
	result.X = num5;
	result.Y = num6;
	result.Width = (num7 - num5);
	result.Height = (num8 - num6);
};

Microsoft.Xna.Framework.Rectangle.prototype.Equals$0 = function (other) {
	return (!((this.X !== other.X) || 
			(this.Y !== other.Y) || 
			(this.Width !== other.Width)) && (this.Height === other.Height));
};

Microsoft.Xna.Framework.Rectangle.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Rectangle.MemberwiseClone()) === new Microsoft.Xna.Framework.Rectangle()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Rectangle.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Rectangle.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return System.String.Format(currentCulture, "{{X:{0} Y:{1} Width:{2} Height:{3}}}", [this.X.toString(currentCulture), this.Y.toString(currentCulture), this.Width.toString(currentCulture), this.Height.toString(currentCulture)]);
};

Microsoft.Xna.Framework.Rectangle.prototype.GetHashCode = function () {
	return (this.X.GetHashCode() + this.Y.GetHashCode() + this.Width.GetHashCode() + this.Height.GetHashCode());
};

Microsoft.Xna.Framework.Rectangle.op_Equality = function (a, b) {
	return (!((a.X !== b.X) || 
			(a.Y !== b.Y) || 
			(a.Width !== b.Width)) && (a.Height === b.Height));
};

Microsoft.Xna.Framework.Rectangle.op_Inequality = function (a, b) {
	return ((a.X !== b.X) || 
		(a.Y !== b.Y) || 
		(a.Width !== b.Width) || (a.Height !== b.Height));
};

Microsoft.Xna.Framework.Rectangle._cctor = function () {
	Microsoft.Xna.Framework.Rectangle._empty = new Microsoft.Xna.Framework.Rectangle();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Rectangle.prototype, "Offset", [
		["Offset$0", [Microsoft.Xna.Framework.Point]], 
		["Offset$1", [System.Int32, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Rectangle.prototype, "Contains", [
		["Contains$0", [System.Int32, System.Int32]], 
		["Contains$1", [Microsoft.Xna.Framework.Point]], 
		["Contains$2", [JSIL.Reference.Of(Microsoft.Xna.Framework.Point), JSIL.Reference.Of(System.Boolean)]], 
		["Contains$3", [Microsoft.Xna.Framework.Rectangle]], 
		["Contains$4", [JSIL.Reference.Of(Microsoft.Xna.Framework.Rectangle), JSIL.Reference.Of(System.Boolean)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Rectangle.prototype, "Intersects", [
		["Intersects$0", [Microsoft.Xna.Framework.Rectangle]], 
		["Intersects$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Rectangle), JSIL.Reference.Of(System.Boolean)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Rectangle, "Intersect", [
		["Intersect$0", [Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Rectangle]], 
		["Intersect$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Rectangle), JSIL.Reference.Of(Microsoft.Xna.Framework.Rectangle), JSIL.Reference.Of(Microsoft.Xna.Framework.Rectangle)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Rectangle, "Union", [
		["Union$0", [Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Rectangle]], 
		["Union$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Rectangle), JSIL.Reference.Of(Microsoft.Xna.Framework.Rectangle), JSIL.Reference.Of(Microsoft.Xna.Framework.Rectangle)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Rectangle.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Rectangle]], 
		["Equals$1", [System.Object]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Rectangle.prototype, "Left", {
		get: Microsoft.Xna.Framework.Rectangle.prototype.get_Left
	});
Object.defineProperty(Microsoft.Xna.Framework.Rectangle.prototype, "Right", {
		get: Microsoft.Xna.Framework.Rectangle.prototype.get_Right
	});
Object.defineProperty(Microsoft.Xna.Framework.Rectangle.prototype, "Top", {
		get: Microsoft.Xna.Framework.Rectangle.prototype.get_Top
	});
Object.defineProperty(Microsoft.Xna.Framework.Rectangle.prototype, "Bottom", {
		get: Microsoft.Xna.Framework.Rectangle.prototype.get_Bottom
	});
Object.defineProperty(Microsoft.Xna.Framework.Rectangle.prototype, "Location", {
		get: Microsoft.Xna.Framework.Rectangle.prototype.get_Location, 
		set: Microsoft.Xna.Framework.Rectangle.prototype.set_Location
	});
Object.defineProperty(Microsoft.Xna.Framework.Rectangle.prototype, "Center", {
		get: Microsoft.Xna.Framework.Rectangle.prototype.get_Center
	});
Object.defineProperty(Microsoft.Xna.Framework.Rectangle, "Empty", {
		get: Microsoft.Xna.Framework.Rectangle.get_Empty
	});
Object.defineProperty(Microsoft.Xna.Framework.Rectangle.prototype, "IsEmpty", {
		get: Microsoft.Xna.Framework.Rectangle.prototype.get_IsEmpty
	});
Microsoft.Xna.Framework.Rectangle._cctor();
Microsoft.Xna.Framework.Rectangle.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Rectangle));

Object.seal(Microsoft.Xna.Framework.Rectangle.prototype);
Object.seal(Microsoft.Xna.Framework.Rectangle);
Microsoft.Xna.Framework.Vector2.prototype.X = 0;
Microsoft.Xna.Framework.Vector2.prototype.Y = 0;
Microsoft.Xna.Framework.Vector2._zero = new Microsoft.Xna.Framework.Vector2();
Microsoft.Xna.Framework.Vector2._one = new Microsoft.Xna.Framework.Vector2();
Microsoft.Xna.Framework.Vector2._unitX = new Microsoft.Xna.Framework.Vector2();
Microsoft.Xna.Framework.Vector2._unitY = new Microsoft.Xna.Framework.Vector2();
Microsoft.Xna.Framework.Vector2.get_Zero = function () {
	return Microsoft.Xna.Framework.Vector2._zero;
};

Microsoft.Xna.Framework.Vector2.get_One = function () {
	return Microsoft.Xna.Framework.Vector2._one;
};

Microsoft.Xna.Framework.Vector2.get_UnitX = function () {
	return Microsoft.Xna.Framework.Vector2._unitX;
};

Microsoft.Xna.Framework.Vector2.get_UnitY = function () {
	return Microsoft.Xna.Framework.Vector2._unitY;
};

Microsoft.Xna.Framework.Vector2.prototype._ctor$0 = function (x, y) {
	this.X = x;
	this.Y = y;
};

Microsoft.Xna.Framework.Vector2.prototype._ctor$1 = function (value) {
	this.Y = value;
	this.X = value;
};

Microsoft.Xna.Framework.Vector2.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return System.String.Format(currentCulture, "{{X:{0} Y:{1}}}", [this.X.toString(currentCulture), this.Y.toString(currentCulture)]);
};

Microsoft.Xna.Framework.Vector2.prototype.Equals$0 = function (other) {
	return ((this.X === other.X) && (this.Y === other.Y));
};

Microsoft.Xna.Framework.Vector2.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Vector2.MemberwiseClone()) === new Microsoft.Xna.Framework.Vector2()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Vector2.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Vector2.prototype.GetHashCode = function () {
	return (this.X.GetHashCode() + this.Y.GetHashCode());
};

Microsoft.Xna.Framework.Vector2.prototype.length = function () {
	return JSIL.Cast(System.Math.Sqrt(((this.X * this.X) + (this.Y * this.Y))), System.Single);
};

Microsoft.Xna.Framework.Vector2.prototype.LengthSquared = function () {
	return ((this.X * this.X) + (this.Y * this.Y));
};

Microsoft.Xna.Framework.Vector2.Distance$0 = function (value1, value2) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	return JSIL.Cast(System.Math.Sqrt(((num * num) + (num2 * num2))), System.Single);
};

Microsoft.Xna.Framework.Vector2.Distance$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	result.value = JSIL.Cast(System.Math.Sqrt(((num * num) + (num2 * num2))), System.Single);
};

Microsoft.Xna.Framework.Vector2.DistanceSquared$0 = function (value1, value2) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	return ((num * num) + (num2 * num2));
};

Microsoft.Xna.Framework.Vector2.DistanceSquared$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	result.value = ((num * num) + (num2 * num2));
};

Microsoft.Xna.Framework.Vector2.Dot$0 = function (value1, value2) {
	return ((value1.X * value2.X) + (value1.Y * value2.Y));
};

Microsoft.Xna.Framework.Vector2.Dot$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.value = ((value1.X * value2.X) + (value1.Y * value2.Y));
};

Microsoft.Xna.Framework.Vector2.prototype.Normalize = function () {
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((this.X * this.X) + (this.Y * this.Y))), System.Single));
	this.X *= num2;
	this.Y *= num2;
};

Microsoft.Xna.Framework.Vector2.Normalize$0 = function (value) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((value.X * value.X) + (value.Y * value.Y))), System.Single));
	result.X = (value.X * num2);
	result.Y = (value.Y * num2);
	return result;
};

Microsoft.Xna.Framework.Vector2.Normalize$1 = function (/* ref */ value, /* ref */ result) {
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((value.X * value.X) + (value.Y * value.Y))), System.Single));
	result.X = (value.X * num2);
	result.Y = (value.Y * num2);
};

Microsoft.Xna.Framework.Vector2.Reflect$0 = function (vector, normal) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var num = ((vector.X * normal.X) + (vector.Y * normal.Y));
	result.X = (vector.X - (2 * num * normal.X));
	result.Y = (vector.Y - (2 * num * normal.Y));
	return result;
};

Microsoft.Xna.Framework.Vector2.Reflect$1 = function (/* ref */ vector, /* ref */ normal, /* ref */ result) {
	var num = ((vector.X * normal.X) + (vector.Y * normal.Y));
	result.X = (vector.X - (2 * num * normal.X));
	result.Y = (vector.Y - (2 * num * normal.Y));
};

Microsoft.Xna.Framework.Vector2.Min$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X < value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
	return result;
};

Microsoft.Xna.Framework.Vector2.Min$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X < value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
};

Microsoft.Xna.Framework.Vector2.Max$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X > value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
	return result;
};

Microsoft.Xna.Framework.Vector2.Max$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X > value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
};

Microsoft.Xna.Framework.Vector2.Clamp$0 = function (value1, min, max) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var num = value1.X;
	num = (num > max.X) ? max.X : num;
	num = (num < min.X) ? min.X : num;
	var num2 = value1.Y;
	num2 = (num2 > max.Y) ? max.Y : num2;
	num2 = (num2 < min.Y) ? min.Y : num2;
	result.X = num;
	result.Y = num2;
	return result;
};

Microsoft.Xna.Framework.Vector2.Clamp$1 = function (/* ref */ value1, /* ref */ min, /* ref */ max, /* ref */ result) {
	var num = value1.X;
	num = (num > max.X) ? max.X : num;
	num = (num < min.X) ? min.X : num;
	var num2 = value1.Y;
	num2 = (num2 > max.Y) ? max.Y : num2;
	num2 = (num2 < min.Y) ? min.Y : num2;
	result.X = num;
	result.Y = num2;
};

Microsoft.Xna.Framework.Vector2.Lerp$0 = function (value1, value2, amount) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	return result;
};

Microsoft.Xna.Framework.Vector2.Lerp$1 = function (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
};

Microsoft.Xna.Framework.Vector2.Barycentric$0 = function (value1, value2, value3, amount1, amount2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X + (amount1 * (value2.X - value1.X)) + (amount2 * (value3.X - value1.X)));
	result.Y = (value1.Y + (amount1 * (value2.Y - value1.Y)) + (amount2 * (value3.Y - value1.Y)));
	return result;
};

Microsoft.Xna.Framework.Vector2.Barycentric$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ value3, amount1, amount2, /* ref */ result) {
	result.X = (value1.X + (amount1 * (value2.X - value1.X)) + (amount2 * (value3.X - value1.X)));
	result.Y = (value1.Y + (amount1 * (value2.Y - value1.Y)) + (amount2 * (value3.Y - value1.Y)));
};

Microsoft.Xna.Framework.Vector2.SmoothStep$0 = function (value1, value2, amount) {
	var result = new Microsoft.Xna.Framework.Vector2();
	amount = (amount > 1) ? 1 : (amount < 0) ? 0 : amount;
	amount = (amount * amount * (3 - (2 * amount)));
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	return result;
};

Microsoft.Xna.Framework.Vector2.SmoothStep$1 = function (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
	amount = (amount > 1) ? 1 : (amount < 0) ? 0 : amount;
	amount = (amount * amount * (3 - (2 * amount)));
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
};

Microsoft.Xna.Framework.Vector2.CatmullRom$0 = function (value1, value2, value3, value4, amount) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var num = (amount * amount);
	var num2 = (amount * num);
	result.X = (0.5 * ((2 * value2.X) + ((-value1.X + value3.X) * amount) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2)));
	result.Y = (0.5 * ((2 * value2.Y) + ((-value1.Y + value3.Y) * amount) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2)));
	return result;
};

Microsoft.Xna.Framework.Vector2.CatmullRom$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ value3, /* ref */ value4, amount, /* ref */ result) {
	var num = (amount * amount);
	var num2 = (amount * num);
	result.X = (0.5 * ((2 * value2.X) + ((-value1.X + value3.X) * amount) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2)));
	result.Y = (0.5 * ((2 * value2.Y) + ((-value1.Y + value3.Y) * amount) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2)));
};

Microsoft.Xna.Framework.Vector2.Hermite$0 = function (value1, tangent1, value2, tangent2, amount) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var num = (amount * amount);
	var num2 = (amount * num);
	var num3 = (((2 * num2) - (3 * num)) + 1);
	var num4 = ((-2 * num2) + (3 * num));
	var num5 = ((num2 - (2 * num)) + amount);
	var num6 = (num2 - num);
	result.X = ((value1.X * num3) + (value2.X * num4) + (tangent1.X * num5) + (tangent2.X * num6));
	result.Y = ((value1.Y * num3) + (value2.Y * num4) + (tangent1.Y * num5) + (tangent2.Y * num6));
	return result;
};

Microsoft.Xna.Framework.Vector2.Hermite$1 = function (/* ref */ value1, /* ref */ tangent1, /* ref */ value2, /* ref */ tangent2, amount, /* ref */ result) {
	var num = (amount * amount);
	var num2 = (amount * num);
	var num3 = (((2 * num2) - (3 * num)) + 1);
	var num4 = ((-2 * num2) + (3 * num));
	var num5 = ((num2 - (2 * num)) + amount);
	var num6 = (num2 - num);
	result.X = ((value1.X * num3) + (value2.X * num4) + (tangent1.X * num5) + (tangent2.X * num6));
	result.Y = ((value1.Y * num3) + (value2.Y * num4) + (tangent1.Y * num5) + (tangent2.Y * num6));
};

Microsoft.Xna.Framework.Vector2.Transform$0 = function (position, matrix) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21) + matrix.M41);
	result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22) + matrix.M42);
	return result;
};

Microsoft.Xna.Framework.Vector2.Transform$1 = function (/* ref */ position, /* ref */ matrix, /* ref */ result) {
	result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21) + matrix.M41);
	result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22) + matrix.M42);
};

Microsoft.Xna.Framework.Vector2.TransformNormal$0 = function (normal, matrix) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = ((normal.X * matrix.M11) + (normal.Y * matrix.M21));
	result.Y = ((normal.X * matrix.M12) + (normal.Y * matrix.M22));
	return result;
};

Microsoft.Xna.Framework.Vector2.TransformNormal$1 = function (/* ref */ normal, /* ref */ matrix, /* ref */ result) {
	result.X = ((normal.X * matrix.M11) + (normal.Y * matrix.M21));
	result.Y = ((normal.X * matrix.M12) + (normal.Y * matrix.M22));
};

Microsoft.Xna.Framework.Vector2.Transform$2 = function (value, rotation) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num3);
	var num6 = (rotation.X * num2);
	var num8 = (rotation.Z * num3);
	result.X = ((value.X * (1 - (rotation.Y * num2) - num8)) + (value.Y * (num6 - num4)));
	result.Y = ((value.X * (num6 + num4)) + (value.Y * (1 - (rotation.X * (rotation.X + rotation.X)) - num8)));
	return result;
};

Microsoft.Xna.Framework.Vector2.Transform$3 = function (/* ref */ value, /* ref */ rotation, /* ref */ result) {
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num3);
	var num6 = (rotation.X * num2);
	var num8 = (rotation.Z * num3);
	result.X = ((value.X * (1 - (rotation.Y * num2) - num8)) + (value.Y * (num6 - num4)));
	result.Y = ((value.X * (num6 + num4)) + (value.Y * (1 - (rotation.X * (rotation.X + rotation.X)) - num8)));
};

Microsoft.Xna.Framework.Vector2.Transform$4 = function (sourceArray, /* ref */ matrix, destinationArray) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (destinationArray.length < sourceArray.length) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var i = 0;

__while0__: 
	while (i < sourceArray.length) {
		var x = sourceArray[i].X;
		var y = sourceArray[i].Y;
		destinationArray[i].X = ((x * matrix.M11) + (y * matrix.M21) + matrix.M41);
		destinationArray[i].Y = ((x * matrix.M12) + (y * matrix.M22) + matrix.M42);
		++i;
	}
};

Microsoft.Xna.Framework.Vector2.Transform$5 = function (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (sourceArray.length < (sourceIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughSourceSize);
	}

	if (destinationArray.length < (destinationIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}

__while0__: 
	while (length > 0) {
		var x = sourceArray[sourceIndex].X;
		var y = sourceArray[sourceIndex].Y;
		destinationArray[destinationIndex].X = ((x * matrix.M11) + (y * matrix.M21) + matrix.M41);
		destinationArray[destinationIndex].Y = ((x * matrix.M12) + (y * matrix.M22) + matrix.M42);
		++sourceIndex;
		++destinationIndex;
		--length;
	}
};

Microsoft.Xna.Framework.Vector2.TransformNormal$2 = function (sourceArray, /* ref */ matrix, destinationArray) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (destinationArray.length < sourceArray.length) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var i = 0;

__while0__: 
	while (i < sourceArray.length) {
		var x = sourceArray[i].X;
		var y = sourceArray[i].Y;
		destinationArray[i].X = ((x * matrix.M11) + (y * matrix.M21));
		destinationArray[i].Y = ((x * matrix.M12) + (y * matrix.M22));
		++i;
	}
};

Microsoft.Xna.Framework.Vector2.TransformNormal$3 = function (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (sourceArray.length < (sourceIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughSourceSize);
	}

	if (destinationArray.length < (destinationIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}

__while0__: 
	while (length > 0) {
		var x = sourceArray[sourceIndex].X;
		var y = sourceArray[sourceIndex].Y;
		destinationArray[destinationIndex].X = ((x * matrix.M11) + (y * matrix.M21));
		destinationArray[destinationIndex].Y = ((x * matrix.M12) + (y * matrix.M22));
		++sourceIndex;
		++destinationIndex;
		--length;
	}
};

Microsoft.Xna.Framework.Vector2.Transform$6 = function (sourceArray, /* ref */ rotation, destinationArray) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (destinationArray.length < sourceArray.length) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num3);
	var num6 = (rotation.X * num2);
	var num8 = (rotation.Z * num3);
	var i = 0;

__while0__: 
	while (i < sourceArray.length) {
		var x = sourceArray[i].X;
		var y = sourceArray[i].Y;
		destinationArray[i].X = ((x * (1 - (rotation.Y * num2) - num8)) + (y * (num6 - num4)));
		destinationArray[i].Y = ((x * (num6 + num4)) + (y * (1 - (rotation.X * (rotation.X + rotation.X)) - num8)));
		++i;
	}
};

Microsoft.Xna.Framework.Vector2.Transform$7 = function (sourceArray, sourceIndex, /* ref */ rotation, destinationArray, destinationIndex, length) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (sourceArray.length < (sourceIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughSourceSize);
	}

	if (destinationArray.length < (destinationIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num3);
	var num6 = (rotation.X * num2);
	var num8 = (rotation.Z * num3);

__while0__: 
	while (length > 0) {
		var x = sourceArray[sourceIndex].X;
		var y = sourceArray[sourceIndex].Y;
		destinationArray[destinationIndex].X = ((x * (1 - (rotation.Y * num2) - num8)) + (y * (num6 - num4)));
		destinationArray[destinationIndex].Y = ((x * (num6 + num4)) + (y * (1 - (rotation.X * (rotation.X + rotation.X)) - num8)));
		++sourceIndex;
		++destinationIndex;
		--length;
	}
};

Microsoft.Xna.Framework.Vector2.Negate$0 = function (value) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = -value.X;
	result.Y = -value.Y;
	return result;
};

Microsoft.Xna.Framework.Vector2.Negate$1 = function (/* ref */ value, /* ref */ result) {
	result.X = -value.X;
	result.Y = -value.Y;
};

Microsoft.Xna.Framework.Vector2.Add$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
	return result;
};

Microsoft.Xna.Framework.Vector2.Add$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
};

Microsoft.Xna.Framework.Vector2.Subtract$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
	return result;
};

Microsoft.Xna.Framework.Vector2.Subtract$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
};

Microsoft.Xna.Framework.Vector2.Multiply$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
	return result;
};

Microsoft.Xna.Framework.Vector2.Multiply$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
};

Microsoft.Xna.Framework.Vector2.Multiply$2 = function (value1, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X * scaleFactor);
	result.Y = (value1.Y * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector2.Multiply$3 = function (/* ref */ value1, scaleFactor, /* ref */ result) {
	result.X = (value1.X * scaleFactor);
	result.Y = (value1.Y * scaleFactor);
};

Microsoft.Xna.Framework.Vector2.Divide$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
	return result;
};

Microsoft.Xna.Framework.Vector2.Divide$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
};

Microsoft.Xna.Framework.Vector2.Divide$2 = function (value1, divider) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var num = (1 / divider);
	result.X = (value1.X * num);
	result.Y = (value1.Y * num);
	return result;
};

Microsoft.Xna.Framework.Vector2.Divide$3 = function (/* ref */ value1, divider, /* ref */ result) {
	var num = (1 / divider);
	result.X = (value1.X * num);
	result.Y = (value1.Y * num);
};

Microsoft.Xna.Framework.Vector2.op_UnaryNegation = function (value) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = -value.X;
	result.Y = -value.Y;
	return result;
};

Microsoft.Xna.Framework.Vector2.op_Equality = function (value1, value2) {
	return ((value1.X === value2.X) && (value1.Y === value2.Y));
};

Microsoft.Xna.Framework.Vector2.op_Inequality = function (value1, value2) {
	return ((value1.X !== value2.X) || (value1.Y !== value2.Y));
};

Microsoft.Xna.Framework.Vector2.op_Addition = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
	return result;
};

Microsoft.Xna.Framework.Vector2.op_Subtraction = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
	return result;
};

Microsoft.Xna.Framework.Vector2.op_Multiply$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
	return result;
};

Microsoft.Xna.Framework.Vector2.op_Multiply$1 = function (value, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value.X * scaleFactor);
	result.Y = (value.Y * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector2.op_Multiply$2 = function (scaleFactor, value) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value.X * scaleFactor);
	result.Y = (value.Y * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector2.op_Division$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector2();
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
	return result;
};

Microsoft.Xna.Framework.Vector2.op_Division$1 = function (value1, divider) {
	var result = new Microsoft.Xna.Framework.Vector2();
	var num = (1 / divider);
	result.X = (value1.X * num);
	result.Y = (value1.Y * num);
	return result;
};

Microsoft.Xna.Framework.Vector2._cctor = function () {
	Microsoft.Xna.Framework.Vector2._zero = new Microsoft.Xna.Framework.Vector2();
	Microsoft.Xna.Framework.Vector2._one = new Microsoft.Xna.Framework.Vector2(1, 1);
	Microsoft.Xna.Framework.Vector2._unitX = new Microsoft.Xna.Framework.Vector2(1, 0);
	Microsoft.Xna.Framework.Vector2._unitY = new Microsoft.Xna.Framework.Vector2(0, 1);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single]], 
		["_ctor$1", [System.Single]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Vector2]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Distance", [
		["Distance$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Distance$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "DistanceSquared", [
		["DistanceSquared$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["DistanceSquared$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Dot", [
		["Dot$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Dot$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Normalize", [
		["Normalize$0", [Microsoft.Xna.Framework.Vector2]], 
		["Normalize$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Reflect", [
		["Reflect$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Reflect$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Min", [
		["Min$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Min$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Max", [
		["Max$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Max$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Clamp", [
		["Clamp$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Clamp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Lerp", [
		["Lerp$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single]], 
		["Lerp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Barycentric", [
		["Barycentric$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single, System.Single]], 
		["Barycentric$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "SmoothStep", [
		["SmoothStep$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single]], 
		["SmoothStep$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "CatmullRom", [
		["CatmullRom$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single]], 
		["CatmullRom$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Hermite", [
		["Hermite$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2, System.Single]], 
		["Hermite$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Transform", [
		["Transform$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Matrix]], 
		["Transform$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]], 
		["Transform$2", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Quaternion]], 
		["Transform$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]], 
		["Transform$4", [System.Array.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector2)]], 
		["Transform$5", [System.Array.Of(Microsoft.Xna.Framework.Vector2), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector2), System.Int32, System.Int32]], 
		["Transform$6", [System.Array.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Array.Of(Microsoft.Xna.Framework.Vector2)]], 
		["Transform$7", [System.Array.Of(Microsoft.Xna.Framework.Vector2), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Array.Of(Microsoft.Xna.Framework.Vector2), System.Int32, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "TransformNormal", [
		["TransformNormal$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Matrix]], 
		["TransformNormal$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]], 
		["TransformNormal$2", [System.Array.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector2)]], 
		["TransformNormal$3", [System.Array.Of(Microsoft.Xna.Framework.Vector2), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector2), System.Int32, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Negate", [
		["Negate$0", [Microsoft.Xna.Framework.Vector2]], 
		["Negate$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Add", [
		["Add$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Add$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Subtract", [
		["Subtract$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Subtract$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Multiply", [
		["Multiply$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Multiply$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]], 
		["Multiply$2", [Microsoft.Xna.Framework.Vector2, System.Single]], 
		["Multiply$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "Divide", [
		["Divide$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["Divide$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]], 
		["Divide$2", [Microsoft.Xna.Framework.Vector2, System.Single]], 
		["Divide$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "op_Multiply", [
		["op_Multiply$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["op_Multiply$1", [Microsoft.Xna.Framework.Vector2, System.Single]], 
		["op_Multiply$2", [System.Single, Microsoft.Xna.Framework.Vector2]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector2, "op_Division", [
		["op_Division$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Vector2]], 
		["op_Division$1", [Microsoft.Xna.Framework.Vector2, System.Single]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Vector2, "Zero", {
		get: Microsoft.Xna.Framework.Vector2.get_Zero
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector2, "One", {
		get: Microsoft.Xna.Framework.Vector2.get_One
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector2, "UnitX", {
		get: Microsoft.Xna.Framework.Vector2.get_UnitX
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector2, "UnitY", {
		get: Microsoft.Xna.Framework.Vector2.get_UnitY
	});
Microsoft.Xna.Framework.Vector2._cctor();
Microsoft.Xna.Framework.Vector2.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Vector2));

Object.seal(Microsoft.Xna.Framework.Vector2.prototype);
Object.seal(Microsoft.Xna.Framework.Vector2);
Microsoft.Xna.Framework.Vector3.prototype.X = 0;
Microsoft.Xna.Framework.Vector3.prototype.Y = 0;
Microsoft.Xna.Framework.Vector3.prototype.Z = 0;
Microsoft.Xna.Framework.Vector3._zero = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._one = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._unitX = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._unitY = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._unitZ = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._up = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._down = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._right = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._left = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._forward = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3._backward = new Microsoft.Xna.Framework.Vector3();
Microsoft.Xna.Framework.Vector3.get_Zero = function () {
	return Microsoft.Xna.Framework.Vector3._zero;
};

Microsoft.Xna.Framework.Vector3.get_One = function () {
	return Microsoft.Xna.Framework.Vector3._one;
};

Microsoft.Xna.Framework.Vector3.get_UnitX = function () {
	return Microsoft.Xna.Framework.Vector3._unitX;
};

Microsoft.Xna.Framework.Vector3.get_UnitY = function () {
	return Microsoft.Xna.Framework.Vector3._unitY;
};

Microsoft.Xna.Framework.Vector3.get_UnitZ = function () {
	return Microsoft.Xna.Framework.Vector3._unitZ;
};

Microsoft.Xna.Framework.Vector3.get_Up = function () {
	return Microsoft.Xna.Framework.Vector3._up;
};

Microsoft.Xna.Framework.Vector3.get_Down = function () {
	return Microsoft.Xna.Framework.Vector3._down;
};

Microsoft.Xna.Framework.Vector3.get_Right = function () {
	return Microsoft.Xna.Framework.Vector3._right;
};

Microsoft.Xna.Framework.Vector3.get_Left = function () {
	return Microsoft.Xna.Framework.Vector3._left;
};

Microsoft.Xna.Framework.Vector3.get_Forward = function () {
	return Microsoft.Xna.Framework.Vector3._forward;
};

Microsoft.Xna.Framework.Vector3.get_Backward = function () {
	return Microsoft.Xna.Framework.Vector3._backward;
};

Microsoft.Xna.Framework.Vector3.prototype._ctor$0 = function (x, y, z) {
	this.X = x;
	this.Y = y;
	this.Z = z;
};

Microsoft.Xna.Framework.Vector3.prototype._ctor$1 = function (value) {
	this.Z = value;
	this.Y = value;
	this.X = value;
};

Microsoft.Xna.Framework.Vector3.prototype._ctor$2 = function (value, z) {
	this.X = value.X;
	this.Y = value.Y;
	this.Z = z;
};

Microsoft.Xna.Framework.Vector3.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return System.String.Format(currentCulture, "{{X:{0} Y:{1} Z:{2}}}", [this.X.toString(currentCulture), this.Y.toString(currentCulture), this.Z.toString(currentCulture)]);
};

Microsoft.Xna.Framework.Vector3.prototype.Equals$0 = function (other) {
	return (!((this.X !== other.X) || 
			(this.Y !== other.Y)) && (this.Z === other.Z));
};

Microsoft.Xna.Framework.Vector3.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Vector3.MemberwiseClone()) === new Microsoft.Xna.Framework.Vector3()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Vector3.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Vector3.prototype.GetHashCode = function () {
	return (this.X.GetHashCode() + this.Y.GetHashCode() + this.Z.GetHashCode());
};

Microsoft.Xna.Framework.Vector3.prototype.length = function () {
	return JSIL.Cast(System.Math.Sqrt(((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z))), System.Single);
};

Microsoft.Xna.Framework.Vector3.prototype.LengthSquared = function () {
	return ((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z));
};

Microsoft.Xna.Framework.Vector3.Distance$0 = function (value1, value2) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	var num3 = (value1.Z - value2.Z);
	return JSIL.Cast(System.Math.Sqrt(((num * num) + (num2 * num2) + (num3 * num3))), System.Single);
};

Microsoft.Xna.Framework.Vector3.Distance$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	var num3 = (value1.Z - value2.Z);
	result.value = JSIL.Cast(System.Math.Sqrt(((num * num) + (num2 * num2) + (num3 * num3))), System.Single);
};

Microsoft.Xna.Framework.Vector3.DistanceSquared$0 = function (value1, value2) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	var num3 = (value1.Z - value2.Z);
	return ((num * num) + (num2 * num2) + (num3 * num3));
};

Microsoft.Xna.Framework.Vector3.DistanceSquared$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	var num3 = (value1.Z - value2.Z);
	result.value = ((num * num) + (num2 * num2) + (num3 * num3));
};

Microsoft.Xna.Framework.Vector3.Dot$0 = function (vector1, vector2) {
	return ((vector1.X * vector2.X) + (vector1.Y * vector2.Y) + (vector1.Z * vector2.Z));
};

Microsoft.Xna.Framework.Vector3.Dot$1 = function (/* ref */ vector1, /* ref */ vector2, /* ref */ result) {
	result.value = ((vector1.X * vector2.X) + (vector1.Y * vector2.Y) + (vector1.Z * vector2.Z));
};

Microsoft.Xna.Framework.Vector3.prototype.Normalize = function () {
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z))), System.Single));
	this.X *= num2;
	this.Y *= num2;
	this.Z *= num2;
};

Microsoft.Xna.Framework.Vector3.Normalize$0 = function (value) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((value.X * value.X) + (value.Y * value.Y) + (value.Z * value.Z))), System.Single));
	result.X = (value.X * num2);
	result.Y = (value.Y * num2);
	result.Z = (value.Z * num2);
	return result;
};

Microsoft.Xna.Framework.Vector3.Normalize$1 = function (/* ref */ value, /* ref */ result) {
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((value.X * value.X) + (value.Y * value.Y) + (value.Z * value.Z))), System.Single));
	result.X = (value.X * num2);
	result.Y = (value.Y * num2);
	result.Z = (value.Z * num2);
};

Microsoft.Xna.Framework.Vector3.Cross$0 = function (vector1, vector2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = ((vector1.Y * vector2.Z) - (vector1.Z * vector2.Y));
	result.Y = ((vector1.Z * vector2.X) - (vector1.X * vector2.Z));
	result.Z = ((vector1.X * vector2.Y) - (vector1.Y * vector2.X));
	return result;
};

Microsoft.Xna.Framework.Vector3.Cross$1 = function (/* ref */ vector1, /* ref */ vector2, /* ref */ result) {
	result.X = ((vector1.Y * vector2.Z) - (vector1.Z * vector2.Y));
	result.Y = ((vector1.Z * vector2.X) - (vector1.X * vector2.Z));
	result.Z = ((vector1.X * vector2.Y) - (vector1.Y * vector2.X));
};

Microsoft.Xna.Framework.Vector3.Reflect$0 = function (vector, normal) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var num = ((vector.X * normal.X) + (vector.Y * normal.Y) + (vector.Z * normal.Z));
	result.X = (vector.X - (2 * num * normal.X));
	result.Y = (vector.Y - (2 * num * normal.Y));
	result.Z = (vector.Z - (2 * num * normal.Z));
	return result;
};

Microsoft.Xna.Framework.Vector3.Reflect$1 = function (/* ref */ vector, /* ref */ normal, /* ref */ result) {
	var num = ((vector.X * normal.X) + (vector.Y * normal.Y) + (vector.Z * normal.Z));
	result.X = (vector.X - (2 * num * normal.X));
	result.Y = (vector.Y - (2 * num * normal.Y));
	result.Z = (vector.Z - (2 * num * normal.Z));
};

Microsoft.Xna.Framework.Vector3.Min$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X < value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
	result.Z = (value1.Z < value2.Z) ? value1.Z : value2.Z;
	return result;
};

Microsoft.Xna.Framework.Vector3.Min$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X < value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
	result.Z = (value1.Z < value2.Z) ? value1.Z : value2.Z;
};

Microsoft.Xna.Framework.Vector3.Max$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X > value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
	result.Z = (value1.Z > value2.Z) ? value1.Z : value2.Z;
	return result;
};

Microsoft.Xna.Framework.Vector3.Max$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X > value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
	result.Z = (value1.Z > value2.Z) ? value1.Z : value2.Z;
};

Microsoft.Xna.Framework.Vector3.Clamp$0 = function (value1, min, max) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var num = value1.X;
	num = (num > max.X) ? max.X : num;
	num = (num < min.X) ? min.X : num;
	var num2 = value1.Y;
	num2 = (num2 > max.Y) ? max.Y : num2;
	num2 = (num2 < min.Y) ? min.Y : num2;
	var num3 = value1.Z;
	num3 = (num3 > max.Z) ? max.Z : num3;
	num3 = (num3 < min.Z) ? min.Z : num3;
	result.X = num;
	result.Y = num2;
	result.Z = num3;
	return result;
};

Microsoft.Xna.Framework.Vector3.Clamp$1 = function (/* ref */ value1, /* ref */ min, /* ref */ max, /* ref */ result) {
	var num = value1.X;
	num = (num > max.X) ? max.X : num;
	num = (num < min.X) ? min.X : num;
	var num2 = value1.Y;
	num2 = (num2 > max.Y) ? max.Y : num2;
	num2 = (num2 < min.Y) ? min.Y : num2;
	var num3 = value1.Z;
	num3 = (num3 > max.Z) ? max.Z : num3;
	num3 = (num3 < min.Z) ? min.Z : num3;
	result.X = num;
	result.Y = num2;
	result.Z = num3;
};

Microsoft.Xna.Framework.Vector3.Lerp$0 = function (value1, value2, amount) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	result.Z = (value1.Z + ((value2.Z - value1.Z) * amount));
	return result;
};

Microsoft.Xna.Framework.Vector3.Lerp$1 = function (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	result.Z = (value1.Z + ((value2.Z - value1.Z) * amount));
};

Microsoft.Xna.Framework.Vector3.Barycentric$0 = function (value1, value2, value3, amount1, amount2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X + (amount1 * (value2.X - value1.X)) + (amount2 * (value3.X - value1.X)));
	result.Y = (value1.Y + (amount1 * (value2.Y - value1.Y)) + (amount2 * (value3.Y - value1.Y)));
	result.Z = (value1.Z + (amount1 * (value2.Z - value1.Z)) + (amount2 * (value3.Z - value1.Z)));
	return result;
};

Microsoft.Xna.Framework.Vector3.Barycentric$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ value3, amount1, amount2, /* ref */ result) {
	result.X = (value1.X + (amount1 * (value2.X - value1.X)) + (amount2 * (value3.X - value1.X)));
	result.Y = (value1.Y + (amount1 * (value2.Y - value1.Y)) + (amount2 * (value3.Y - value1.Y)));
	result.Z = (value1.Z + (amount1 * (value2.Z - value1.Z)) + (amount2 * (value3.Z - value1.Z)));
};

Microsoft.Xna.Framework.Vector3.SmoothStep$0 = function (value1, value2, amount) {
	var result = new Microsoft.Xna.Framework.Vector3();
	amount = (amount > 1) ? 1 : (amount < 0) ? 0 : amount;
	amount = (amount * amount * (3 - (2 * amount)));
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	result.Z = (value1.Z + ((value2.Z - value1.Z) * amount));
	return result;
};

Microsoft.Xna.Framework.Vector3.SmoothStep$1 = function (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
	amount = (amount > 1) ? 1 : (amount < 0) ? 0 : amount;
	amount = (amount * amount * (3 - (2 * amount)));
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	result.Z = (value1.Z + ((value2.Z - value1.Z) * amount));
};

Microsoft.Xna.Framework.Vector3.CatmullRom$0 = function (value1, value2, value3, value4, amount) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var num = (amount * amount);
	var num2 = (amount * num);
	result.X = (0.5 * ((2 * value2.X) + ((-value1.X + value3.X) * amount) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2)));
	result.Y = (0.5 * ((2 * value2.Y) + ((-value1.Y + value3.Y) * amount) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2)));
	result.Z = (0.5 * ((2 * value2.Z) + ((-value1.Z + value3.Z) * amount) + (((((2 * value1.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num) + ((((-value1.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2)));
	return result;
};

Microsoft.Xna.Framework.Vector3.CatmullRom$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ value3, /* ref */ value4, amount, /* ref */ result) {
	var num = (amount * amount);
	var num2 = (amount * num);
	result.X = (0.5 * ((2 * value2.X) + ((-value1.X + value3.X) * amount) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2)));
	result.Y = (0.5 * ((2 * value2.Y) + ((-value1.Y + value3.Y) * amount) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2)));
	result.Z = (0.5 * ((2 * value2.Z) + ((-value1.Z + value3.Z) * amount) + (((((2 * value1.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num) + ((((-value1.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2)));
};

Microsoft.Xna.Framework.Vector3.Hermite$0 = function (value1, tangent1, value2, tangent2, amount) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var num = (amount * amount);
	var num2 = (amount * num);
	var num3 = (((2 * num2) - (3 * num)) + 1);
	var num4 = ((-2 * num2) + (3 * num));
	var num5 = ((num2 - (2 * num)) + amount);
	var num6 = (num2 - num);
	result.X = ((value1.X * num3) + (value2.X * num4) + (tangent1.X * num5) + (tangent2.X * num6));
	result.Y = ((value1.Y * num3) + (value2.Y * num4) + (tangent1.Y * num5) + (tangent2.Y * num6));
	result.Z = ((value1.Z * num3) + (value2.Z * num4) + (tangent1.Z * num5) + (tangent2.Z * num6));
	return result;
};

Microsoft.Xna.Framework.Vector3.Hermite$1 = function (/* ref */ value1, /* ref */ tangent1, /* ref */ value2, /* ref */ tangent2, amount, /* ref */ result) {
	var num = (amount * amount);
	var num2 = (amount * num);
	var num3 = (((2 * num2) - (3 * num)) + 1);
	var num4 = ((-2 * num2) + (3 * num));
	var num5 = ((num2 - (2 * num)) + amount);
	var num6 = (num2 - num);
	result.X = ((value1.X * num3) + (value2.X * num4) + (tangent1.X * num5) + (tangent2.X * num6));
	result.Y = ((value1.Y * num3) + (value2.Y * num4) + (tangent1.Y * num5) + (tangent2.Y * num6));
	result.Z = ((value1.Z * num3) + (value2.Z * num4) + (tangent1.Z * num5) + (tangent2.Z * num6));
};

Microsoft.Xna.Framework.Vector3.Transform$0 = function (position, matrix) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21) + (position.Z * matrix.M31) + matrix.M41);
	result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22) + (position.Z * matrix.M32) + matrix.M42);
	result.Z = ((position.X * matrix.M13) + (position.Y * matrix.M23) + (position.Z * matrix.M33) + matrix.M43);
	return result;
};

Microsoft.Xna.Framework.Vector3.Transform$1 = function (/* ref */ position, /* ref */ matrix, /* ref */ result) {
	result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21) + (position.Z * matrix.M31) + matrix.M41);
	result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22) + (position.Z * matrix.M32) + matrix.M42);
	result.Z = ((position.X * matrix.M13) + (position.Y * matrix.M23) + (position.Z * matrix.M33) + matrix.M43);
};

Microsoft.Xna.Framework.Vector3.TransformNormal$0 = function (normal, matrix) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = ((normal.X * matrix.M11) + (normal.Y * matrix.M21) + (normal.Z * matrix.M31));
	result.Y = ((normal.X * matrix.M12) + (normal.Y * matrix.M22) + (normal.Z * matrix.M32));
	result.Z = ((normal.X * matrix.M13) + (normal.Y * matrix.M23) + (normal.Z * matrix.M33));
	return result;
};

Microsoft.Xna.Framework.Vector3.TransformNormal$1 = function (/* ref */ normal, /* ref */ matrix, /* ref */ result) {
	result.X = ((normal.X * matrix.M11) + (normal.Y * matrix.M21) + (normal.Z * matrix.M31));
	result.Y = ((normal.X * matrix.M12) + (normal.Y * matrix.M22) + (normal.Z * matrix.M32));
	result.Z = ((normal.X * matrix.M13) + (normal.Y * matrix.M23) + (normal.Z * matrix.M33));
};

Microsoft.Xna.Framework.Vector3.Transform$2 = function (value, rotation) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	result.X = ((value.X * (1 - num10 - num12)) + (value.Y * (num8 - num6)) + (value.Z * (num9 + num5)));
	result.Y = ((value.X * (num8 + num6)) + (value.Y * (1 - num7 - num12)) + (value.Z * (num11 - num4)));
	result.Z = ((value.X * (num9 - num5)) + (value.Y * (num11 + num4)) + (value.Z * (1 - num7 - num10)));
	return result;
};

Microsoft.Xna.Framework.Vector3.Transform$3 = function (/* ref */ value, /* ref */ rotation, /* ref */ result) {
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	result.X = ((value.X * (1 - num10 - num12)) + (value.Y * (num8 - num6)) + (value.Z * (num9 + num5)));
	result.Y = ((value.X * (num8 + num6)) + (value.Y * (1 - num7 - num12)) + (value.Z * (num11 - num4)));
	result.Z = ((value.X * (num9 - num5)) + (value.Y * (num11 + num4)) + (value.Z * (1 - num7 - num10)));
};

Microsoft.Xna.Framework.Vector3.Transform$4 = function (sourceArray, /* ref */ matrix, destinationArray) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (destinationArray.length < sourceArray.length) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var i = 0;

__while0__: 
	while (i < sourceArray.length) {
		var x = sourceArray[i].X;
		var y = sourceArray[i].Y;
		var z = sourceArray[i].Z;
		destinationArray[i].X = ((x * matrix.M11) + (y * matrix.M21) + (z * matrix.M31) + matrix.M41);
		destinationArray[i].Y = ((x * matrix.M12) + (y * matrix.M22) + (z * matrix.M32) + matrix.M42);
		destinationArray[i].Z = ((x * matrix.M13) + (y * matrix.M23) + (z * matrix.M33) + matrix.M43);
		++i;
	}
};

Microsoft.Xna.Framework.Vector3.Transform$5 = function (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (sourceArray.length < (sourceIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughSourceSize);
	}

	if (destinationArray.length < (destinationIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}

__while0__: 
	while (length > 0) {
		var x = sourceArray[sourceIndex].X;
		var y = sourceArray[sourceIndex].Y;
		var z = sourceArray[sourceIndex].Z;
		destinationArray[destinationIndex].X = ((x * matrix.M11) + (y * matrix.M21) + (z * matrix.M31) + matrix.M41);
		destinationArray[destinationIndex].Y = ((x * matrix.M12) + (y * matrix.M22) + (z * matrix.M32) + matrix.M42);
		destinationArray[destinationIndex].Z = ((x * matrix.M13) + (y * matrix.M23) + (z * matrix.M33) + matrix.M43);
		++sourceIndex;
		++destinationIndex;
		--length;
	}
};

Microsoft.Xna.Framework.Vector3.TransformNormal$2 = function (sourceArray, /* ref */ matrix, destinationArray) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (destinationArray.length < sourceArray.length) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var i = 0;

__while0__: 
	while (i < sourceArray.length) {
		var x = sourceArray[i].X;
		var y = sourceArray[i].Y;
		var z = sourceArray[i].Z;
		destinationArray[i].X = ((x * matrix.M11) + (y * matrix.M21) + (z * matrix.M31));
		destinationArray[i].Y = ((x * matrix.M12) + (y * matrix.M22) + (z * matrix.M32));
		destinationArray[i].Z = ((x * matrix.M13) + (y * matrix.M23) + (z * matrix.M33));
		++i;
	}
};

Microsoft.Xna.Framework.Vector3.TransformNormal$3 = function (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (sourceArray.length < (sourceIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughSourceSize);
	}

	if (destinationArray.length < (destinationIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}

__while0__: 
	while (length > 0) {
		var x = sourceArray[sourceIndex].X;
		var y = sourceArray[sourceIndex].Y;
		var z = sourceArray[sourceIndex].Z;
		destinationArray[destinationIndex].X = ((x * matrix.M11) + (y * matrix.M21) + (z * matrix.M31));
		destinationArray[destinationIndex].Y = ((x * matrix.M12) + (y * matrix.M22) + (z * matrix.M32));
		destinationArray[destinationIndex].Z = ((x * matrix.M13) + (y * matrix.M23) + (z * matrix.M33));
		++sourceIndex;
		++destinationIndex;
		--length;
	}
};

Microsoft.Xna.Framework.Vector3.Transform$6 = function (sourceArray, /* ref */ rotation, destinationArray) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (destinationArray.length < sourceArray.length) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	var i = 0;

__while0__: 
	while (i < sourceArray.length) {
		var x = sourceArray[i].X;
		var y = sourceArray[i].Y;
		var z = sourceArray[i].Z;
		destinationArray[i].X = ((x * (1 - num10 - num12)) + (y * (num8 - num6)) + (z * (num9 + num5)));
		destinationArray[i].Y = ((x * (num8 + num6)) + (y * (1 - num7 - num12)) + (z * (num11 - num4)));
		destinationArray[i].Z = ((x * (num9 - num5)) + (y * (num11 + num4)) + (z * (1 - num7 - num10)));
		++i;
	}
};

Microsoft.Xna.Framework.Vector3.Transform$7 = function (sourceArray, sourceIndex, /* ref */ rotation, destinationArray, destinationIndex, length) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (sourceArray.length < (sourceIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughSourceSize);
	}

	if (destinationArray.length < (destinationIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);

__while0__: 
	while (length > 0) {
		var x = sourceArray[sourceIndex].X;
		var y = sourceArray[sourceIndex].Y;
		var z = sourceArray[sourceIndex].Z;
		destinationArray[destinationIndex].X = ((x * (1 - num10 - num12)) + (y * (num8 - num6)) + (z * (num9 + num5)));
		destinationArray[destinationIndex].Y = ((x * (num8 + num6)) + (y * (1 - num7 - num12)) + (z * (num11 - num4)));
		destinationArray[destinationIndex].Z = ((x * (num9 - num5)) + (y * (num11 + num4)) + (z * (1 - num7 - num10)));
		++sourceIndex;
		++destinationIndex;
		--length;
	}
};

Microsoft.Xna.Framework.Vector3.Negate$0 = function (value) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = -value.X;
	result.Y = -value.Y;
	result.Z = -value.Z;
	return result;
};

Microsoft.Xna.Framework.Vector3.Negate$1 = function (/* ref */ value, /* ref */ result) {
	result.X = -value.X;
	result.Y = -value.Y;
	result.Z = -value.Z;
};

Microsoft.Xna.Framework.Vector3.Add$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
	result.Z = (value1.Z + value2.Z);
	return result;
};

Microsoft.Xna.Framework.Vector3.Add$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
	result.Z = (value1.Z + value2.Z);
};

Microsoft.Xna.Framework.Vector3.Subtract$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
	result.Z = (value1.Z - value2.Z);
	return result;
};

Microsoft.Xna.Framework.Vector3.Subtract$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
	result.Z = (value1.Z - value2.Z);
};

Microsoft.Xna.Framework.Vector3.Multiply$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
	result.Z = (value1.Z * value2.Z);
	return result;
};

Microsoft.Xna.Framework.Vector3.Multiply$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
	result.Z = (value1.Z * value2.Z);
};

Microsoft.Xna.Framework.Vector3.Multiply$2 = function (value1, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X * scaleFactor);
	result.Y = (value1.Y * scaleFactor);
	result.Z = (value1.Z * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector3.Multiply$3 = function (/* ref */ value1, scaleFactor, /* ref */ result) {
	result.X = (value1.X * scaleFactor);
	result.Y = (value1.Y * scaleFactor);
	result.Z = (value1.Z * scaleFactor);
};

Microsoft.Xna.Framework.Vector3.Divide$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
	result.Z = (value1.Z / value2.Z);
	return result;
};

Microsoft.Xna.Framework.Vector3.Divide$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
	result.Z = (value1.Z / value2.Z);
};

Microsoft.Xna.Framework.Vector3.Divide$2 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var num = (1 / value2);
	result.X = (value1.X * num);
	result.Y = (value1.Y * num);
	result.Z = (value1.Z * num);
	return result;
};

Microsoft.Xna.Framework.Vector3.Divide$3 = function (/* ref */ value1, value2, /* ref */ result) {
	var num = (1 / value2);
	result.X = (value1.X * num);
	result.Y = (value1.Y * num);
	result.Z = (value1.Z * num);
};

Microsoft.Xna.Framework.Vector3.op_UnaryNegation = function (value) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = -value.X;
	result.Y = -value.Y;
	result.Z = -value.Z;
	return result;
};

Microsoft.Xna.Framework.Vector3.op_Equality = function (value1, value2) {
	return (!((value1.X !== value2.X) || 
			(value1.Y !== value2.Y)) && (value1.Z === value2.Z));
};

Microsoft.Xna.Framework.Vector3.op_Inequality = function (value1, value2) {
	return ((value1.X !== value2.X) || 
		(value1.Y !== value2.Y) || (value1.Z !== value2.Z));
};

Microsoft.Xna.Framework.Vector3.op_Addition = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
	result.Z = (value1.Z + value2.Z);
	return result;
};

Microsoft.Xna.Framework.Vector3.op_Subtraction = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
	result.Z = (value1.Z - value2.Z);
	return result;
};

Microsoft.Xna.Framework.Vector3.op_Multiply$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
	result.Z = (value1.Z * value2.Z);
	return result;
};

Microsoft.Xna.Framework.Vector3.op_Multiply$1 = function (value, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value.X * scaleFactor);
	result.Y = (value.Y * scaleFactor);
	result.Z = (value.Z * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector3.op_Multiply$2 = function (scaleFactor, value) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value.X * scaleFactor);
	result.Y = (value.Y * scaleFactor);
	result.Z = (value.Z * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector3.op_Division$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector3();
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
	result.Z = (value1.Z / value2.Z);
	return result;
};

Microsoft.Xna.Framework.Vector3.op_Division$1 = function (value, divider) {
	var result = new Microsoft.Xna.Framework.Vector3();
	var num = (1 / divider);
	result.X = (value.X * num);
	result.Y = (value.Y * num);
	result.Z = (value.Z * num);
	return result;
};

Microsoft.Xna.Framework.Vector3._cctor = function () {
	Microsoft.Xna.Framework.Vector3._zero = new Microsoft.Xna.Framework.Vector3();
	Microsoft.Xna.Framework.Vector3._one = new Microsoft.Xna.Framework.Vector3(1, 1, 1);
	Microsoft.Xna.Framework.Vector3._unitX = new Microsoft.Xna.Framework.Vector3(1, 0, 0);
	Microsoft.Xna.Framework.Vector3._unitY = new Microsoft.Xna.Framework.Vector3(0, 1, 0);
	Microsoft.Xna.Framework.Vector3._unitZ = new Microsoft.Xna.Framework.Vector3(0, 0, 1);
	Microsoft.Xna.Framework.Vector3._up = new Microsoft.Xna.Framework.Vector3(0, 1, 0);
	Microsoft.Xna.Framework.Vector3._down = new Microsoft.Xna.Framework.Vector3(0, -1, 0);
	Microsoft.Xna.Framework.Vector3._right = new Microsoft.Xna.Framework.Vector3(1, 0, 0);
	Microsoft.Xna.Framework.Vector3._left = new Microsoft.Xna.Framework.Vector3(-1, 0, 0);
	Microsoft.Xna.Framework.Vector3._forward = new Microsoft.Xna.Framework.Vector3(0, 0, -1);
	Microsoft.Xna.Framework.Vector3._backward = new Microsoft.Xna.Framework.Vector3(0, 0, 1);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single]], 
		["_ctor$1", [System.Single]], 
		["_ctor$2", [Microsoft.Xna.Framework.Vector2, System.Single]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Vector3]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Distance", [
		["Distance$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Distance$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "DistanceSquared", [
		["DistanceSquared$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["DistanceSquared$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Dot", [
		["Dot$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Dot$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Normalize", [
		["Normalize$0", [Microsoft.Xna.Framework.Vector3]], 
		["Normalize$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Cross", [
		["Cross$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Cross$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Reflect", [
		["Reflect$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Reflect$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Min", [
		["Min$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Min$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Max", [
		["Max$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Max$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Clamp", [
		["Clamp$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Clamp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Lerp", [
		["Lerp$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single]], 
		["Lerp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Barycentric", [
		["Barycentric$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single, System.Single]], 
		["Barycentric$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "SmoothStep", [
		["SmoothStep$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single]], 
		["SmoothStep$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "CatmullRom", [
		["CatmullRom$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single]], 
		["CatmullRom$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Hermite", [
		["Hermite$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3, System.Single]], 
		["Hermite$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Transform", [
		["Transform$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Matrix]], 
		["Transform$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]], 
		["Transform$2", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Quaternion]], 
		["Transform$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]], 
		["Transform$4", [System.Array.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector3)]], 
		["Transform$5", [System.Array.Of(Microsoft.Xna.Framework.Vector3), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector3), System.Int32, System.Int32]], 
		["Transform$6", [System.Array.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Array.Of(Microsoft.Xna.Framework.Vector3)]], 
		["Transform$7", [System.Array.Of(Microsoft.Xna.Framework.Vector3), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Array.Of(Microsoft.Xna.Framework.Vector3), System.Int32, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "TransformNormal", [
		["TransformNormal$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Matrix]], 
		["TransformNormal$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]], 
		["TransformNormal$2", [System.Array.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector3)]], 
		["TransformNormal$3", [System.Array.Of(Microsoft.Xna.Framework.Vector3), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector3), System.Int32, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Negate", [
		["Negate$0", [Microsoft.Xna.Framework.Vector3]], 
		["Negate$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Add", [
		["Add$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Add$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Subtract", [
		["Subtract$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Subtract$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Multiply", [
		["Multiply$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Multiply$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]], 
		["Multiply$2", [Microsoft.Xna.Framework.Vector3, System.Single]], 
		["Multiply$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "Divide", [
		["Divide$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["Divide$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]], 
		["Divide$2", [Microsoft.Xna.Framework.Vector3, System.Single]], 
		["Divide$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "op_Multiply", [
		["op_Multiply$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["op_Multiply$1", [Microsoft.Xna.Framework.Vector3, System.Single]], 
		["op_Multiply$2", [System.Single, Microsoft.Xna.Framework.Vector3]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector3, "op_Division", [
		["op_Division$0", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Vector3]], 
		["op_Division$1", [Microsoft.Xna.Framework.Vector3, System.Single]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "Zero", {
		get: Microsoft.Xna.Framework.Vector3.get_Zero
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "One", {
		get: Microsoft.Xna.Framework.Vector3.get_One
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "UnitX", {
		get: Microsoft.Xna.Framework.Vector3.get_UnitX
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "UnitY", {
		get: Microsoft.Xna.Framework.Vector3.get_UnitY
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "UnitZ", {
		get: Microsoft.Xna.Framework.Vector3.get_UnitZ
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "Up", {
		get: Microsoft.Xna.Framework.Vector3.get_Up
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "Down", {
		get: Microsoft.Xna.Framework.Vector3.get_Down
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "Right", {
		get: Microsoft.Xna.Framework.Vector3.get_Right
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "Left", {
		get: Microsoft.Xna.Framework.Vector3.get_Left
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "Forward", {
		get: Microsoft.Xna.Framework.Vector3.get_Forward
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector3, "Backward", {
		get: Microsoft.Xna.Framework.Vector3.get_Backward
	});
Microsoft.Xna.Framework.Vector3._cctor();
Microsoft.Xna.Framework.Vector3.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Vector3));

Object.seal(Microsoft.Xna.Framework.Vector3.prototype);
Object.seal(Microsoft.Xna.Framework.Vector3);
Microsoft.Xna.Framework.Vector4.prototype.X = 0;
Microsoft.Xna.Framework.Vector4.prototype.Y = 0;
Microsoft.Xna.Framework.Vector4.prototype.Z = 0;
Microsoft.Xna.Framework.Vector4.prototype.W = 0;
Microsoft.Xna.Framework.Vector4._zero = new Microsoft.Xna.Framework.Vector4();
Microsoft.Xna.Framework.Vector4._one = new Microsoft.Xna.Framework.Vector4();
Microsoft.Xna.Framework.Vector4._unitX = new Microsoft.Xna.Framework.Vector4();
Microsoft.Xna.Framework.Vector4._unitY = new Microsoft.Xna.Framework.Vector4();
Microsoft.Xna.Framework.Vector4._unitZ = new Microsoft.Xna.Framework.Vector4();
Microsoft.Xna.Framework.Vector4._unitW = new Microsoft.Xna.Framework.Vector4();
Microsoft.Xna.Framework.Vector4.get_Zero = function () {
	return Microsoft.Xna.Framework.Vector4._zero;
};

Microsoft.Xna.Framework.Vector4.get_One = function () {
	return Microsoft.Xna.Framework.Vector4._one;
};

Microsoft.Xna.Framework.Vector4.get_UnitX = function () {
	return Microsoft.Xna.Framework.Vector4._unitX;
};

Microsoft.Xna.Framework.Vector4.get_UnitY = function () {
	return Microsoft.Xna.Framework.Vector4._unitY;
};

Microsoft.Xna.Framework.Vector4.get_UnitZ = function () {
	return Microsoft.Xna.Framework.Vector4._unitZ;
};

Microsoft.Xna.Framework.Vector4.get_UnitW = function () {
	return Microsoft.Xna.Framework.Vector4._unitW;
};

Microsoft.Xna.Framework.Vector4.prototype._ctor$0 = function (x, y, z, w) {
	this.X = x;
	this.Y = y;
	this.Z = z;
	this.W = w;
};

Microsoft.Xna.Framework.Vector4.prototype._ctor$1 = function (value, z, w) {
	this.X = value.X;
	this.Y = value.Y;
	this.Z = z;
	this.W = w;
};

Microsoft.Xna.Framework.Vector4.prototype._ctor$2 = function (value, w) {
	this.X = value.X;
	this.Y = value.Y;
	this.Z = value.Z;
	this.W = w;
};

Microsoft.Xna.Framework.Vector4.prototype._ctor$3 = function (value) {
	this.W = value;
	this.Z = value;
	this.Y = value;
	this.X = value;
};

Microsoft.Xna.Framework.Vector4.prototype.toString = function () {
	var currentCulture = System.Globalization.CultureInfo.CurrentCulture;
	return System.String.Format(currentCulture, "{{X:{0} Y:{1} Z:{2} W:{3}}}", [this.X.toString(currentCulture), this.Y.toString(currentCulture), this.Z.toString(currentCulture), this.W.toString(currentCulture)]);
};

Microsoft.Xna.Framework.Vector4.prototype.Equals$0 = function (other) {
	return (!((this.X !== other.X) || 
			(this.Y !== other.Y) || 
			(this.Z !== other.Z)) && (this.W === other.W));
};

Microsoft.Xna.Framework.Vector4.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Vector4.MemberwiseClone()) === new Microsoft.Xna.Framework.Vector4()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Vector4.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Vector4.prototype.GetHashCode = function () {
	return (this.X.GetHashCode() + this.Y.GetHashCode() + this.Z.GetHashCode() + this.W.GetHashCode());
};

Microsoft.Xna.Framework.Vector4.prototype.length = function () {
	return JSIL.Cast(System.Math.Sqrt(((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z) + (this.W * this.W))), System.Single);
};

Microsoft.Xna.Framework.Vector4.prototype.LengthSquared = function () {
	return ((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z) + (this.W * this.W));
};

Microsoft.Xna.Framework.Vector4.Distance$0 = function (value1, value2) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	var num3 = (value1.Z - value2.Z);
	var num4 = (value1.W - value2.W);
	return JSIL.Cast(System.Math.Sqrt(((num * num) + (num2 * num2) + (num3 * num3) + (num4 * num4))), System.Single);
};

Microsoft.Xna.Framework.Vector4.Distance$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	var num3 = (value1.Z - value2.Z);
	var num4 = (value1.W - value2.W);
	result.value = JSIL.Cast(System.Math.Sqrt(((num * num) + (num2 * num2) + (num3 * num3) + (num4 * num4))), System.Single);
};

Microsoft.Xna.Framework.Vector4.DistanceSquared$0 = function (value1, value2) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	var num3 = (value1.Z - value2.Z);
	var num4 = (value1.W - value2.W);
	return ((num * num) + (num2 * num2) + (num3 * num3) + (num4 * num4));
};

Microsoft.Xna.Framework.Vector4.DistanceSquared$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	var num = (value1.X - value2.X);
	var num2 = (value1.Y - value2.Y);
	var num3 = (value1.Z - value2.Z);
	var num4 = (value1.W - value2.W);
	result.value = ((num * num) + (num2 * num2) + (num3 * num3) + (num4 * num4));
};

Microsoft.Xna.Framework.Vector4.Dot$0 = function (vector1, vector2) {
	return ((vector1.X * vector2.X) + (vector1.Y * vector2.Y) + (vector1.Z * vector2.Z) + (vector1.W * vector2.W));
};

Microsoft.Xna.Framework.Vector4.Dot$1 = function (/* ref */ vector1, /* ref */ vector2, /* ref */ result) {
	result.value = ((vector1.X * vector2.X) + (vector1.Y * vector2.Y) + (vector1.Z * vector2.Z) + (vector1.W * vector2.W));
};

Microsoft.Xna.Framework.Vector4.prototype.Normalize = function () {
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((this.X * this.X) + (this.Y * this.Y) + (this.Z * this.Z) + (this.W * this.W))), System.Single));
	this.X *= num2;
	this.Y *= num2;
	this.Z *= num2;
	this.W *= num2;
};

Microsoft.Xna.Framework.Vector4.Normalize$0 = function (vector) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((vector.X * vector.X) + (vector.Y * vector.Y) + (vector.Z * vector.Z) + (vector.W * vector.W))), System.Single));
	result.X = (vector.X * num2);
	result.Y = (vector.Y * num2);
	result.Z = (vector.Z * num2);
	result.W = (vector.W * num2);
	return result;
};

Microsoft.Xna.Framework.Vector4.Normalize$1 = function (/* ref */ vector, /* ref */ result) {
	var num2 = (1 / JSIL.Cast(System.Math.Sqrt(((vector.X * vector.X) + (vector.Y * vector.Y) + (vector.Z * vector.Z) + (vector.W * vector.W))), System.Single));
	result.X = (vector.X * num2);
	result.Y = (vector.Y * num2);
	result.Z = (vector.Z * num2);
	result.W = (vector.W * num2);
};

Microsoft.Xna.Framework.Vector4.Min$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X < value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
	result.Z = (value1.Z < value2.Z) ? value1.Z : value2.Z;
	result.W = (value1.W < value2.W) ? value1.W : value2.W;
	return result;
};

Microsoft.Xna.Framework.Vector4.Min$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X < value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
	result.Z = (value1.Z < value2.Z) ? value1.Z : value2.Z;
	result.W = (value1.W < value2.W) ? value1.W : value2.W;
};

Microsoft.Xna.Framework.Vector4.Max$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X > value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
	result.Z = (value1.Z > value2.Z) ? value1.Z : value2.Z;
	result.W = (value1.W > value2.W) ? value1.W : value2.W;
	return result;
};

Microsoft.Xna.Framework.Vector4.Max$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X > value2.X) ? value1.X : value2.X;
	result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
	result.Z = (value1.Z > value2.Z) ? value1.Z : value2.Z;
	result.W = (value1.W > value2.W) ? value1.W : value2.W;
};

Microsoft.Xna.Framework.Vector4.Clamp$0 = function (value1, min, max) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num = value1.X;
	num = (num > max.X) ? max.X : num;
	num = (num < min.X) ? min.X : num;
	var num2 = value1.Y;
	num2 = (num2 > max.Y) ? max.Y : num2;
	num2 = (num2 < min.Y) ? min.Y : num2;
	var num3 = value1.Z;
	num3 = (num3 > max.Z) ? max.Z : num3;
	num3 = (num3 < min.Z) ? min.Z : num3;
	var num4 = value1.W;
	num4 = (num4 > max.W) ? max.W : num4;
	num4 = (num4 < min.W) ? min.W : num4;
	result.X = num;
	result.Y = num2;
	result.Z = num3;
	result.W = num4;
	return result;
};

Microsoft.Xna.Framework.Vector4.Clamp$1 = function (/* ref */ value1, /* ref */ min, /* ref */ max, /* ref */ result) {
	var num = value1.X;
	num = (num > max.X) ? max.X : num;
	num = (num < min.X) ? min.X : num;
	var num2 = value1.Y;
	num2 = (num2 > max.Y) ? max.Y : num2;
	num2 = (num2 < min.Y) ? min.Y : num2;
	var num3 = value1.Z;
	num3 = (num3 > max.Z) ? max.Z : num3;
	num3 = (num3 < min.Z) ? min.Z : num3;
	var num4 = value1.W;
	num4 = (num4 > max.W) ? max.W : num4;
	num4 = (num4 < min.W) ? min.W : num4;
	result.X = num;
	result.Y = num2;
	result.Z = num3;
	result.W = num4;
};

Microsoft.Xna.Framework.Vector4.Lerp$0 = function (value1, value2, amount) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	result.Z = (value1.Z + ((value2.Z - value1.Z) * amount));
	result.W = (value1.W + ((value2.W - value1.W) * amount));
	return result;
};

Microsoft.Xna.Framework.Vector4.Lerp$1 = function (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	result.Z = (value1.Z + ((value2.Z - value1.Z) * amount));
	result.W = (value1.W + ((value2.W - value1.W) * amount));
};

Microsoft.Xna.Framework.Vector4.Barycentric$0 = function (value1, value2, value3, amount1, amount2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X + (amount1 * (value2.X - value1.X)) + (amount2 * (value3.X - value1.X)));
	result.Y = (value1.Y + (amount1 * (value2.Y - value1.Y)) + (amount2 * (value3.Y - value1.Y)));
	result.Z = (value1.Z + (amount1 * (value2.Z - value1.Z)) + (amount2 * (value3.Z - value1.Z)));
	result.W = (value1.W + (amount1 * (value2.W - value1.W)) + (amount2 * (value3.W - value1.W)));
	return result;
};

Microsoft.Xna.Framework.Vector4.Barycentric$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ value3, amount1, amount2, /* ref */ result) {
	result.X = (value1.X + (amount1 * (value2.X - value1.X)) + (amount2 * (value3.X - value1.X)));
	result.Y = (value1.Y + (amount1 * (value2.Y - value1.Y)) + (amount2 * (value3.Y - value1.Y)));
	result.Z = (value1.Z + (amount1 * (value2.Z - value1.Z)) + (amount2 * (value3.Z - value1.Z)));
	result.W = (value1.W + (amount1 * (value2.W - value1.W)) + (amount2 * (value3.W - value1.W)));
};

Microsoft.Xna.Framework.Vector4.SmoothStep$0 = function (value1, value2, amount) {
	var result = new Microsoft.Xna.Framework.Vector4();
	amount = (amount > 1) ? 1 : (amount < 0) ? 0 : amount;
	amount = (amount * amount * (3 - (2 * amount)));
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	result.Z = (value1.Z + ((value2.Z - value1.Z) * amount));
	result.W = (value1.W + ((value2.W - value1.W) * amount));
	return result;
};

Microsoft.Xna.Framework.Vector4.SmoothStep$1 = function (/* ref */ value1, /* ref */ value2, amount, /* ref */ result) {
	amount = (amount > 1) ? 1 : (amount < 0) ? 0 : amount;
	amount = (amount * amount * (3 - (2 * amount)));
	result.X = (value1.X + ((value2.X - value1.X) * amount));
	result.Y = (value1.Y + ((value2.Y - value1.Y) * amount));
	result.Z = (value1.Z + ((value2.Z - value1.Z) * amount));
	result.W = (value1.W + ((value2.W - value1.W) * amount));
};

Microsoft.Xna.Framework.Vector4.CatmullRom$0 = function (value1, value2, value3, value4, amount) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num = (amount * amount);
	var num2 = (amount * num);
	result.X = (0.5 * ((2 * value2.X) + ((-value1.X + value3.X) * amount) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2)));
	result.Y = (0.5 * ((2 * value2.Y) + ((-value1.Y + value3.Y) * amount) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2)));
	result.Z = (0.5 * ((2 * value2.Z) + ((-value1.Z + value3.Z) * amount) + (((((2 * value1.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num) + ((((-value1.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2)));
	result.W = (0.5 * ((2 * value2.W) + ((-value1.W + value3.W) * amount) + (((((2 * value1.W) - (5 * value2.W)) + (4 * value3.W)) - value4.W) * num) + ((((-value1.W + (3 * value2.W)) - (3 * value3.W)) + value4.W) * num2)));
	return result;
};

Microsoft.Xna.Framework.Vector4.CatmullRom$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ value3, /* ref */ value4, amount, /* ref */ result) {
	var num = (amount * amount);
	var num2 = (amount * num);
	result.X = (0.5 * ((2 * value2.X) + ((-value1.X + value3.X) * amount) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2)));
	result.Y = (0.5 * ((2 * value2.Y) + ((-value1.Y + value3.Y) * amount) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2)));
	result.Z = (0.5 * ((2 * value2.Z) + ((-value1.Z + value3.Z) * amount) + (((((2 * value1.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num) + ((((-value1.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2)));
	result.W = (0.5 * ((2 * value2.W) + ((-value1.W + value3.W) * amount) + (((((2 * value1.W) - (5 * value2.W)) + (4 * value3.W)) - value4.W) * num) + ((((-value1.W + (3 * value2.W)) - (3 * value3.W)) + value4.W) * num2)));
};

Microsoft.Xna.Framework.Vector4.Hermite$0 = function (value1, tangent1, value2, tangent2, amount) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num = (amount * amount);
	var num2 = (amount * num);
	var num3 = (((2 * num2) - (3 * num)) + 1);
	var num4 = ((-2 * num2) + (3 * num));
	var num5 = ((num2 - (2 * num)) + amount);
	var num6 = (num2 - num);
	result.X = ((value1.X * num3) + (value2.X * num4) + (tangent1.X * num5) + (tangent2.X * num6));
	result.Y = ((value1.Y * num3) + (value2.Y * num4) + (tangent1.Y * num5) + (tangent2.Y * num6));
	result.Z = ((value1.Z * num3) + (value2.Z * num4) + (tangent1.Z * num5) + (tangent2.Z * num6));
	result.W = ((value1.W * num3) + (value2.W * num4) + (tangent1.W * num5) + (tangent2.W * num6));
	return result;
};

Microsoft.Xna.Framework.Vector4.Hermite$1 = function (/* ref */ value1, /* ref */ tangent1, /* ref */ value2, /* ref */ tangent2, amount, /* ref */ result) {
	var num = (amount * amount);
	var num2 = (amount * num);
	var num3 = (((2 * num2) - (3 * num)) + 1);
	var num4 = ((-2 * num2) + (3 * num));
	var num5 = ((num2 - (2 * num)) + amount);
	var num6 = (num2 - num);
	result.X = ((value1.X * num3) + (value2.X * num4) + (tangent1.X * num5) + (tangent2.X * num6));
	result.Y = ((value1.Y * num3) + (value2.Y * num4) + (tangent1.Y * num5) + (tangent2.Y * num6));
	result.Z = ((value1.Z * num3) + (value2.Z * num4) + (tangent1.Z * num5) + (tangent2.Z * num6));
	result.W = ((value1.W * num3) + (value2.W * num4) + (tangent1.W * num5) + (tangent2.W * num6));
};

Microsoft.Xna.Framework.Vector4.Transform$0 = function (position, matrix) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21) + matrix.M41);
	result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22) + matrix.M42);
	result.Z = ((position.X * matrix.M13) + (position.Y * matrix.M23) + matrix.M43);
	result.W = ((position.X * matrix.M14) + (position.Y * matrix.M24) + matrix.M44);
	return result;
};

Microsoft.Xna.Framework.Vector4.Transform$1 = function (/* ref */ position, /* ref */ matrix, /* ref */ result) {
	result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21) + matrix.M41);
	result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22) + matrix.M42);
	result.Z = ((position.X * matrix.M13) + (position.Y * matrix.M23) + matrix.M43);
	result.W = ((position.X * matrix.M14) + (position.Y * matrix.M24) + matrix.M44);
};

Microsoft.Xna.Framework.Vector4.Transform$2 = function (position, matrix) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21) + (position.Z * matrix.M31) + matrix.M41);
	result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22) + (position.Z * matrix.M32) + matrix.M42);
	result.Z = ((position.X * matrix.M13) + (position.Y * matrix.M23) + (position.Z * matrix.M33) + matrix.M43);
	result.W = ((position.X * matrix.M14) + (position.Y * matrix.M24) + (position.Z * matrix.M34) + matrix.M44);
	return result;
};

Microsoft.Xna.Framework.Vector4.Transform$3 = function (/* ref */ position, /* ref */ matrix, /* ref */ result) {
	result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21) + (position.Z * matrix.M31) + matrix.M41);
	result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22) + (position.Z * matrix.M32) + matrix.M42);
	result.Z = ((position.X * matrix.M13) + (position.Y * matrix.M23) + (position.Z * matrix.M33) + matrix.M43);
	result.W = ((position.X * matrix.M14) + (position.Y * matrix.M24) + (position.Z * matrix.M34) + matrix.M44);
};

Microsoft.Xna.Framework.Vector4.Transform$4 = function (vector, matrix) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = ((vector.X * matrix.M11) + (vector.Y * matrix.M21) + (vector.Z * matrix.M31) + (vector.W * matrix.M41));
	result.Y = ((vector.X * matrix.M12) + (vector.Y * matrix.M22) + (vector.Z * matrix.M32) + (vector.W * matrix.M42));
	result.Z = ((vector.X * matrix.M13) + (vector.Y * matrix.M23) + (vector.Z * matrix.M33) + (vector.W * matrix.M43));
	result.W = ((vector.X * matrix.M14) + (vector.Y * matrix.M24) + (vector.Z * matrix.M34) + (vector.W * matrix.M44));
	return result;
};

Microsoft.Xna.Framework.Vector4.Transform$5 = function (/* ref */ vector, /* ref */ matrix, /* ref */ result) {
	result.X = ((vector.X * matrix.M11) + (vector.Y * matrix.M21) + (vector.Z * matrix.M31) + (vector.W * matrix.M41));
	result.Y = ((vector.X * matrix.M12) + (vector.Y * matrix.M22) + (vector.Z * matrix.M32) + (vector.W * matrix.M42));
	result.Z = ((vector.X * matrix.M13) + (vector.Y * matrix.M23) + (vector.Z * matrix.M33) + (vector.W * matrix.M43));
	result.W = ((vector.X * matrix.M14) + (vector.Y * matrix.M24) + (vector.Z * matrix.M34) + (vector.W * matrix.M44));
};

Microsoft.Xna.Framework.Vector4.Transform$6 = function (value, rotation) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num6 = (rotation.W * num3);
	var num8 = (rotation.X * num2);
	var num12 = (rotation.Z * num3);
	result.X = ((value.X * (1 - (rotation.Y * num2) - num12)) + (value.Y * (num8 - num6)));
	result.Y = ((value.X * (num8 + num6)) + (value.Y * (1 - (rotation.X * num) - num12)));
	result.Z = ((value.X * ((rotation.X * num3) - (rotation.W * num2))) + (value.Y * ((rotation.Y * num3) + (rotation.W * num))));
	result.W = 1;
	return result;
};

Microsoft.Xna.Framework.Vector4.Transform$7 = function (/* ref */ value, /* ref */ rotation, /* ref */ result) {
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num6 = (rotation.W * num3);
	var num8 = (rotation.X * num2);
	var num12 = (rotation.Z * num3);
	result.X = ((value.X * (1 - (rotation.Y * num2) - num12)) + (value.Y * (num8 - num6)));
	result.Y = ((value.X * (num8 + num6)) + (value.Y * (1 - (rotation.X * num) - num12)));
	result.Z = ((value.X * ((rotation.X * num3) - (rotation.W * num2))) + (value.Y * ((rotation.Y * num3) + (rotation.W * num))));
	result.W = 1;
};

Microsoft.Xna.Framework.Vector4.Transform$8 = function (value, rotation) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	result.X = ((value.X * (1 - num10 - num12)) + (value.Y * (num8 - num6)) + (value.Z * (num9 + num5)));
	result.Y = ((value.X * (num8 + num6)) + (value.Y * (1 - num7 - num12)) + (value.Z * (num11 - num4)));
	result.Z = ((value.X * (num9 - num5)) + (value.Y * (num11 + num4)) + (value.Z * (1 - num7 - num10)));
	result.W = 1;
	return result;
};

Microsoft.Xna.Framework.Vector4.Transform$9 = function (/* ref */ value, /* ref */ rotation, /* ref */ result) {
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	result.X = ((value.X * (1 - num10 - num12)) + (value.Y * (num8 - num6)) + (value.Z * (num9 + num5)));
	result.Y = ((value.X * (num8 + num6)) + (value.Y * (1 - num7 - num12)) + (value.Z * (num11 - num4)));
	result.Z = ((value.X * (num9 - num5)) + (value.Y * (num11 + num4)) + (value.Z * (1 - num7 - num10)));
	result.W = 1;
};

Microsoft.Xna.Framework.Vector4.Transform$10 = function (value, rotation) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	result.X = ((value.X * (1 - num10 - num12)) + (value.Y * (num8 - num6)) + (value.Z * (num9 + num5)));
	result.Y = ((value.X * (num8 + num6)) + (value.Y * (1 - num7 - num12)) + (value.Z * (num11 - num4)));
	result.Z = ((value.X * (num9 - num5)) + (value.Y * (num11 + num4)) + (value.Z * (1 - num7 - num10)));
	result.W = value.W;
	return result;
};

Microsoft.Xna.Framework.Vector4.Transform$11 = function (/* ref */ value, /* ref */ rotation, /* ref */ result) {
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	result.X = ((value.X * (1 - num10 - num12)) + (value.Y * (num8 - num6)) + (value.Z * (num9 + num5)));
	result.Y = ((value.X * (num8 + num6)) + (value.Y * (1 - num7 - num12)) + (value.Z * (num11 - num4)));
	result.Z = ((value.X * (num9 - num5)) + (value.Y * (num11 + num4)) + (value.Z * (1 - num7 - num10)));
	result.W = value.W;
};

Microsoft.Xna.Framework.Vector4.Transform$12 = function (sourceArray, /* ref */ matrix, destinationArray) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (destinationArray.length < sourceArray.length) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var i = 0;

__while0__: 
	while (i < sourceArray.length) {
		var x = sourceArray[i].X;
		var y = sourceArray[i].Y;
		var z = sourceArray[i].Z;
		var w = sourceArray[i].W;
		destinationArray[i].X = ((x * matrix.M11) + (y * matrix.M21) + (z * matrix.M31) + (w * matrix.M41));
		destinationArray[i].Y = ((x * matrix.M12) + (y * matrix.M22) + (z * matrix.M32) + (w * matrix.M42));
		destinationArray[i].Z = ((x * matrix.M13) + (y * matrix.M23) + (z * matrix.M33) + (w * matrix.M43));
		destinationArray[i].W = ((x * matrix.M14) + (y * matrix.M24) + (z * matrix.M34) + (w * matrix.M44));
		++i;
	}
};

Microsoft.Xna.Framework.Vector4.Transform$13 = function (sourceArray, sourceIndex, /* ref */ matrix, destinationArray, destinationIndex, length) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (sourceArray.length < (sourceIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughSourceSize);
	}

	if (destinationArray.length < (destinationIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}

__while0__: 
	while (length > 0) {
		var x = sourceArray[sourceIndex].X;
		var y = sourceArray[sourceIndex].Y;
		var z = sourceArray[sourceIndex].Z;
		var w = sourceArray[sourceIndex].W;
		destinationArray[destinationIndex].X = ((x * matrix.M11) + (y * matrix.M21) + (z * matrix.M31) + (w * matrix.M41));
		destinationArray[destinationIndex].Y = ((x * matrix.M12) + (y * matrix.M22) + (z * matrix.M32) + (w * matrix.M42));
		destinationArray[destinationIndex].Z = ((x * matrix.M13) + (y * matrix.M23) + (z * matrix.M33) + (w * matrix.M43));
		destinationArray[destinationIndex].W = ((x * matrix.M14) + (y * matrix.M24) + (z * matrix.M34) + (w * matrix.M44));
		++sourceIndex;
		++destinationIndex;
		--length;
	}
};

Microsoft.Xna.Framework.Vector4.Transform$14 = function (sourceArray, /* ref */ rotation, destinationArray) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (destinationArray.length < sourceArray.length) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);
	var i = 0;

__while0__: 
	while (i < sourceArray.length) {
		var x = sourceArray[i].X;
		var y = sourceArray[i].Y;
		var z = sourceArray[i].Z;
		destinationArray[i].X = ((x * (1 - num10 - num12)) + (y * (num8 - num6)) + (z * (num9 + num5)));
		destinationArray[i].Y = ((x * (num8 + num6)) + (y * (1 - num7 - num12)) + (z * (num11 - num4)));
		destinationArray[i].Z = ((x * (num9 - num5)) + (y * (num11 + num4)) + (z * (1 - num7 - num10)));
		destinationArray[i].W = sourceArray[i].W;
		++i;
	}
};

Microsoft.Xna.Framework.Vector4.Transform$15 = function (sourceArray, sourceIndex, /* ref */ rotation, destinationArray, destinationIndex, length) {

	if (sourceArray !== null) {
		throw new System.ArgumentNullException("sourceArray");
	}

	if (destinationArray !== null) {
		throw new System.ArgumentNullException("destinationArray");
	}

	if (sourceArray.length < (sourceIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughSourceSize);
	}

	if (destinationArray.length < (destinationIndex + length)) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.NotEnoughTargetSize);
	}
	var num = (rotation.X + rotation.X);
	var num2 = (rotation.Y + rotation.Y);
	var num3 = (rotation.Z + rotation.Z);
	var num4 = (rotation.W * num);
	var num5 = (rotation.W * num2);
	var num6 = (rotation.W * num3);
	var num7 = (rotation.X * num);
	var num8 = (rotation.X * num2);
	var num9 = (rotation.X * num3);
	var num10 = (rotation.Y * num2);
	var num11 = (rotation.Y * num3);
	var num12 = (rotation.Z * num3);

__while0__: 
	while (length > 0) {
		var x = sourceArray[sourceIndex].X;
		var y = sourceArray[sourceIndex].Y;
		var z = sourceArray[sourceIndex].Z;
		var w = sourceArray[sourceIndex].W;
		destinationArray[destinationIndex].X = ((x * (1 - num10 - num12)) + (y * (num8 - num6)) + (z * (num9 + num5)));
		destinationArray[destinationIndex].Y = ((x * (num8 + num6)) + (y * (1 - num7 - num12)) + (z * (num11 - num4)));
		destinationArray[destinationIndex].Z = ((x * (num9 - num5)) + (y * (num11 + num4)) + (z * (1 - num7 - num10)));
		destinationArray[destinationIndex].W = w;
		++sourceIndex;
		++destinationIndex;
		--length;
	}
};

Microsoft.Xna.Framework.Vector4.Negate$0 = function (value) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = -value.X;
	result.Y = -value.Y;
	result.Z = -value.Z;
	result.W = -value.W;
	return result;
};

Microsoft.Xna.Framework.Vector4.Negate$1 = function (/* ref */ value, /* ref */ result) {
	result.X = -value.X;
	result.Y = -value.Y;
	result.Z = -value.Z;
	result.W = -value.W;
};

Microsoft.Xna.Framework.Vector4.Add$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
	result.Z = (value1.Z + value2.Z);
	result.W = (value1.W + value2.W);
	return result;
};

Microsoft.Xna.Framework.Vector4.Add$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
	result.Z = (value1.Z + value2.Z);
	result.W = (value1.W + value2.W);
};

Microsoft.Xna.Framework.Vector4.Subtract$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
	result.Z = (value1.Z - value2.Z);
	result.W = (value1.W - value2.W);
	return result;
};

Microsoft.Xna.Framework.Vector4.Subtract$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
	result.Z = (value1.Z - value2.Z);
	result.W = (value1.W - value2.W);
};

Microsoft.Xna.Framework.Vector4.Multiply$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
	result.Z = (value1.Z * value2.Z);
	result.W = (value1.W * value2.W);
	return result;
};

Microsoft.Xna.Framework.Vector4.Multiply$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
	result.Z = (value1.Z * value2.Z);
	result.W = (value1.W * value2.W);
};

Microsoft.Xna.Framework.Vector4.Multiply$2 = function (value1, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X * scaleFactor);
	result.Y = (value1.Y * scaleFactor);
	result.Z = (value1.Z * scaleFactor);
	result.W = (value1.W * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector4.Multiply$3 = function (/* ref */ value1, scaleFactor, /* ref */ result) {
	result.X = (value1.X * scaleFactor);
	result.Y = (value1.Y * scaleFactor);
	result.Z = (value1.Z * scaleFactor);
	result.W = (value1.W * scaleFactor);
};

Microsoft.Xna.Framework.Vector4.Divide$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
	result.Z = (value1.Z / value2.Z);
	result.W = (value1.W / value2.W);
	return result;
};

Microsoft.Xna.Framework.Vector4.Divide$1 = function (/* ref */ value1, /* ref */ value2, /* ref */ result) {
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
	result.Z = (value1.Z / value2.Z);
	result.W = (value1.W / value2.W);
};

Microsoft.Xna.Framework.Vector4.Divide$2 = function (value1, divider) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num = (1 / divider);
	result.X = (value1.X * num);
	result.Y = (value1.Y * num);
	result.Z = (value1.Z * num);
	result.W = (value1.W * num);
	return result;
};

Microsoft.Xna.Framework.Vector4.Divide$3 = function (/* ref */ value1, divider, /* ref */ result) {
	var num = (1 / divider);
	result.X = (value1.X * num);
	result.Y = (value1.Y * num);
	result.Z = (value1.Z * num);
	result.W = (value1.W * num);
};

Microsoft.Xna.Framework.Vector4.op_UnaryNegation = function (value) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = -value.X;
	result.Y = -value.Y;
	result.Z = -value.Z;
	result.W = -value.W;
	return result;
};

Microsoft.Xna.Framework.Vector4.op_Equality = function (value1, value2) {
	return (!((value1.X !== value2.X) || 
			(value1.Y !== value2.Y) || 
			(value1.Z !== value2.Z)) && (value1.W === value2.W));
};

Microsoft.Xna.Framework.Vector4.op_Inequality = function (value1, value2) {
	return ((value1.X !== value2.X) || 
		(value1.Y !== value2.Y) || 
		(value1.Z !== value2.Z) || (value1.W !== value2.W));
};

Microsoft.Xna.Framework.Vector4.op_Addition = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X + value2.X);
	result.Y = (value1.Y + value2.Y);
	result.Z = (value1.Z + value2.Z);
	result.W = (value1.W + value2.W);
	return result;
};

Microsoft.Xna.Framework.Vector4.op_Subtraction = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X - value2.X);
	result.Y = (value1.Y - value2.Y);
	result.Z = (value1.Z - value2.Z);
	result.W = (value1.W - value2.W);
	return result;
};

Microsoft.Xna.Framework.Vector4.op_Multiply$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X * value2.X);
	result.Y = (value1.Y * value2.Y);
	result.Z = (value1.Z * value2.Z);
	result.W = (value1.W * value2.W);
	return result;
};

Microsoft.Xna.Framework.Vector4.op_Multiply$1 = function (value1, scaleFactor) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X * scaleFactor);
	result.Y = (value1.Y * scaleFactor);
	result.Z = (value1.Z * scaleFactor);
	result.W = (value1.W * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector4.op_Multiply$2 = function (scaleFactor, value1) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X * scaleFactor);
	result.Y = (value1.Y * scaleFactor);
	result.Z = (value1.Z * scaleFactor);
	result.W = (value1.W * scaleFactor);
	return result;
};

Microsoft.Xna.Framework.Vector4.op_Division$0 = function (value1, value2) {
	var result = new Microsoft.Xna.Framework.Vector4();
	result.X = (value1.X / value2.X);
	result.Y = (value1.Y / value2.Y);
	result.Z = (value1.Z / value2.Z);
	result.W = (value1.W / value2.W);
	return result;
};

Microsoft.Xna.Framework.Vector4.op_Division$1 = function (value1, divider) {
	var result = new Microsoft.Xna.Framework.Vector4();
	var num = (1 / divider);
	result.X = (value1.X * num);
	result.Y = (value1.Y * num);
	result.Z = (value1.Z * num);
	result.W = (value1.W * num);
	return result;
};

Microsoft.Xna.Framework.Vector4._cctor = function () {
	Microsoft.Xna.Framework.Vector4._zero = new Microsoft.Xna.Framework.Vector4();
	Microsoft.Xna.Framework.Vector4._one = new Microsoft.Xna.Framework.Vector4(1, 1, 1, 1);
	Microsoft.Xna.Framework.Vector4._unitX = new Microsoft.Xna.Framework.Vector4(1, 0, 0, 0);
	Microsoft.Xna.Framework.Vector4._unitY = new Microsoft.Xna.Framework.Vector4(0, 1, 0, 0);
	Microsoft.Xna.Framework.Vector4._unitZ = new Microsoft.Xna.Framework.Vector4(0, 0, 1, 0);
	Microsoft.Xna.Framework.Vector4._unitW = new Microsoft.Xna.Framework.Vector4(0, 0, 0, 1);
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4.prototype, "_ctor", [
		["_ctor$0", [System.Single, System.Single, System.Single, System.Single]], 
		["_ctor$1", [Microsoft.Xna.Framework.Vector2, System.Single, System.Single]], 
		["_ctor$2", [Microsoft.Xna.Framework.Vector3, System.Single]], 
		["_ctor$3", [System.Single]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Vector4]], 
		["Equals$1", [System.Object]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Distance", [
		["Distance$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Distance$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "DistanceSquared", [
		["DistanceSquared$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["DistanceSquared$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Dot", [
		["Dot$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Dot$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(System.Single)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Normalize", [
		["Normalize$0", [Microsoft.Xna.Framework.Vector4]], 
		["Normalize$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Min", [
		["Min$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Min$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Max", [
		["Max$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Max$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Clamp", [
		["Clamp$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Clamp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Lerp", [
		["Lerp$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, System.Single]], 
		["Lerp$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Barycentric", [
		["Barycentric$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, System.Single, System.Single]], 
		["Barycentric$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), System.Single, System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "SmoothStep", [
		["SmoothStep$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, System.Single]], 
		["SmoothStep$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "CatmullRom", [
		["CatmullRom$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, System.Single]], 
		["CatmullRom$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Hermite", [
		["Hermite$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4, System.Single]], 
		["Hermite$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Transform", [
		["Transform$0", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Matrix]], 
		["Transform$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Transform$2", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Matrix]], 
		["Transform$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Transform$4", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Matrix]], 
		["Transform$5", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Transform$6", [Microsoft.Xna.Framework.Vector2, Microsoft.Xna.Framework.Quaternion]], 
		["Transform$7", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector2), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Transform$8", [Microsoft.Xna.Framework.Vector3, Microsoft.Xna.Framework.Quaternion]], 
		["Transform$9", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector3), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Transform$10", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Quaternion]], 
		["Transform$11", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Transform$12", [System.Array.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Transform$13", [System.Array.Of(Microsoft.Xna.Framework.Vector4), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Matrix), System.Array.Of(Microsoft.Xna.Framework.Vector4), System.Int32, System.Int32]], 
		["Transform$14", [System.Array.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Array.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Transform$15", [System.Array.Of(Microsoft.Xna.Framework.Vector4), System.Int32, JSIL.Reference.Of(Microsoft.Xna.Framework.Quaternion), System.Array.Of(Microsoft.Xna.Framework.Vector4), System.Int32, System.Int32]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Negate", [
		["Negate$0", [Microsoft.Xna.Framework.Vector4]], 
		["Negate$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Add", [
		["Add$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Add$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Subtract", [
		["Subtract$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Subtract$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Multiply", [
		["Multiply$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Multiply$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Multiply$2", [Microsoft.Xna.Framework.Vector4, System.Single]], 
		["Multiply$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "Divide", [
		["Divide$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["Divide$1", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]], 
		["Divide$2", [Microsoft.Xna.Framework.Vector4, System.Single]], 
		["Divide$3", [JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4), System.Single, JSIL.Reference.Of(Microsoft.Xna.Framework.Vector4)]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "op_Multiply", [
		["op_Multiply$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["op_Multiply$1", [Microsoft.Xna.Framework.Vector4, System.Single]], 
		["op_Multiply$2", [System.Single, Microsoft.Xna.Framework.Vector4]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Vector4, "op_Division", [
		["op_Division$0", [Microsoft.Xna.Framework.Vector4, Microsoft.Xna.Framework.Vector4]], 
		["op_Division$1", [Microsoft.Xna.Framework.Vector4, System.Single]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Vector4, "Zero", {
		get: Microsoft.Xna.Framework.Vector4.get_Zero
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector4, "One", {
		get: Microsoft.Xna.Framework.Vector4.get_One
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector4, "UnitX", {
		get: Microsoft.Xna.Framework.Vector4.get_UnitX
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector4, "UnitY", {
		get: Microsoft.Xna.Framework.Vector4.get_UnitY
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector4, "UnitZ", {
		get: Microsoft.Xna.Framework.Vector4.get_UnitZ
	});
Object.defineProperty(Microsoft.Xna.Framework.Vector4, "UnitW", {
		get: Microsoft.Xna.Framework.Vector4.get_UnitW
	});
Microsoft.Xna.Framework.Vector4._cctor();
Microsoft.Xna.Framework.Vector4.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Vector4));

Object.seal(Microsoft.Xna.Framework.Vector4.prototype);
Object.seal(Microsoft.Xna.Framework.Vector4);
Microsoft.Xna.Framework.Storage.StorageContainer.prototype.device = null;
Microsoft.Xna.Framework.Storage.StorageContainer.prototype.playerIndex = 0;
Microsoft.Xna.Framework.Storage.StorageContainer.prototype.titleName = null;
Microsoft.Xna.Framework.Storage.StorageContainer.prototype.containerFolder = null;
Microsoft.Xna.Framework.Storage.StorageContainer.prototype._isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Storage.StorageContainer.prototype.Disposing = null;
Microsoft.Xna.Framework.Storage.StorageContainer.GetDeviceFolder = function (deviceIndex) {
	return System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments);
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype._ctor = function (device, index, titleName, allowTransferBetweenPlayers, /* ref */ isTransferredFromOtherPlayer) {
	System.Object.prototype._ctor.call(this);

	if (System.String.IsNullOrEmpty(titleName)) {
		throw new System.ArgumentNullException(Microsoft.Xna.Framework.FrameworkResources.TitleNameNotNull);
	}
	this.device = device;
	this.playerIndex = index;
	this.titleName = titleName;
	this.containerFolder = Microsoft.Xna.Framework.Storage.StorageContainer.GetDirectoryForContainer(this.device, titleName, index);
	this.containerFolder.Create();
	isTransferredFromOtherPlayer.value = false;
};

Microsoft.Xna.Framework.Storage.StorageContainer.GetDirectoryForContainer = function (device, titleName, playerIndex) {
	var text = System.IO.Path.Combine(Microsoft.Xna.Framework.Storage.StorageContainer.GetDeviceFolder(device.deviceIndex), Microsoft.Xna.Framework.FrameworkResources.SavedGameFolder);
	text = System.IO.Path.Combine(text, titleName);
	var path = System.String.Empty;

	if (playerIndex !== 0) {
		path = Microsoft.Xna.Framework.FrameworkResources.PlayerOneFolder;
	} else if (playerIndex === Microsoft.Xna.Framework.PlayerIndex.Two) {
		path = Microsoft.Xna.Framework.FrameworkResources.PlayerTwoFolder;
	} else if (playerIndex === Microsoft.Xna.Framework.PlayerIndex.Three) {
		path = Microsoft.Xna.Framework.FrameworkResources.PlayerThreeFolder;
	} else if (playerIndex === Microsoft.Xna.Framework.PlayerIndex.Four) {
		path = Microsoft.Xna.Framework.FrameworkResources.PlayerFourFolder;
	} else {
		path = Microsoft.Xna.Framework.FrameworkResources.AllPlayersFolder;
	}
	text = System.IO.Path.Combine(text, path);
	return new System.IO.DirectoryInfo(text);
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.get_TitleName = function () {
	return this.titleName;
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.get_StorageDevice = function () {
	return this.device;
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.get_Path = function () {
	return this.containerFolder.FullName;
};

Microsoft.Xna.Framework.Storage.StorageContainer.DeleteContainer = function (device, index, titleName, closeContainerFirst) {

	try {
		Microsoft.Xna.Framework.Storage.StorageContainer.GetDirectoryForContainer(device, titleName, index).Delete(true);
	} catch ($exception) {

		if (JSIL.CheckType($exception, System.IO.DirectoryNotFoundException)) {
		} else {
			throw $exception;
		}
	}
};

Microsoft.Xna.Framework.Storage.StorageContainer.get_TitleLocation = function () {
	var result = System.String.Empty;
	var assembly = System.Reflection.Assembly.GetEntryAssembly();

	if (assembly !== null) {
		assembly = System.Reflection.Assembly.GetCallingAssembly();
	}

	if (assembly === null) {
		result = System.IO.Path.GetDirectoryName(assembly.Location);
	}
	return result;
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.get_IsDisposed = function () {
	return this._isDisposed;
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.add_Disposing = function (value) {
	this.Disposing = System.Delegate.Combine(this.Disposing, value);
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.remove_Disposing = function (value) {
	this.Disposing = System.Delegate.Remove(this.Disposing, value);
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Storage.StorageContainer.prototype.Dispose$1 = function (disposing) {

	if (!this._isDisposed) {
		this._isDisposed = true;

		if (!(!disposing || (this.Disposing !== null))) {
			this.Disposing(this, System.EventArgs.Empty);
		}
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Storage.StorageContainer.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageContainer.prototype, "TitleName", {
		get: Microsoft.Xna.Framework.Storage.StorageContainer.prototype.get_TitleName
	});
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageContainer.prototype, "StorageDevice", {
		get: Microsoft.Xna.Framework.Storage.StorageContainer.prototype.get_StorageDevice
	});
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageContainer.prototype, "Path", {
		get: Microsoft.Xna.Framework.Storage.StorageContainer.prototype.get_Path
	});
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageContainer, "TitleLocation", {
		get: Microsoft.Xna.Framework.Storage.StorageContainer.get_TitleLocation
	});
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageContainer.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Storage.StorageContainer.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Storage.StorageContainer.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Storage.StorageContainer.prototype);
Object.seal(Microsoft.Xna.Framework.Storage.StorageContainer);
Microsoft.Xna.Framework.Audio.AudioCategory.prototype._parent = null;
Microsoft.Xna.Framework.Audio.AudioCategory.prototype._category = 0;
Microsoft.Xna.Framework.Audio.AudioCategory.prototype._name = null;
Microsoft.Xna.Framework.Audio.AudioCategory.prototype._ctor = function (engine, name) {

	if (engine !== null) {
		throw new System.ArgumentNullException("engine", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}

	if (System.String.IsNullOrEmpty(name)) {
		throw new System.ArgumentNullException("name", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	this._category = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.GetCategory(engine.engineHandle, name, name.length);

	if (this._category === 65535) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CouldNotCreateResource);
	}
	this._name = name;
	this._parent = engine;
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.get_Name = function () {
	return this._name;
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.SetVolume = function (volume) {

	if (volume < 0) {
		throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidXactVolume);
	}
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.SetVolume(this._parent.engineHandle, this._category, volume));
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.Pause = function () {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.Pause(this._parent.engineHandle, this._category, 1));
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.Resume = function () {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.Pause(this._parent.engineHandle, this._category, 0));
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.Stop = function (options) {
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.Stop(this._parent.engineHandle, this._category, options));
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.toString = function () {

	if (this._name !== null) {
		return System.String.Empty;
	}
	return this._name;
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.Equals$0 = function (other) {
	return ((this._category === other._category) && (this._parent === other._parent));
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.Equals$1 = function (obj) {
	var result = false;

	if (JSIL.TryCast(obj, Microsoft.Xna.Framework.Audio.AudioCategory.MemberwiseClone()) === new Microsoft.Xna.Framework.Audio.AudioCategory()) {
		result = this.Equals(JSIL.Cast(obj, Microsoft.Xna.Framework.Audio.AudioCategory.MemberwiseClone()));
	}
	return result;
};

Microsoft.Xna.Framework.Audio.AudioCategory.prototype.GetHashCode = function () {
	var num = this._category.GetHashCode();

	if (this._parent === null) {
		num = (num ^ this._parent.GetHashCode());
	}
	return num;
};

Microsoft.Xna.Framework.Audio.AudioCategory.op_Equality = function (value1, value2) {
	return ((value1._parent === value2._parent) && (value1._category === value2._category));
};

Microsoft.Xna.Framework.Audio.AudioCategory.op_Inequality = function (value1, value2) {
	return ((value1._parent !== value2._parent) || (value1._category !== value2._category));
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.AudioCategory.prototype, "Equals", [
		["Equals$0", [Microsoft.Xna.Framework.Audio.AudioCategory]], 
		["Equals$1", [System.Object]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioCategory.prototype, "Name", {
		get: Microsoft.Xna.Framework.Audio.AudioCategory.prototype.get_Name
	});
Microsoft.Xna.Framework.Audio.AudioCategory.prototype.__ImplementInterface__(System.IEquatable$b1.Of(Microsoft.Xna.Framework.Audio.AudioCategory));

Object.seal(Microsoft.Xna.Framework.Audio.AudioCategory.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.AudioCategory);
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioEngine, "ContentVersion", { value: 39 });
Microsoft.Xna.Framework.Audio.AudioEngine.prototype.engineHandle = 0;
Microsoft.Xna.Framework.Audio.AudioEngine.prototype.destChannelCount = 0;
Microsoft.Xna.Framework.Audio.AudioEngine.hasHookedDestroy = new System.Boolean();
Microsoft.Xna.Framework.Audio.AudioEngine.prototype.pSettingsData = 0;
Microsoft.Xna.Framework.Audio.AudioEngine.prototype.p3dAudio = 0;
Microsoft.Xna.Framework.Audio.AudioEngine.prototype.pDsp = 0;
Microsoft.Xna.Framework.Audio.AudioEngine.prototype._isDisposed = new System.Boolean();
Microsoft.Xna.Framework.Audio.AudioEngine.prototype.Disposing = null;
Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances = null;
Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject = null;
Microsoft.Xna.Framework.Audio.AudioEngine.prototype._ctor$0 = function (settingsFile) {
	this._ctor(settingsFile, System.TimeSpan.FromMilliseconds(250), System.String.Empty);
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype._ctor$1 = function (settingsFile, lookAheadTime, rendererId) {
	this.engineHandle = -1;
	System.Object.prototype._ctor.call(this);

	if (System.String.IsNullOrEmpty(settingsFile)) {
		throw new System.ArgumentNullException("settingsFile", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	var fullPath = System.IO.Path.GetFullPath(settingsFile);
	var binaryReader = new System.IO.BinaryReader(System.IO.File.OpenRead(fullPath));

	try {
		var flag = false;

		if (binaryReader.BaseStream.length > 4) {
			var array = binaryReader.ReadBytes(4);
			flag = (!((array[3] !== 70) || 
					(array[2] !== 83) || 
					(array[1] !== 71)) && 
				(array[0] === 88));
		}

		if (!flag) {
			throw new System.ArgumentException(Microsoft.Xna.Framework.FrameworkResources.InvalidContentVersion);
		}
	} finally {

		if (binaryReader === null) {
			binaryReader.IDisposable_Dispose();
		}
	}
	this.engineHandle = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.CreateHandle(
		fullPath, 
		fullPath.length, 
		JSIL.Cast(lookAheadTime.get_TotalMilliseconds(), System.UInt32), 
		rendererId, 
		/* ref */ new JSIL.MemberReference(this, "destChannelCount"), 
		/* ref */ new JSIL.MemberReference(this, "pSettingsData"), 
		/* ref */ new JSIL.MemberReference(this, "p3dAudio")
	);

	if (this.engineHandle === -1) {
		throw new System.InvalidOperationException(Microsoft.Xna.Framework.FrameworkResources.CouldNotCreateResource);
	}

	if (!Microsoft.Xna.Framework.Audio.AudioEngine.hasHookedDestroy) {
		Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.add_CueDestroyed(function (pCue) {
				Microsoft.Xna.Framework.Audio.AudioEngine.NotifyDestroyedCue(pCue);
			});
		Microsoft.Xna.Framework.Audio.AudioEngine.hasHookedDestroy = true;
	}
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.GetCategory = function (name) {
	return new Microsoft.Xna.Framework.Audio.AudioCategory(this, name);
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.GetGlobalVariable = function (name) {
	var result = new JSIL.Variable(0);

	if (System.String.IsNullOrEmpty(name)) {
		throw new System.ArgumentNullException("name", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.GetGlobalVariable(this.engineHandle, name, name.length, /* ref */ result));
	return result.value;
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.SetGlobalVariable = function (name, value) {

	if (System.String.IsNullOrEmpty(name)) {
		throw new System.ArgumentNullException("name", Microsoft.Xna.Framework.FrameworkResources.NullNotAllowed);
	}
	Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.SetGlobalVariable(this.engineHandle, name, name.length, value));
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.get_RendererDetails = function () {
	var result = null;
	var rendererCount = Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.GetRendererCount(this.engineHandle);

	if (rendererCount > 0) {
		var list = new (System.Collections.Generic.List$b1.Of(Microsoft.Xna.Framework.Audio.RendererDetail)) (rendererCount);
		var i = 0;

	__while0__: 
		while (i < rendererCount) {
			var empty = new JSIL.Variable(System.String.Empty);
			var empty2 = new JSIL.Variable(System.String.Empty);
			Microsoft.Xna.Framework.Helpers.ThrowExceptionFromResult(Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.GetRenderDetails(this.engineHandle, i, /* ref */ empty, /* ref */ empty2));
			list.Add(new Microsoft.Xna.Framework.Audio.RendererDetail(empty.value, empty2.value));
			++i;
		}
		result = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(Microsoft.Xna.Framework.Audio.RendererDetail)) (list);
	}
	return result;
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.Update = function () {
	Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.Update(this.engineHandle);
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.get_IsDisposed = function () {
	return this._isDisposed;
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.add_Disposing = function (value) {
	this.Disposing = System.Delegate.Combine(this.Disposing, value);
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.remove_Disposing = function (value) {
	this.Disposing = System.Delegate.Remove(this.Disposing, value);
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.Finalize = function () {

	try {
		this.Dispose(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.Dispose$0 = function () {
	this.Dispose(true);
	System.GC.SuppressFinalize(this);
};

Microsoft.Xna.Framework.Audio.AudioEngine.prototype.Dispose$1 = function (disposing) {
	System.Threading.Monitor.Enter();

	try {

		if (!this._isDisposed) {
			this._isDisposed = true;

			if (this.engineHandle !== -1) {
				Microsoft.Xna.Framework.Audio.AudioEngine.NotifyDestroyedEngine(this);
				Microsoft.Xna.Framework.Audio.UnsafeNativeMethods.Engine.ReleaseHandle(this.engineHandle, this.pSettingsData, this.p3dAudio, this.pDsp);
			}

			if (!(!disposing || (this.Disposing !== null))) {
				this.Disposing(this, System.EventArgs.Empty);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject);
	}
};

Microsoft.Xna.Framework.Audio.AudioEngine.AddInstance = function (handle, instance) {
	System.Threading.Monitor.Enter();

	try {
		Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances.Add(handle, new System.WeakReference(instance, false));
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject);
	}
};

Microsoft.Xna.Framework.Audio.AudioEngine.RemoveInstance = function (handle) {
	Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances.Remove(handle);
};

Microsoft.Xna.Framework.Audio.AudioEngine.NotifyDestroyedCue = function (hCue) {
	var weakReference = new JSIL.Variable(null);
	System.Threading.Monitor.Enter();

	try {

		if (Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances.TryGetValue(hCue, /* ref */ weakReference)) {
			Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances.Remove(hCue);
			var obj2 = null;

			try {
				obj2 = weakReference.value.Target;
			} catch ($exception) {

				if (JSIL.CheckType($exception, System.InvalidOperationException)) {
					return ;
				} else {
					throw $exception;
				}
			}

			if (obj2 === null) {
				JSIL.Cast(obj2, Microsoft.Xna.Framework.Audio.Cue).Dispose();
			}
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject);
	}
};

Microsoft.Xna.Framework.Audio.AudioEngine.NotifyDestroyedEngine = function (engine) {
	System.Threading.Monitor.Enter();

	try {
		var enumerator = new (System.Collections.Generic.List$b1.Of(System.WeakReference)) (Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances.Values).GetEnumerator();

		try {

		__while0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.get_Current();

				try {
					var target = current.Target;
				} catch ($exception) {

					if (JSIL.CheckType($exception, System.InvalidOperationException)) {
						continue __while0__;
					} else {
						throw $exception;
					}
				}

				if (target === null) {

					if (cue = JSIL.TryCast(target, Microsoft.Xna.Framework.Audio.Cue) === null) {

						if (cue.engineHandle === engine.engineHandle) {
							Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances.Remove(cue.cueHandle);
							cue.Dispose();
						}
					} else if (soundBank = JSIL.TryCast(target, Microsoft.Xna.Framework.Audio.SoundBank) === null) {

						if (soundBank.engineHandle === engine.engineHandle) {
							Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances.Remove(soundBank.soundBankHandle);
							soundBank.Dispose();
						}
					} else if (!((waveBank = JSIL.TryCast(target, Microsoft.Xna.Framework.Audio.WaveBank) !== null) || (waveBank.engineHandle !== engine.engineHandle))) {
						Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances.Remove(waveBank.waveBankHandle);
						waveBank.Dispose();
					}
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	} finally {
		System.Threading.Monitor.Exit(Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject);
	}
};

Microsoft.Xna.Framework.Audio.AudioEngine._cctor = function () {
	Microsoft.Xna.Framework.Audio.AudioEngine.audioInstances = new (System.Collections.Generic.Dictionary$b2.Of(System.UInt32, System.WeakReference)) ();
	Microsoft.Xna.Framework.Audio.AudioEngine.pSyncObject = new System.Object();
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.AudioEngine.prototype, "_ctor", [
		["_ctor$0", [System.String]], 
		["_ctor$1", [System.String, System.TimeSpan, System.String]]
	]
);
JSIL.OverloadedMethod(Microsoft.Xna.Framework.Audio.AudioEngine.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioEngine.prototype, "RendererDetails", {
		get: Microsoft.Xna.Framework.Audio.AudioEngine.prototype.get_RendererDetails
	});
Object.defineProperty(Microsoft.Xna.Framework.Audio.AudioEngine.prototype, "IsDisposed", {
		get: Microsoft.Xna.Framework.Audio.AudioEngine.prototype.get_IsDisposed
	});
Microsoft.Xna.Framework.Audio.AudioEngine._cctor();
Microsoft.Xna.Framework.Audio.AudioEngine.prototype.__ImplementInterface__(System.IDisposable);

Object.seal(Microsoft.Xna.Framework.Audio.AudioEngine.prototype);
Object.seal(Microsoft.Xna.Framework.Audio.AudioEngine);

Object.seal(Microsoft.Xna.Framework.Storage.UnsafeNativeMethods);
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageDevice, "AnyIndex", { value: 255 });
Microsoft.Xna.Framework.Storage.StorageDevice.prototype.deviceIndex = 0;
Microsoft.Xna.Framework.Storage.StorageDevice.prototype.playerIndex = 0;
Microsoft.Xna.Framework.Storage.StorageDevice.DeviceChanged = null;
Microsoft.Xna.Framework.Storage.StorageDevice.prototype._ctor$0 = function (deviceIndex, playerIndex) {
	System.Object.prototype._ctor.call(this);
	this.deviceIndex = deviceIndex;
	this.playerIndex = playerIndex;
};

Microsoft.Xna.Framework.Storage.StorageDevice.prototype._ctor$1 = function (deviceIndex) {
	System.Object.prototype._ctor.call(this);
	this.deviceIndex = deviceIndex;
	this.playerIndex = 255;
};

Microsoft.Xna.Framework.Storage.StorageDevice.prototype.get_FreeSpace = function () {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	var fullPath = System.IO.Path.GetFullPath(Microsoft.Xna.Framework.Storage.StorageContainer.GetDeviceFolder(this.deviceIndex));

	try {
		var result = new System.IO.DriveInfo(fullPath).AvailableFreeSpace;
	} catch ($exception) {

		if (Microsoft.Xna.Framework.Storage.UnsafeNativeMethods.GetDiskFreeSpaceEx(fullPath, /* ref */ num, /* ref */ num2, /* ref */ num3) === 0) {
			throw $exception;
		}
		result = num.value;
	}
	return result;
};

Microsoft.Xna.Framework.Storage.StorageDevice.prototype.get_IsConnected = function () {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	var fullPath = System.IO.Path.GetFullPath(Microsoft.Xna.Framework.Storage.StorageContainer.GetDeviceFolder(this.deviceIndex));

	try {
		var result = new System.IO.DriveInfo(fullPath).IsReady;
	} catch ($exception) {

		if (Microsoft.Xna.Framework.Storage.UnsafeNativeMethods.GetDiskFreeSpaceEx(fullPath, /* ref */ num, /* ref */ num2, /* ref */ num3) !== 0) {
			result = true;
		} else {
			result = false;
		}
	}
	return result;
};

Microsoft.Xna.Framework.Storage.StorageDevice.prototype.get_TotalSpace = function () {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	var fullPath = System.IO.Path.GetFullPath(Microsoft.Xna.Framework.Storage.StorageContainer.GetDeviceFolder(this.deviceIndex));

	try {
		var result = new System.IO.DriveInfo(fullPath).TotalSize;
	} catch ($exception) {

		if (Microsoft.Xna.Framework.Storage.UnsafeNativeMethods.GetDiskFreeSpaceEx(fullPath, /* ref */ num, /* ref */ num2, /* ref */ num3) === 0) {
			throw $exception;
		}
		result = num2.value;
	}
	return result;
};

Microsoft.Xna.Framework.Storage.StorageDevice.prototype.OpenContainer = function (titleName) {
	var flag = false;
	return new Microsoft.Xna.Framework.Storage.StorageContainer(this, this.playerIndex, titleName, true, flag);
};

Microsoft.Xna.Framework.Storage.StorageDevice.prototype.DeleteContainer = function (titleName) {
	var directoryForContainer = Microsoft.Xna.Framework.Storage.StorageContainer.GetDirectoryForContainer(this, titleName, this.playerIndex);

	try {
		directoryForContainer.Delete(true);
	} catch ($exception) {

		if (JSIL.CheckType($exception, System.IO.DirectoryNotFoundException)) {
		} else {
			throw $exception;
		}
	}
};

Microsoft.Xna.Framework.Storage.StorageDevice.add_DeviceChanged = function (value) {
	Microsoft.Xna.Framework.Storage.StorageDevice.DeviceChanged = System.Delegate.Combine(Microsoft.Xna.Framework.Storage.StorageDevice.DeviceChanged, value);
};

Microsoft.Xna.Framework.Storage.StorageDevice.remove_DeviceChanged = function (value) {
	Microsoft.Xna.Framework.Storage.StorageDevice.DeviceChanged = System.Delegate.Remove(Microsoft.Xna.Framework.Storage.StorageDevice.DeviceChanged, value);
};

Microsoft.Xna.Framework.Storage.StorageDevice.OnDeviceChanged = function (args) {
	var deviceChanged = Microsoft.Xna.Framework.Storage.StorageDevice.DeviceChanged;

	if (deviceChanged === null) {
		deviceChanged(null, args);
	}
};

JSIL.OverloadedMethod(Microsoft.Xna.Framework.Storage.StorageDevice.prototype, "_ctor", [
		["_ctor$0", [System.UInt32, Microsoft.Xna.Framework.PlayerIndex]], 
		["_ctor$1", [System.UInt32]]
	]
);
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageDevice.prototype, "FreeSpace", {
		get: Microsoft.Xna.Framework.Storage.StorageDevice.prototype.get_FreeSpace
	});
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageDevice.prototype, "IsConnected", {
		get: Microsoft.Xna.Framework.Storage.StorageDevice.prototype.get_IsConnected
	});
Object.defineProperty(Microsoft.Xna.Framework.Storage.StorageDevice.prototype, "TotalSpace", {
		get: Microsoft.Xna.Framework.Storage.StorageDevice.prototype.get_TotalSpace
	});

Object.seal(Microsoft.Xna.Framework.Storage.StorageDevice.prototype);
Object.seal(Microsoft.Xna.Framework.Storage.StorageDevice);
